
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002650  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800275c  0800275c  0001275c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002780  08002780  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002780  08002780  00012780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002788  08002788  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002788  08002788  00012788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800278c  0800278c  0001278c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002790  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20000070  08002800  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  08002800  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008236  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001535  00000000  00000000  000282cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000968  00000000  00000000  00029808  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008a0  00000000  00000000  0002a170  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001699b  00000000  00000000  0002aa10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007c93  00000000  00000000  000413ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008571f  00000000  00000000  0004903e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ce75d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002930  00000000  00000000  000ce7d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002744 	.word	0x08002744

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002744 	.word	0x08002744

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_uldivmod>:
 80008e8:	b953      	cbnz	r3, 8000900 <__aeabi_uldivmod+0x18>
 80008ea:	b94a      	cbnz	r2, 8000900 <__aeabi_uldivmod+0x18>
 80008ec:	2900      	cmp	r1, #0
 80008ee:	bf08      	it	eq
 80008f0:	2800      	cmpeq	r0, #0
 80008f2:	bf1c      	itt	ne
 80008f4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80008f8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008fc:	f000 b974 	b.w	8000be8 <__aeabi_idiv0>
 8000900:	f1ad 0c08 	sub.w	ip, sp, #8
 8000904:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000908:	f000 f806 	bl	8000918 <__udivmoddi4>
 800090c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000910:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000914:	b004      	add	sp, #16
 8000916:	4770      	bx	lr

08000918 <__udivmoddi4>:
 8000918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800091c:	468c      	mov	ip, r1
 800091e:	4604      	mov	r4, r0
 8000920:	9e08      	ldr	r6, [sp, #32]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d14b      	bne.n	80009be <__udivmoddi4+0xa6>
 8000926:	428a      	cmp	r2, r1
 8000928:	4615      	mov	r5, r2
 800092a:	d967      	bls.n	80009fc <__udivmoddi4+0xe4>
 800092c:	fab2 f282 	clz	r2, r2
 8000930:	b14a      	cbz	r2, 8000946 <__udivmoddi4+0x2e>
 8000932:	f1c2 0720 	rsb	r7, r2, #32
 8000936:	fa01 f302 	lsl.w	r3, r1, r2
 800093a:	fa20 f707 	lsr.w	r7, r0, r7
 800093e:	4095      	lsls	r5, r2
 8000940:	ea47 0c03 	orr.w	ip, r7, r3
 8000944:	4094      	lsls	r4, r2
 8000946:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800094a:	fbbc f7fe 	udiv	r7, ip, lr
 800094e:	fa1f f885 	uxth.w	r8, r5
 8000952:	fb0e c317 	mls	r3, lr, r7, ip
 8000956:	fb07 f908 	mul.w	r9, r7, r8
 800095a:	0c21      	lsrs	r1, r4, #16
 800095c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000960:	4599      	cmp	r9, r3
 8000962:	d909      	bls.n	8000978 <__udivmoddi4+0x60>
 8000964:	18eb      	adds	r3, r5, r3
 8000966:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 800096a:	f080 811c 	bcs.w	8000ba6 <__udivmoddi4+0x28e>
 800096e:	4599      	cmp	r9, r3
 8000970:	f240 8119 	bls.w	8000ba6 <__udivmoddi4+0x28e>
 8000974:	3f02      	subs	r7, #2
 8000976:	442b      	add	r3, r5
 8000978:	eba3 0309 	sub.w	r3, r3, r9
 800097c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000980:	fb0e 3310 	mls	r3, lr, r0, r3
 8000984:	fb00 f108 	mul.w	r1, r0, r8
 8000988:	b2a4      	uxth	r4, r4
 800098a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800098e:	42a1      	cmp	r1, r4
 8000990:	d909      	bls.n	80009a6 <__udivmoddi4+0x8e>
 8000992:	192c      	adds	r4, r5, r4
 8000994:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000998:	f080 8107 	bcs.w	8000baa <__udivmoddi4+0x292>
 800099c:	42a1      	cmp	r1, r4
 800099e:	f240 8104 	bls.w	8000baa <__udivmoddi4+0x292>
 80009a2:	3802      	subs	r0, #2
 80009a4:	442c      	add	r4, r5
 80009a6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80009aa:	2700      	movs	r7, #0
 80009ac:	1a64      	subs	r4, r4, r1
 80009ae:	b11e      	cbz	r6, 80009b8 <__udivmoddi4+0xa0>
 80009b0:	2300      	movs	r3, #0
 80009b2:	40d4      	lsrs	r4, r2
 80009b4:	e9c6 4300 	strd	r4, r3, [r6]
 80009b8:	4639      	mov	r1, r7
 80009ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009be:	428b      	cmp	r3, r1
 80009c0:	d909      	bls.n	80009d6 <__udivmoddi4+0xbe>
 80009c2:	2e00      	cmp	r6, #0
 80009c4:	f000 80ec 	beq.w	8000ba0 <__udivmoddi4+0x288>
 80009c8:	2700      	movs	r7, #0
 80009ca:	e9c6 0100 	strd	r0, r1, [r6]
 80009ce:	4638      	mov	r0, r7
 80009d0:	4639      	mov	r1, r7
 80009d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d6:	fab3 f783 	clz	r7, r3
 80009da:	2f00      	cmp	r7, #0
 80009dc:	d148      	bne.n	8000a70 <__udivmoddi4+0x158>
 80009de:	428b      	cmp	r3, r1
 80009e0:	d302      	bcc.n	80009e8 <__udivmoddi4+0xd0>
 80009e2:	4282      	cmp	r2, r0
 80009e4:	f200 80fb 	bhi.w	8000bde <__udivmoddi4+0x2c6>
 80009e8:	1a84      	subs	r4, r0, r2
 80009ea:	eb61 0303 	sbc.w	r3, r1, r3
 80009ee:	2001      	movs	r0, #1
 80009f0:	469c      	mov	ip, r3
 80009f2:	2e00      	cmp	r6, #0
 80009f4:	d0e0      	beq.n	80009b8 <__udivmoddi4+0xa0>
 80009f6:	e9c6 4c00 	strd	r4, ip, [r6]
 80009fa:	e7dd      	b.n	80009b8 <__udivmoddi4+0xa0>
 80009fc:	b902      	cbnz	r2, 8000a00 <__udivmoddi4+0xe8>
 80009fe:	deff      	udf	#255	; 0xff
 8000a00:	fab2 f282 	clz	r2, r2
 8000a04:	2a00      	cmp	r2, #0
 8000a06:	f040 808f 	bne.w	8000b28 <__udivmoddi4+0x210>
 8000a0a:	2701      	movs	r7, #1
 8000a0c:	1b49      	subs	r1, r1, r5
 8000a0e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000a12:	fa1f f985 	uxth.w	r9, r5
 8000a16:	fbb1 fef8 	udiv	lr, r1, r8
 8000a1a:	fb08 111e 	mls	r1, r8, lr, r1
 8000a1e:	fb09 f00e 	mul.w	r0, r9, lr
 8000a22:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000a26:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000a2a:	4298      	cmp	r0, r3
 8000a2c:	d907      	bls.n	8000a3e <__udivmoddi4+0x126>
 8000a2e:	18eb      	adds	r3, r5, r3
 8000a30:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8000a34:	d202      	bcs.n	8000a3c <__udivmoddi4+0x124>
 8000a36:	4298      	cmp	r0, r3
 8000a38:	f200 80cd 	bhi.w	8000bd6 <__udivmoddi4+0x2be>
 8000a3c:	468e      	mov	lr, r1
 8000a3e:	1a1b      	subs	r3, r3, r0
 8000a40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a44:	fb08 3310 	mls	r3, r8, r0, r3
 8000a48:	fb09 f900 	mul.w	r9, r9, r0
 8000a4c:	b2a4      	uxth	r4, r4
 8000a4e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a52:	45a1      	cmp	r9, r4
 8000a54:	d907      	bls.n	8000a66 <__udivmoddi4+0x14e>
 8000a56:	192c      	adds	r4, r5, r4
 8000a58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a5c:	d202      	bcs.n	8000a64 <__udivmoddi4+0x14c>
 8000a5e:	45a1      	cmp	r9, r4
 8000a60:	f200 80b6 	bhi.w	8000bd0 <__udivmoddi4+0x2b8>
 8000a64:	4618      	mov	r0, r3
 8000a66:	eba4 0409 	sub.w	r4, r4, r9
 8000a6a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000a6e:	e79e      	b.n	80009ae <__udivmoddi4+0x96>
 8000a70:	f1c7 0520 	rsb	r5, r7, #32
 8000a74:	40bb      	lsls	r3, r7
 8000a76:	fa22 fc05 	lsr.w	ip, r2, r5
 8000a7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a7e:	fa21 f405 	lsr.w	r4, r1, r5
 8000a82:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a86:	fbb4 f9fe 	udiv	r9, r4, lr
 8000a8a:	fa1f f88c 	uxth.w	r8, ip
 8000a8e:	fb0e 4419 	mls	r4, lr, r9, r4
 8000a92:	fa20 f305 	lsr.w	r3, r0, r5
 8000a96:	40b9      	lsls	r1, r7
 8000a98:	fb09 fa08 	mul.w	sl, r9, r8
 8000a9c:	4319      	orrs	r1, r3
 8000a9e:	0c0b      	lsrs	r3, r1, #16
 8000aa0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000aa4:	45a2      	cmp	sl, r4
 8000aa6:	fa02 f207 	lsl.w	r2, r2, r7
 8000aaa:	fa00 f307 	lsl.w	r3, r0, r7
 8000aae:	d90b      	bls.n	8000ac8 <__udivmoddi4+0x1b0>
 8000ab0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ab4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ab8:	f080 8088 	bcs.w	8000bcc <__udivmoddi4+0x2b4>
 8000abc:	45a2      	cmp	sl, r4
 8000abe:	f240 8085 	bls.w	8000bcc <__udivmoddi4+0x2b4>
 8000ac2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ac6:	4464      	add	r4, ip
 8000ac8:	eba4 040a 	sub.w	r4, r4, sl
 8000acc:	fbb4 f0fe 	udiv	r0, r4, lr
 8000ad0:	fb0e 4410 	mls	r4, lr, r0, r4
 8000ad4:	fb00 fa08 	mul.w	sl, r0, r8
 8000ad8:	b289      	uxth	r1, r1
 8000ada:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000ade:	45a2      	cmp	sl, r4
 8000ae0:	d908      	bls.n	8000af4 <__udivmoddi4+0x1dc>
 8000ae2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ae6:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000aea:	d26b      	bcs.n	8000bc4 <__udivmoddi4+0x2ac>
 8000aec:	45a2      	cmp	sl, r4
 8000aee:	d969      	bls.n	8000bc4 <__udivmoddi4+0x2ac>
 8000af0:	3802      	subs	r0, #2
 8000af2:	4464      	add	r4, ip
 8000af4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000af8:	fba0 8902 	umull	r8, r9, r0, r2
 8000afc:	eba4 040a 	sub.w	r4, r4, sl
 8000b00:	454c      	cmp	r4, r9
 8000b02:	4641      	mov	r1, r8
 8000b04:	46ce      	mov	lr, r9
 8000b06:	d354      	bcc.n	8000bb2 <__udivmoddi4+0x29a>
 8000b08:	d051      	beq.n	8000bae <__udivmoddi4+0x296>
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	d069      	beq.n	8000be2 <__udivmoddi4+0x2ca>
 8000b0e:	1a5a      	subs	r2, r3, r1
 8000b10:	eb64 040e 	sbc.w	r4, r4, lr
 8000b14:	fa04 f505 	lsl.w	r5, r4, r5
 8000b18:	fa22 f307 	lsr.w	r3, r2, r7
 8000b1c:	40fc      	lsrs	r4, r7
 8000b1e:	431d      	orrs	r5, r3
 8000b20:	e9c6 5400 	strd	r5, r4, [r6]
 8000b24:	2700      	movs	r7, #0
 8000b26:	e747      	b.n	80009b8 <__udivmoddi4+0xa0>
 8000b28:	4095      	lsls	r5, r2
 8000b2a:	f1c2 0320 	rsb	r3, r2, #32
 8000b2e:	fa21 f003 	lsr.w	r0, r1, r3
 8000b32:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000b36:	fbb0 f7f8 	udiv	r7, r0, r8
 8000b3a:	fa1f f985 	uxth.w	r9, r5
 8000b3e:	fb08 0017 	mls	r0, r8, r7, r0
 8000b42:	fa24 f303 	lsr.w	r3, r4, r3
 8000b46:	4091      	lsls	r1, r2
 8000b48:	fb07 fc09 	mul.w	ip, r7, r9
 8000b4c:	430b      	orrs	r3, r1
 8000b4e:	0c19      	lsrs	r1, r3, #16
 8000b50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b54:	458c      	cmp	ip, r1
 8000b56:	fa04 f402 	lsl.w	r4, r4, r2
 8000b5a:	d907      	bls.n	8000b6c <__udivmoddi4+0x254>
 8000b5c:	1869      	adds	r1, r5, r1
 8000b5e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b62:	d231      	bcs.n	8000bc8 <__udivmoddi4+0x2b0>
 8000b64:	458c      	cmp	ip, r1
 8000b66:	d92f      	bls.n	8000bc8 <__udivmoddi4+0x2b0>
 8000b68:	3f02      	subs	r7, #2
 8000b6a:	4429      	add	r1, r5
 8000b6c:	eba1 010c 	sub.w	r1, r1, ip
 8000b70:	fbb1 f0f8 	udiv	r0, r1, r8
 8000b74:	fb08 1c10 	mls	ip, r8, r0, r1
 8000b78:	fb00 fe09 	mul.w	lr, r0, r9
 8000b7c:	b299      	uxth	r1, r3
 8000b7e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000b82:	458e      	cmp	lr, r1
 8000b84:	d907      	bls.n	8000b96 <__udivmoddi4+0x27e>
 8000b86:	1869      	adds	r1, r5, r1
 8000b88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b8c:	d218      	bcs.n	8000bc0 <__udivmoddi4+0x2a8>
 8000b8e:	458e      	cmp	lr, r1
 8000b90:	d916      	bls.n	8000bc0 <__udivmoddi4+0x2a8>
 8000b92:	3802      	subs	r0, #2
 8000b94:	4429      	add	r1, r5
 8000b96:	eba1 010e 	sub.w	r1, r1, lr
 8000b9a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000b9e:	e73a      	b.n	8000a16 <__udivmoddi4+0xfe>
 8000ba0:	4637      	mov	r7, r6
 8000ba2:	4630      	mov	r0, r6
 8000ba4:	e708      	b.n	80009b8 <__udivmoddi4+0xa0>
 8000ba6:	460f      	mov	r7, r1
 8000ba8:	e6e6      	b.n	8000978 <__udivmoddi4+0x60>
 8000baa:	4618      	mov	r0, r3
 8000bac:	e6fb      	b.n	80009a6 <__udivmoddi4+0x8e>
 8000bae:	4543      	cmp	r3, r8
 8000bb0:	d2ab      	bcs.n	8000b0a <__udivmoddi4+0x1f2>
 8000bb2:	ebb8 0102 	subs.w	r1, r8, r2
 8000bb6:	eb69 020c 	sbc.w	r2, r9, ip
 8000bba:	3801      	subs	r0, #1
 8000bbc:	4696      	mov	lr, r2
 8000bbe:	e7a4      	b.n	8000b0a <__udivmoddi4+0x1f2>
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	e7e8      	b.n	8000b96 <__udivmoddi4+0x27e>
 8000bc4:	4608      	mov	r0, r1
 8000bc6:	e795      	b.n	8000af4 <__udivmoddi4+0x1dc>
 8000bc8:	4607      	mov	r7, r0
 8000bca:	e7cf      	b.n	8000b6c <__udivmoddi4+0x254>
 8000bcc:	4681      	mov	r9, r0
 8000bce:	e77b      	b.n	8000ac8 <__udivmoddi4+0x1b0>
 8000bd0:	3802      	subs	r0, #2
 8000bd2:	442c      	add	r4, r5
 8000bd4:	e747      	b.n	8000a66 <__udivmoddi4+0x14e>
 8000bd6:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bda:	442b      	add	r3, r5
 8000bdc:	e72f      	b.n	8000a3e <__udivmoddi4+0x126>
 8000bde:	4638      	mov	r0, r7
 8000be0:	e707      	b.n	80009f2 <__udivmoddi4+0xda>
 8000be2:	4637      	mov	r7, r6
 8000be4:	e6e8      	b.n	80009b8 <__udivmoddi4+0xa0>
 8000be6:	bf00      	nop

08000be8 <__aeabi_idiv0>:
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop

08000bec <rand32>:


#include "TimingTest.h"

uint32_t rand32()
{
 8000bec:	b598      	push	{r3, r4, r7, lr}
 8000bee:	af00      	add	r7, sp, #0
	return (rand() | (rand() << 15) | ((rand() & 0x6000) << 17));
 8000bf0:	f001 fd00 	bl	80025f4 <rand>
 8000bf4:	4604      	mov	r4, r0
 8000bf6:	f001 fcfd 	bl	80025f4 <rand>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	03db      	lsls	r3, r3, #15
 8000bfe:	431c      	orrs	r4, r3
 8000c00:	f001 fcf8 	bl	80025f4 <rand>
 8000c04:	4603      	mov	r3, r0
 8000c06:	045b      	lsls	r3, r3, #17
 8000c08:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8000c0c:	4323      	orrs	r3, r4
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	bd98      	pop	{r3, r4, r7, pc}

08000c12 <rand64>:

uint64_t rand64()
{
 8000c12:	b598      	push	{r3, r4, r7, lr}
 8000c14:	af00      	add	r7, sp, #0
	return (rand() | (rand() << 15) | (rand() << 30) | (rand() << 45) | ((rand() & 0xF000) << 49));
 8000c16:	f001 fced 	bl	80025f4 <rand>
 8000c1a:	f001 fceb 	bl	80025f4 <rand>
 8000c1e:	4604      	mov	r4, r0
 8000c20:	f001 fce8 	bl	80025f4 <rand>
 8000c24:	4603      	mov	r3, r0
 8000c26:	03db      	lsls	r3, r3, #15
 8000c28:	431c      	orrs	r4, r3
 8000c2a:	f001 fce3 	bl	80025f4 <rand>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	079b      	lsls	r3, r3, #30
 8000c32:	431c      	orrs	r4, r3
 8000c34:	f001 fcde 	bl	80025f4 <rand>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	232d      	movs	r3, #45	; 0x2d
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	4323      	orrs	r3, r4
 8000c42:	ea4f 74e3 	mov.w	r4, r3, asr #31
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	4621      	mov	r1, r4
 8000c4a:	bd98      	pop	{r3, r4, r7, pc}

08000c4c <add32>:

uint32_t add32(uint32_t op1, uint32_t op2)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
	return op1 + op2;
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	4413      	add	r3, r2
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr

08000c66 <add64>:

uint64_t add64(uint64_t op1, uint64_t op2)
{
 8000c66:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000c72:	e9c7 2300 	strd	r2, r3, [r7]
	return op1 + op2;
 8000c76:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000c7a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000c7e:	eb13 0b01 	adds.w	fp, r3, r1
 8000c82:	eb44 0c02 	adc.w	ip, r4, r2
 8000c86:	465b      	mov	r3, fp
 8000c88:	4664      	mov	r4, ip
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	4621      	mov	r1, r4
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8000c96:	4770      	bx	lr

08000c98 <mult32>:

uint64_t mult32(uint32_t op1, uint32_t op2)
{
 8000c98:	b490      	push	{r4, r7}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
	return op1 * op2;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	683a      	ldr	r2, [r7, #0]
 8000ca6:	fb02 f303 	mul.w	r3, r2, r3
 8000caa:	f04f 0400 	mov.w	r4, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	4621      	mov	r1, r4
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc90      	pop	{r4, r7}
 8000cb8:	4770      	bx	lr

08000cba <mult64>:

uint64_t mult64(uint64_t op1, uint64_t op2)
{
 8000cba:	b490      	push	{r4, r7}
 8000cbc:	b084      	sub	sp, #16
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000cc4:	e9c7 2300 	strd	r2, r3, [r7]
	return op1 * op2;
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	683a      	ldr	r2, [r7, #0]
 8000ccc:	fb02 f203 	mul.w	r2, r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	68b9      	ldr	r1, [r7, #8]
 8000cd4:	fb01 f303 	mul.w	r3, r1, r3
 8000cd8:	441a      	add	r2, r3
 8000cda:	68b9      	ldr	r1, [r7, #8]
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	fba1 3403 	umull	r3, r4, r1, r3
 8000ce2:	4422      	add	r2, r4
 8000ce4:	4614      	mov	r4, r2
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	4621      	mov	r1, r4
 8000cea:	3710      	adds	r7, #16
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc90      	pop	{r4, r7}
 8000cf0:	4770      	bx	lr

08000cf2 <div32>:

uint32_t div32(uint32_t op1, uint32_t op2)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	b083      	sub	sp, #12
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
 8000cfa:	6039      	str	r1, [r7, #0]
	if(op2 == 0)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d102      	bne.n	8000d08 <div32+0x16>
	{
		return 0xFFFFFFFF;
 8000d02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d06:	e003      	b.n	8000d10 <div32+0x1e>
	}
	return op1 / op2;
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr

08000d1a <div64>:

uint64_t div64(uint64_t op1, uint64_t op2)
{
 8000d1a:	b590      	push	{r4, r7, lr}
 8000d1c:	b085      	sub	sp, #20
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000d24:	e9c7 2300 	strd	r2, r3, [r7]
	if(op2 == 0)
 8000d28:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000d2c:	4323      	orrs	r3, r4
 8000d2e:	d104      	bne.n	8000d3a <div64+0x20>
	{
		return 0xFFFFFFFFFFFFFFFF;
 8000d30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d34:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000d38:	e007      	b.n	8000d4a <div64+0x30>
	}
	return op1 / op2;
 8000d3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d42:	f7ff fdd1 	bl	80008e8 <__aeabi_uldivmod>
 8000d46:	4603      	mov	r3, r0
 8000d48:	460c      	mov	r4, r1
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	4621      	mov	r1, r4
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd90      	pop	{r4, r7, pc}

08000d54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d54:	b590      	push	{r4, r7, lr}
 8000d56:	f6ad 1d14 	subw	sp, sp, #2324	; 0x914
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d5c:	f000 fc34 	bl	80015c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d60:	f000 fa6c 	bl	800123c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d64:	f000 fb0c 	bl	8001380 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000d68:	f000 faa4 	bl	80012b4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  while (num < 100)
 8000d6c:	e165      	b.n	800103a <main+0x2e6>
  {
	  operand1 = rand32();
 8000d6e:	f7ff ff3d 	bl	8000bec <rand32>
 8000d72:	4602      	mov	r2, r0
 8000d74:	4bb2      	ldr	r3, [pc, #712]	; (8001040 <main+0x2ec>)
 8000d76:	601a      	str	r2, [r3, #0]
	  operand2 = rand32();
 8000d78:	f7ff ff38 	bl	8000bec <rand32>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	4bb1      	ldr	r3, [pc, #708]	; (8001044 <main+0x2f0>)
 8000d80:	601a      	str	r2, [r3, #0]
	  operand3 = rand64();
 8000d82:	f7ff ff46 	bl	8000c12 <rand64>
 8000d86:	4603      	mov	r3, r0
 8000d88:	460c      	mov	r4, r1
 8000d8a:	4aaf      	ldr	r2, [pc, #700]	; (8001048 <main+0x2f4>)
 8000d8c:	e9c2 3400 	strd	r3, r4, [r2]
	  operand4 = rand64();
 8000d90:	f7ff ff3f 	bl	8000c12 <rand64>
 8000d94:	4603      	mov	r3, r0
 8000d96:	460c      	mov	r4, r1
 8000d98:	4aac      	ldr	r2, [pc, #688]	; (800104c <main+0x2f8>)
 8000d9a:	e9c2 3400 	strd	r3, r4, [r2]

	  timStart = timer_start();
 8000d9e:	f000 fbc1 	bl	8001524 <timer_start>
 8000da2:	4603      	mov	r3, r0
 8000da4:	461a      	mov	r2, r3
 8000da6:	4baa      	ldr	r3, [pc, #680]	; (8001050 <main+0x2fc>)
 8000da8:	801a      	strh	r2, [r3, #0]
	  add32(operand1, operand2);
 8000daa:	4ba5      	ldr	r3, [pc, #660]	; (8001040 <main+0x2ec>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	4ba5      	ldr	r3, [pc, #660]	; (8001044 <main+0x2f0>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4619      	mov	r1, r3
 8000db4:	4610      	mov	r0, r2
 8000db6:	f7ff ff49 	bl	8000c4c <add32>
	  timA32 += (double)timer_stop(timStart);
 8000dba:	4ba5      	ldr	r3, [pc, #660]	; (8001050 <main+0x2fc>)
 8000dbc:	881b      	ldrh	r3, [r3, #0]
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f000 fbbb 	bl	800153c <timer_stop>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fb01 	bl	80003d0 <__aeabi_ui2d>
 8000dce:	4ba1      	ldr	r3, [pc, #644]	; (8001054 <main+0x300>)
 8000dd0:	cb18      	ldmia	r3, {r3, r4}
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	4623      	mov	r3, r4
 8000dd6:	f7ff f9bf 	bl	8000158 <__adddf3>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	460c      	mov	r4, r1
 8000dde:	4a9d      	ldr	r2, [pc, #628]	; (8001054 <main+0x300>)
 8000de0:	e9c2 3400 	strd	r3, r4, [r2]

	  timStart = timer_start();
 8000de4:	f000 fb9e 	bl	8001524 <timer_start>
 8000de8:	4603      	mov	r3, r0
 8000dea:	461a      	mov	r2, r3
 8000dec:	4b98      	ldr	r3, [pc, #608]	; (8001050 <main+0x2fc>)
 8000dee:	801a      	strh	r2, [r3, #0]
	  add64(operand3, operand4);
 8000df0:	4b95      	ldr	r3, [pc, #596]	; (8001048 <main+0x2f4>)
 8000df2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000df6:	4b95      	ldr	r3, [pc, #596]	; (800104c <main+0x2f8>)
 8000df8:	cb18      	ldmia	r3, {r3, r4}
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	4623      	mov	r3, r4
 8000dfe:	f7ff ff32 	bl	8000c66 <add64>
	  timA64 += (double)timer_stop(timStart);
 8000e02:	4b93      	ldr	r3, [pc, #588]	; (8001050 <main+0x2fc>)
 8000e04:	881b      	ldrh	r3, [r3, #0]
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f000 fb97 	bl	800153c <timer_stop>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fadd 	bl	80003d0 <__aeabi_ui2d>
 8000e16:	4b90      	ldr	r3, [pc, #576]	; (8001058 <main+0x304>)
 8000e18:	cb18      	ldmia	r3, {r3, r4}
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	4623      	mov	r3, r4
 8000e1e:	f7ff f99b 	bl	8000158 <__adddf3>
 8000e22:	4603      	mov	r3, r0
 8000e24:	460c      	mov	r4, r1
 8000e26:	4a8c      	ldr	r2, [pc, #560]	; (8001058 <main+0x304>)
 8000e28:	e9c2 3400 	strd	r3, r4, [r2]

	  timStart = timer_start();
 8000e2c:	f000 fb7a 	bl	8001524 <timer_start>
 8000e30:	4603      	mov	r3, r0
 8000e32:	461a      	mov	r2, r3
 8000e34:	4b86      	ldr	r3, [pc, #536]	; (8001050 <main+0x2fc>)
 8000e36:	801a      	strh	r2, [r3, #0]
	  mult32(operand1, operand2);
 8000e38:	4b81      	ldr	r3, [pc, #516]	; (8001040 <main+0x2ec>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b81      	ldr	r3, [pc, #516]	; (8001044 <main+0x2f0>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4619      	mov	r1, r3
 8000e42:	4610      	mov	r0, r2
 8000e44:	f7ff ff28 	bl	8000c98 <mult32>
	  timM32 += (double)timer_stop(timStart);
 8000e48:	4b81      	ldr	r3, [pc, #516]	; (8001050 <main+0x2fc>)
 8000e4a:	881b      	ldrh	r3, [r3, #0]
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 fb74 	bl	800153c <timer_stop>
 8000e54:	4603      	mov	r3, r0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff faba 	bl	80003d0 <__aeabi_ui2d>
 8000e5c:	4b7f      	ldr	r3, [pc, #508]	; (800105c <main+0x308>)
 8000e5e:	cb18      	ldmia	r3, {r3, r4}
 8000e60:	461a      	mov	r2, r3
 8000e62:	4623      	mov	r3, r4
 8000e64:	f7ff f978 	bl	8000158 <__adddf3>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	460c      	mov	r4, r1
 8000e6c:	4a7b      	ldr	r2, [pc, #492]	; (800105c <main+0x308>)
 8000e6e:	e9c2 3400 	strd	r3, r4, [r2]

	  timStart = timer_start();
 8000e72:	f000 fb57 	bl	8001524 <timer_start>
 8000e76:	4603      	mov	r3, r0
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b75      	ldr	r3, [pc, #468]	; (8001050 <main+0x2fc>)
 8000e7c:	801a      	strh	r2, [r3, #0]
	  mult64(operand1, operand2);
 8000e7e:	4b70      	ldr	r3, [pc, #448]	; (8001040 <main+0x2ec>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f04f 0100 	mov.w	r1, #0
 8000e88:	4b6e      	ldr	r3, [pc, #440]	; (8001044 <main+0x2f0>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f04f 0400 	mov.w	r4, #0
 8000e90:	461a      	mov	r2, r3
 8000e92:	4623      	mov	r3, r4
 8000e94:	f7ff ff11 	bl	8000cba <mult64>
	  timM64 += (double)timer_stop(timStart);
 8000e98:	4b6d      	ldr	r3, [pc, #436]	; (8001050 <main+0x2fc>)
 8000e9a:	881b      	ldrh	r3, [r3, #0]
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 fb4c 	bl	800153c <timer_stop>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fa92 	bl	80003d0 <__aeabi_ui2d>
 8000eac:	4b6c      	ldr	r3, [pc, #432]	; (8001060 <main+0x30c>)
 8000eae:	cb18      	ldmia	r3, {r3, r4}
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4623      	mov	r3, r4
 8000eb4:	f7ff f950 	bl	8000158 <__adddf3>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	460c      	mov	r4, r1
 8000ebc:	4a68      	ldr	r2, [pc, #416]	; (8001060 <main+0x30c>)
 8000ebe:	e9c2 3400 	strd	r3, r4, [r2]

	  timStart = timer_start();
 8000ec2:	f000 fb2f 	bl	8001524 <timer_start>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b61      	ldr	r3, [pc, #388]	; (8001050 <main+0x2fc>)
 8000ecc:	801a      	strh	r2, [r3, #0]
	  div32(operand1, operand2);
 8000ece:	4b5c      	ldr	r3, [pc, #368]	; (8001040 <main+0x2ec>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	4b5c      	ldr	r3, [pc, #368]	; (8001044 <main+0x2f0>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4610      	mov	r0, r2
 8000eda:	f7ff ff0a 	bl	8000cf2 <div32>
	  timD32 += (double)timer_stop(timStart);
 8000ede:	4b5c      	ldr	r3, [pc, #368]	; (8001050 <main+0x2fc>)
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f000 fb29 	bl	800153c <timer_stop>
 8000eea:	4603      	mov	r3, r0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fa6f 	bl	80003d0 <__aeabi_ui2d>
 8000ef2:	4b5c      	ldr	r3, [pc, #368]	; (8001064 <main+0x310>)
 8000ef4:	cb18      	ldmia	r3, {r3, r4}
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	4623      	mov	r3, r4
 8000efa:	f7ff f92d 	bl	8000158 <__adddf3>
 8000efe:	4603      	mov	r3, r0
 8000f00:	460c      	mov	r4, r1
 8000f02:	4a58      	ldr	r2, [pc, #352]	; (8001064 <main+0x310>)
 8000f04:	e9c2 3400 	strd	r3, r4, [r2]

	  timStart = timer_start();
 8000f08:	f000 fb0c 	bl	8001524 <timer_start>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	461a      	mov	r2, r3
 8000f10:	4b4f      	ldr	r3, [pc, #316]	; (8001050 <main+0x2fc>)
 8000f12:	801a      	strh	r2, [r3, #0]
	  div64(operand1, operand2);
 8000f14:	4b4a      	ldr	r3, [pc, #296]	; (8001040 <main+0x2ec>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f04f 0100 	mov.w	r1, #0
 8000f1e:	4b49      	ldr	r3, [pc, #292]	; (8001044 <main+0x2f0>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f04f 0400 	mov.w	r4, #0
 8000f26:	461a      	mov	r2, r3
 8000f28:	4623      	mov	r3, r4
 8000f2a:	f7ff fef6 	bl	8000d1a <div64>
	  timD64 += (double)timer_stop(timStart);
 8000f2e:	4b48      	ldr	r3, [pc, #288]	; (8001050 <main+0x2fc>)
 8000f30:	881b      	ldrh	r3, [r3, #0]
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	4618      	mov	r0, r3
 8000f36:	f000 fb01 	bl	800153c <timer_stop>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fa47 	bl	80003d0 <__aeabi_ui2d>
 8000f42:	4b49      	ldr	r3, [pc, #292]	; (8001068 <main+0x314>)
 8000f44:	cb18      	ldmia	r3, {r3, r4}
 8000f46:	461a      	mov	r2, r3
 8000f48:	4623      	mov	r3, r4
 8000f4a:	f7ff f905 	bl	8000158 <__adddf3>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	460c      	mov	r4, r1
 8000f52:	4a45      	ldr	r2, [pc, #276]	; (8001068 <main+0x314>)
 8000f54:	e9c2 3400 	strd	r3, r4, [r2]

	  timStart = timer_start();
 8000f58:	f000 fae4 	bl	8001524 <timer_start>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	461a      	mov	r2, r3
 8000f60:	4b3b      	ldr	r3, [pc, #236]	; (8001050 <main+0x2fc>)
 8000f62:	801a      	strh	r2, [r3, #0]
	  dst8 = src8;
 8000f64:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 8000f68:	f607 1208 	addw	r2, r7, #2312	; 0x908
 8000f6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f70:	e883 0003 	stmia.w	r3, {r0, r1}
	  timStrc8 += (double)timer_stop(timStart);
 8000f74:	4b36      	ldr	r3, [pc, #216]	; (8001050 <main+0x2fc>)
 8000f76:	881b      	ldrh	r3, [r3, #0]
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 fade 	bl	800153c <timer_stop>
 8000f80:	4603      	mov	r3, r0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fa24 	bl	80003d0 <__aeabi_ui2d>
 8000f88:	4b38      	ldr	r3, [pc, #224]	; (800106c <main+0x318>)
 8000f8a:	cb18      	ldmia	r3, {r3, r4}
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4623      	mov	r3, r4
 8000f90:	f7ff f8e2 	bl	8000158 <__adddf3>
 8000f94:	4603      	mov	r3, r0
 8000f96:	460c      	mov	r4, r1
 8000f98:	4a34      	ldr	r2, [pc, #208]	; (800106c <main+0x318>)
 8000f9a:	e9c2 3400 	strd	r3, r4, [r2]

	  timStart = timer_start();
 8000f9e:	f000 fac1 	bl	8001524 <timer_start>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <main+0x2fc>)
 8000fa8:	801a      	strh	r2, [r3, #0]
	  dst128 = src128;
 8000faa:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8000fb4:	2280      	movs	r2, #128	; 0x80
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	f001 fb08 	bl	80025cc <memcpy>
	  timStrc128 += (double)timer_stop(timStart);
 8000fbc:	4b24      	ldr	r3, [pc, #144]	; (8001050 <main+0x2fc>)
 8000fbe:	881b      	ldrh	r3, [r3, #0]
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 faba 	bl	800153c <timer_stop>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fa00 	bl	80003d0 <__aeabi_ui2d>
 8000fd0:	4b27      	ldr	r3, [pc, #156]	; (8001070 <main+0x31c>)
 8000fd2:	cb18      	ldmia	r3, {r3, r4}
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4623      	mov	r3, r4
 8000fd8:	f7ff f8be 	bl	8000158 <__adddf3>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	460c      	mov	r4, r1
 8000fe0:	4a23      	ldr	r2, [pc, #140]	; (8001070 <main+0x31c>)
 8000fe2:	e9c2 3400 	strd	r3, r4, [r2]

	  timStart = timer_start();
 8000fe6:	f000 fa9d 	bl	8001524 <timer_start>
 8000fea:	4603      	mov	r3, r0
 8000fec:	461a      	mov	r2, r3
 8000fee:	4b18      	ldr	r3, [pc, #96]	; (8001050 <main+0x2fc>)
 8000ff0:	801a      	strh	r2, [r3, #0]
	  dst1024 = src1024;
 8000ff2:	463a      	mov	r2, r7
 8000ff4:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001000:	461a      	mov	r2, r3
 8001002:	f001 fae3 	bl	80025cc <memcpy>
	  timStrc1024 += (double)timer_stop(timStart);
 8001006:	4b12      	ldr	r3, [pc, #72]	; (8001050 <main+0x2fc>)
 8001008:	881b      	ldrh	r3, [r3, #0]
 800100a:	b29b      	uxth	r3, r3
 800100c:	4618      	mov	r0, r3
 800100e:	f000 fa95 	bl	800153c <timer_stop>
 8001012:	4603      	mov	r3, r0
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff f9db 	bl	80003d0 <__aeabi_ui2d>
 800101a:	4b16      	ldr	r3, [pc, #88]	; (8001074 <main+0x320>)
 800101c:	cb18      	ldmia	r3, {r3, r4}
 800101e:	461a      	mov	r2, r3
 8001020:	4623      	mov	r3, r4
 8001022:	f7ff f899 	bl	8000158 <__adddf3>
 8001026:	4603      	mov	r3, r0
 8001028:	460c      	mov	r4, r1
 800102a:	4a12      	ldr	r2, [pc, #72]	; (8001074 <main+0x320>)
 800102c:	e9c2 3400 	strd	r3, r4, [r2]

	  num++;
 8001030:	4b11      	ldr	r3, [pc, #68]	; (8001078 <main+0x324>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	3301      	adds	r3, #1
 8001036:	4a10      	ldr	r2, [pc, #64]	; (8001078 <main+0x324>)
 8001038:	6013      	str	r3, [r2, #0]
  while (num < 100)
 800103a:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <main+0x324>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	e01d      	b.n	800107c <main+0x328>
 8001040:	20000138 	.word	0x20000138
 8001044:	200000e8 	.word	0x200000e8
 8001048:	20000148 	.word	0x20000148
 800104c:	20000140 	.word	0x20000140
 8001050:	20000134 	.word	0x20000134
 8001054:	20000090 	.word	0x20000090
 8001058:	20000098 	.word	0x20000098
 800105c:	200000a0 	.word	0x200000a0
 8001060:	200000a8 	.word	0x200000a8
 8001064:	200000b0 	.word	0x200000b0
 8001068:	200000b8 	.word	0x200000b8
 800106c:	200000c0 	.word	0x200000c0
 8001070:	200000c8 	.word	0x200000c8
 8001074:	200000d0 	.word	0x200000d0
 8001078:	2000008c 	.word	0x2000008c
 800107c:	2b63      	cmp	r3, #99	; 0x63
 800107e:	f77f ae76 	ble.w	8000d6e <main+0x1a>
  }

  timA32 = timA32 / 8000 / 100;
 8001082:	4b63      	ldr	r3, [pc, #396]	; (8001210 <main+0x4bc>)
 8001084:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	4b61      	ldr	r3, [pc, #388]	; (8001214 <main+0x4c0>)
 800108e:	f7ff fb43 	bl	8000718 <__aeabi_ddiv>
 8001092:	4603      	mov	r3, r0
 8001094:	460c      	mov	r4, r1
 8001096:	4618      	mov	r0, r3
 8001098:	4621      	mov	r1, r4
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	4b5e      	ldr	r3, [pc, #376]	; (8001218 <main+0x4c4>)
 80010a0:	f7ff fb3a 	bl	8000718 <__aeabi_ddiv>
 80010a4:	4603      	mov	r3, r0
 80010a6:	460c      	mov	r4, r1
 80010a8:	4a59      	ldr	r2, [pc, #356]	; (8001210 <main+0x4bc>)
 80010aa:	e9c2 3400 	strd	r3, r4, [r2]
  timA64 = timA64 / 8000 / 100;
 80010ae:	4b5b      	ldr	r3, [pc, #364]	; (800121c <main+0x4c8>)
 80010b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010b4:	f04f 0200 	mov.w	r2, #0
 80010b8:	4b56      	ldr	r3, [pc, #344]	; (8001214 <main+0x4c0>)
 80010ba:	f7ff fb2d 	bl	8000718 <__aeabi_ddiv>
 80010be:	4603      	mov	r3, r0
 80010c0:	460c      	mov	r4, r1
 80010c2:	4618      	mov	r0, r3
 80010c4:	4621      	mov	r1, r4
 80010c6:	f04f 0200 	mov.w	r2, #0
 80010ca:	4b53      	ldr	r3, [pc, #332]	; (8001218 <main+0x4c4>)
 80010cc:	f7ff fb24 	bl	8000718 <__aeabi_ddiv>
 80010d0:	4603      	mov	r3, r0
 80010d2:	460c      	mov	r4, r1
 80010d4:	4a51      	ldr	r2, [pc, #324]	; (800121c <main+0x4c8>)
 80010d6:	e9c2 3400 	strd	r3, r4, [r2]
  timM32 = timM32 / 8000 / 100;
 80010da:	4b51      	ldr	r3, [pc, #324]	; (8001220 <main+0x4cc>)
 80010dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	4b4b      	ldr	r3, [pc, #300]	; (8001214 <main+0x4c0>)
 80010e6:	f7ff fb17 	bl	8000718 <__aeabi_ddiv>
 80010ea:	4603      	mov	r3, r0
 80010ec:	460c      	mov	r4, r1
 80010ee:	4618      	mov	r0, r3
 80010f0:	4621      	mov	r1, r4
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	4b48      	ldr	r3, [pc, #288]	; (8001218 <main+0x4c4>)
 80010f8:	f7ff fb0e 	bl	8000718 <__aeabi_ddiv>
 80010fc:	4603      	mov	r3, r0
 80010fe:	460c      	mov	r4, r1
 8001100:	4a47      	ldr	r2, [pc, #284]	; (8001220 <main+0x4cc>)
 8001102:	e9c2 3400 	strd	r3, r4, [r2]
  timM64 = timM64 / 8000 / 100;
 8001106:	4b47      	ldr	r3, [pc, #284]	; (8001224 <main+0x4d0>)
 8001108:	e9d3 0100 	ldrd	r0, r1, [r3]
 800110c:	f04f 0200 	mov.w	r2, #0
 8001110:	4b40      	ldr	r3, [pc, #256]	; (8001214 <main+0x4c0>)
 8001112:	f7ff fb01 	bl	8000718 <__aeabi_ddiv>
 8001116:	4603      	mov	r3, r0
 8001118:	460c      	mov	r4, r1
 800111a:	4618      	mov	r0, r3
 800111c:	4621      	mov	r1, r4
 800111e:	f04f 0200 	mov.w	r2, #0
 8001122:	4b3d      	ldr	r3, [pc, #244]	; (8001218 <main+0x4c4>)
 8001124:	f7ff faf8 	bl	8000718 <__aeabi_ddiv>
 8001128:	4603      	mov	r3, r0
 800112a:	460c      	mov	r4, r1
 800112c:	4a3d      	ldr	r2, [pc, #244]	; (8001224 <main+0x4d0>)
 800112e:	e9c2 3400 	strd	r3, r4, [r2]
  timD32 = timD32 / 8000 / 100;
 8001132:	4b3d      	ldr	r3, [pc, #244]	; (8001228 <main+0x4d4>)
 8001134:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001138:	f04f 0200 	mov.w	r2, #0
 800113c:	4b35      	ldr	r3, [pc, #212]	; (8001214 <main+0x4c0>)
 800113e:	f7ff faeb 	bl	8000718 <__aeabi_ddiv>
 8001142:	4603      	mov	r3, r0
 8001144:	460c      	mov	r4, r1
 8001146:	4618      	mov	r0, r3
 8001148:	4621      	mov	r1, r4
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	4b32      	ldr	r3, [pc, #200]	; (8001218 <main+0x4c4>)
 8001150:	f7ff fae2 	bl	8000718 <__aeabi_ddiv>
 8001154:	4603      	mov	r3, r0
 8001156:	460c      	mov	r4, r1
 8001158:	4a33      	ldr	r2, [pc, #204]	; (8001228 <main+0x4d4>)
 800115a:	e9c2 3400 	strd	r3, r4, [r2]
  timD64 = timD64 / 8000 / 100;
 800115e:	4b33      	ldr	r3, [pc, #204]	; (800122c <main+0x4d8>)
 8001160:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001164:	f04f 0200 	mov.w	r2, #0
 8001168:	4b2a      	ldr	r3, [pc, #168]	; (8001214 <main+0x4c0>)
 800116a:	f7ff fad5 	bl	8000718 <__aeabi_ddiv>
 800116e:	4603      	mov	r3, r0
 8001170:	460c      	mov	r4, r1
 8001172:	4618      	mov	r0, r3
 8001174:	4621      	mov	r1, r4
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	4b27      	ldr	r3, [pc, #156]	; (8001218 <main+0x4c4>)
 800117c:	f7ff facc 	bl	8000718 <__aeabi_ddiv>
 8001180:	4603      	mov	r3, r0
 8001182:	460c      	mov	r4, r1
 8001184:	4a29      	ldr	r2, [pc, #164]	; (800122c <main+0x4d8>)
 8001186:	e9c2 3400 	strd	r3, r4, [r2]
  timStrc8 = timStrc8 / 8000 / 100;
 800118a:	4b29      	ldr	r3, [pc, #164]	; (8001230 <main+0x4dc>)
 800118c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001190:	f04f 0200 	mov.w	r2, #0
 8001194:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <main+0x4c0>)
 8001196:	f7ff fabf 	bl	8000718 <__aeabi_ddiv>
 800119a:	4603      	mov	r3, r0
 800119c:	460c      	mov	r4, r1
 800119e:	4618      	mov	r0, r3
 80011a0:	4621      	mov	r1, r4
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <main+0x4c4>)
 80011a8:	f7ff fab6 	bl	8000718 <__aeabi_ddiv>
 80011ac:	4603      	mov	r3, r0
 80011ae:	460c      	mov	r4, r1
 80011b0:	4a1f      	ldr	r2, [pc, #124]	; (8001230 <main+0x4dc>)
 80011b2:	e9c2 3400 	strd	r3, r4, [r2]
  timStrc128 = timStrc128 / 8000 / 100;
 80011b6:	4b1f      	ldr	r3, [pc, #124]	; (8001234 <main+0x4e0>)
 80011b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	4b14      	ldr	r3, [pc, #80]	; (8001214 <main+0x4c0>)
 80011c2:	f7ff faa9 	bl	8000718 <__aeabi_ddiv>
 80011c6:	4603      	mov	r3, r0
 80011c8:	460c      	mov	r4, r1
 80011ca:	4618      	mov	r0, r3
 80011cc:	4621      	mov	r1, r4
 80011ce:	f04f 0200 	mov.w	r2, #0
 80011d2:	4b11      	ldr	r3, [pc, #68]	; (8001218 <main+0x4c4>)
 80011d4:	f7ff faa0 	bl	8000718 <__aeabi_ddiv>
 80011d8:	4603      	mov	r3, r0
 80011da:	460c      	mov	r4, r1
 80011dc:	4a15      	ldr	r2, [pc, #84]	; (8001234 <main+0x4e0>)
 80011de:	e9c2 3400 	strd	r3, r4, [r2]
  timStrc1024 = timStrc1024 / 8000 / 100;
 80011e2:	4b15      	ldr	r3, [pc, #84]	; (8001238 <main+0x4e4>)
 80011e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011e8:	f04f 0200 	mov.w	r2, #0
 80011ec:	4b09      	ldr	r3, [pc, #36]	; (8001214 <main+0x4c0>)
 80011ee:	f7ff fa93 	bl	8000718 <__aeabi_ddiv>
 80011f2:	4603      	mov	r3, r0
 80011f4:	460c      	mov	r4, r1
 80011f6:	4618      	mov	r0, r3
 80011f8:	4621      	mov	r1, r4
 80011fa:	f04f 0200 	mov.w	r2, #0
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <main+0x4c4>)
 8001200:	f7ff fa8a 	bl	8000718 <__aeabi_ddiv>
 8001204:	4603      	mov	r3, r0
 8001206:	460c      	mov	r4, r1
 8001208:	4a0b      	ldr	r2, [pc, #44]	; (8001238 <main+0x4e4>)
 800120a:	e9c2 3400 	strd	r3, r4, [r2]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800120e:	e7fe      	b.n	800120e <main+0x4ba>
 8001210:	20000090 	.word	0x20000090
 8001214:	40bf4000 	.word	0x40bf4000
 8001218:	40590000 	.word	0x40590000
 800121c:	20000098 	.word	0x20000098
 8001220:	200000a0 	.word	0x200000a0
 8001224:	200000a8 	.word	0x200000a8
 8001228:	200000b0 	.word	0x200000b0
 800122c:	200000b8 	.word	0x200000b8
 8001230:	200000c0 	.word	0x200000c0
 8001234:	200000c8 	.word	0x200000c8
 8001238:	200000d0 	.word	0x200000d0

0800123c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b090      	sub	sp, #64	; 0x40
 8001240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001242:	f107 0318 	add.w	r3, r7, #24
 8001246:	2228      	movs	r2, #40	; 0x28
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f001 f9c9 	bl	80025e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
 800125c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800125e:	2302      	movs	r3, #2
 8001260:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001262:	2301      	movs	r3, #1
 8001264:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001266:	2310      	movs	r3, #16
 8001268:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800126a:	2300      	movs	r3, #0
 800126c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800126e:	f107 0318 	add.w	r3, r7, #24
 8001272:	4618      	mov	r0, r3
 8001274:	f000 faee 	bl	8001854 <HAL_RCC_OscConfig>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800127e:	f000 f895 	bl	80013ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001282:	230f      	movs	r3, #15
 8001284:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001286:	2300      	movs	r3, #0
 8001288:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	2100      	movs	r1, #0
 800129a:	4618      	mov	r0, r3
 800129c:	f000 fd5a 	bl	8001d54 <HAL_RCC_ClockConfig>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80012a6:	f000 f881 	bl	80013ac <Error_Handler>
  }
}
 80012aa:	bf00      	nop
 80012ac:	3740      	adds	r7, #64	; 0x40
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ba:	f107 0310 	add.w	r3, r7, #16
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c8:	f107 0308 	add.w	r3, r7, #8
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  __HAL_RCC_TIM4_CLK_ENABLE();
 80012d2:	4b28      	ldr	r3, [pc, #160]	; (8001374 <MX_TIM4_Init+0xc0>)
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	4a27      	ldr	r2, [pc, #156]	; (8001374 <MX_TIM4_Init+0xc0>)
 80012d8:	f043 0304 	orr.w	r3, r3, #4
 80012dc:	61d3      	str	r3, [r2, #28]
 80012de:	4b25      	ldr	r3, [pc, #148]	; (8001374 <MX_TIM4_Init+0xc0>)
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012ea:	4b23      	ldr	r3, [pc, #140]	; (8001378 <MX_TIM4_Init+0xc4>)
 80012ec:	4a23      	ldr	r2, [pc, #140]	; (800137c <MX_TIM4_Init+0xc8>)
 80012ee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80012f0:	4b21      	ldr	r3, [pc, #132]	; (8001378 <MX_TIM4_Init+0xc4>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80012f6:	4b20      	ldr	r3, [pc, #128]	; (8001378 <MX_TIM4_Init+0xc4>)
 80012f8:	2210      	movs	r2, #16
 80012fa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80012fc:	4b1e      	ldr	r3, [pc, #120]	; (8001378 <MX_TIM4_Init+0xc4>)
 80012fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001302:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001304:	4b1c      	ldr	r3, [pc, #112]	; (8001378 <MX_TIM4_Init+0xc4>)
 8001306:	2200      	movs	r2, #0
 8001308:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130a:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <MX_TIM4_Init+0xc4>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001310:	4819      	ldr	r0, [pc, #100]	; (8001378 <MX_TIM4_Init+0xc4>)
 8001312:	f000 fe89 	bl	8002028 <HAL_TIM_Base_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 800131c:	f000 f846 	bl	80013ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001324:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001326:	f107 0310 	add.w	r3, r7, #16
 800132a:	4619      	mov	r1, r3
 800132c:	4812      	ldr	r0, [pc, #72]	; (8001378 <MX_TIM4_Init+0xc4>)
 800132e:	f000 ff15 	bl	800215c <HAL_TIM_ConfigClockSource>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8001338:	f000 f838 	bl	80013ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800133c:	2300      	movs	r3, #0
 800133e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001344:	f107 0308 	add.w	r3, r7, #8
 8001348:	4619      	mov	r1, r3
 800134a:	480b      	ldr	r0, [pc, #44]	; (8001378 <MX_TIM4_Init+0xc4>)
 800134c:	f001 f8b6 	bl	80024bc <HAL_TIMEx_MasterConfigSynchronization>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM4_Init+0xa6>
  {
    Error_Handler();
 8001356:	f000 f829 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  HAL_TIM_Base_MspInit(&htim4);
 800135a:	4807      	ldr	r0, [pc, #28]	; (8001378 <MX_TIM4_Init+0xc4>)
 800135c:	f000 f85e 	bl	800141c <HAL_TIM_Base_MspInit>
  HAL_TIM_Base_Init(&htim4);
 8001360:	4805      	ldr	r0, [pc, #20]	; (8001378 <MX_TIM4_Init+0xc4>)
 8001362:	f000 fe61 	bl	8002028 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(&htim4);
 8001366:	4804      	ldr	r0, [pc, #16]	; (8001378 <MX_TIM4_Init+0xc4>)
 8001368:	f000 feae 	bl	80020c8 <HAL_TIM_Base_Start>

  /* USER CODE END TIM4_Init 2 */

}
 800136c:	bf00      	nop
 800136e:	3720      	adds	r7, #32
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40021000 	.word	0x40021000
 8001378:	200000ec 	.word	0x200000ec
 800137c:	40000800 	.word	0x40000800

08001380 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <MX_GPIO_Init+0x28>)
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	4a07      	ldr	r2, [pc, #28]	; (80013a8 <MX_GPIO_Init+0x28>)
 800138c:	f043 0304 	orr.w	r3, r3, #4
 8001390:	6193      	str	r3, [r2, #24]
 8001392:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <MX_GPIO_Init+0x28>)
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	f003 0304 	and.w	r3, r3, #4
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]

}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr
 80013a8:	40021000 	.word	0x40021000

080013ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr

080013b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013be:	4b15      	ldr	r3, [pc, #84]	; (8001414 <HAL_MspInit+0x5c>)
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	4a14      	ldr	r2, [pc, #80]	; (8001414 <HAL_MspInit+0x5c>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6193      	str	r3, [r2, #24]
 80013ca:	4b12      	ldr	r3, [pc, #72]	; (8001414 <HAL_MspInit+0x5c>)
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d6:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <HAL_MspInit+0x5c>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	4a0e      	ldr	r2, [pc, #56]	; (8001414 <HAL_MspInit+0x5c>)
 80013dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e0:	61d3      	str	r3, [r2, #28]
 80013e2:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <HAL_MspInit+0x5c>)
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013ee:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <HAL_MspInit+0x60>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	4a04      	ldr	r2, [pc, #16]	; (8001418 <HAL_MspInit+0x60>)
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140a:	bf00      	nop
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr
 8001414:	40021000 	.word	0x40021000
 8001418:	40010000 	.word	0x40010000

0800141c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a09      	ldr	r2, [pc, #36]	; (8001450 <HAL_TIM_Base_MspInit+0x34>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d10b      	bne.n	8001446 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <HAL_TIM_Base_MspInit+0x38>)
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	4a08      	ldr	r2, [pc, #32]	; (8001454 <HAL_TIM_Base_MspInit+0x38>)
 8001434:	f043 0304 	orr.w	r3, r3, #4
 8001438:	61d3      	str	r3, [r2, #28]
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <HAL_TIM_Base_MspInit+0x38>)
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	f003 0304 	and.w	r3, r3, #4
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001446:	bf00      	nop
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr
 8001450:	40000800 	.word	0x40000800
 8001454:	40021000 	.word	0x40021000

08001458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001468:	e7fe      	b.n	8001468 <HardFault_Handler+0x4>

0800146a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800146e:	e7fe      	b.n	800146e <MemManage_Handler+0x4>

08001470 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001474:	e7fe      	b.n	8001474 <BusFault_Handler+0x4>

08001476 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800147a:	e7fe      	b.n	800147a <UsageFault_Handler+0x4>

0800147c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr

08001488 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr

08001494 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr

080014a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a4:	f000 f8d6 	bl	8001654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}

080014ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014b4:	4a14      	ldr	r2, [pc, #80]	; (8001508 <_sbrk+0x5c>)
 80014b6:	4b15      	ldr	r3, [pc, #84]	; (800150c <_sbrk+0x60>)
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014c0:	4b13      	ldr	r3, [pc, #76]	; (8001510 <_sbrk+0x64>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d102      	bne.n	80014ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <_sbrk+0x64>)
 80014ca:	4a12      	ldr	r2, [pc, #72]	; (8001514 <_sbrk+0x68>)
 80014cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <_sbrk+0x64>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d207      	bcs.n	80014ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014dc:	f001 f84c 	bl	8002578 <__errno>
 80014e0:	4602      	mov	r2, r0
 80014e2:	230c      	movs	r3, #12
 80014e4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80014e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014ea:	e009      	b.n	8001500 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014ec:	4b08      	ldr	r3, [pc, #32]	; (8001510 <_sbrk+0x64>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014f2:	4b07      	ldr	r3, [pc, #28]	; (8001510 <_sbrk+0x64>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	4a05      	ldr	r2, [pc, #20]	; (8001510 <_sbrk+0x64>)
 80014fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014fe:	68fb      	ldr	r3, [r7, #12]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20005000 	.word	0x20005000
 800150c:	00000400 	.word	0x00000400
 8001510:	200000d8 	.word	0x200000d8
 8001514:	20000158 	.word	0x20000158

08001518 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr

08001524 <timer_start>:

#include "timer.h"


uint16_t timer_start()
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim4);
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <timer_start+0x14>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152e:	b29b      	uxth	r3, r3
}
 8001530:	4618      	mov	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	200000ec 	.word	0x200000ec

0800153c <timer_stop>:

uint16_t timer_stop(uint16_t first)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	80fb      	strh	r3, [r7, #6]
	uint16_t temp = __HAL_TIM_GET_COUNTER(&htim4);
 8001546:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <timer_stop+0x3c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154c:	81fb      	strh	r3, [r7, #14]

	if(temp > first)
 800154e:	89fa      	ldrh	r2, [r7, #14]
 8001550:	88fb      	ldrh	r3, [r7, #6]
 8001552:	429a      	cmp	r2, r3
 8001554:	d906      	bls.n	8001564 <timer_stop+0x28>
	{
		return (first + (0xFFFF - temp));
 8001556:	88fa      	ldrh	r2, [r7, #6]
 8001558:	89fb      	ldrh	r3, [r7, #14]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	b29b      	uxth	r3, r3
 800155e:	3b01      	subs	r3, #1
 8001560:	b29b      	uxth	r3, r3
 8001562:	e003      	b.n	800156c <timer_stop+0x30>
	}

	return (first - temp);
 8001564:	88fa      	ldrh	r2, [r7, #6]
 8001566:	89fb      	ldrh	r3, [r7, #14]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	b29b      	uxth	r3, r3
}
 800156c:	4618      	mov	r0, r3
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	200000ec 	.word	0x200000ec

0800157c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800157c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800157e:	e003      	b.n	8001588 <LoopCopyDataInit>

08001580 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001580:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001582:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001584:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001586:	3104      	adds	r1, #4

08001588 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001588:	480a      	ldr	r0, [pc, #40]	; (80015b4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800158c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800158e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001590:	d3f6      	bcc.n	8001580 <CopyDataInit>
  ldr r2, =_sbss
 8001592:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001594:	e002      	b.n	800159c <LoopFillZerobss>

08001596 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001596:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001598:	f842 3b04 	str.w	r3, [r2], #4

0800159c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800159e:	429a      	cmp	r2, r3
  bcc FillZerobss
 80015a0:	d3f9      	bcc.n	8001596 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015a2:	f7ff ffb9 	bl	8001518 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015a6:	f000 ffed 	bl	8002584 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015aa:	f7ff fbd3 	bl	8000d54 <main>
  bx lr
 80015ae:	4770      	bx	lr
  ldr r3, =_sidata
 80015b0:	08002790 	.word	0x08002790
  ldr r0, =_sdata
 80015b4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80015b8:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80015bc:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80015c0:	20000158 	.word	0x20000158

080015c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015c4:	e7fe      	b.n	80015c4 <ADC1_2_IRQHandler>
	...

080015c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <HAL_Init+0x28>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a07      	ldr	r2, [pc, #28]	; (80015f0 <HAL_Init+0x28>)
 80015d2:	f043 0310 	orr.w	r3, r3, #16
 80015d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d8:	2003      	movs	r0, #3
 80015da:	f000 f907 	bl	80017ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015de:	2000      	movs	r0, #0
 80015e0:	f000 f808 	bl	80015f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015e4:	f7ff fee8 	bl	80013b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40022000 	.word	0x40022000

080015f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <HAL_InitTick+0x54>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4b12      	ldr	r3, [pc, #72]	; (800164c <HAL_InitTick+0x58>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	4619      	mov	r1, r3
 8001606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800160a:	fbb3 f3f1 	udiv	r3, r3, r1
 800160e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001612:	4618      	mov	r0, r3
 8001614:	f000 f911 	bl	800183a <HAL_SYSTICK_Config>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e00e      	b.n	8001640 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b0f      	cmp	r3, #15
 8001626:	d80a      	bhi.n	800163e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001628:	2200      	movs	r2, #0
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001630:	f000 f8e7 	bl	8001802 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001634:	4a06      	ldr	r2, [pc, #24]	; (8001650 <HAL_InitTick+0x5c>)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800163a:	2300      	movs	r3, #0
 800163c:	e000      	b.n	8001640 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
}
 8001640:	4618      	mov	r0, r3
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000000 	.word	0x20000000
 800164c:	20000008 	.word	0x20000008
 8001650:	20000004 	.word	0x20000004

08001654 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001658:	4b05      	ldr	r3, [pc, #20]	; (8001670 <HAL_IncTick+0x1c>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	4b05      	ldr	r3, [pc, #20]	; (8001674 <HAL_IncTick+0x20>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4413      	add	r3, r2
 8001664:	4a03      	ldr	r2, [pc, #12]	; (8001674 <HAL_IncTick+0x20>)
 8001666:	6013      	str	r3, [r2, #0]
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr
 8001670:	20000008 	.word	0x20000008
 8001674:	20000150 	.word	0x20000150

08001678 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  return uwTick;
 800167c:	4b02      	ldr	r3, [pc, #8]	; (8001688 <HAL_GetTick+0x10>)
 800167e:	681b      	ldr	r3, [r3, #0]
}
 8001680:	4618      	mov	r0, r3
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr
 8001688:	20000150 	.word	0x20000150

0800168c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <__NVIC_SetPriorityGrouping+0x44>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016a2:	68ba      	ldr	r2, [r7, #8]
 80016a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a8:	4013      	ands	r3, r2
 80016aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016be:	4a04      	ldr	r2, [pc, #16]	; (80016d0 <__NVIC_SetPriorityGrouping+0x44>)
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	60d3      	str	r3, [r2, #12]
}
 80016c4:	bf00      	nop
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d8:	4b04      	ldr	r3, [pc, #16]	; (80016ec <__NVIC_GetPriorityGrouping+0x18>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	0a1b      	lsrs	r3, r3, #8
 80016de:	f003 0307 	and.w	r3, r3, #7
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	6039      	str	r1, [r7, #0]
 80016fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001700:	2b00      	cmp	r3, #0
 8001702:	db0a      	blt.n	800171a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	b2da      	uxtb	r2, r3
 8001708:	490c      	ldr	r1, [pc, #48]	; (800173c <__NVIC_SetPriority+0x4c>)
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	0112      	lsls	r2, r2, #4
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	440b      	add	r3, r1
 8001714:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001718:	e00a      	b.n	8001730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	b2da      	uxtb	r2, r3
 800171e:	4908      	ldr	r1, [pc, #32]	; (8001740 <__NVIC_SetPriority+0x50>)
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	3b04      	subs	r3, #4
 8001728:	0112      	lsls	r2, r2, #4
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	440b      	add	r3, r1
 800172e:	761a      	strb	r2, [r3, #24]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000e100 	.word	0xe000e100
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001744:	b480      	push	{r7}
 8001746:	b089      	sub	sp, #36	; 0x24
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f1c3 0307 	rsb	r3, r3, #7
 800175e:	2b04      	cmp	r3, #4
 8001760:	bf28      	it	cs
 8001762:	2304      	movcs	r3, #4
 8001764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	3304      	adds	r3, #4
 800176a:	2b06      	cmp	r3, #6
 800176c:	d902      	bls.n	8001774 <NVIC_EncodePriority+0x30>
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	3b03      	subs	r3, #3
 8001772:	e000      	b.n	8001776 <NVIC_EncodePriority+0x32>
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001778:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43da      	mvns	r2, r3
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	401a      	ands	r2, r3
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800178c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	fa01 f303 	lsl.w	r3, r1, r3
 8001796:	43d9      	mvns	r1, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800179c:	4313      	orrs	r3, r2
         );
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3724      	adds	r7, #36	; 0x24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr

080017a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017b8:	d301      	bcc.n	80017be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ba:	2301      	movs	r3, #1
 80017bc:	e00f      	b.n	80017de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017be:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <SysTick_Config+0x40>)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017c6:	210f      	movs	r1, #15
 80017c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017cc:	f7ff ff90 	bl	80016f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017d0:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <SysTick_Config+0x40>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017d6:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <SysTick_Config+0x40>)
 80017d8:	2207      	movs	r2, #7
 80017da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	e000e010 	.word	0xe000e010

080017ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff ff49 	bl	800168c <__NVIC_SetPriorityGrouping>
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001802:	b580      	push	{r7, lr}
 8001804:	b086      	sub	sp, #24
 8001806:	af00      	add	r7, sp, #0
 8001808:	4603      	mov	r3, r0
 800180a:	60b9      	str	r1, [r7, #8]
 800180c:	607a      	str	r2, [r7, #4]
 800180e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001814:	f7ff ff5e 	bl	80016d4 <__NVIC_GetPriorityGrouping>
 8001818:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	68b9      	ldr	r1, [r7, #8]
 800181e:	6978      	ldr	r0, [r7, #20]
 8001820:	f7ff ff90 	bl	8001744 <NVIC_EncodePriority>
 8001824:	4602      	mov	r2, r0
 8001826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800182a:	4611      	mov	r1, r2
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff5f 	bl	80016f0 <__NVIC_SetPriority>
}
 8001832:	bf00      	nop
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7ff ffb0 	bl	80017a8 <SysTick_Config>
 8001848:	4603      	mov	r3, r0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
	...

08001854 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e26c      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 8087 	beq.w	8001982 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001874:	4b92      	ldr	r3, [pc, #584]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 030c 	and.w	r3, r3, #12
 800187c:	2b04      	cmp	r3, #4
 800187e:	d00c      	beq.n	800189a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001880:	4b8f      	ldr	r3, [pc, #572]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 030c 	and.w	r3, r3, #12
 8001888:	2b08      	cmp	r3, #8
 800188a:	d112      	bne.n	80018b2 <HAL_RCC_OscConfig+0x5e>
 800188c:	4b8c      	ldr	r3, [pc, #560]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001898:	d10b      	bne.n	80018b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800189a:	4b89      	ldr	r3, [pc, #548]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d06c      	beq.n	8001980 <HAL_RCC_OscConfig+0x12c>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d168      	bne.n	8001980 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e246      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ba:	d106      	bne.n	80018ca <HAL_RCC_OscConfig+0x76>
 80018bc:	4b80      	ldr	r3, [pc, #512]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a7f      	ldr	r2, [pc, #508]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80018c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	e02e      	b.n	8001928 <HAL_RCC_OscConfig+0xd4>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d10c      	bne.n	80018ec <HAL_RCC_OscConfig+0x98>
 80018d2:	4b7b      	ldr	r3, [pc, #492]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a7a      	ldr	r2, [pc, #488]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80018d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	4b78      	ldr	r3, [pc, #480]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a77      	ldr	r2, [pc, #476]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	e01d      	b.n	8001928 <HAL_RCC_OscConfig+0xd4>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018f4:	d10c      	bne.n	8001910 <HAL_RCC_OscConfig+0xbc>
 80018f6:	4b72      	ldr	r3, [pc, #456]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a71      	ldr	r2, [pc, #452]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	4b6f      	ldr	r3, [pc, #444]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a6e      	ldr	r2, [pc, #440]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	e00b      	b.n	8001928 <HAL_RCC_OscConfig+0xd4>
 8001910:	4b6b      	ldr	r3, [pc, #428]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a6a      	ldr	r2, [pc, #424]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800191a:	6013      	str	r3, [r2, #0]
 800191c:	4b68      	ldr	r3, [pc, #416]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a67      	ldr	r2, [pc, #412]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001926:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d013      	beq.n	8001958 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001930:	f7ff fea2 	bl	8001678 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001938:	f7ff fe9e 	bl	8001678 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b64      	cmp	r3, #100	; 0x64
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e1fa      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194a:	4b5d      	ldr	r3, [pc, #372]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0f0      	beq.n	8001938 <HAL_RCC_OscConfig+0xe4>
 8001956:	e014      	b.n	8001982 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001958:	f7ff fe8e 	bl	8001678 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001960:	f7ff fe8a 	bl	8001678 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b64      	cmp	r3, #100	; 0x64
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e1e6      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001972:	4b53      	ldr	r3, [pc, #332]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1f0      	bne.n	8001960 <HAL_RCC_OscConfig+0x10c>
 800197e:	e000      	b.n	8001982 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001980:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d063      	beq.n	8001a56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800198e:	4b4c      	ldr	r3, [pc, #304]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 030c 	and.w	r3, r3, #12
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00b      	beq.n	80019b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800199a:	4b49      	ldr	r3, [pc, #292]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 030c 	and.w	r3, r3, #12
 80019a2:	2b08      	cmp	r3, #8
 80019a4:	d11c      	bne.n	80019e0 <HAL_RCC_OscConfig+0x18c>
 80019a6:	4b46      	ldr	r3, [pc, #280]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d116      	bne.n	80019e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b2:	4b43      	ldr	r3, [pc, #268]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d005      	beq.n	80019ca <HAL_RCC_OscConfig+0x176>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d001      	beq.n	80019ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e1ba      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ca:	4b3d      	ldr	r3, [pc, #244]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	4939      	ldr	r1, [pc, #228]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019de:	e03a      	b.n	8001a56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d020      	beq.n	8001a2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019e8:	4b36      	ldr	r3, [pc, #216]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ee:	f7ff fe43 	bl	8001678 <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019f6:	f7ff fe3f 	bl	8001678 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e19b      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a08:	4b2d      	ldr	r3, [pc, #180]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0f0      	beq.n	80019f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a14:	4b2a      	ldr	r3, [pc, #168]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	695b      	ldr	r3, [r3, #20]
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	4927      	ldr	r1, [pc, #156]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	600b      	str	r3, [r1, #0]
 8001a28:	e015      	b.n	8001a56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a2a:	4b26      	ldr	r3, [pc, #152]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a30:	f7ff fe22 	bl	8001678 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a38:	f7ff fe1e 	bl	8001678 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e17a      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4a:	4b1d      	ldr	r3, [pc, #116]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f0      	bne.n	8001a38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d03a      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d019      	beq.n	8001a9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a6a:	4b17      	ldr	r3, [pc, #92]	; (8001ac8 <HAL_RCC_OscConfig+0x274>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a70:	f7ff fe02 	bl	8001678 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a78:	f7ff fdfe 	bl	8001678 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e15a      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0f0      	beq.n	8001a78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a96:	2001      	movs	r0, #1
 8001a98:	f000 faa8 	bl	8001fec <RCC_Delay>
 8001a9c:	e01c      	b.n	8001ad8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <HAL_RCC_OscConfig+0x274>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa4:	f7ff fde8 	bl	8001678 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aaa:	e00f      	b.n	8001acc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aac:	f7ff fde4 	bl	8001678 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d908      	bls.n	8001acc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e140      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
 8001abe:	bf00      	nop
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	42420000 	.word	0x42420000
 8001ac8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001acc:	4b9e      	ldr	r3, [pc, #632]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d1e9      	bne.n	8001aac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 80a6 	beq.w	8001c32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aea:	4b97      	ldr	r3, [pc, #604]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d10d      	bne.n	8001b12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001af6:	4b94      	ldr	r3, [pc, #592]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	4a93      	ldr	r2, [pc, #588]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b00:	61d3      	str	r3, [r2, #28]
 8001b02:	4b91      	ldr	r3, [pc, #580]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b12:	4b8e      	ldr	r3, [pc, #568]	; (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d118      	bne.n	8001b50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b1e:	4b8b      	ldr	r3, [pc, #556]	; (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a8a      	ldr	r2, [pc, #552]	; (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b2a:	f7ff fda5 	bl	8001678 <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b32:	f7ff fda1 	bl	8001678 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b64      	cmp	r3, #100	; 0x64
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e0fd      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b44:	4b81      	ldr	r3, [pc, #516]	; (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0f0      	beq.n	8001b32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d106      	bne.n	8001b66 <HAL_RCC_OscConfig+0x312>
 8001b58:	4b7b      	ldr	r3, [pc, #492]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	4a7a      	ldr	r2, [pc, #488]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	6213      	str	r3, [r2, #32]
 8001b64:	e02d      	b.n	8001bc2 <HAL_RCC_OscConfig+0x36e>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10c      	bne.n	8001b88 <HAL_RCC_OscConfig+0x334>
 8001b6e:	4b76      	ldr	r3, [pc, #472]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	4a75      	ldr	r2, [pc, #468]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001b74:	f023 0301 	bic.w	r3, r3, #1
 8001b78:	6213      	str	r3, [r2, #32]
 8001b7a:	4b73      	ldr	r3, [pc, #460]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	4a72      	ldr	r2, [pc, #456]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001b80:	f023 0304 	bic.w	r3, r3, #4
 8001b84:	6213      	str	r3, [r2, #32]
 8001b86:	e01c      	b.n	8001bc2 <HAL_RCC_OscConfig+0x36e>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	2b05      	cmp	r3, #5
 8001b8e:	d10c      	bne.n	8001baa <HAL_RCC_OscConfig+0x356>
 8001b90:	4b6d      	ldr	r3, [pc, #436]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	4a6c      	ldr	r2, [pc, #432]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001b96:	f043 0304 	orr.w	r3, r3, #4
 8001b9a:	6213      	str	r3, [r2, #32]
 8001b9c:	4b6a      	ldr	r3, [pc, #424]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	4a69      	ldr	r2, [pc, #420]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	6213      	str	r3, [r2, #32]
 8001ba8:	e00b      	b.n	8001bc2 <HAL_RCC_OscConfig+0x36e>
 8001baa:	4b67      	ldr	r3, [pc, #412]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	4a66      	ldr	r2, [pc, #408]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001bb0:	f023 0301 	bic.w	r3, r3, #1
 8001bb4:	6213      	str	r3, [r2, #32]
 8001bb6:	4b64      	ldr	r3, [pc, #400]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	4a63      	ldr	r2, [pc, #396]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001bbc:	f023 0304 	bic.w	r3, r3, #4
 8001bc0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d015      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bca:	f7ff fd55 	bl	8001678 <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd0:	e00a      	b.n	8001be8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd2:	f7ff fd51 	bl	8001678 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e0ab      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be8:	4b57      	ldr	r3, [pc, #348]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d0ee      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x37e>
 8001bf4:	e014      	b.n	8001c20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf6:	f7ff fd3f 	bl	8001678 <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bfc:	e00a      	b.n	8001c14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bfe:	f7ff fd3b 	bl	8001678 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e095      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c14:	4b4c      	ldr	r3, [pc, #304]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1ee      	bne.n	8001bfe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c20:	7dfb      	ldrb	r3, [r7, #23]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d105      	bne.n	8001c32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c26:	4b48      	ldr	r3, [pc, #288]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	4a47      	ldr	r2, [pc, #284]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001c2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f000 8081 	beq.w	8001d3e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c3c:	4b42      	ldr	r3, [pc, #264]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 030c 	and.w	r3, r3, #12
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d061      	beq.n	8001d0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d146      	bne.n	8001cde <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c50:	4b3f      	ldr	r3, [pc, #252]	; (8001d50 <HAL_RCC_OscConfig+0x4fc>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c56:	f7ff fd0f 	bl	8001678 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5e:	f7ff fd0b 	bl	8001678 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e067      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c70:	4b35      	ldr	r3, [pc, #212]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1f0      	bne.n	8001c5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c84:	d108      	bne.n	8001c98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c86:	4b30      	ldr	r3, [pc, #192]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	492d      	ldr	r1, [pc, #180]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c98:	4b2b      	ldr	r3, [pc, #172]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a19      	ldr	r1, [r3, #32]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca8:	430b      	orrs	r3, r1
 8001caa:	4927      	ldr	r1, [pc, #156]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cb0:	4b27      	ldr	r3, [pc, #156]	; (8001d50 <HAL_RCC_OscConfig+0x4fc>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb6:	f7ff fcdf 	bl	8001678 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cbe:	f7ff fcdb 	bl	8001678 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e037      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cd0:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0f0      	beq.n	8001cbe <HAL_RCC_OscConfig+0x46a>
 8001cdc:	e02f      	b.n	8001d3e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cde:	4b1c      	ldr	r3, [pc, #112]	; (8001d50 <HAL_RCC_OscConfig+0x4fc>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce4:	f7ff fcc8 	bl	8001678 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cec:	f7ff fcc4 	bl	8001678 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e020      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cfe:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f0      	bne.n	8001cec <HAL_RCC_OscConfig+0x498>
 8001d0a:	e018      	b.n	8001d3e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	69db      	ldr	r3, [r3, #28]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d101      	bne.n	8001d18 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e013      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d18:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d106      	bne.n	8001d3a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d001      	beq.n	8001d3e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e000      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40007000 	.word	0x40007000
 8001d50:	42420060 	.word	0x42420060

08001d54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e0d0      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d68:	4b6a      	ldr	r3, [pc, #424]	; (8001f14 <HAL_RCC_ClockConfig+0x1c0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d910      	bls.n	8001d98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d76:	4b67      	ldr	r3, [pc, #412]	; (8001f14 <HAL_RCC_ClockConfig+0x1c0>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f023 0207 	bic.w	r2, r3, #7
 8001d7e:	4965      	ldr	r1, [pc, #404]	; (8001f14 <HAL_RCC_ClockConfig+0x1c0>)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d86:	4b63      	ldr	r3, [pc, #396]	; (8001f14 <HAL_RCC_ClockConfig+0x1c0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d001      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e0b8      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d020      	beq.n	8001de6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d005      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001db0:	4b59      	ldr	r3, [pc, #356]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	4a58      	ldr	r2, [pc, #352]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001db6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001dba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d005      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dc8:	4b53      	ldr	r3, [pc, #332]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	4a52      	ldr	r2, [pc, #328]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001dce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001dd2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd4:	4b50      	ldr	r3, [pc, #320]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	494d      	ldr	r1, [pc, #308]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d040      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d107      	bne.n	8001e0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfa:	4b47      	ldr	r3, [pc, #284]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d115      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e07f      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d107      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e12:	4b41      	ldr	r3, [pc, #260]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d109      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e073      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e22:	4b3d      	ldr	r3, [pc, #244]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e06b      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e32:	4b39      	ldr	r3, [pc, #228]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f023 0203 	bic.w	r2, r3, #3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	4936      	ldr	r1, [pc, #216]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e44:	f7ff fc18 	bl	8001678 <HAL_GetTick>
 8001e48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4a:	e00a      	b.n	8001e62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e4c:	f7ff fc14 	bl	8001678 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e053      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e62:	4b2d      	ldr	r3, [pc, #180]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 020c 	and.w	r2, r3, #12
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d1eb      	bne.n	8001e4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e74:	4b27      	ldr	r3, [pc, #156]	; (8001f14 <HAL_RCC_ClockConfig+0x1c0>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d210      	bcs.n	8001ea4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e82:	4b24      	ldr	r3, [pc, #144]	; (8001f14 <HAL_RCC_ClockConfig+0x1c0>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f023 0207 	bic.w	r2, r3, #7
 8001e8a:	4922      	ldr	r1, [pc, #136]	; (8001f14 <HAL_RCC_ClockConfig+0x1c0>)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e92:	4b20      	ldr	r3, [pc, #128]	; (8001f14 <HAL_RCC_ClockConfig+0x1c0>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d001      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e032      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d008      	beq.n	8001ec2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eb0:	4b19      	ldr	r3, [pc, #100]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	4916      	ldr	r1, [pc, #88]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0308 	and.w	r3, r3, #8
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d009      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ece:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	490e      	ldr	r1, [pc, #56]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ee2:	f000 f821 	bl	8001f28 <HAL_RCC_GetSysClockFreq>
 8001ee6:	4601      	mov	r1, r0
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	091b      	lsrs	r3, r3, #4
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	4a0a      	ldr	r2, [pc, #40]	; (8001f1c <HAL_RCC_ClockConfig+0x1c8>)
 8001ef4:	5cd3      	ldrb	r3, [r2, r3]
 8001ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8001efa:	4a09      	ldr	r2, [pc, #36]	; (8001f20 <HAL_RCC_ClockConfig+0x1cc>)
 8001efc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001efe:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <HAL_RCC_ClockConfig+0x1d0>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff fb76 	bl	80015f4 <HAL_InitTick>

  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40022000 	.word	0x40022000
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	08002770 	.word	0x08002770
 8001f20:	20000000 	.word	0x20000000
 8001f24:	20000004 	.word	0x20000004

08001f28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f28:	b490      	push	{r4, r7}
 8001f2a:	b08a      	sub	sp, #40	; 0x28
 8001f2c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f2e:	4b2a      	ldr	r3, [pc, #168]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f30:	1d3c      	adds	r4, r7, #4
 8001f32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f38:	4b28      	ldr	r3, [pc, #160]	; (8001fdc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
 8001f42:	2300      	movs	r3, #0
 8001f44:	61bb      	str	r3, [r7, #24]
 8001f46:	2300      	movs	r3, #0
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f52:	4b23      	ldr	r3, [pc, #140]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	d002      	beq.n	8001f68 <HAL_RCC_GetSysClockFreq+0x40>
 8001f62:	2b08      	cmp	r3, #8
 8001f64:	d003      	beq.n	8001f6e <HAL_RCC_GetSysClockFreq+0x46>
 8001f66:	e02d      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f68:	4b1e      	ldr	r3, [pc, #120]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f6a:	623b      	str	r3, [r7, #32]
      break;
 8001f6c:	e02d      	b.n	8001fca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	0c9b      	lsrs	r3, r3, #18
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f80:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d013      	beq.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f8c:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	0c5b      	lsrs	r3, r3, #17
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001fa0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	4a0f      	ldr	r2, [pc, #60]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fa6:	fb02 f203 	mul.w	r2, r2, r3
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb2:	e004      	b.n	8001fbe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	4a0c      	ldr	r2, [pc, #48]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fb8:	fb02 f303 	mul.w	r3, r2, r3
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	623b      	str	r3, [r7, #32]
      break;
 8001fc2:	e002      	b.n	8001fca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fc4:	4b07      	ldr	r3, [pc, #28]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fc6:	623b      	str	r3, [r7, #32]
      break;
 8001fc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fca:	6a3b      	ldr	r3, [r7, #32]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3728      	adds	r7, #40	; 0x28
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bc90      	pop	{r4, r7}
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	0800275c 	.word	0x0800275c
 8001fdc:	0800276c 	.word	0x0800276c
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	007a1200 	.word	0x007a1200
 8001fe8:	003d0900 	.word	0x003d0900

08001fec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ff4:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <RCC_Delay+0x34>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a0a      	ldr	r2, [pc, #40]	; (8002024 <RCC_Delay+0x38>)
 8001ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffe:	0a5b      	lsrs	r3, r3, #9
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	fb02 f303 	mul.w	r3, r2, r3
 8002006:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002008:	bf00      	nop
  }
  while (Delay --);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	1e5a      	subs	r2, r3, #1
 800200e:	60fa      	str	r2, [r7, #12]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1f9      	bne.n	8002008 <RCC_Delay+0x1c>
}
 8002014:	bf00      	nop
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	20000000 	.word	0x20000000
 8002024:	10624dd3 	.word	0x10624dd3

08002028 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e041      	b.n	80020be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	d106      	bne.n	8002054 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff f9e4 	bl	800141c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2202      	movs	r2, #2
 8002058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3304      	adds	r3, #4
 8002064:	4619      	mov	r1, r3
 8002066:	4610      	mov	r0, r2
 8002068:	f000 f930 	bl	80022cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d001      	beq.n	80020e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e032      	b.n	8002146 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2202      	movs	r2, #2
 80020e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a18      	ldr	r2, [pc, #96]	; (8002150 <HAL_TIM_Base_Start+0x88>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d00e      	beq.n	8002110 <HAL_TIM_Base_Start+0x48>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020fa:	d009      	beq.n	8002110 <HAL_TIM_Base_Start+0x48>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a14      	ldr	r2, [pc, #80]	; (8002154 <HAL_TIM_Base_Start+0x8c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d004      	beq.n	8002110 <HAL_TIM_Base_Start+0x48>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a13      	ldr	r2, [pc, #76]	; (8002158 <HAL_TIM_Base_Start+0x90>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d111      	bne.n	8002134 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2b06      	cmp	r3, #6
 8002120:	d010      	beq.n	8002144 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f042 0201 	orr.w	r2, r2, #1
 8002130:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002132:	e007      	b.n	8002144 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f042 0201 	orr.w	r2, r2, #1
 8002142:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr
 8002150:	40012c00 	.word	0x40012c00
 8002154:	40000400 	.word	0x40000400
 8002158:	40000800 	.word	0x40000800

0800215c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800216c:	2b01      	cmp	r3, #1
 800216e:	d101      	bne.n	8002174 <HAL_TIM_ConfigClockSource+0x18>
 8002170:	2302      	movs	r3, #2
 8002172:	e0a6      	b.n	80022c2 <HAL_TIM_ConfigClockSource+0x166>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2202      	movs	r2, #2
 8002180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002192:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800219a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b40      	cmp	r3, #64	; 0x40
 80021aa:	d067      	beq.n	800227c <HAL_TIM_ConfigClockSource+0x120>
 80021ac:	2b40      	cmp	r3, #64	; 0x40
 80021ae:	d80b      	bhi.n	80021c8 <HAL_TIM_ConfigClockSource+0x6c>
 80021b0:	2b10      	cmp	r3, #16
 80021b2:	d073      	beq.n	800229c <HAL_TIM_ConfigClockSource+0x140>
 80021b4:	2b10      	cmp	r3, #16
 80021b6:	d802      	bhi.n	80021be <HAL_TIM_ConfigClockSource+0x62>
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d06f      	beq.n	800229c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80021bc:	e078      	b.n	80022b0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80021be:	2b20      	cmp	r3, #32
 80021c0:	d06c      	beq.n	800229c <HAL_TIM_ConfigClockSource+0x140>
 80021c2:	2b30      	cmp	r3, #48	; 0x30
 80021c4:	d06a      	beq.n	800229c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80021c6:	e073      	b.n	80022b0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80021c8:	2b70      	cmp	r3, #112	; 0x70
 80021ca:	d00d      	beq.n	80021e8 <HAL_TIM_ConfigClockSource+0x8c>
 80021cc:	2b70      	cmp	r3, #112	; 0x70
 80021ce:	d804      	bhi.n	80021da <HAL_TIM_ConfigClockSource+0x7e>
 80021d0:	2b50      	cmp	r3, #80	; 0x50
 80021d2:	d033      	beq.n	800223c <HAL_TIM_ConfigClockSource+0xe0>
 80021d4:	2b60      	cmp	r3, #96	; 0x60
 80021d6:	d041      	beq.n	800225c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80021d8:	e06a      	b.n	80022b0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80021da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021de:	d066      	beq.n	80022ae <HAL_TIM_ConfigClockSource+0x152>
 80021e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021e4:	d017      	beq.n	8002216 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80021e6:	e063      	b.n	80022b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6818      	ldr	r0, [r3, #0]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	6899      	ldr	r1, [r3, #8]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	f000 f941 	bl	800247e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800220a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	609a      	str	r2, [r3, #8]
      break;
 8002214:	e04c      	b.n	80022b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6818      	ldr	r0, [r3, #0]
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	6899      	ldr	r1, [r3, #8]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	f000 f92a 	bl	800247e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002238:	609a      	str	r2, [r3, #8]
      break;
 800223a:	e039      	b.n	80022b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6818      	ldr	r0, [r3, #0]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	6859      	ldr	r1, [r3, #4]
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	461a      	mov	r2, r3
 800224a:	f000 f8a1 	bl	8002390 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2150      	movs	r1, #80	; 0x50
 8002254:	4618      	mov	r0, r3
 8002256:	f000 f8f8 	bl	800244a <TIM_ITRx_SetConfig>
      break;
 800225a:	e029      	b.n	80022b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6818      	ldr	r0, [r3, #0]
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	6859      	ldr	r1, [r3, #4]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	461a      	mov	r2, r3
 800226a:	f000 f8bf 	bl	80023ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2160      	movs	r1, #96	; 0x60
 8002274:	4618      	mov	r0, r3
 8002276:	f000 f8e8 	bl	800244a <TIM_ITRx_SetConfig>
      break;
 800227a:	e019      	b.n	80022b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6818      	ldr	r0, [r3, #0]
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	6859      	ldr	r1, [r3, #4]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	461a      	mov	r2, r3
 800228a:	f000 f881 	bl	8002390 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2140      	movs	r1, #64	; 0x40
 8002294:	4618      	mov	r0, r3
 8002296:	f000 f8d8 	bl	800244a <TIM_ITRx_SetConfig>
      break;
 800229a:	e009      	b.n	80022b0 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4619      	mov	r1, r3
 80022a6:	4610      	mov	r0, r2
 80022a8:	f000 f8cf 	bl	800244a <TIM_ITRx_SetConfig>
        break;
 80022ac:	e000      	b.n	80022b0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80022ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
	...

080022cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a29      	ldr	r2, [pc, #164]	; (8002384 <TIM_Base_SetConfig+0xb8>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d00b      	beq.n	80022fc <TIM_Base_SetConfig+0x30>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ea:	d007      	beq.n	80022fc <TIM_Base_SetConfig+0x30>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a26      	ldr	r2, [pc, #152]	; (8002388 <TIM_Base_SetConfig+0xbc>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d003      	beq.n	80022fc <TIM_Base_SetConfig+0x30>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a25      	ldr	r2, [pc, #148]	; (800238c <TIM_Base_SetConfig+0xc0>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d108      	bne.n	800230e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002302:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	4313      	orrs	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a1c      	ldr	r2, [pc, #112]	; (8002384 <TIM_Base_SetConfig+0xb8>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d00b      	beq.n	800232e <TIM_Base_SetConfig+0x62>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800231c:	d007      	beq.n	800232e <TIM_Base_SetConfig+0x62>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a19      	ldr	r2, [pc, #100]	; (8002388 <TIM_Base_SetConfig+0xbc>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d003      	beq.n	800232e <TIM_Base_SetConfig+0x62>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a18      	ldr	r2, [pc, #96]	; (800238c <TIM_Base_SetConfig+0xc0>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d108      	bne.n	8002340 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002334:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	4313      	orrs	r3, r2
 800233e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	4313      	orrs	r3, r2
 800234c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a07      	ldr	r2, [pc, #28]	; (8002384 <TIM_Base_SetConfig+0xb8>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d103      	bne.n	8002374 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	691a      	ldr	r2, [r3, #16]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	615a      	str	r2, [r3, #20]
}
 800237a:	bf00      	nop
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr
 8002384:	40012c00 	.word	0x40012c00
 8002388:	40000400 	.word	0x40000400
 800238c:	40000800 	.word	0x40000800

08002390 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002390:	b480      	push	{r7}
 8002392:	b087      	sub	sp, #28
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	f023 0201 	bic.w	r2, r3, #1
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	011b      	lsls	r3, r3, #4
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	f023 030a 	bic.w	r3, r3, #10
 80023cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	621a      	str	r2, [r3, #32]
}
 80023e2:	bf00      	nop
 80023e4:	371c      	adds	r7, #28
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr

080023ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b087      	sub	sp, #28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	f023 0210 	bic.w	r2, r3, #16
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002416:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	031b      	lsls	r3, r3, #12
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	4313      	orrs	r3, r2
 8002420:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002428:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	4313      	orrs	r3, r2
 8002432:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	621a      	str	r2, [r3, #32]
}
 8002440:	bf00      	nop
 8002442:	371c      	adds	r7, #28
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr

0800244a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800244a:	b480      	push	{r7}
 800244c:	b085      	sub	sp, #20
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
 8002452:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002460:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4313      	orrs	r3, r2
 8002468:	f043 0307 	orr.w	r3, r3, #7
 800246c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	609a      	str	r2, [r3, #8]
}
 8002474:	bf00      	nop
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr

0800247e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800247e:	b480      	push	{r7}
 8002480:	b087      	sub	sp, #28
 8002482:	af00      	add	r7, sp, #0
 8002484:	60f8      	str	r0, [r7, #12]
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	607a      	str	r2, [r7, #4]
 800248a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002498:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	021a      	lsls	r2, r3, #8
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	431a      	orrs	r2, r3
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	609a      	str	r2, [r3, #8]
}
 80024b2:	bf00      	nop
 80024b4:	371c      	adds	r7, #28
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr

080024bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d101      	bne.n	80024d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024d0:	2302      	movs	r3, #2
 80024d2:	e046      	b.n	8002562 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2202      	movs	r2, #2
 80024e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	4313      	orrs	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a16      	ldr	r2, [pc, #88]	; (800256c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d00e      	beq.n	8002536 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002520:	d009      	beq.n	8002536 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a12      	ldr	r2, [pc, #72]	; (8002570 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d004      	beq.n	8002536 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a10      	ldr	r2, [pc, #64]	; (8002574 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d10c      	bne.n	8002550 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800253c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	4313      	orrs	r3, r2
 8002546:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr
 800256c:	40012c00 	.word	0x40012c00
 8002570:	40000400 	.word	0x40000400
 8002574:	40000800 	.word	0x40000800

08002578 <__errno>:
 8002578:	4b01      	ldr	r3, [pc, #4]	; (8002580 <__errno+0x8>)
 800257a:	6818      	ldr	r0, [r3, #0]
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	2000000c 	.word	0x2000000c

08002584 <__libc_init_array>:
 8002584:	b570      	push	{r4, r5, r6, lr}
 8002586:	2500      	movs	r5, #0
 8002588:	4e0c      	ldr	r6, [pc, #48]	; (80025bc <__libc_init_array+0x38>)
 800258a:	4c0d      	ldr	r4, [pc, #52]	; (80025c0 <__libc_init_array+0x3c>)
 800258c:	1ba4      	subs	r4, r4, r6
 800258e:	10a4      	asrs	r4, r4, #2
 8002590:	42a5      	cmp	r5, r4
 8002592:	d109      	bne.n	80025a8 <__libc_init_array+0x24>
 8002594:	f000 f8d6 	bl	8002744 <_init>
 8002598:	2500      	movs	r5, #0
 800259a:	4e0a      	ldr	r6, [pc, #40]	; (80025c4 <__libc_init_array+0x40>)
 800259c:	4c0a      	ldr	r4, [pc, #40]	; (80025c8 <__libc_init_array+0x44>)
 800259e:	1ba4      	subs	r4, r4, r6
 80025a0:	10a4      	asrs	r4, r4, #2
 80025a2:	42a5      	cmp	r5, r4
 80025a4:	d105      	bne.n	80025b2 <__libc_init_array+0x2e>
 80025a6:	bd70      	pop	{r4, r5, r6, pc}
 80025a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025ac:	4798      	blx	r3
 80025ae:	3501      	adds	r5, #1
 80025b0:	e7ee      	b.n	8002590 <__libc_init_array+0xc>
 80025b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025b6:	4798      	blx	r3
 80025b8:	3501      	adds	r5, #1
 80025ba:	e7f2      	b.n	80025a2 <__libc_init_array+0x1e>
 80025bc:	08002788 	.word	0x08002788
 80025c0:	08002788 	.word	0x08002788
 80025c4:	08002788 	.word	0x08002788
 80025c8:	0800278c 	.word	0x0800278c

080025cc <memcpy>:
 80025cc:	b510      	push	{r4, lr}
 80025ce:	1e43      	subs	r3, r0, #1
 80025d0:	440a      	add	r2, r1
 80025d2:	4291      	cmp	r1, r2
 80025d4:	d100      	bne.n	80025d8 <memcpy+0xc>
 80025d6:	bd10      	pop	{r4, pc}
 80025d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80025dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80025e0:	e7f7      	b.n	80025d2 <memcpy+0x6>

080025e2 <memset>:
 80025e2:	4603      	mov	r3, r0
 80025e4:	4402      	add	r2, r0
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d100      	bne.n	80025ec <memset+0xa>
 80025ea:	4770      	bx	lr
 80025ec:	f803 1b01 	strb.w	r1, [r3], #1
 80025f0:	e7f9      	b.n	80025e6 <memset+0x4>
	...

080025f4 <rand>:
 80025f4:	b538      	push	{r3, r4, r5, lr}
 80025f6:	4b13      	ldr	r3, [pc, #76]	; (8002644 <rand+0x50>)
 80025f8:	681c      	ldr	r4, [r3, #0]
 80025fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80025fc:	b97b      	cbnz	r3, 800261e <rand+0x2a>
 80025fe:	2018      	movs	r0, #24
 8002600:	f000 f82c 	bl	800265c <malloc>
 8002604:	4a10      	ldr	r2, [pc, #64]	; (8002648 <rand+0x54>)
 8002606:	4b11      	ldr	r3, [pc, #68]	; (800264c <rand+0x58>)
 8002608:	63a0      	str	r0, [r4, #56]	; 0x38
 800260a:	e9c0 2300 	strd	r2, r3, [r0]
 800260e:	4b10      	ldr	r3, [pc, #64]	; (8002650 <rand+0x5c>)
 8002610:	2201      	movs	r2, #1
 8002612:	6083      	str	r3, [r0, #8]
 8002614:	230b      	movs	r3, #11
 8002616:	8183      	strh	r3, [r0, #12]
 8002618:	2300      	movs	r3, #0
 800261a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800261e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002620:	480c      	ldr	r0, [pc, #48]	; (8002654 <rand+0x60>)
 8002622:	690a      	ldr	r2, [r1, #16]
 8002624:	694b      	ldr	r3, [r1, #20]
 8002626:	4350      	muls	r0, r2
 8002628:	4c0b      	ldr	r4, [pc, #44]	; (8002658 <rand+0x64>)
 800262a:	fb04 0003 	mla	r0, r4, r3, r0
 800262e:	fba2 2304 	umull	r2, r3, r2, r4
 8002632:	4403      	add	r3, r0
 8002634:	1c54      	adds	r4, r2, #1
 8002636:	f143 0500 	adc.w	r5, r3, #0
 800263a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800263e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8002642:	bd38      	pop	{r3, r4, r5, pc}
 8002644:	2000000c 	.word	0x2000000c
 8002648:	abcd330e 	.word	0xabcd330e
 800264c:	e66d1234 	.word	0xe66d1234
 8002650:	0005deec 	.word	0x0005deec
 8002654:	5851f42d 	.word	0x5851f42d
 8002658:	4c957f2d 	.word	0x4c957f2d

0800265c <malloc>:
 800265c:	4b02      	ldr	r3, [pc, #8]	; (8002668 <malloc+0xc>)
 800265e:	4601      	mov	r1, r0
 8002660:	6818      	ldr	r0, [r3, #0]
 8002662:	f000 b803 	b.w	800266c <_malloc_r>
 8002666:	bf00      	nop
 8002668:	2000000c 	.word	0x2000000c

0800266c <_malloc_r>:
 800266c:	b570      	push	{r4, r5, r6, lr}
 800266e:	1ccd      	adds	r5, r1, #3
 8002670:	f025 0503 	bic.w	r5, r5, #3
 8002674:	3508      	adds	r5, #8
 8002676:	2d0c      	cmp	r5, #12
 8002678:	bf38      	it	cc
 800267a:	250c      	movcc	r5, #12
 800267c:	2d00      	cmp	r5, #0
 800267e:	4606      	mov	r6, r0
 8002680:	db01      	blt.n	8002686 <_malloc_r+0x1a>
 8002682:	42a9      	cmp	r1, r5
 8002684:	d903      	bls.n	800268e <_malloc_r+0x22>
 8002686:	230c      	movs	r3, #12
 8002688:	6033      	str	r3, [r6, #0]
 800268a:	2000      	movs	r0, #0
 800268c:	bd70      	pop	{r4, r5, r6, pc}
 800268e:	f000 f857 	bl	8002740 <__malloc_lock>
 8002692:	4a21      	ldr	r2, [pc, #132]	; (8002718 <_malloc_r+0xac>)
 8002694:	6814      	ldr	r4, [r2, #0]
 8002696:	4621      	mov	r1, r4
 8002698:	b991      	cbnz	r1, 80026c0 <_malloc_r+0x54>
 800269a:	4c20      	ldr	r4, [pc, #128]	; (800271c <_malloc_r+0xb0>)
 800269c:	6823      	ldr	r3, [r4, #0]
 800269e:	b91b      	cbnz	r3, 80026a8 <_malloc_r+0x3c>
 80026a0:	4630      	mov	r0, r6
 80026a2:	f000 f83d 	bl	8002720 <_sbrk_r>
 80026a6:	6020      	str	r0, [r4, #0]
 80026a8:	4629      	mov	r1, r5
 80026aa:	4630      	mov	r0, r6
 80026ac:	f000 f838 	bl	8002720 <_sbrk_r>
 80026b0:	1c43      	adds	r3, r0, #1
 80026b2:	d124      	bne.n	80026fe <_malloc_r+0x92>
 80026b4:	230c      	movs	r3, #12
 80026b6:	4630      	mov	r0, r6
 80026b8:	6033      	str	r3, [r6, #0]
 80026ba:	f000 f842 	bl	8002742 <__malloc_unlock>
 80026be:	e7e4      	b.n	800268a <_malloc_r+0x1e>
 80026c0:	680b      	ldr	r3, [r1, #0]
 80026c2:	1b5b      	subs	r3, r3, r5
 80026c4:	d418      	bmi.n	80026f8 <_malloc_r+0x8c>
 80026c6:	2b0b      	cmp	r3, #11
 80026c8:	d90f      	bls.n	80026ea <_malloc_r+0x7e>
 80026ca:	600b      	str	r3, [r1, #0]
 80026cc:	18cc      	adds	r4, r1, r3
 80026ce:	50cd      	str	r5, [r1, r3]
 80026d0:	4630      	mov	r0, r6
 80026d2:	f000 f836 	bl	8002742 <__malloc_unlock>
 80026d6:	f104 000b 	add.w	r0, r4, #11
 80026da:	1d23      	adds	r3, r4, #4
 80026dc:	f020 0007 	bic.w	r0, r0, #7
 80026e0:	1ac3      	subs	r3, r0, r3
 80026e2:	d0d3      	beq.n	800268c <_malloc_r+0x20>
 80026e4:	425a      	negs	r2, r3
 80026e6:	50e2      	str	r2, [r4, r3]
 80026e8:	e7d0      	b.n	800268c <_malloc_r+0x20>
 80026ea:	684b      	ldr	r3, [r1, #4]
 80026ec:	428c      	cmp	r4, r1
 80026ee:	bf16      	itet	ne
 80026f0:	6063      	strne	r3, [r4, #4]
 80026f2:	6013      	streq	r3, [r2, #0]
 80026f4:	460c      	movne	r4, r1
 80026f6:	e7eb      	b.n	80026d0 <_malloc_r+0x64>
 80026f8:	460c      	mov	r4, r1
 80026fa:	6849      	ldr	r1, [r1, #4]
 80026fc:	e7cc      	b.n	8002698 <_malloc_r+0x2c>
 80026fe:	1cc4      	adds	r4, r0, #3
 8002700:	f024 0403 	bic.w	r4, r4, #3
 8002704:	42a0      	cmp	r0, r4
 8002706:	d005      	beq.n	8002714 <_malloc_r+0xa8>
 8002708:	1a21      	subs	r1, r4, r0
 800270a:	4630      	mov	r0, r6
 800270c:	f000 f808 	bl	8002720 <_sbrk_r>
 8002710:	3001      	adds	r0, #1
 8002712:	d0cf      	beq.n	80026b4 <_malloc_r+0x48>
 8002714:	6025      	str	r5, [r4, #0]
 8002716:	e7db      	b.n	80026d0 <_malloc_r+0x64>
 8002718:	200000dc 	.word	0x200000dc
 800271c:	200000e0 	.word	0x200000e0

08002720 <_sbrk_r>:
 8002720:	b538      	push	{r3, r4, r5, lr}
 8002722:	2300      	movs	r3, #0
 8002724:	4c05      	ldr	r4, [pc, #20]	; (800273c <_sbrk_r+0x1c>)
 8002726:	4605      	mov	r5, r0
 8002728:	4608      	mov	r0, r1
 800272a:	6023      	str	r3, [r4, #0]
 800272c:	f7fe febe 	bl	80014ac <_sbrk>
 8002730:	1c43      	adds	r3, r0, #1
 8002732:	d102      	bne.n	800273a <_sbrk_r+0x1a>
 8002734:	6823      	ldr	r3, [r4, #0]
 8002736:	b103      	cbz	r3, 800273a <_sbrk_r+0x1a>
 8002738:	602b      	str	r3, [r5, #0]
 800273a:	bd38      	pop	{r3, r4, r5, pc}
 800273c:	20000154 	.word	0x20000154

08002740 <__malloc_lock>:
 8002740:	4770      	bx	lr

08002742 <__malloc_unlock>:
 8002742:	4770      	bx	lr

08002744 <_init>:
 8002744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002746:	bf00      	nop
 8002748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800274a:	bc08      	pop	{r3}
 800274c:	469e      	mov	lr, r3
 800274e:	4770      	bx	lr

08002750 <_fini>:
 8002750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002752:	bf00      	nop
 8002754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002756:	bc08      	pop	{r3}
 8002758:	469e      	mov	lr, r3
 800275a:	4770      	bx	lr
