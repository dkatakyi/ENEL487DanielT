
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e7c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  08005f90  08005f90  00015f90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006508  08006508  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  08006508  08006508  00016508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006510  08006510  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006510  08006510  00016510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006514  08006514  00016514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08006518  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000200  08006718  00020200  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  08006718  00020378  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9fe  00000000  00000000  00020229  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001fcd  00000000  00000000  0002cc27  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c80  00000000  00000000  0002ebf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b78  00000000  00000000  0002f878  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000186b5  00000000  00000000  000303f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ade0  00000000  00000000  00048aa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008a892  00000000  00000000  00053885  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000de117  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e2c  00000000  00000000  000de194  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00000064  00000000  00000000  000e1fc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000200 	.word	0x20000200
 800012c:	00000000 	.word	0x00000000
 8000130:	08005f74 	.word	0x08005f74

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000204 	.word	0x20000204
 800014c:	08005f74 	.word	0x08005f74

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_uldivmod>:
 8000a88:	b953      	cbnz	r3, 8000aa0 <__aeabi_uldivmod+0x18>
 8000a8a:	b94a      	cbnz	r2, 8000aa0 <__aeabi_uldivmod+0x18>
 8000a8c:	2900      	cmp	r1, #0
 8000a8e:	bf08      	it	eq
 8000a90:	2800      	cmpeq	r0, #0
 8000a92:	bf1c      	itt	ne
 8000a94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a9c:	f000 b974 	b.w	8000d88 <__aeabi_idiv0>
 8000aa0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa8:	f000 f806 	bl	8000ab8 <__udivmoddi4>
 8000aac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab4:	b004      	add	sp, #16
 8000ab6:	4770      	bx	lr

08000ab8 <__udivmoddi4>:
 8000ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000abc:	468c      	mov	ip, r1
 8000abe:	4604      	mov	r4, r0
 8000ac0:	9e08      	ldr	r6, [sp, #32]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d14b      	bne.n	8000b5e <__udivmoddi4+0xa6>
 8000ac6:	428a      	cmp	r2, r1
 8000ac8:	4615      	mov	r5, r2
 8000aca:	d967      	bls.n	8000b9c <__udivmoddi4+0xe4>
 8000acc:	fab2 f282 	clz	r2, r2
 8000ad0:	b14a      	cbz	r2, 8000ae6 <__udivmoddi4+0x2e>
 8000ad2:	f1c2 0720 	rsb	r7, r2, #32
 8000ad6:	fa01 f302 	lsl.w	r3, r1, r2
 8000ada:	fa20 f707 	lsr.w	r7, r0, r7
 8000ade:	4095      	lsls	r5, r2
 8000ae0:	ea47 0c03 	orr.w	ip, r7, r3
 8000ae4:	4094      	lsls	r4, r2
 8000ae6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aea:	fbbc f7fe 	udiv	r7, ip, lr
 8000aee:	fa1f f885 	uxth.w	r8, r5
 8000af2:	fb0e c317 	mls	r3, lr, r7, ip
 8000af6:	fb07 f908 	mul.w	r9, r7, r8
 8000afa:	0c21      	lsrs	r1, r4, #16
 8000afc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b00:	4599      	cmp	r9, r3
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x60>
 8000b04:	18eb      	adds	r3, r5, r3
 8000b06:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 8000b0a:	f080 811c 	bcs.w	8000d46 <__udivmoddi4+0x28e>
 8000b0e:	4599      	cmp	r9, r3
 8000b10:	f240 8119 	bls.w	8000d46 <__udivmoddi4+0x28e>
 8000b14:	3f02      	subs	r7, #2
 8000b16:	442b      	add	r3, r5
 8000b18:	eba3 0309 	sub.w	r3, r3, r9
 8000b1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b24:	fb00 f108 	mul.w	r1, r0, r8
 8000b28:	b2a4      	uxth	r4, r4
 8000b2a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b2e:	42a1      	cmp	r1, r4
 8000b30:	d909      	bls.n	8000b46 <__udivmoddi4+0x8e>
 8000b32:	192c      	adds	r4, r5, r4
 8000b34:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b38:	f080 8107 	bcs.w	8000d4a <__udivmoddi4+0x292>
 8000b3c:	42a1      	cmp	r1, r4
 8000b3e:	f240 8104 	bls.w	8000d4a <__udivmoddi4+0x292>
 8000b42:	3802      	subs	r0, #2
 8000b44:	442c      	add	r4, r5
 8000b46:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b4a:	2700      	movs	r7, #0
 8000b4c:	1a64      	subs	r4, r4, r1
 8000b4e:	b11e      	cbz	r6, 8000b58 <__udivmoddi4+0xa0>
 8000b50:	2300      	movs	r3, #0
 8000b52:	40d4      	lsrs	r4, r2
 8000b54:	e9c6 4300 	strd	r4, r3, [r6]
 8000b58:	4639      	mov	r1, r7
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	428b      	cmp	r3, r1
 8000b60:	d909      	bls.n	8000b76 <__udivmoddi4+0xbe>
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	f000 80ec 	beq.w	8000d40 <__udivmoddi4+0x288>
 8000b68:	2700      	movs	r7, #0
 8000b6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000b6e:	4638      	mov	r0, r7
 8000b70:	4639      	mov	r1, r7
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	fab3 f783 	clz	r7, r3
 8000b7a:	2f00      	cmp	r7, #0
 8000b7c:	d148      	bne.n	8000c10 <__udivmoddi4+0x158>
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d302      	bcc.n	8000b88 <__udivmoddi4+0xd0>
 8000b82:	4282      	cmp	r2, r0
 8000b84:	f200 80fb 	bhi.w	8000d7e <__udivmoddi4+0x2c6>
 8000b88:	1a84      	subs	r4, r0, r2
 8000b8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b8e:	2001      	movs	r0, #1
 8000b90:	469c      	mov	ip, r3
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	d0e0      	beq.n	8000b58 <__udivmoddi4+0xa0>
 8000b96:	e9c6 4c00 	strd	r4, ip, [r6]
 8000b9a:	e7dd      	b.n	8000b58 <__udivmoddi4+0xa0>
 8000b9c:	b902      	cbnz	r2, 8000ba0 <__udivmoddi4+0xe8>
 8000b9e:	deff      	udf	#255	; 0xff
 8000ba0:	fab2 f282 	clz	r2, r2
 8000ba4:	2a00      	cmp	r2, #0
 8000ba6:	f040 808f 	bne.w	8000cc8 <__udivmoddi4+0x210>
 8000baa:	2701      	movs	r7, #1
 8000bac:	1b49      	subs	r1, r1, r5
 8000bae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000bb2:	fa1f f985 	uxth.w	r9, r5
 8000bb6:	fbb1 fef8 	udiv	lr, r1, r8
 8000bba:	fb08 111e 	mls	r1, r8, lr, r1
 8000bbe:	fb09 f00e 	mul.w	r0, r9, lr
 8000bc2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000bc6:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000bca:	4298      	cmp	r0, r3
 8000bcc:	d907      	bls.n	8000bde <__udivmoddi4+0x126>
 8000bce:	18eb      	adds	r3, r5, r3
 8000bd0:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8000bd4:	d202      	bcs.n	8000bdc <__udivmoddi4+0x124>
 8000bd6:	4298      	cmp	r0, r3
 8000bd8:	f200 80cd 	bhi.w	8000d76 <__udivmoddi4+0x2be>
 8000bdc:	468e      	mov	lr, r1
 8000bde:	1a1b      	subs	r3, r3, r0
 8000be0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000be4:	fb08 3310 	mls	r3, r8, r0, r3
 8000be8:	fb09 f900 	mul.w	r9, r9, r0
 8000bec:	b2a4      	uxth	r4, r4
 8000bee:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf2:	45a1      	cmp	r9, r4
 8000bf4:	d907      	bls.n	8000c06 <__udivmoddi4+0x14e>
 8000bf6:	192c      	adds	r4, r5, r4
 8000bf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bfc:	d202      	bcs.n	8000c04 <__udivmoddi4+0x14c>
 8000bfe:	45a1      	cmp	r9, r4
 8000c00:	f200 80b6 	bhi.w	8000d70 <__udivmoddi4+0x2b8>
 8000c04:	4618      	mov	r0, r3
 8000c06:	eba4 0409 	sub.w	r4, r4, r9
 8000c0a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000c0e:	e79e      	b.n	8000b4e <__udivmoddi4+0x96>
 8000c10:	f1c7 0520 	rsb	r5, r7, #32
 8000c14:	40bb      	lsls	r3, r7
 8000c16:	fa22 fc05 	lsr.w	ip, r2, r5
 8000c1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c1e:	fa21 f405 	lsr.w	r4, r1, r5
 8000c22:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c26:	fbb4 f9fe 	udiv	r9, r4, lr
 8000c2a:	fa1f f88c 	uxth.w	r8, ip
 8000c2e:	fb0e 4419 	mls	r4, lr, r9, r4
 8000c32:	fa20 f305 	lsr.w	r3, r0, r5
 8000c36:	40b9      	lsls	r1, r7
 8000c38:	fb09 fa08 	mul.w	sl, r9, r8
 8000c3c:	4319      	orrs	r1, r3
 8000c3e:	0c0b      	lsrs	r3, r1, #16
 8000c40:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c44:	45a2      	cmp	sl, r4
 8000c46:	fa02 f207 	lsl.w	r2, r2, r7
 8000c4a:	fa00 f307 	lsl.w	r3, r0, r7
 8000c4e:	d90b      	bls.n	8000c68 <__udivmoddi4+0x1b0>
 8000c50:	eb1c 0404 	adds.w	r4, ip, r4
 8000c54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c58:	f080 8088 	bcs.w	8000d6c <__udivmoddi4+0x2b4>
 8000c5c:	45a2      	cmp	sl, r4
 8000c5e:	f240 8085 	bls.w	8000d6c <__udivmoddi4+0x2b4>
 8000c62:	f1a9 0902 	sub.w	r9, r9, #2
 8000c66:	4464      	add	r4, ip
 8000c68:	eba4 040a 	sub.w	r4, r4, sl
 8000c6c:	fbb4 f0fe 	udiv	r0, r4, lr
 8000c70:	fb0e 4410 	mls	r4, lr, r0, r4
 8000c74:	fb00 fa08 	mul.w	sl, r0, r8
 8000c78:	b289      	uxth	r1, r1
 8000c7a:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000c7e:	45a2      	cmp	sl, r4
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x1dc>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c8a:	d26b      	bcs.n	8000d64 <__udivmoddi4+0x2ac>
 8000c8c:	45a2      	cmp	sl, r4
 8000c8e:	d969      	bls.n	8000d64 <__udivmoddi4+0x2ac>
 8000c90:	3802      	subs	r0, #2
 8000c92:	4464      	add	r4, ip
 8000c94:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c98:	fba0 8902 	umull	r8, r9, r0, r2
 8000c9c:	eba4 040a 	sub.w	r4, r4, sl
 8000ca0:	454c      	cmp	r4, r9
 8000ca2:	4641      	mov	r1, r8
 8000ca4:	46ce      	mov	lr, r9
 8000ca6:	d354      	bcc.n	8000d52 <__udivmoddi4+0x29a>
 8000ca8:	d051      	beq.n	8000d4e <__udivmoddi4+0x296>
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d069      	beq.n	8000d82 <__udivmoddi4+0x2ca>
 8000cae:	1a5a      	subs	r2, r3, r1
 8000cb0:	eb64 040e 	sbc.w	r4, r4, lr
 8000cb4:	fa04 f505 	lsl.w	r5, r4, r5
 8000cb8:	fa22 f307 	lsr.w	r3, r2, r7
 8000cbc:	40fc      	lsrs	r4, r7
 8000cbe:	431d      	orrs	r5, r3
 8000cc0:	e9c6 5400 	strd	r5, r4, [r6]
 8000cc4:	2700      	movs	r7, #0
 8000cc6:	e747      	b.n	8000b58 <__udivmoddi4+0xa0>
 8000cc8:	4095      	lsls	r5, r2
 8000cca:	f1c2 0320 	rsb	r3, r2, #32
 8000cce:	fa21 f003 	lsr.w	r0, r1, r3
 8000cd2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000cd6:	fbb0 f7f8 	udiv	r7, r0, r8
 8000cda:	fa1f f985 	uxth.w	r9, r5
 8000cde:	fb08 0017 	mls	r0, r8, r7, r0
 8000ce2:	fa24 f303 	lsr.w	r3, r4, r3
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fb07 fc09 	mul.w	ip, r7, r9
 8000cec:	430b      	orrs	r3, r1
 8000cee:	0c19      	lsrs	r1, r3, #16
 8000cf0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cf4:	458c      	cmp	ip, r1
 8000cf6:	fa04 f402 	lsl.w	r4, r4, r2
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x254>
 8000cfc:	1869      	adds	r1, r5, r1
 8000cfe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d02:	d231      	bcs.n	8000d68 <__udivmoddi4+0x2b0>
 8000d04:	458c      	cmp	ip, r1
 8000d06:	d92f      	bls.n	8000d68 <__udivmoddi4+0x2b0>
 8000d08:	3f02      	subs	r7, #2
 8000d0a:	4429      	add	r1, r5
 8000d0c:	eba1 010c 	sub.w	r1, r1, ip
 8000d10:	fbb1 f0f8 	udiv	r0, r1, r8
 8000d14:	fb08 1c10 	mls	ip, r8, r0, r1
 8000d18:	fb00 fe09 	mul.w	lr, r0, r9
 8000d1c:	b299      	uxth	r1, r3
 8000d1e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d22:	458e      	cmp	lr, r1
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x27e>
 8000d26:	1869      	adds	r1, r5, r1
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2c:	d218      	bcs.n	8000d60 <__udivmoddi4+0x2a8>
 8000d2e:	458e      	cmp	lr, r1
 8000d30:	d916      	bls.n	8000d60 <__udivmoddi4+0x2a8>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4429      	add	r1, r5
 8000d36:	eba1 010e 	sub.w	r1, r1, lr
 8000d3a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d3e:	e73a      	b.n	8000bb6 <__udivmoddi4+0xfe>
 8000d40:	4637      	mov	r7, r6
 8000d42:	4630      	mov	r0, r6
 8000d44:	e708      	b.n	8000b58 <__udivmoddi4+0xa0>
 8000d46:	460f      	mov	r7, r1
 8000d48:	e6e6      	b.n	8000b18 <__udivmoddi4+0x60>
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	e6fb      	b.n	8000b46 <__udivmoddi4+0x8e>
 8000d4e:	4543      	cmp	r3, r8
 8000d50:	d2ab      	bcs.n	8000caa <__udivmoddi4+0x1f2>
 8000d52:	ebb8 0102 	subs.w	r1, r8, r2
 8000d56:	eb69 020c 	sbc.w	r2, r9, ip
 8000d5a:	3801      	subs	r0, #1
 8000d5c:	4696      	mov	lr, r2
 8000d5e:	e7a4      	b.n	8000caa <__udivmoddi4+0x1f2>
 8000d60:	4618      	mov	r0, r3
 8000d62:	e7e8      	b.n	8000d36 <__udivmoddi4+0x27e>
 8000d64:	4608      	mov	r0, r1
 8000d66:	e795      	b.n	8000c94 <__udivmoddi4+0x1dc>
 8000d68:	4607      	mov	r7, r0
 8000d6a:	e7cf      	b.n	8000d0c <__udivmoddi4+0x254>
 8000d6c:	4681      	mov	r9, r0
 8000d6e:	e77b      	b.n	8000c68 <__udivmoddi4+0x1b0>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	e747      	b.n	8000c06 <__udivmoddi4+0x14e>
 8000d76:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7a:	442b      	add	r3, r5
 8000d7c:	e72f      	b.n	8000bde <__udivmoddi4+0x126>
 8000d7e:	4638      	mov	r0, r7
 8000d80:	e707      	b.n	8000b92 <__udivmoddi4+0xda>
 8000d82:	4637      	mov	r7, r6
 8000d84:	e6e8      	b.n	8000b58 <__udivmoddi4+0xa0>
 8000d86:	bf00      	nop

08000d88 <__aeabi_idiv0>:
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop

08000d8c <isCompleteLine>:
 */

#include "CLI.h"

bool isCompleteLine(char recBuffer[10])
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
	//if enter was hit, then it is a complete line, else it isnt
	if(recBuffer[0] == '\r')
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b0d      	cmp	r3, #13
 8000d9a:	d101      	bne.n	8000da0 <isCompleteLine+0x14>
	{
		return true;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	e000      	b.n	8000da2 <isCompleteLine+0x16>
	}
	else
	{
		return false;
 8000da0:	2300      	movs	r3, #0
	}
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr

08000dac <copyCharTo>:

void copyCharTo(char recBuffer[10], char s[20], int coun)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]

		  if(recBuffer[0] == '\b')
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b08      	cmp	r3, #8
 8000dbe:	d103      	bne.n	8000dc8 <copyCharTo+0x1c>
		  {
			  printString("\b \b");
 8000dc0:	4808      	ldr	r0, [pc, #32]	; (8000de4 <copyCharTo+0x38>)
 8000dc2:	f000 f935 	bl	8001030 <printString>
		  {
			  s[coun] = recBuffer[0];
			  printString(recBuffer);

		  }
}
 8000dc6:	e008      	b.n	8000dda <copyCharTo+0x2e>
			  s[coun] = recBuffer[0];
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	68ba      	ldr	r2, [r7, #8]
 8000dcc:	4413      	add	r3, r2
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	7812      	ldrb	r2, [r2, #0]
 8000dd2:	701a      	strb	r2, [r3, #0]
			  printString(recBuffer);
 8000dd4:	68f8      	ldr	r0, [r7, #12]
 8000dd6:	f000 f92b 	bl	8001030 <printString>
}
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	08005f90 	.word	0x08005f90

08000de8 <executeCommand>:

void executeCommand(char recBuffer[20])
{
 8000de8:	b5b0      	push	{r4, r5, r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	  if(recBuffer[0] == 'h' && recBuffer[1] == 'e' && recBuffer[2] == 'l' && recBuffer[3] == 'p' && recBuffer[4] == '\r')
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b68      	cmp	r3, #104	; 0x68
 8000df6:	d123      	bne.n	8000e40 <executeCommand+0x58>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b65      	cmp	r3, #101	; 0x65
 8000e00:	d11e      	bne.n	8000e40 <executeCommand+0x58>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	3302      	adds	r3, #2
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b6c      	cmp	r3, #108	; 0x6c
 8000e0a:	d119      	bne.n	8000e40 <executeCommand+0x58>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3303      	adds	r3, #3
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b70      	cmp	r3, #112	; 0x70
 8000e14:	d114      	bne.n	8000e40 <executeCommand+0x58>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	3304      	adds	r3, #4
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b0d      	cmp	r3, #13
 8000e1e:	d10f      	bne.n	8000e40 <executeCommand+0x58>
	  {
		  printString("\n1. \"ledon\" turns the green LED on\r\n");
 8000e20:	4877      	ldr	r0, [pc, #476]	; (8001000 <executeCommand+0x218>)
 8000e22:	f000 f905 	bl	8001030 <printString>
		  printString("\n2. \"ledoff\" turns the green LED off\r\n");
 8000e26:	4877      	ldr	r0, [pc, #476]	; (8001004 <executeCommand+0x21c>)
 8000e28:	f000 f902 	bl	8001030 <printString>
		  printString("\n3. \"ledquery\" returns the state of the green LED\r\n");
 8000e2c:	4876      	ldr	r0, [pc, #472]	; (8001008 <executeCommand+0x220>)
 8000e2e:	f000 f8ff 	bl	8001030 <printString>
		  printString("\n3. \"timetest\" shows the average time taken to perform general operations");
 8000e32:	4876      	ldr	r0, [pc, #472]	; (800100c <executeCommand+0x224>)
 8000e34:	f000 f8fc 	bl	8001030 <printString>
		  printString("\r\n");
 8000e38:	4875      	ldr	r0, [pc, #468]	; (8001010 <executeCommand+0x228>)
 8000e3a:	f000 f8f9 	bl	8001030 <printString>
 8000e3e:	e0da      	b.n	8000ff6 <executeCommand+0x20e>

	  }
	  else if(recBuffer[0] == 'l' && recBuffer[1] == 'e' && recBuffer[2] == 'd' && recBuffer[3] == 'o' && recBuffer[4] == 'n' && recBuffer[5] == '\r')
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b6c      	cmp	r3, #108	; 0x6c
 8000e46:	d121      	bne.n	8000e8c <executeCommand+0xa4>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	2b65      	cmp	r3, #101	; 0x65
 8000e50:	d11c      	bne.n	8000e8c <executeCommand+0xa4>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	3302      	adds	r3, #2
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b64      	cmp	r3, #100	; 0x64
 8000e5a:	d117      	bne.n	8000e8c <executeCommand+0xa4>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3303      	adds	r3, #3
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b6f      	cmp	r3, #111	; 0x6f
 8000e64:	d112      	bne.n	8000e8c <executeCommand+0xa4>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	3304      	adds	r3, #4
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b6e      	cmp	r3, #110	; 0x6e
 8000e6e:	d10d      	bne.n	8000e8c <executeCommand+0xa4>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3305      	adds	r3, #5
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b0d      	cmp	r3, #13
 8000e78:	d108      	bne.n	8000e8c <executeCommand+0xa4>
	  {
		  printString("\nDone!\r\n");
 8000e7a:	4866      	ldr	r0, [pc, #408]	; (8001014 <executeCommand+0x22c>)
 8000e7c:	f000 f8d8 	bl	8001030 <printString>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000e80:	2201      	movs	r2, #1
 8000e82:	2120      	movs	r1, #32
 8000e84:	4864      	ldr	r0, [pc, #400]	; (8001018 <executeCommand+0x230>)
 8000e86:	f001 fc9e 	bl	80027c6 <HAL_GPIO_WritePin>
 8000e8a:	e0b4      	b.n	8000ff6 <executeCommand+0x20e>
	  }
	  else if(recBuffer[0] == 'l' && recBuffer[1] == 'e' && recBuffer[2] == 'd' && recBuffer[3] == 'o' && recBuffer[4] == 'f' && recBuffer[5] == 'f' && recBuffer[6] == '\r')
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b6c      	cmp	r3, #108	; 0x6c
 8000e92:	d126      	bne.n	8000ee2 <executeCommand+0xfa>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3301      	adds	r3, #1
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b65      	cmp	r3, #101	; 0x65
 8000e9c:	d121      	bne.n	8000ee2 <executeCommand+0xfa>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	3302      	adds	r3, #2
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b64      	cmp	r3, #100	; 0x64
 8000ea6:	d11c      	bne.n	8000ee2 <executeCommand+0xfa>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3303      	adds	r3, #3
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	2b6f      	cmp	r3, #111	; 0x6f
 8000eb0:	d117      	bne.n	8000ee2 <executeCommand+0xfa>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b66      	cmp	r3, #102	; 0x66
 8000eba:	d112      	bne.n	8000ee2 <executeCommand+0xfa>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3305      	adds	r3, #5
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2b66      	cmp	r3, #102	; 0x66
 8000ec4:	d10d      	bne.n	8000ee2 <executeCommand+0xfa>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	3306      	adds	r3, #6
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b0d      	cmp	r3, #13
 8000ece:	d108      	bne.n	8000ee2 <executeCommand+0xfa>
	  {
		  printString("\nDone!\r\n");
 8000ed0:	4850      	ldr	r0, [pc, #320]	; (8001014 <executeCommand+0x22c>)
 8000ed2:	f000 f8ad 	bl	8001030 <printString>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2120      	movs	r1, #32
 8000eda:	484f      	ldr	r0, [pc, #316]	; (8001018 <executeCommand+0x230>)
 8000edc:	f001 fc73 	bl	80027c6 <HAL_GPIO_WritePin>
 8000ee0:	e089      	b.n	8000ff6 <executeCommand+0x20e>
	  }
	  else if(recBuffer[0] == 'l' && recBuffer[1] == 'e' && recBuffer[2] == 'd' && recBuffer[3] == 'q' && recBuffer[4] == 'u' && recBuffer[5] == 'e' && recBuffer[6] == 'r' && recBuffer[7] == 'y' && recBuffer[8] == '\r')
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b6c      	cmp	r3, #108	; 0x6c
 8000ee8:	d136      	bne.n	8000f58 <executeCommand+0x170>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	3301      	adds	r3, #1
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b65      	cmp	r3, #101	; 0x65
 8000ef2:	d131      	bne.n	8000f58 <executeCommand+0x170>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b64      	cmp	r3, #100	; 0x64
 8000efc:	d12c      	bne.n	8000f58 <executeCommand+0x170>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	3303      	adds	r3, #3
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b71      	cmp	r3, #113	; 0x71
 8000f06:	d127      	bne.n	8000f58 <executeCommand+0x170>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3304      	adds	r3, #4
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b75      	cmp	r3, #117	; 0x75
 8000f10:	d122      	bne.n	8000f58 <executeCommand+0x170>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	3305      	adds	r3, #5
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	2b65      	cmp	r3, #101	; 0x65
 8000f1a:	d11d      	bne.n	8000f58 <executeCommand+0x170>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3306      	adds	r3, #6
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b72      	cmp	r3, #114	; 0x72
 8000f24:	d118      	bne.n	8000f58 <executeCommand+0x170>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3307      	adds	r3, #7
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b79      	cmp	r3, #121	; 0x79
 8000f2e:	d113      	bne.n	8000f58 <executeCommand+0x170>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3308      	adds	r3, #8
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	2b0d      	cmp	r3, #13
 8000f38:	d10e      	bne.n	8000f58 <executeCommand+0x170>
	  {
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0x1)
 8000f3a:	2120      	movs	r1, #32
 8000f3c:	4836      	ldr	r0, [pc, #216]	; (8001018 <executeCommand+0x230>)
 8000f3e:	f001 fc2b 	bl	8002798 <HAL_GPIO_ReadPin>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d103      	bne.n	8000f50 <executeCommand+0x168>
		  {
			  printString("\nThe LED is on!\r\n");
 8000f48:	4834      	ldr	r0, [pc, #208]	; (800101c <executeCommand+0x234>)
 8000f4a:	f000 f871 	bl	8001030 <printString>
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0x1)
 8000f4e:	e052      	b.n	8000ff6 <executeCommand+0x20e>
		  }
		  else
		  {
			  printString("\nThe LED is off!\r\n");
 8000f50:	4833      	ldr	r0, [pc, #204]	; (8001020 <executeCommand+0x238>)
 8000f52:	f000 f86d 	bl	8001030 <printString>
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0x1)
 8000f56:	e04e      	b.n	8000ff6 <executeCommand+0x20e>
		  }

	  }
	  else if(recBuffer[0] == 't' && recBuffer[1] == 'i' && recBuffer[2] == 'm' && recBuffer[3] == 'e' && recBuffer[4] == 't' && recBuffer[5] == 'e' && recBuffer[6] == 's' && recBuffer[7] == 't' && recBuffer[8] == '\r')
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b74      	cmp	r3, #116	; 0x74
 8000f5e:	d12d      	bne.n	8000fbc <executeCommand+0x1d4>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3301      	adds	r3, #1
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b69      	cmp	r3, #105	; 0x69
 8000f68:	d128      	bne.n	8000fbc <executeCommand+0x1d4>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3302      	adds	r3, #2
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b6d      	cmp	r3, #109	; 0x6d
 8000f72:	d123      	bne.n	8000fbc <executeCommand+0x1d4>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3303      	adds	r3, #3
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b65      	cmp	r3, #101	; 0x65
 8000f7c:	d11e      	bne.n	8000fbc <executeCommand+0x1d4>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3304      	adds	r3, #4
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b74      	cmp	r3, #116	; 0x74
 8000f86:	d119      	bne.n	8000fbc <executeCommand+0x1d4>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3305      	adds	r3, #5
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b65      	cmp	r3, #101	; 0x65
 8000f90:	d114      	bne.n	8000fbc <executeCommand+0x1d4>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3306      	adds	r3, #6
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b73      	cmp	r3, #115	; 0x73
 8000f9a:	d10f      	bne.n	8000fbc <executeCommand+0x1d4>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3307      	adds	r3, #7
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b74      	cmp	r3, #116	; 0x74
 8000fa4:	d10a      	bne.n	8000fbc <executeCommand+0x1d4>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3308      	adds	r3, #8
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b0d      	cmp	r3, #13
 8000fae:	d105      	bne.n	8000fbc <executeCommand+0x1d4>
	  {
		  printString("\nTesting average operation time!\r\n");
 8000fb0:	481c      	ldr	r0, [pc, #112]	; (8001024 <executeCommand+0x23c>)
 8000fb2:	f000 f83d 	bl	8001030 <printString>
		  runTime();
 8000fb6:	f000 f95b 	bl	8001270 <runTime>
	  {
 8000fba:	e01c      	b.n	8000ff6 <executeCommand+0x20e>

	  }
	  else if(recBuffer[0] == '\r')
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b0d      	cmp	r3, #13
 8000fc2:	d018      	beq.n	8000ff6 <executeCommand+0x20e>
	  {

	  }
	  else
	  {
		  strcpy((char *)recBuffer, "\nError. Try again.\r\n");
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a18      	ldr	r2, [pc, #96]	; (8001028 <executeCommand+0x240>)
 8000fc8:	461d      	mov	r5, r3
 8000fca:	4614      	mov	r4, r2
 8000fcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fce:	6028      	str	r0, [r5, #0]
 8000fd0:	6069      	str	r1, [r5, #4]
 8000fd2:	60aa      	str	r2, [r5, #8]
 8000fd4:	60eb      	str	r3, [r5, #12]
 8000fd6:	6820      	ldr	r0, [r4, #0]
 8000fd8:	6128      	str	r0, [r5, #16]
 8000fda:	7923      	ldrb	r3, [r4, #4]
 8000fdc:	752b      	strb	r3, [r5, #20]
		  HAL_UART_Transmit(&huart3, recBuffer, strlen((char *)recBuffer), 1000);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff f8b6 	bl	8000150 <strlen>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fec:	6879      	ldr	r1, [r7, #4]
 8000fee:	480f      	ldr	r0, [pc, #60]	; (800102c <executeCommand+0x244>)
 8000ff0:	f002 fb13 	bl	800361a <HAL_UART_Transmit>
	  }
}
 8000ff4:	e7ff      	b.n	8000ff6 <executeCommand+0x20e>
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bdb0      	pop	{r4, r5, r7, pc}
 8000ffe:	bf00      	nop
 8001000:	08005f94 	.word	0x08005f94
 8001004:	08005fbc 	.word	0x08005fbc
 8001008:	08005fe4 	.word	0x08005fe4
 800100c:	08006018 	.word	0x08006018
 8001010:	08006064 	.word	0x08006064
 8001014:	08006068 	.word	0x08006068
 8001018:	40010800 	.word	0x40010800
 800101c:	08006074 	.word	0x08006074
 8001020:	08006088 	.word	0x08006088
 8001024:	0800609c 	.word	0x0800609c
 8001028:	080060c0 	.word	0x080060c0
 800102c:	200002d8 	.word	0x200002d8

08001030 <printString>:
	strcat(msg, "H");
	return msg;
}

void printString(const char* mess)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	int i = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
	HAL_StatusTypeDef  st;

	while(huart3.gState == HAL_UART_STATE_BUSY_TX){}
 800103c:	bf00      	nop
 800103e:	4b16      	ldr	r3, [pc, #88]	; (8001098 <printString+0x68>)
 8001040:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b21      	cmp	r3, #33	; 0x21
 8001048:	d0f9      	beq.n	800103e <printString+0xe>

	for(const char* p = mess; *p; ++p)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	e00c      	b.n	800106a <printString+0x3a>
	{
		cliBufferTX[i] = *p;
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	7819      	ldrb	r1, [r3, #0]
 8001054:	4a11      	ldr	r2, [pc, #68]	; (800109c <printString+0x6c>)
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	4413      	add	r3, r2
 800105a:	460a      	mov	r2, r1
 800105c:	701a      	strb	r2, [r3, #0]
		i++;
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	3301      	adds	r3, #1
 8001062:	617b      	str	r3, [r7, #20]
	for(const char* p = mess; *p; ++p)
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	3301      	adds	r3, #1
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1ee      	bne.n	8001050 <printString+0x20>
	}

	st = HAL_UART_Transmit(&huart3, cliBufferTX, i, 1000);
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	b29a      	uxth	r2, r3
 8001076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107a:	4908      	ldr	r1, [pc, #32]	; (800109c <printString+0x6c>)
 800107c:	4806      	ldr	r0, [pc, #24]	; (8001098 <printString+0x68>)
 800107e:	f002 facc 	bl	800361a <HAL_UART_Transmit>
 8001082:	4603      	mov	r3, r0
 8001084:	73fb      	strb	r3, [r7, #15]
	if(st != HAL_OK)
 8001086:	7bfb      	ldrb	r3, [r7, #15]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <printString+0x60>
	{
		Error_Handler();
 800108c:	f000 feb4 	bl	8001df8 <Error_Handler>
	}

}
 8001090:	bf00      	nop
 8001092:	3718      	adds	r7, #24
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	200002d8 	.word	0x200002d8
 800109c:	20000318 	.word	0x20000318

080010a0 <rand32>:
	volatile double timStrc128 = 0;
	volatile double timStrc1024 = 0;


uint32_t rand32()
{
 80010a0:	b598      	push	{r3, r4, r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	return (rand() | (rand() << 15) | ((rand() & 0x6000) << 17));
 80010a4:	f003 fb52 	bl	800474c <rand>
 80010a8:	4604      	mov	r4, r0
 80010aa:	f003 fb4f 	bl	800474c <rand>
 80010ae:	4603      	mov	r3, r0
 80010b0:	03db      	lsls	r3, r3, #15
 80010b2:	431c      	orrs	r4, r3
 80010b4:	f003 fb4a 	bl	800474c <rand>
 80010b8:	4603      	mov	r3, r0
 80010ba:	045b      	lsls	r3, r3, #17
 80010bc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80010c0:	4323      	orrs	r3, r4
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	bd98      	pop	{r3, r4, r7, pc}

080010c6 <rand64>:

uint64_t rand64()
{
 80010c6:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
	uint64_t x;
	x = rand();
 80010ce:	f003 fb3d 	bl	800474c <rand>
 80010d2:	4603      	mov	r3, r0
 80010d4:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80010d8:	e9c7 3400 	strd	r3, r4, [r7]
	x |= (rand() << 15);
 80010dc:	f003 fb36 	bl	800474c <rand>
 80010e0:	4603      	mov	r3, r0
 80010e2:	03db      	lsls	r3, r3, #15
 80010e4:	469b      	mov	fp, r3
 80010e6:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 80010ea:	e9d7 1200 	ldrd	r1, r2, [r7]
 80010ee:	ea4b 0301 	orr.w	r3, fp, r1
 80010f2:	ea4c 0402 	orr.w	r4, ip, r2
 80010f6:	e9c7 3400 	strd	r3, r4, [r7]
	x |= (rand() << 30);
 80010fa:	f003 fb27 	bl	800474c <rand>
 80010fe:	4603      	mov	r3, r0
 8001100:	079b      	lsls	r3, r3, #30
 8001102:	469b      	mov	fp, r3
 8001104:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8001108:	e9d7 1200 	ldrd	r1, r2, [r7]
 800110c:	ea4b 0301 	orr.w	r3, fp, r1
 8001110:	ea4c 0402 	orr.w	r4, ip, r2
 8001114:	e9c7 3400 	strd	r3, r4, [r7]
	x |= (rand() << 45);
 8001118:	f003 fb18 	bl	800474c <rand>
 800111c:	4602      	mov	r2, r0
 800111e:	232d      	movs	r3, #45	; 0x2d
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	469b      	mov	fp, r3
 8001126:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 800112a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800112e:	ea4b 0301 	orr.w	r3, fp, r1
 8001132:	ea4c 0402 	orr.w	r4, ip, r2
 8001136:	e9c7 3400 	strd	r3, r4, [r7]
	x |= ((rand() & 0xF000) << 49);
 800113a:	f003 fb07 	bl	800474c <rand>
 800113e:	2300      	movs	r3, #0
 8001140:	469b      	mov	fp, r3
 8001142:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8001146:	e9d7 1200 	ldrd	r1, r2, [r7]
 800114a:	ea4b 0301 	orr.w	r3, fp, r1
 800114e:	ea4c 0402 	orr.w	r4, ip, r2
 8001152:	e9c7 3400 	strd	r3, r4, [r7]
	return x;
 8001156:	e9d7 3400 	ldrd	r3, r4, [r7]
	//return (rand() | (rand() << 15) | (rand() << 30) | (rand() << 45) | ((rand() & 0xF000) << 49));
}
 800115a:	4618      	mov	r0, r3
 800115c:	4621      	mov	r1, r4
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08001166 <add32>:

uint32_t add32(uint32_t op1, uint32_t op2)
{
 8001166:	b480      	push	{r7}
 8001168:	b083      	sub	sp, #12
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
 800116e:	6039      	str	r1, [r7, #0]
	return op1 + op2;
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	4413      	add	r3, r2
}
 8001176:	4618      	mov	r0, r3
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr

08001180 <add64>:

uint64_t add64(uint64_t op1, uint64_t op2)
{
 8001180:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8001184:	b085      	sub	sp, #20
 8001186:	af00      	add	r7, sp, #0
 8001188:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800118c:	e9c7 2300 	strd	r2, r3, [r7]
	return op1 + op2;
 8001190:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001194:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001198:	eb13 0b01 	adds.w	fp, r3, r1
 800119c:	eb44 0c02 	adc.w	ip, r4, r2
 80011a0:	465b      	mov	r3, fp
 80011a2:	4664      	mov	r4, ip
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	4621      	mov	r1, r4
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 80011b0:	4770      	bx	lr

080011b2 <mult32>:

uint64_t mult32(uint32_t op1, uint32_t op2)
{
 80011b2:	b490      	push	{r4, r7}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
 80011ba:	6039      	str	r1, [r7, #0]
	return op1 * op2;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	683a      	ldr	r2, [r7, #0]
 80011c0:	fb02 f303 	mul.w	r3, r2, r3
 80011c4:	f04f 0400 	mov.w	r4, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	4621      	mov	r1, r4
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc90      	pop	{r4, r7}
 80011d2:	4770      	bx	lr

080011d4 <mult64>:

uint64_t mult64(uint64_t op1, uint64_t op2)
{
 80011d4:	b490      	push	{r4, r7}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80011de:	e9c7 2300 	strd	r2, r3, [r7]
	return op1 * op2;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	fb02 f203 	mul.w	r2, r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	68b9      	ldr	r1, [r7, #8]
 80011ee:	fb01 f303 	mul.w	r3, r1, r3
 80011f2:	441a      	add	r2, r3
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	fba1 3403 	umull	r3, r4, r1, r3
 80011fc:	4422      	add	r2, r4
 80011fe:	4614      	mov	r4, r2
}
 8001200:	4618      	mov	r0, r3
 8001202:	4621      	mov	r1, r4
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bc90      	pop	{r4, r7}
 800120a:	4770      	bx	lr

0800120c <div32>:

uint32_t div32(uint32_t op1, uint32_t op2)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
	if(op2 == 0)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d102      	bne.n	8001222 <div32+0x16>
	{
		return 0xFFFFFFFF;
 800121c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001220:	e003      	b.n	800122a <div32+0x1e>
	}
	return op1 / op2;
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800122a:	4618      	mov	r0, r3
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr

08001234 <div64>:

uint64_t div64(uint64_t op1, uint64_t op2)
{
 8001234:	b590      	push	{r4, r7, lr}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800123e:	e9c7 2300 	strd	r2, r3, [r7]
	if(op2 == 0)
 8001242:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001246:	4323      	orrs	r3, r4
 8001248:	d104      	bne.n	8001254 <div64+0x20>
	{
		return 0xFFFFFFFFFFFFFFFF;
 800124a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800124e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001252:	e007      	b.n	8001264 <div64+0x30>
	}
	return op1 / op2;
 8001254:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001258:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800125c:	f7ff fc14 	bl	8000a88 <__aeabi_uldivmod>
 8001260:	4603      	mov	r3, r0
 8001262:	460c      	mov	r4, r1
}
 8001264:	4618      	mov	r0, r3
 8001266:	4621      	mov	r1, r4
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	bd90      	pop	{r4, r7, pc}
	...

08001270 <runTime>:

void runTime()
{
 8001270:	b590      	push	{r4, r7, lr}
 8001272:	f6ad 1d8c 	subw	sp, sp, #2444	; 0x98c
 8001276:	af00      	add	r7, sp, #0
	int num = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	f8c7 3984 	str.w	r3, [r7, #2436]	; 0x984

	volatile struct strc8 src8, dst8;
	volatile struct strc128 src128, dst128;
	volatile struct strc1024 src1024, dst1024;

	for(int k = 0; k < 2; k++)
 800127e:	2300      	movs	r3, #0
 8001280:	f8c7 3980 	str.w	r3, [r7, #2432]	; 0x980
 8001284:	e00d      	b.n	80012a2 <runTime+0x32>
	{
		dst8.dat[k] = 0;
 8001286:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	f607 1288 	addw	r2, r7, #2440	; 0x988
 8001290:	4413      	add	r3, r2
 8001292:	2200      	movs	r2, #0
 8001294:	f843 2c4c 	str.w	r2, [r3, #-76]
	for(int k = 0; k < 2; k++)
 8001298:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 800129c:	3301      	adds	r3, #1
 800129e:	f8c7 3980 	str.w	r3, [r7, #2432]	; 0x980
 80012a2:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	dded      	ble.n	8001286 <runTime+0x16>
	}
	for(int k = 0; k < 32; k++)
 80012aa:	2300      	movs	r3, #0
 80012ac:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
 80012b0:	e00b      	b.n	80012ca <runTime+0x5a>
	{
		dst128.dat[k] = 0;
 80012b2:	f607 033c 	addw	r3, r7, #2108	; 0x83c
 80012b6:	f8d7 297c 	ldr.w	r2, [r7, #2428]	; 0x97c
 80012ba:	2100      	movs	r1, #0
 80012bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int k = 0; k < 32; k++)
 80012c0:	f8d7 397c 	ldr.w	r3, [r7, #2428]	; 0x97c
 80012c4:	3301      	adds	r3, #1
 80012c6:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
 80012ca:	f8d7 397c 	ldr.w	r3, [r7, #2428]	; 0x97c
 80012ce:	2b1f      	cmp	r3, #31
 80012d0:	ddef      	ble.n	80012b2 <runTime+0x42>
	}
	for(int k = 0; k < 256; k++)
 80012d2:	2300      	movs	r3, #0
 80012d4:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
 80012d8:	e00b      	b.n	80012f2 <runTime+0x82>
	{
		dst1024.dat[k] = 0;
 80012da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012de:	f8d7 2978 	ldr.w	r2, [r7, #2424]	; 0x978
 80012e2:	2100      	movs	r1, #0
 80012e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int k = 0; k < 256; k++)
 80012e8:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 80012ec:	3301      	adds	r3, #1
 80012ee:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
 80012f2:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 80012f6:	2bff      	cmp	r3, #255	; 0xff
 80012f8:	ddef      	ble.n	80012da <runTime+0x6a>
	}

	timA32 = 0;
 80012fa:	4a47      	ldr	r2, [pc, #284]	; (8001418 <runTime+0x1a8>)
 80012fc:	f04f 0300 	mov.w	r3, #0
 8001300:	f04f 0400 	mov.w	r4, #0
 8001304:	e9c2 3400 	strd	r3, r4, [r2]
	timA64 = 0;
 8001308:	4a44      	ldr	r2, [pc, #272]	; (800141c <runTime+0x1ac>)
 800130a:	f04f 0300 	mov.w	r3, #0
 800130e:	f04f 0400 	mov.w	r4, #0
 8001312:	e9c2 3400 	strd	r3, r4, [r2]
	timM32 = 0;
 8001316:	4a42      	ldr	r2, [pc, #264]	; (8001420 <runTime+0x1b0>)
 8001318:	f04f 0300 	mov.w	r3, #0
 800131c:	f04f 0400 	mov.w	r4, #0
 8001320:	e9c2 3400 	strd	r3, r4, [r2]
	timM64 = 0;
 8001324:	4a3f      	ldr	r2, [pc, #252]	; (8001424 <runTime+0x1b4>)
 8001326:	f04f 0300 	mov.w	r3, #0
 800132a:	f04f 0400 	mov.w	r4, #0
 800132e:	e9c2 3400 	strd	r3, r4, [r2]
	timD32 = 0;
 8001332:	4a3d      	ldr	r2, [pc, #244]	; (8001428 <runTime+0x1b8>)
 8001334:	f04f 0300 	mov.w	r3, #0
 8001338:	f04f 0400 	mov.w	r4, #0
 800133c:	e9c2 3400 	strd	r3, r4, [r2]
	timD64 = 0;
 8001340:	4a3a      	ldr	r2, [pc, #232]	; (800142c <runTime+0x1bc>)
 8001342:	f04f 0300 	mov.w	r3, #0
 8001346:	f04f 0400 	mov.w	r4, #0
 800134a:	e9c2 3400 	strd	r3, r4, [r2]
	timStrc8 = 0;
 800134e:	4a38      	ldr	r2, [pc, #224]	; (8001430 <runTime+0x1c0>)
 8001350:	f04f 0300 	mov.w	r3, #0
 8001354:	f04f 0400 	mov.w	r4, #0
 8001358:	e9c2 3400 	strd	r3, r4, [r2]
	timStrc128 = 0;
 800135c:	4a35      	ldr	r2, [pc, #212]	; (8001434 <runTime+0x1c4>)
 800135e:	f04f 0300 	mov.w	r3, #0
 8001362:	f04f 0400 	mov.w	r4, #0
 8001366:	e9c2 3400 	strd	r3, r4, [r2]
	timStrc1024 = 0;
 800136a:	4a33      	ldr	r2, [pc, #204]	; (8001438 <runTime+0x1c8>)
 800136c:	f04f 0300 	mov.w	r3, #0
 8001370:	f04f 0400 	mov.w	r4, #0
 8001374:	e9c2 3400 	strd	r3, r4, [r2]

	uint8_t textTX[56];

	  srand(timer_start());
 8001378:	f000 fe5a 	bl	8002030 <timer_start>
 800137c:	4603      	mov	r3, r0
 800137e:	4618      	mov	r0, r3
 8001380:	f003 f9c0 	bl	8004704 <srand>

	  while (num < 100)
 8001384:	e1b6      	b.n	80016f4 <runTime+0x484>
	  {
		  operand1 = rand32();
 8001386:	f7ff fe8b 	bl	80010a0 <rand32>
 800138a:	f8c7 0968 	str.w	r0, [r7, #2408]	; 0x968
		  operand2 = rand32();
 800138e:	f7ff fe87 	bl	80010a0 <rand32>
 8001392:	f8c7 0964 	str.w	r0, [r7, #2404]	; 0x964
		  operand3 = rand64();
 8001396:	f7ff fe96 	bl	80010c6 <rand64>
 800139a:	f607 1358 	addw	r3, r7, #2392	; 0x958
 800139e:	e9c3 0100 	strd	r0, r1, [r3]
		  operand4 = rand64();
 80013a2:	f7ff fe90 	bl	80010c6 <rand64>
 80013a6:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 80013aa:	e9c3 0100 	strd	r0, r1, [r3]

		  for(int k = 0; k < 2; k++)
 80013ae:	2300      	movs	r3, #0
 80013b0:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
 80013b4:	e00f      	b.n	80013d6 <runTime+0x166>
		  {
			  src8.dat[k] = rand();
 80013b6:	f003 f9c9 	bl	800474c <rand>
 80013ba:	4602      	mov	r2, r0
 80013bc:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	f607 1188 	addw	r1, r7, #2440	; 0x988
 80013c6:	440b      	add	r3, r1
 80013c8:	f843 2c44 	str.w	r2, [r3, #-68]
		  for(int k = 0; k < 2; k++)
 80013cc:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 80013d0:	3301      	adds	r3, #1
 80013d2:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
 80013d6:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 80013da:	2b01      	cmp	r3, #1
 80013dc:	ddeb      	ble.n	80013b6 <runTime+0x146>
		  }
		  for(int k = 0; k < 32; k++)
 80013de:	2300      	movs	r3, #0
 80013e0:	f8c7 3970 	str.w	r3, [r7, #2416]	; 0x970
 80013e4:	e00f      	b.n	8001406 <runTime+0x196>
		  {
			  src128.dat[k] = rand();
 80013e6:	f003 f9b1 	bl	800474c <rand>
 80013ea:	4602      	mov	r2, r0
 80013ec:	f8d7 3970 	ldr.w	r3, [r7, #2416]	; 0x970
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	f607 1188 	addw	r1, r7, #2440	; 0x988
 80013f6:	440b      	add	r3, r1
 80013f8:	f843 2ccc 	str.w	r2, [r3, #-204]
		  for(int k = 0; k < 32; k++)
 80013fc:	f8d7 3970 	ldr.w	r3, [r7, #2416]	; 0x970
 8001400:	3301      	adds	r3, #1
 8001402:	f8c7 3970 	str.w	r3, [r7, #2416]	; 0x970
 8001406:	f8d7 3970 	ldr.w	r3, [r7, #2416]	; 0x970
 800140a:	2b1f      	cmp	r3, #31
 800140c:	ddeb      	ble.n	80013e6 <runTime+0x176>
		  }
		  for(int k = 0; k < 256; k++)
 800140e:	2300      	movs	r3, #0
 8001410:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 8001414:	e020      	b.n	8001458 <runTime+0x1e8>
 8001416:	bf00      	nop
 8001418:	20000220 	.word	0x20000220
 800141c:	20000228 	.word	0x20000228
 8001420:	20000230 	.word	0x20000230
 8001424:	20000238 	.word	0x20000238
 8001428:	20000240 	.word	0x20000240
 800142c:	20000248 	.word	0x20000248
 8001430:	20000250 	.word	0x20000250
 8001434:	20000258 	.word	0x20000258
 8001438:	20000260 	.word	0x20000260
		  {
			  src1024.dat[k] = rand();
 800143c:	f003 f986 	bl	800474c <rand>
 8001440:	4601      	mov	r1, r0
 8001442:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001446:	f8d7 296c 	ldr.w	r2, [r7, #2412]	; 0x96c
 800144a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		  for(int k = 0; k < 256; k++)
 800144e:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8001452:	3301      	adds	r3, #1
 8001454:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 8001458:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800145c:	2bff      	cmp	r3, #255	; 0xff
 800145e:	dded      	ble.n	800143c <runTime+0x1cc>
		  }

		  timStart = timer_start();
 8001460:	f000 fde6 	bl	8002030 <timer_start>
 8001464:	4603      	mov	r3, r0
 8001466:	b29b      	uxth	r3, r3
 8001468:	f8a7 394e 	strh.w	r3, [r7, #2382]	; 0x94e
		  add32(operand1, operand2);
 800146c:	f8d7 1964 	ldr.w	r1, [r7, #2404]	; 0x964
 8001470:	f8d7 0968 	ldr.w	r0, [r7, #2408]	; 0x968
 8001474:	f7ff fe77 	bl	8001166 <add32>
		  timA32 += (double)timer_stop(timStart);
 8001478:	f8b7 394e 	ldrh.w	r3, [r7, #2382]	; 0x94e
 800147c:	b29b      	uxth	r3, r3
 800147e:	4618      	mov	r0, r3
 8001480:	f000 fde2 	bl	8002048 <timer_stop>
 8001484:	4603      	mov	r3, r0
 8001486:	4618      	mov	r0, r3
 8001488:	f7fe ffbc 	bl	8000404 <__aeabi_i2d>
 800148c:	4bc6      	ldr	r3, [pc, #792]	; (80017a8 <runTime+0x538>)
 800148e:	cb18      	ldmia	r3, {r3, r4}
 8001490:	461a      	mov	r2, r3
 8001492:	4623      	mov	r3, r4
 8001494:	f7fe fe6a 	bl	800016c <__adddf3>
 8001498:	4603      	mov	r3, r0
 800149a:	460c      	mov	r4, r1
 800149c:	4ac2      	ldr	r2, [pc, #776]	; (80017a8 <runTime+0x538>)
 800149e:	e9c2 3400 	strd	r3, r4, [r2]

		  timStart = timer_start();
 80014a2:	f000 fdc5 	bl	8002030 <timer_start>
 80014a6:	4603      	mov	r3, r0
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	f8a7 394e 	strh.w	r3, [r7, #2382]	; 0x94e
		  add64(operand3, operand4);
 80014ae:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 80014b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b6:	f607 1158 	addw	r1, r7, #2392	; 0x958
 80014ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80014be:	f7ff fe5f 	bl	8001180 <add64>
		  timA64 += (double)timer_stop(timStart);
 80014c2:	f8b7 394e 	ldrh.w	r3, [r7, #2382]	; 0x94e
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 fdbd 	bl	8002048 <timer_stop>
 80014ce:	4603      	mov	r3, r0
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7fe ff97 	bl	8000404 <__aeabi_i2d>
 80014d6:	4bb5      	ldr	r3, [pc, #724]	; (80017ac <runTime+0x53c>)
 80014d8:	cb18      	ldmia	r3, {r3, r4}
 80014da:	461a      	mov	r2, r3
 80014dc:	4623      	mov	r3, r4
 80014de:	f7fe fe45 	bl	800016c <__adddf3>
 80014e2:	4603      	mov	r3, r0
 80014e4:	460c      	mov	r4, r1
 80014e6:	4ab1      	ldr	r2, [pc, #708]	; (80017ac <runTime+0x53c>)
 80014e8:	e9c2 3400 	strd	r3, r4, [r2]

		  timStart = timer_start();
 80014ec:	f000 fda0 	bl	8002030 <timer_start>
 80014f0:	4603      	mov	r3, r0
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	f8a7 394e 	strh.w	r3, [r7, #2382]	; 0x94e
		  mult32(operand1, operand2);
 80014f8:	f8d7 1964 	ldr.w	r1, [r7, #2404]	; 0x964
 80014fc:	f8d7 0968 	ldr.w	r0, [r7, #2408]	; 0x968
 8001500:	f7ff fe57 	bl	80011b2 <mult32>
		  timM32 += (double)timer_stop(timStart);
 8001504:	f8b7 394e 	ldrh.w	r3, [r7, #2382]	; 0x94e
 8001508:	b29b      	uxth	r3, r3
 800150a:	4618      	mov	r0, r3
 800150c:	f000 fd9c 	bl	8002048 <timer_stop>
 8001510:	4603      	mov	r3, r0
 8001512:	4618      	mov	r0, r3
 8001514:	f7fe ff76 	bl	8000404 <__aeabi_i2d>
 8001518:	4ba5      	ldr	r3, [pc, #660]	; (80017b0 <runTime+0x540>)
 800151a:	cb18      	ldmia	r3, {r3, r4}
 800151c:	461a      	mov	r2, r3
 800151e:	4623      	mov	r3, r4
 8001520:	f7fe fe24 	bl	800016c <__adddf3>
 8001524:	4603      	mov	r3, r0
 8001526:	460c      	mov	r4, r1
 8001528:	4aa1      	ldr	r2, [pc, #644]	; (80017b0 <runTime+0x540>)
 800152a:	e9c2 3400 	strd	r3, r4, [r2]

		  timStart = timer_start();
 800152e:	f000 fd7f 	bl	8002030 <timer_start>
 8001532:	4603      	mov	r3, r0
 8001534:	b29b      	uxth	r3, r3
 8001536:	f8a7 394e 	strh.w	r3, [r7, #2382]	; 0x94e
		  mult64(operand1, operand2);
 800153a:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 800153e:	4618      	mov	r0, r3
 8001540:	f04f 0100 	mov.w	r1, #0
 8001544:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8001548:	f04f 0400 	mov.w	r4, #0
 800154c:	461a      	mov	r2, r3
 800154e:	4623      	mov	r3, r4
 8001550:	f7ff fe40 	bl	80011d4 <mult64>
		  timM64 += (double)timer_stop(timStart);
 8001554:	f8b7 394e 	ldrh.w	r3, [r7, #2382]	; 0x94e
 8001558:	b29b      	uxth	r3, r3
 800155a:	4618      	mov	r0, r3
 800155c:	f000 fd74 	bl	8002048 <timer_stop>
 8001560:	4603      	mov	r3, r0
 8001562:	4618      	mov	r0, r3
 8001564:	f7fe ff4e 	bl	8000404 <__aeabi_i2d>
 8001568:	4b92      	ldr	r3, [pc, #584]	; (80017b4 <runTime+0x544>)
 800156a:	cb18      	ldmia	r3, {r3, r4}
 800156c:	461a      	mov	r2, r3
 800156e:	4623      	mov	r3, r4
 8001570:	f7fe fdfc 	bl	800016c <__adddf3>
 8001574:	4603      	mov	r3, r0
 8001576:	460c      	mov	r4, r1
 8001578:	4a8e      	ldr	r2, [pc, #568]	; (80017b4 <runTime+0x544>)
 800157a:	e9c2 3400 	strd	r3, r4, [r2]

		  timStart = timer_start();
 800157e:	f000 fd57 	bl	8002030 <timer_start>
 8001582:	4603      	mov	r3, r0
 8001584:	b29b      	uxth	r3, r3
 8001586:	f8a7 394e 	strh.w	r3, [r7, #2382]	; 0x94e
		  div32(operand1, operand2);
 800158a:	f8d7 1964 	ldr.w	r1, [r7, #2404]	; 0x964
 800158e:	f8d7 0968 	ldr.w	r0, [r7, #2408]	; 0x968
 8001592:	f7ff fe3b 	bl	800120c <div32>
		  timD32 += (double)timer_stop(timStart);
 8001596:	f8b7 394e 	ldrh.w	r3, [r7, #2382]	; 0x94e
 800159a:	b29b      	uxth	r3, r3
 800159c:	4618      	mov	r0, r3
 800159e:	f000 fd53 	bl	8002048 <timer_stop>
 80015a2:	4603      	mov	r3, r0
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe ff2d 	bl	8000404 <__aeabi_i2d>
 80015aa:	4b83      	ldr	r3, [pc, #524]	; (80017b8 <runTime+0x548>)
 80015ac:	cb18      	ldmia	r3, {r3, r4}
 80015ae:	461a      	mov	r2, r3
 80015b0:	4623      	mov	r3, r4
 80015b2:	f7fe fddb 	bl	800016c <__adddf3>
 80015b6:	4603      	mov	r3, r0
 80015b8:	460c      	mov	r4, r1
 80015ba:	4a7f      	ldr	r2, [pc, #508]	; (80017b8 <runTime+0x548>)
 80015bc:	e9c2 3400 	strd	r3, r4, [r2]

		  timStart = timer_start();
 80015c0:	f000 fd36 	bl	8002030 <timer_start>
 80015c4:	4603      	mov	r3, r0
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	f8a7 394e 	strh.w	r3, [r7, #2382]	; 0x94e
		  div64(operand1, operand2);
 80015cc:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 80015d0:	4618      	mov	r0, r3
 80015d2:	f04f 0100 	mov.w	r1, #0
 80015d6:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 80015da:	f04f 0400 	mov.w	r4, #0
 80015de:	461a      	mov	r2, r3
 80015e0:	4623      	mov	r3, r4
 80015e2:	f7ff fe27 	bl	8001234 <div64>
		  timD64 += (double)timer_stop(timStart);
 80015e6:	f8b7 394e 	ldrh.w	r3, [r7, #2382]	; 0x94e
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	4618      	mov	r0, r3
 80015ee:	f000 fd2b 	bl	8002048 <timer_stop>
 80015f2:	4603      	mov	r3, r0
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7fe ff05 	bl	8000404 <__aeabi_i2d>
 80015fa:	4b70      	ldr	r3, [pc, #448]	; (80017bc <runTime+0x54c>)
 80015fc:	cb18      	ldmia	r3, {r3, r4}
 80015fe:	461a      	mov	r2, r3
 8001600:	4623      	mov	r3, r4
 8001602:	f7fe fdb3 	bl	800016c <__adddf3>
 8001606:	4603      	mov	r3, r0
 8001608:	460c      	mov	r4, r1
 800160a:	4a6c      	ldr	r2, [pc, #432]	; (80017bc <runTime+0x54c>)
 800160c:	e9c2 3400 	strd	r3, r4, [r2]

		  timStart = timer_start();
 8001610:	f000 fd0e 	bl	8002030 <timer_start>
 8001614:	4603      	mov	r3, r0
 8001616:	b29b      	uxth	r3, r3
 8001618:	f8a7 394e 	strh.w	r3, [r7, #2382]	; 0x94e
		  dst8 = src8;
 800161c:	f607 133c 	addw	r3, r7, #2364	; 0x93c
 8001620:	f607 1244 	addw	r2, r7, #2372	; 0x944
 8001624:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001628:	e883 0003 	stmia.w	r3, {r0, r1}
		  timStrc8 += (double)timer_stop(timStart);
 800162c:	f8b7 394e 	ldrh.w	r3, [r7, #2382]	; 0x94e
 8001630:	b29b      	uxth	r3, r3
 8001632:	4618      	mov	r0, r3
 8001634:	f000 fd08 	bl	8002048 <timer_stop>
 8001638:	4603      	mov	r3, r0
 800163a:	4618      	mov	r0, r3
 800163c:	f7fe fee2 	bl	8000404 <__aeabi_i2d>
 8001640:	4b5f      	ldr	r3, [pc, #380]	; (80017c0 <runTime+0x550>)
 8001642:	cb18      	ldmia	r3, {r3, r4}
 8001644:	461a      	mov	r2, r3
 8001646:	4623      	mov	r3, r4
 8001648:	f7fe fd90 	bl	800016c <__adddf3>
 800164c:	4603      	mov	r3, r0
 800164e:	460c      	mov	r4, r1
 8001650:	4a5b      	ldr	r2, [pc, #364]	; (80017c0 <runTime+0x550>)
 8001652:	e9c2 3400 	strd	r3, r4, [r2]

		  timStart = timer_start();
 8001656:	f000 fceb 	bl	8002030 <timer_start>
 800165a:	4603      	mov	r3, r0
 800165c:	b29b      	uxth	r3, r3
 800165e:	f8a7 394e 	strh.w	r3, [r7, #2382]	; 0x94e
		  dst128 = src128;
 8001662:	f607 033c 	addw	r3, r7, #2108	; 0x83c
 8001666:	4618      	mov	r0, r3
 8001668:	f607 03bc 	addw	r3, r7, #2236	; 0x8bc
 800166c:	2280      	movs	r2, #128	; 0x80
 800166e:	4619      	mov	r1, r3
 8001670:	f002 fbe6 	bl	8003e40 <memcpy>
		  timStrc128 += (double)timer_stop(timStart);
 8001674:	f8b7 394e 	ldrh.w	r3, [r7, #2382]	; 0x94e
 8001678:	b29b      	uxth	r3, r3
 800167a:	4618      	mov	r0, r3
 800167c:	f000 fce4 	bl	8002048 <timer_stop>
 8001680:	4603      	mov	r3, r0
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe febe 	bl	8000404 <__aeabi_i2d>
 8001688:	4b4e      	ldr	r3, [pc, #312]	; (80017c4 <runTime+0x554>)
 800168a:	cb18      	ldmia	r3, {r3, r4}
 800168c:	461a      	mov	r2, r3
 800168e:	4623      	mov	r3, r4
 8001690:	f7fe fd6c 	bl	800016c <__adddf3>
 8001694:	4603      	mov	r3, r0
 8001696:	460c      	mov	r4, r1
 8001698:	4a4a      	ldr	r2, [pc, #296]	; (80017c4 <runTime+0x554>)
 800169a:	e9c2 3400 	strd	r3, r4, [r2]

		  timStart = timer_start();
 800169e:	f000 fcc7 	bl	8002030 <timer_start>
 80016a2:	4603      	mov	r3, r0
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	f8a7 394e 	strh.w	r3, [r7, #2382]	; 0x94e
		  dst1024 = src1024;
 80016aa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80016ae:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80016b2:	4610      	mov	r0, r2
 80016b4:	4619      	mov	r1, r3
 80016b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016ba:	461a      	mov	r2, r3
 80016bc:	f002 fbc0 	bl	8003e40 <memcpy>
		  timStrc1024 += (double)timer_stop(timStart);
 80016c0:	f8b7 394e 	ldrh.w	r3, [r7, #2382]	; 0x94e
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 fcbe 	bl	8002048 <timer_stop>
 80016cc:	4603      	mov	r3, r0
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7fe fe98 	bl	8000404 <__aeabi_i2d>
 80016d4:	4b3c      	ldr	r3, [pc, #240]	; (80017c8 <runTime+0x558>)
 80016d6:	cb18      	ldmia	r3, {r3, r4}
 80016d8:	461a      	mov	r2, r3
 80016da:	4623      	mov	r3, r4
 80016dc:	f7fe fd46 	bl	800016c <__adddf3>
 80016e0:	4603      	mov	r3, r0
 80016e2:	460c      	mov	r4, r1
 80016e4:	4a38      	ldr	r2, [pc, #224]	; (80017c8 <runTime+0x558>)
 80016e6:	e9c2 3400 	strd	r3, r4, [r2]

		  num++;
 80016ea:	f8d7 3984 	ldr.w	r3, [r7, #2436]	; 0x984
 80016ee:	3301      	adds	r3, #1
 80016f0:	f8c7 3984 	str.w	r3, [r7, #2436]	; 0x984
	  while (num < 100)
 80016f4:	f8d7 3984 	ldr.w	r3, [r7, #2436]	; 0x984
 80016f8:	2b63      	cmp	r3, #99	; 0x63
 80016fa:	f77f ae44 	ble.w	8001386 <runTime+0x116>
	  }

	  timA32 = timA32 / 8000 / 100;					//divide by 8000 to get milliseconds, and divide by 100 to get average trial
 80016fe:	4b2a      	ldr	r3, [pc, #168]	; (80017a8 <runTime+0x538>)
 8001700:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001704:	f04f 0200 	mov.w	r2, #0
 8001708:	4b30      	ldr	r3, [pc, #192]	; (80017cc <runTime+0x55c>)
 800170a:	f7ff f80f 	bl	800072c <__aeabi_ddiv>
 800170e:	4603      	mov	r3, r0
 8001710:	460c      	mov	r4, r1
 8001712:	4618      	mov	r0, r3
 8001714:	4621      	mov	r1, r4
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	4b2d      	ldr	r3, [pc, #180]	; (80017d0 <runTime+0x560>)
 800171c:	f7ff f806 	bl	800072c <__aeabi_ddiv>
 8001720:	4603      	mov	r3, r0
 8001722:	460c      	mov	r4, r1
 8001724:	4a20      	ldr	r2, [pc, #128]	; (80017a8 <runTime+0x538>)
 8001726:	e9c2 3400 	strd	r3, r4, [r2]
	  timA64 = timA64 / 8000 / 100;
 800172a:	4b20      	ldr	r3, [pc, #128]	; (80017ac <runTime+0x53c>)
 800172c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001730:	f04f 0200 	mov.w	r2, #0
 8001734:	4b25      	ldr	r3, [pc, #148]	; (80017cc <runTime+0x55c>)
 8001736:	f7fe fff9 	bl	800072c <__aeabi_ddiv>
 800173a:	4603      	mov	r3, r0
 800173c:	460c      	mov	r4, r1
 800173e:	4618      	mov	r0, r3
 8001740:	4621      	mov	r1, r4
 8001742:	f04f 0200 	mov.w	r2, #0
 8001746:	4b22      	ldr	r3, [pc, #136]	; (80017d0 <runTime+0x560>)
 8001748:	f7fe fff0 	bl	800072c <__aeabi_ddiv>
 800174c:	4603      	mov	r3, r0
 800174e:	460c      	mov	r4, r1
 8001750:	4a16      	ldr	r2, [pc, #88]	; (80017ac <runTime+0x53c>)
 8001752:	e9c2 3400 	strd	r3, r4, [r2]
	  timM32 = timM32 / 8000 / 100;
 8001756:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <runTime+0x540>)
 8001758:	e9d3 0100 	ldrd	r0, r1, [r3]
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	4b1a      	ldr	r3, [pc, #104]	; (80017cc <runTime+0x55c>)
 8001762:	f7fe ffe3 	bl	800072c <__aeabi_ddiv>
 8001766:	4603      	mov	r3, r0
 8001768:	460c      	mov	r4, r1
 800176a:	4618      	mov	r0, r3
 800176c:	4621      	mov	r1, r4
 800176e:	f04f 0200 	mov.w	r2, #0
 8001772:	4b17      	ldr	r3, [pc, #92]	; (80017d0 <runTime+0x560>)
 8001774:	f7fe ffda 	bl	800072c <__aeabi_ddiv>
 8001778:	4603      	mov	r3, r0
 800177a:	460c      	mov	r4, r1
 800177c:	4a0c      	ldr	r2, [pc, #48]	; (80017b0 <runTime+0x540>)
 800177e:	e9c2 3400 	strd	r3, r4, [r2]
	  timM64 = timM64 / 8000 / 100;
 8001782:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <runTime+0x544>)
 8001784:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <runTime+0x55c>)
 800178e:	f7fe ffcd 	bl	800072c <__aeabi_ddiv>
 8001792:	4603      	mov	r3, r0
 8001794:	460c      	mov	r4, r1
 8001796:	4618      	mov	r0, r3
 8001798:	4621      	mov	r1, r4
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <runTime+0x560>)
 80017a0:	f7fe ffc4 	bl	800072c <__aeabi_ddiv>
 80017a4:	e016      	b.n	80017d4 <runTime+0x564>
 80017a6:	bf00      	nop
 80017a8:	20000220 	.word	0x20000220
 80017ac:	20000228 	.word	0x20000228
 80017b0:	20000230 	.word	0x20000230
 80017b4:	20000238 	.word	0x20000238
 80017b8:	20000240 	.word	0x20000240
 80017bc:	20000248 	.word	0x20000248
 80017c0:	20000250 	.word	0x20000250
 80017c4:	20000258 	.word	0x20000258
 80017c8:	20000260 	.word	0x20000260
 80017cc:	40bf4000 	.word	0x40bf4000
 80017d0:	40590000 	.word	0x40590000
 80017d4:	4603      	mov	r3, r0
 80017d6:	460c      	mov	r4, r1
 80017d8:	4a70      	ldr	r2, [pc, #448]	; (800199c <runTime+0x72c>)
 80017da:	e9c2 3400 	strd	r3, r4, [r2]
	  timD32 = timD32 / 8000 / 100;
 80017de:	4b70      	ldr	r3, [pc, #448]	; (80019a0 <runTime+0x730>)
 80017e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	4b6e      	ldr	r3, [pc, #440]	; (80019a4 <runTime+0x734>)
 80017ea:	f7fe ff9f 	bl	800072c <__aeabi_ddiv>
 80017ee:	4603      	mov	r3, r0
 80017f0:	460c      	mov	r4, r1
 80017f2:	4618      	mov	r0, r3
 80017f4:	4621      	mov	r1, r4
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	4b6b      	ldr	r3, [pc, #428]	; (80019a8 <runTime+0x738>)
 80017fc:	f7fe ff96 	bl	800072c <__aeabi_ddiv>
 8001800:	4603      	mov	r3, r0
 8001802:	460c      	mov	r4, r1
 8001804:	4a66      	ldr	r2, [pc, #408]	; (80019a0 <runTime+0x730>)
 8001806:	e9c2 3400 	strd	r3, r4, [r2]
	  timD64 = timD64 / 8000 / 100;
 800180a:	4b68      	ldr	r3, [pc, #416]	; (80019ac <runTime+0x73c>)
 800180c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	4b63      	ldr	r3, [pc, #396]	; (80019a4 <runTime+0x734>)
 8001816:	f7fe ff89 	bl	800072c <__aeabi_ddiv>
 800181a:	4603      	mov	r3, r0
 800181c:	460c      	mov	r4, r1
 800181e:	4618      	mov	r0, r3
 8001820:	4621      	mov	r1, r4
 8001822:	f04f 0200 	mov.w	r2, #0
 8001826:	4b60      	ldr	r3, [pc, #384]	; (80019a8 <runTime+0x738>)
 8001828:	f7fe ff80 	bl	800072c <__aeabi_ddiv>
 800182c:	4603      	mov	r3, r0
 800182e:	460c      	mov	r4, r1
 8001830:	4a5e      	ldr	r2, [pc, #376]	; (80019ac <runTime+0x73c>)
 8001832:	e9c2 3400 	strd	r3, r4, [r2]
	  timStrc8 = timStrc8 / 8000 / 100;
 8001836:	4b5e      	ldr	r3, [pc, #376]	; (80019b0 <runTime+0x740>)
 8001838:	e9d3 0100 	ldrd	r0, r1, [r3]
 800183c:	f04f 0200 	mov.w	r2, #0
 8001840:	4b58      	ldr	r3, [pc, #352]	; (80019a4 <runTime+0x734>)
 8001842:	f7fe ff73 	bl	800072c <__aeabi_ddiv>
 8001846:	4603      	mov	r3, r0
 8001848:	460c      	mov	r4, r1
 800184a:	4618      	mov	r0, r3
 800184c:	4621      	mov	r1, r4
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	4b55      	ldr	r3, [pc, #340]	; (80019a8 <runTime+0x738>)
 8001854:	f7fe ff6a 	bl	800072c <__aeabi_ddiv>
 8001858:	4603      	mov	r3, r0
 800185a:	460c      	mov	r4, r1
 800185c:	4a54      	ldr	r2, [pc, #336]	; (80019b0 <runTime+0x740>)
 800185e:	e9c2 3400 	strd	r3, r4, [r2]
	  timStrc128 = timStrc128 / 8000 / 100;
 8001862:	4b54      	ldr	r3, [pc, #336]	; (80019b4 <runTime+0x744>)
 8001864:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001868:	f04f 0200 	mov.w	r2, #0
 800186c:	4b4d      	ldr	r3, [pc, #308]	; (80019a4 <runTime+0x734>)
 800186e:	f7fe ff5d 	bl	800072c <__aeabi_ddiv>
 8001872:	4603      	mov	r3, r0
 8001874:	460c      	mov	r4, r1
 8001876:	4618      	mov	r0, r3
 8001878:	4621      	mov	r1, r4
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	4b4a      	ldr	r3, [pc, #296]	; (80019a8 <runTime+0x738>)
 8001880:	f7fe ff54 	bl	800072c <__aeabi_ddiv>
 8001884:	4603      	mov	r3, r0
 8001886:	460c      	mov	r4, r1
 8001888:	4a4a      	ldr	r2, [pc, #296]	; (80019b4 <runTime+0x744>)
 800188a:	e9c2 3400 	strd	r3, r4, [r2]
	  timStrc1024 = timStrc1024 / 8000 / 100;
 800188e:	4b4a      	ldr	r3, [pc, #296]	; (80019b8 <runTime+0x748>)
 8001890:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	4b42      	ldr	r3, [pc, #264]	; (80019a4 <runTime+0x734>)
 800189a:	f7fe ff47 	bl	800072c <__aeabi_ddiv>
 800189e:	4603      	mov	r3, r0
 80018a0:	460c      	mov	r4, r1
 80018a2:	4618      	mov	r0, r3
 80018a4:	4621      	mov	r1, r4
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	4b3f      	ldr	r3, [pc, #252]	; (80019a8 <runTime+0x738>)
 80018ac:	f7fe ff3e 	bl	800072c <__aeabi_ddiv>
 80018b0:	4603      	mov	r3, r0
 80018b2:	460c      	mov	r4, r1
 80018b4:	4a40      	ldr	r2, [pc, #256]	; (80019b8 <runTime+0x748>)
 80018b6:	e9c2 3400 	strd	r3, r4, [r2]

	  sprintf(textTX, "32 bit addition: %lfms\r\n", timA32);
 80018ba:	4b40      	ldr	r3, [pc, #256]	; (80019bc <runTime+0x74c>)
 80018bc:	cb18      	ldmia	r3, {r3, r4}
 80018be:	1d38      	adds	r0, r7, #4
 80018c0:	461a      	mov	r2, r3
 80018c2:	4623      	mov	r3, r4
 80018c4:	493e      	ldr	r1, [pc, #248]	; (80019c0 <runTime+0x750>)
 80018c6:	f002 ff75 	bl	80047b4 <siprintf>
	  printString((const char *)textTX);
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fbaf 	bl	8001030 <printString>

	  sprintf(textTX, "64 bit addition: %lfms\r\n", timA64);
 80018d2:	4b3c      	ldr	r3, [pc, #240]	; (80019c4 <runTime+0x754>)
 80018d4:	cb18      	ldmia	r3, {r3, r4}
 80018d6:	1d38      	adds	r0, r7, #4
 80018d8:	461a      	mov	r2, r3
 80018da:	4623      	mov	r3, r4
 80018dc:	493a      	ldr	r1, [pc, #232]	; (80019c8 <runTime+0x758>)
 80018de:	f002 ff69 	bl	80047b4 <siprintf>
	  printString((const char *)textTX);
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff fba3 	bl	8001030 <printString>

	  sprintf(textTX, "32 bit multiplication: %lfms\r\n", timM32);
 80018ea:	4b38      	ldr	r3, [pc, #224]	; (80019cc <runTime+0x75c>)
 80018ec:	cb18      	ldmia	r3, {r3, r4}
 80018ee:	1d38      	adds	r0, r7, #4
 80018f0:	461a      	mov	r2, r3
 80018f2:	4623      	mov	r3, r4
 80018f4:	4936      	ldr	r1, [pc, #216]	; (80019d0 <runTime+0x760>)
 80018f6:	f002 ff5d 	bl	80047b4 <siprintf>
	  printString((const char *)textTX);
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fb97 	bl	8001030 <printString>

	  sprintf(textTX, "64 bit multiplication: %lfms\r\n", timM64);
 8001902:	4b26      	ldr	r3, [pc, #152]	; (800199c <runTime+0x72c>)
 8001904:	cb18      	ldmia	r3, {r3, r4}
 8001906:	1d38      	adds	r0, r7, #4
 8001908:	461a      	mov	r2, r3
 800190a:	4623      	mov	r3, r4
 800190c:	4931      	ldr	r1, [pc, #196]	; (80019d4 <runTime+0x764>)
 800190e:	f002 ff51 	bl	80047b4 <siprintf>
	  printString((const char *)textTX);
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fb8b 	bl	8001030 <printString>

	  sprintf(textTX, "32 bit division: %lfms\r\n", timD32);
 800191a:	4b21      	ldr	r3, [pc, #132]	; (80019a0 <runTime+0x730>)
 800191c:	cb18      	ldmia	r3, {r3, r4}
 800191e:	1d38      	adds	r0, r7, #4
 8001920:	461a      	mov	r2, r3
 8001922:	4623      	mov	r3, r4
 8001924:	492c      	ldr	r1, [pc, #176]	; (80019d8 <runTime+0x768>)
 8001926:	f002 ff45 	bl	80047b4 <siprintf>
	  printString((const char *)textTX);
 800192a:	1d3b      	adds	r3, r7, #4
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fb7f 	bl	8001030 <printString>

	  sprintf(textTX, "64 bit division: %lfms\r\n", timD64);
 8001932:	4b1e      	ldr	r3, [pc, #120]	; (80019ac <runTime+0x73c>)
 8001934:	cb18      	ldmia	r3, {r3, r4}
 8001936:	1d38      	adds	r0, r7, #4
 8001938:	461a      	mov	r2, r3
 800193a:	4623      	mov	r3, r4
 800193c:	4927      	ldr	r1, [pc, #156]	; (80019dc <runTime+0x76c>)
 800193e:	f002 ff39 	bl	80047b4 <siprintf>
	  printString((const char *)textTX);
 8001942:	1d3b      	adds	r3, r7, #4
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fb73 	bl	8001030 <printString>

	  sprintf(textTX, "8-byte struct copy: %lfms\r\n", timStrc8);
 800194a:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <runTime+0x740>)
 800194c:	cb18      	ldmia	r3, {r3, r4}
 800194e:	1d38      	adds	r0, r7, #4
 8001950:	461a      	mov	r2, r3
 8001952:	4623      	mov	r3, r4
 8001954:	4922      	ldr	r1, [pc, #136]	; (80019e0 <runTime+0x770>)
 8001956:	f002 ff2d 	bl	80047b4 <siprintf>
	  printString((const char *)textTX);
 800195a:	1d3b      	adds	r3, r7, #4
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fb67 	bl	8001030 <printString>

	  sprintf(textTX, "128-byte struct copy: %lfms\r\n", timStrc128);
 8001962:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <runTime+0x744>)
 8001964:	cb18      	ldmia	r3, {r3, r4}
 8001966:	1d38      	adds	r0, r7, #4
 8001968:	461a      	mov	r2, r3
 800196a:	4623      	mov	r3, r4
 800196c:	491d      	ldr	r1, [pc, #116]	; (80019e4 <runTime+0x774>)
 800196e:	f002 ff21 	bl	80047b4 <siprintf>
	  printString((const char *)textTX);
 8001972:	1d3b      	adds	r3, r7, #4
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff fb5b 	bl	8001030 <printString>

	  sprintf(textTX, "1024-byte struct copy: %lfms\r\n", timStrc1024);
 800197a:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <runTime+0x748>)
 800197c:	cb18      	ldmia	r3, {r3, r4}
 800197e:	1d38      	adds	r0, r7, #4
 8001980:	461a      	mov	r2, r3
 8001982:	4623      	mov	r3, r4
 8001984:	4918      	ldr	r1, [pc, #96]	; (80019e8 <runTime+0x778>)
 8001986:	f002 ff15 	bl	80047b4 <siprintf>
	  printString((const char *)textTX);
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff fb4f 	bl	8001030 <printString>


}
 8001992:	bf00      	nop
 8001994:	f607 178c 	addw	r7, r7, #2444	; 0x98c
 8001998:	46bd      	mov	sp, r7
 800199a:	bd90      	pop	{r4, r7, pc}
 800199c:	20000238 	.word	0x20000238
 80019a0:	20000240 	.word	0x20000240
 80019a4:	40bf4000 	.word	0x40bf4000
 80019a8:	40590000 	.word	0x40590000
 80019ac:	20000248 	.word	0x20000248
 80019b0:	20000250 	.word	0x20000250
 80019b4:	20000258 	.word	0x20000258
 80019b8:	20000260 	.word	0x20000260
 80019bc:	20000220 	.word	0x20000220
 80019c0:	080060e8 	.word	0x080060e8
 80019c4:	20000228 	.word	0x20000228
 80019c8:	08006104 	.word	0x08006104
 80019cc:	20000230 	.word	0x20000230
 80019d0:	08006120 	.word	0x08006120
 80019d4:	08006140 	.word	0x08006140
 80019d8:	08006160 	.word	0x08006160
 80019dc:	0800617c 	.word	0x0800617c
 80019e0:	08006198 	.word	0x08006198
 80019e4:	080061b4 	.word	0x080061b4
 80019e8:	080061d4 	.word	0x080061d4

080019ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019f0:	f000 fb70 	bl	80020d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019f4:	f000 f878 	bl	8001ae8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019f8:	f000 f942 	bl	8001c80 <MX_GPIO_Init>
  MX_TIM4_Init();
 80019fc:	f000 f8b0 	bl	8001b60 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8001a00:	f000 f914 	bl	8001c2c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  //Print out Welcome Message
  printString(CLEAR_SCREEN);
 8001a04:	4b29      	ldr	r3, [pc, #164]	; (8001aac <main+0xc0>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff fb11 	bl	8001030 <printString>
  printString(GO_TO_TOP);
 8001a0e:	4b28      	ldr	r3, [pc, #160]	; (8001ab0 <main+0xc4>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff fb0c 	bl	8001030 <printString>
  //printString("\x1b[8;40;100t");
  //printString("\x1b[3;0;0t");
  printString("Welcome to the CLI!\r\n");
 8001a18:	4826      	ldr	r0, [pc, #152]	; (8001ab4 <main+0xc8>)
 8001a1a:	f7ff fb09 	bl	8001030 <printString>
  HAL_Delay(2000);
 8001a1e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a22:	f000 fbb9 	bl	8002198 <HAL_Delay>

  //Formats the screen to show counter and create a scroll window
  printString(CLEAR_SCREEN);
 8001a26:	4b21      	ldr	r3, [pc, #132]	; (8001aac <main+0xc0>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff fb00 	bl	8001030 <printString>
  printString(GO_TO_TOP);
 8001a30:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <main+0xc4>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fafb 	bl	8001030 <printString>
  printString("counter: ");
 8001a3a:	481f      	ldr	r0, [pc, #124]	; (8001ab8 <main+0xcc>)
 8001a3c:	f7ff faf8 	bl	8001030 <printString>
  printString(SCROLL_WINDOW);
 8001a40:	4b1e      	ldr	r3, [pc, #120]	; (8001abc <main+0xd0>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff faf3 	bl	8001030 <printString>
  printString(GO_TO_SCROLL);
 8001a4a:	4b1d      	ldr	r3, [pc, #116]	; (8001ac0 <main+0xd4>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff faee 	bl	8001030 <printString>

  //printString(goTo(10, 0));

  //Start the process of receiving data
  HAL_UART_Receive_IT(&huart3, cliBufferRX, 1);
 8001a54:	2201      	movs	r2, #1
 8001a56:	491b      	ldr	r1, [pc, #108]	; (8001ac4 <main+0xd8>)
 8001a58:	481b      	ldr	r0, [pc, #108]	; (8001ac8 <main+0xdc>)
 8001a5a:	f001 fe70 	bl	800373e <HAL_UART_Receive_IT>
  printString("\nEnter a command for the LED:\r\n");
 8001a5e:	481b      	ldr	r0, [pc, #108]	; (8001acc <main+0xe0>)
 8001a60:	f7ff fae6 	bl	8001030 <printString>
  printString(SAVE_CURS);
 8001a64:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <main+0xe4>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fae1 	bl	8001030 <printString>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		//increment counter and display it approx. every 1 second
		HAL_Delay(1000);
 8001a6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a72:	f000 fb91 	bl	8002198 <HAL_Delay>
		counter++;
 8001a76:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <main+0xe8>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	4a15      	ldr	r2, [pc, #84]	; (8001ad4 <main+0xe8>)
 8001a7e:	6013      	str	r3, [r2, #0]
		sprintf(counter_str, "%d", counter);
 8001a80:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <main+0xe8>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	461a      	mov	r2, r3
 8001a86:	4914      	ldr	r1, [pc, #80]	; (8001ad8 <main+0xec>)
 8001a88:	4814      	ldr	r0, [pc, #80]	; (8001adc <main+0xf0>)
 8001a8a:	f002 fe93 	bl	80047b4 <siprintf>
		printString(HIDE_CURS);
 8001a8e:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <main+0xf4>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff facc 	bl	8001030 <printString>
		printString(GO_TO_COUNT);
 8001a98:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <main+0xf8>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff fac7 	bl	8001030 <printString>
		printString(counter_str);
 8001aa2:	480e      	ldr	r0, [pc, #56]	; (8001adc <main+0xf0>)
 8001aa4:	f7ff fac4 	bl	8001030 <printString>
		HAL_Delay(1000);
 8001aa8:	e7e1      	b.n	8001a6e <main+0x82>
 8001aaa:	bf00      	nop
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	2000000c 	.word	0x2000000c
 8001ab4:	08006234 	.word	0x08006234
 8001ab8:	0800624c 	.word	0x0800624c
 8001abc:	20000004 	.word	0x20000004
 8001ac0:	20000008 	.word	0x20000008
 8001ac4:	20000364 	.word	0x20000364
 8001ac8:	200002d8 	.word	0x200002d8
 8001acc:	08006258 	.word	0x08006258
 8001ad0:	2000001c 	.word	0x2000001c
 8001ad4:	2000026c 	.word	0x2000026c
 8001ad8:	08006278 	.word	0x08006278
 8001adc:	2000027c 	.word	0x2000027c
 8001ae0:	20000014 	.word	0x20000014
 8001ae4:	20000010 	.word	0x20000010

08001ae8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b090      	sub	sp, #64	; 0x40
 8001aec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aee:	f107 0318 	add.w	r3, r7, #24
 8001af2:	2228      	movs	r2, #40	; 0x28
 8001af4:	2100      	movs	r1, #0
 8001af6:	4618      	mov	r0, r3
 8001af8:	f002 f9ad 	bl	8003e56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001afc:	1d3b      	adds	r3, r7, #4
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	609a      	str	r2, [r3, #8]
 8001b06:	60da      	str	r2, [r3, #12]
 8001b08:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b12:	2310      	movs	r3, #16
 8001b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b16:	2300      	movs	r3, #0
 8001b18:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b1a:	f107 0318 	add.w	r3, r7, #24
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f000 fe6a 	bl	80027f8 <HAL_RCC_OscConfig>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001b2a:	f000 f965 	bl	8001df8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b2e:	230f      	movs	r3, #15
 8001b30:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b42:	1d3b      	adds	r3, r7, #4
 8001b44:	2100      	movs	r1, #0
 8001b46:	4618      	mov	r0, r3
 8001b48:	f001 f8d6 	bl	8002cf8 <HAL_RCC_ClockConfig>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001b52:	f000 f951 	bl	8001df8 <Error_Handler>
  }
}
 8001b56:	bf00      	nop
 8001b58:	3740      	adds	r7, #64	; 0x40
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
	...

08001b60 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b088      	sub	sp, #32
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b66:	f107 0310 	add.w	r3, r7, #16
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]
 8001b70:	609a      	str	r2, [r3, #8]
 8001b72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b74:	f107 0308 	add.w	r3, r7, #8
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  __HAL_RCC_TIM4_CLK_ENABLE();
 8001b7e:	4b28      	ldr	r3, [pc, #160]	; (8001c20 <MX_TIM4_Init+0xc0>)
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	4a27      	ldr	r2, [pc, #156]	; (8001c20 <MX_TIM4_Init+0xc0>)
 8001b84:	f043 0304 	orr.w	r3, r3, #4
 8001b88:	61d3      	str	r3, [r2, #28]
 8001b8a:	4b25      	ldr	r3, [pc, #148]	; (8001c20 <MX_TIM4_Init+0xc0>)
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	f003 0304 	and.w	r3, r3, #4
 8001b92:	607b      	str	r3, [r7, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b96:	4b23      	ldr	r3, [pc, #140]	; (8001c24 <MX_TIM4_Init+0xc4>)
 8001b98:	4a23      	ldr	r2, [pc, #140]	; (8001c28 <MX_TIM4_Init+0xc8>)
 8001b9a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001b9c:	4b21      	ldr	r3, [pc, #132]	; (8001c24 <MX_TIM4_Init+0xc4>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001ba2:	4b20      	ldr	r3, [pc, #128]	; (8001c24 <MX_TIM4_Init+0xc4>)
 8001ba4:	2210      	movs	r2, #16
 8001ba6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001ba8:	4b1e      	ldr	r3, [pc, #120]	; (8001c24 <MX_TIM4_Init+0xc4>)
 8001baa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb0:	4b1c      	ldr	r3, [pc, #112]	; (8001c24 <MX_TIM4_Init+0xc4>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb6:	4b1b      	ldr	r3, [pc, #108]	; (8001c24 <MX_TIM4_Init+0xc4>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001bbc:	4819      	ldr	r0, [pc, #100]	; (8001c24 <MX_TIM4_Init+0xc4>)
 8001bbe:	f001 fa37 	bl	8003030 <HAL_TIM_Base_Init>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8001bc8:	f000 f916 	bl	8001df8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bd0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001bd2:	f107 0310 	add.w	r3, r7, #16
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4812      	ldr	r0, [pc, #72]	; (8001c24 <MX_TIM4_Init+0xc4>)
 8001bda:	f001 fac3 	bl	8003164 <HAL_TIM_ConfigClockSource>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8001be4:	f000 f908 	bl	8001df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bf0:	f107 0308 	add.w	r3, r7, #8
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	480b      	ldr	r0, [pc, #44]	; (8001c24 <MX_TIM4_Init+0xc4>)
 8001bf8:	f001 fc64 	bl	80034c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_TIM4_Init+0xa6>
  {
    Error_Handler();
 8001c02:	f000 f8f9 	bl	8001df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  HAL_TIM_Base_MspInit(&htim4);
 8001c06:	4807      	ldr	r0, [pc, #28]	; (8001c24 <MX_TIM4_Init+0xc4>)
 8001c08:	f000 f92e 	bl	8001e68 <HAL_TIM_Base_MspInit>
  HAL_TIM_Base_Init(&htim4);
 8001c0c:	4805      	ldr	r0, [pc, #20]	; (8001c24 <MX_TIM4_Init+0xc4>)
 8001c0e:	f001 fa0f 	bl	8003030 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(&htim4);
 8001c12:	4804      	ldr	r0, [pc, #16]	; (8001c24 <MX_TIM4_Init+0xc4>)
 8001c14:	f001 fa5c 	bl	80030d0 <HAL_TIM_Base_Start>

  /* USER CODE END TIM4_Init 2 */

}
 8001c18:	bf00      	nop
 8001c1a:	3720      	adds	r7, #32
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40021000 	.word	0x40021000
 8001c24:	20000290 	.word	0x20000290
 8001c28:	40000800 	.word	0x40000800

08001c2c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c30:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <MX_USART3_UART_Init+0x4c>)
 8001c32:	4a12      	ldr	r2, [pc, #72]	; (8001c7c <MX_USART3_UART_Init+0x50>)
 8001c34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c36:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <MX_USART3_UART_Init+0x4c>)
 8001c38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c3e:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <MX_USART3_UART_Init+0x4c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c44:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <MX_USART3_UART_Init+0x4c>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <MX_USART3_UART_Init+0x4c>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c50:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <MX_USART3_UART_Init+0x4c>)
 8001c52:	220c      	movs	r2, #12
 8001c54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c56:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <MX_USART3_UART_Init+0x4c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c5c:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <MX_USART3_UART_Init+0x4c>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c62:	4805      	ldr	r0, [pc, #20]	; (8001c78 <MX_USART3_UART_Init+0x4c>)
 8001c64:	f001 fc8c 	bl	8003580 <HAL_UART_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001c6e:	f000 f8c3 	bl	8001df8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	200002d8 	.word	0x200002d8
 8001c7c:	40004800 	.word	0x40004800

08001c80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c86:	f107 0308 	add.w	r3, r7, #8
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]
 8001c90:	609a      	str	r2, [r3, #8]
 8001c92:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c94:	4b17      	ldr	r3, [pc, #92]	; (8001cf4 <MX_GPIO_Init+0x74>)
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	4a16      	ldr	r2, [pc, #88]	; (8001cf4 <MX_GPIO_Init+0x74>)
 8001c9a:	f043 0304 	orr.w	r3, r3, #4
 8001c9e:	6193      	str	r3, [r2, #24]
 8001ca0:	4b14      	ldr	r3, [pc, #80]	; (8001cf4 <MX_GPIO_Init+0x74>)
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	607b      	str	r3, [r7, #4]
 8001caa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cac:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <MX_GPIO_Init+0x74>)
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	4a10      	ldr	r2, [pc, #64]	; (8001cf4 <MX_GPIO_Init+0x74>)
 8001cb2:	f043 0310 	orr.w	r3, r3, #16
 8001cb6:	6193      	str	r3, [r2, #24]
 8001cb8:	4b0e      	ldr	r3, [pc, #56]	; (8001cf4 <MX_GPIO_Init+0x74>)
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	f003 0310 	and.w	r3, r3, #16
 8001cc0:	603b      	str	r3, [r7, #0]
 8001cc2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2120      	movs	r1, #32
 8001cc8:	480b      	ldr	r0, [pc, #44]	; (8001cf8 <MX_GPIO_Init+0x78>)
 8001cca:	f000 fd7c 	bl	80027c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001cce:	2320      	movs	r3, #32
 8001cd0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cde:	f107 0308 	add.w	r3, r7, #8
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4804      	ldr	r0, [pc, #16]	; (8001cf8 <MX_GPIO_Init+0x78>)
 8001ce6:	f000 fbfd 	bl	80024e4 <HAL_GPIO_Init>

}
 8001cea:	bf00      	nop
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	40010800 	.word	0x40010800

08001cfc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *husart)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
	counter++;
 8001d04:	4b32      	ldr	r3, [pc, #200]	; (8001dd0 <HAL_UART_RxCpltCallback+0xd4>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	4a31      	ldr	r2, [pc, #196]	; (8001dd0 <HAL_UART_RxCpltCallback+0xd4>)
 8001d0c:	6013      	str	r3, [r2, #0]
	printString(RETURN_CURS);
 8001d0e:	4b31      	ldr	r3, [pc, #196]	; (8001dd4 <HAL_UART_RxCpltCallback+0xd8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff f98c 	bl	8001030 <printString>
	printString(SHOW_CURS);
 8001d18:	4b2f      	ldr	r3, [pc, #188]	; (8001dd8 <HAL_UART_RxCpltCallback+0xdc>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff f987 	bl	8001030 <printString>
	//HAL_UART_Transmit(&huart3, cliBufferRX, 1, 1000);
	copyCharTo(cliBufferRX, save, j);
 8001d22:	4b2e      	ldr	r3, [pc, #184]	; (8001ddc <HAL_UART_RxCpltCallback+0xe0>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	461a      	mov	r2, r3
 8001d28:	492d      	ldr	r1, [pc, #180]	; (8001de0 <HAL_UART_RxCpltCallback+0xe4>)
 8001d2a:	482e      	ldr	r0, [pc, #184]	; (8001de4 <HAL_UART_RxCpltCallback+0xe8>)
 8001d2c:	f7ff f83e 	bl	8000dac <copyCharTo>

	//backspace incidence
	if(cliBufferRX[0] == '\b')
 8001d30:	4b2c      	ldr	r3, [pc, #176]	; (8001de4 <HAL_UART_RxCpltCallback+0xe8>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	2b08      	cmp	r3, #8
 8001d36:	d105      	bne.n	8001d44 <HAL_UART_RxCpltCallback+0x48>
	{
		j--;
 8001d38:	4b28      	ldr	r3, [pc, #160]	; (8001ddc <HAL_UART_RxCpltCallback+0xe0>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	4a27      	ldr	r2, [pc, #156]	; (8001ddc <HAL_UART_RxCpltCallback+0xe0>)
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	e004      	b.n	8001d4e <HAL_UART_RxCpltCallback+0x52>
	}
	else
	{
		j++;
 8001d44:	4b25      	ldr	r3, [pc, #148]	; (8001ddc <HAL_UART_RxCpltCallback+0xe0>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	4a24      	ldr	r2, [pc, #144]	; (8001ddc <HAL_UART_RxCpltCallback+0xe0>)
 8001d4c:	6013      	str	r3, [r2, #0]
	}

	//when enter is hit execute the command
	if(isCompleteLine(cliBufferRX))
 8001d4e:	4825      	ldr	r0, [pc, #148]	; (8001de4 <HAL_UART_RxCpltCallback+0xe8>)
 8001d50:	f7ff f81c 	bl	8000d8c <isCompleteLine>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d024      	beq.n	8001da4 <HAL_UART_RxCpltCallback+0xa8>
	{
		HAL_UART_Transmit(&huart3, "\r\n", 2, 1000);
 8001d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d5e:	2202      	movs	r2, #2
 8001d60:	4921      	ldr	r1, [pc, #132]	; (8001de8 <HAL_UART_RxCpltCallback+0xec>)
 8001d62:	4822      	ldr	r0, [pc, #136]	; (8001dec <HAL_UART_RxCpltCallback+0xf0>)
 8001d64:	f001 fc59 	bl	800361a <HAL_UART_Transmit>
		//strcpy((char *)cliBufferTX, save);
		//HAL_UART_Transmit(&huart3, cliBufferTX, strlen((char *)cliBufferTX), 1000);

		executeCommand(save);
 8001d68:	481d      	ldr	r0, [pc, #116]	; (8001de0 <HAL_UART_RxCpltCallback+0xe4>)
 8001d6a:	f7ff f83d 	bl	8000de8 <executeCommand>
		HAL_UART_Transmit(&huart3, "\r\n", 2, 1000);
 8001d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d72:	2202      	movs	r2, #2
 8001d74:	491c      	ldr	r1, [pc, #112]	; (8001de8 <HAL_UART_RxCpltCallback+0xec>)
 8001d76:	481d      	ldr	r0, [pc, #116]	; (8001dec <HAL_UART_RxCpltCallback+0xf0>)
 8001d78:	f001 fc4f 	bl	800361a <HAL_UART_Transmit>
		j = 0;
 8001d7c:	4b17      	ldr	r3, [pc, #92]	; (8001ddc <HAL_UART_RxCpltCallback+0xe0>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < 20; i++)
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	e007      	b.n	8001d98 <HAL_UART_RxCpltCallback+0x9c>
		{
			save[i] = NULL;
 8001d88:	4a15      	ldr	r2, [pc, #84]	; (8001de0 <HAL_UART_RxCpltCallback+0xe4>)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	2200      	movs	r2, #0
 8001d90:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 20; i++)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	3301      	adds	r3, #1
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2b13      	cmp	r3, #19
 8001d9c:	ddf4      	ble.n	8001d88 <HAL_UART_RxCpltCallback+0x8c>
		}
		printString("\nEnter a command for the LED:\r\n");
 8001d9e:	4814      	ldr	r0, [pc, #80]	; (8001df0 <HAL_UART_RxCpltCallback+0xf4>)
 8001da0:	f7ff f946 	bl	8001030 <printString>
	}

	printString(SAVE_CURS);
 8001da4:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <HAL_UART_RxCpltCallback+0xf8>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff f941 	bl	8001030 <printString>

	while(huart3.gState == HAL_UART_STATE_BUSY_RX){}
 8001dae:	bf00      	nop
 8001db0:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <HAL_UART_RxCpltCallback+0xf0>)
 8001db2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b22      	cmp	r3, #34	; 0x22
 8001dba:	d0f9      	beq.n	8001db0 <HAL_UART_RxCpltCallback+0xb4>

	HAL_UART_Receive_IT(&huart3, cliBufferRX, 1);
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	4909      	ldr	r1, [pc, #36]	; (8001de4 <HAL_UART_RxCpltCallback+0xe8>)
 8001dc0:	480a      	ldr	r0, [pc, #40]	; (8001dec <HAL_UART_RxCpltCallback+0xf0>)
 8001dc2:	f001 fcbc 	bl	800373e <HAL_UART_Receive_IT>

}
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	2000026c 	.word	0x2000026c
 8001dd4:	20000020 	.word	0x20000020
 8001dd8:	20000018 	.word	0x20000018
 8001ddc:	20000268 	.word	0x20000268
 8001de0:	20000350 	.word	0x20000350
 8001de4:	20000364 	.word	0x20000364
 8001de8:	0800627c 	.word	0x0800627c
 8001dec:	200002d8 	.word	0x200002d8
 8001df0:	08006258 	.word	0x08006258
 8001df4:	2000001c 	.word	0x2000001c

08001df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001dfc:	bf00      	nop
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr

08001e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e0a:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <HAL_MspInit+0x5c>)
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	4a14      	ldr	r2, [pc, #80]	; (8001e60 <HAL_MspInit+0x5c>)
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	6193      	str	r3, [r2, #24]
 8001e16:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <HAL_MspInit+0x5c>)
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	60bb      	str	r3, [r7, #8]
 8001e20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e22:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <HAL_MspInit+0x5c>)
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	4a0e      	ldr	r2, [pc, #56]	; (8001e60 <HAL_MspInit+0x5c>)
 8001e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e2c:	61d3      	str	r3, [r2, #28]
 8001e2e:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <HAL_MspInit+0x5c>)
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e36:	607b      	str	r3, [r7, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e3a:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <HAL_MspInit+0x60>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <HAL_MspInit+0x60>)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e56:	bf00      	nop
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40010000 	.word	0x40010000

08001e68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a09      	ldr	r2, [pc, #36]	; (8001e9c <HAL_TIM_Base_MspInit+0x34>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d10b      	bne.n	8001e92 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <HAL_TIM_Base_MspInit+0x38>)
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	4a08      	ldr	r2, [pc, #32]	; (8001ea0 <HAL_TIM_Base_MspInit+0x38>)
 8001e80:	f043 0304 	orr.w	r3, r3, #4
 8001e84:	61d3      	str	r3, [r2, #28]
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_TIM_Base_MspInit+0x38>)
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	f003 0304 	and.w	r3, r3, #4
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001e92:	bf00      	nop
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr
 8001e9c:	40000800 	.word	0x40000800
 8001ea0:	40021000 	.word	0x40021000

08001ea4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08a      	sub	sp, #40	; 0x28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eac:	f107 0314 	add.w	r3, r7, #20
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a29      	ldr	r2, [pc, #164]	; (8001f64 <HAL_UART_MspInit+0xc0>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d14b      	bne.n	8001f5c <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ec4:	4b28      	ldr	r3, [pc, #160]	; (8001f68 <HAL_UART_MspInit+0xc4>)
 8001ec6:	69db      	ldr	r3, [r3, #28]
 8001ec8:	4a27      	ldr	r2, [pc, #156]	; (8001f68 <HAL_UART_MspInit+0xc4>)
 8001eca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ece:	61d3      	str	r3, [r2, #28]
 8001ed0:	4b25      	ldr	r3, [pc, #148]	; (8001f68 <HAL_UART_MspInit+0xc4>)
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ed8:	613b      	str	r3, [r7, #16]
 8001eda:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001edc:	4b22      	ldr	r3, [pc, #136]	; (8001f68 <HAL_UART_MspInit+0xc4>)
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	4a21      	ldr	r2, [pc, #132]	; (8001f68 <HAL_UART_MspInit+0xc4>)
 8001ee2:	f043 0310 	orr.w	r3, r3, #16
 8001ee6:	6193      	str	r3, [r2, #24]
 8001ee8:	4b1f      	ldr	r3, [pc, #124]	; (8001f68 <HAL_UART_MspInit+0xc4>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	f003 0310 	and.w	r3, r3, #16
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ef4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efa:	2302      	movs	r3, #2
 8001efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001efe:	2303      	movs	r3, #3
 8001f00:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f02:	f107 0314 	add.w	r3, r7, #20
 8001f06:	4619      	mov	r1, r3
 8001f08:	4818      	ldr	r0, [pc, #96]	; (8001f6c <HAL_UART_MspInit+0xc8>)
 8001f0a:	f000 faeb 	bl	80024e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f14:	2300      	movs	r3, #0
 8001f16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f1c:	f107 0314 	add.w	r3, r7, #20
 8001f20:	4619      	mov	r1, r3
 8001f22:	4812      	ldr	r0, [pc, #72]	; (8001f6c <HAL_UART_MspInit+0xc8>)
 8001f24:	f000 fade 	bl	80024e4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8001f28:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <HAL_UART_MspInit+0xcc>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	f043 0310 	orr.w	r3, r3, #16
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
 8001f46:	4a0a      	ldr	r2, [pc, #40]	; (8001f70 <HAL_UART_MspInit+0xcc>)
 8001f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4a:	6053      	str	r3, [r2, #4]

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	2100      	movs	r1, #0
 8001f50:	2027      	movs	r0, #39	; 0x27
 8001f52:	f000 fa1a 	bl	800238a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f56:	2027      	movs	r0, #39	; 0x27
 8001f58:	f000 fa33 	bl	80023c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f5c:	bf00      	nop
 8001f5e:	3728      	adds	r7, #40	; 0x28
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40004800 	.word	0x40004800
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40011000 	.word	0x40011000
 8001f70:	40010000 	.word	0x40010000

08001f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr

08001f80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f84:	e7fe      	b.n	8001f84 <HardFault_Handler+0x4>

08001f86 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f8a:	e7fe      	b.n	8001f8a <MemManage_Handler+0x4>

08001f8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f90:	e7fe      	b.n	8001f90 <BusFault_Handler+0x4>

08001f92 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f96:	e7fe      	b.n	8001f96 <UsageFault_Handler+0x4>

08001f98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr

08001fb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr

08001fbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fc0:	f000 f8ce 	bl	8002160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fc4:	bf00      	nop
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001fcc:	4802      	ldr	r0, [pc, #8]	; (8001fd8 <USART3_IRQHandler+0x10>)
 8001fce:	f001 fc0b 	bl	80037e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	200002d8 	.word	0x200002d8

08001fdc <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fdc:	490d      	ldr	r1, [pc, #52]	; (8002014 <_sbrk+0x38>)
{
 8001fde:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fe0:	4a0d      	ldr	r2, [pc, #52]	; (8002018 <_sbrk+0x3c>)
 8001fe2:	4c0e      	ldr	r4, [pc, #56]	; (800201c <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8001fe4:	680b      	ldr	r3, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fe6:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8001fe8:	b12b      	cbz	r3, 8001ff6 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fea:	4418      	add	r0, r3
 8001fec:	4290      	cmp	r0, r2
 8001fee:	d808      	bhi.n	8002002 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001ff0:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001ff6:	4c0a      	ldr	r4, [pc, #40]	; (8002020 <_sbrk+0x44>)
 8001ff8:	4623      	mov	r3, r4
  if (__sbrk_heap_end + incr > max_heap)
 8001ffa:	4418      	add	r0, r3
 8001ffc:	4290      	cmp	r0, r2
    __sbrk_heap_end = &_end;
 8001ffe:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8002000:	d9f6      	bls.n	8001ff0 <_sbrk+0x14>
    errno = ENOMEM;
 8002002:	f001 fef3 	bl	8003dec <__errno>
 8002006:	220c      	movs	r2, #12
    return (void *)-1;
 8002008:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    errno = ENOMEM;
 800200c:	6002      	str	r2, [r0, #0]
}
 800200e:	4618      	mov	r0, r3
 8002010:	bd10      	pop	{r4, pc}
 8002012:	bf00      	nop
 8002014:	20000270 	.word	0x20000270
 8002018:	20005000 	.word	0x20005000
 800201c:	00000400 	.word	0x00000400
 8002020:	20000378 	.word	0x20000378

08002024 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr

08002030 <timer_start>:

#include "timer.h"


uint16_t timer_start()
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim4);
 8002034:	4b03      	ldr	r3, [pc, #12]	; (8002044 <timer_start+0x14>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203a:	b29b      	uxth	r3, r3
}
 800203c:	4618      	mov	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr
 8002044:	20000290 	.word	0x20000290

08002048 <timer_stop>:

uint16_t timer_stop(uint16_t first)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	80fb      	strh	r3, [r7, #6]
	uint16_t temp = __HAL_TIM_GET_COUNTER(&htim4);
 8002052:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <timer_stop+0x3c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	81fb      	strh	r3, [r7, #14]

	if(temp > first)
 800205a:	89fa      	ldrh	r2, [r7, #14]
 800205c:	88fb      	ldrh	r3, [r7, #6]
 800205e:	429a      	cmp	r2, r3
 8002060:	d906      	bls.n	8002070 <timer_stop+0x28>
	{
		return (first + (0xFFFF - temp));
 8002062:	88fa      	ldrh	r2, [r7, #6]
 8002064:	89fb      	ldrh	r3, [r7, #14]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	b29b      	uxth	r3, r3
 800206a:	3b01      	subs	r3, #1
 800206c:	b29b      	uxth	r3, r3
 800206e:	e003      	b.n	8002078 <timer_stop+0x30>
	}

	return (first - temp);
 8002070:	88fa      	ldrh	r2, [r7, #6]
 8002072:	89fb      	ldrh	r3, [r7, #14]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	b29b      	uxth	r3, r3
}
 8002078:	4618      	mov	r0, r3
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	bc80      	pop	{r7}
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	20000290 	.word	0x20000290

08002088 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002088:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800208a:	e003      	b.n	8002094 <LoopCopyDataInit>

0800208c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800208e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002090:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002092:	3104      	adds	r1, #4

08002094 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002094:	480a      	ldr	r0, [pc, #40]	; (80020c0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002096:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002098:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800209a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800209c:	d3f6      	bcc.n	800208c <CopyDataInit>
  ldr r2, =_sbss
 800209e:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80020a0:	e002      	b.n	80020a8 <LoopFillZerobss>

080020a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80020a2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80020a4:	f842 3b04 	str.w	r3, [r2], #4

080020a8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80020a8:	4b08      	ldr	r3, [pc, #32]	; (80020cc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80020aa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80020ac:	d3f9      	bcc.n	80020a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80020ae:	f7ff ffb9 	bl	8002024 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020b2:	f001 fea1 	bl	8003df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020b6:	f7ff fc99 	bl	80019ec <main>
  bx lr
 80020ba:	4770      	bx	lr
  ldr r3, =_sidata
 80020bc:	08006518 	.word	0x08006518
  ldr r0, =_sdata
 80020c0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80020c4:	20000200 	.word	0x20000200
  ldr r2, =_sbss
 80020c8:	20000200 	.word	0x20000200
  ldr r3, = _ebss
 80020cc:	20000378 	.word	0x20000378

080020d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020d0:	e7fe      	b.n	80020d0 <ADC1_2_IRQHandler>
	...

080020d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020d8:	4b08      	ldr	r3, [pc, #32]	; (80020fc <HAL_Init+0x28>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a07      	ldr	r2, [pc, #28]	; (80020fc <HAL_Init+0x28>)
 80020de:	f043 0310 	orr.w	r3, r3, #16
 80020e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020e4:	2003      	movs	r0, #3
 80020e6:	f000 f945 	bl	8002374 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ea:	2000      	movs	r0, #0
 80020ec:	f000 f808 	bl	8002100 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020f0:	f7ff fe88 	bl	8001e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40022000 	.word	0x40022000

08002100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002108:	4b12      	ldr	r3, [pc, #72]	; (8002154 <HAL_InitTick+0x54>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4b12      	ldr	r3, [pc, #72]	; (8002158 <HAL_InitTick+0x58>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	4619      	mov	r1, r3
 8002112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002116:	fbb3 f3f1 	udiv	r3, r3, r1
 800211a:	fbb2 f3f3 	udiv	r3, r2, r3
 800211e:	4618      	mov	r0, r3
 8002120:	f000 f95d 	bl	80023de <HAL_SYSTICK_Config>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e00e      	b.n	800214c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b0f      	cmp	r3, #15
 8002132:	d80a      	bhi.n	800214a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002134:	2200      	movs	r2, #0
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800213c:	f000 f925 	bl	800238a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002140:	4a06      	ldr	r2, [pc, #24]	; (800215c <HAL_InitTick+0x5c>)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002146:	2300      	movs	r3, #0
 8002148:	e000      	b.n	800214c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
}
 800214c:	4618      	mov	r0, r3
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20000024 	.word	0x20000024
 8002158:	2000002c 	.word	0x2000002c
 800215c:	20000028 	.word	0x20000028

08002160 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002164:	4b05      	ldr	r3, [pc, #20]	; (800217c <HAL_IncTick+0x1c>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	461a      	mov	r2, r3
 800216a:	4b05      	ldr	r3, [pc, #20]	; (8002180 <HAL_IncTick+0x20>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4413      	add	r3, r2
 8002170:	4a03      	ldr	r2, [pc, #12]	; (8002180 <HAL_IncTick+0x20>)
 8002172:	6013      	str	r3, [r2, #0]
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr
 800217c:	2000002c 	.word	0x2000002c
 8002180:	20000370 	.word	0x20000370

08002184 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  return uwTick;
 8002188:	4b02      	ldr	r3, [pc, #8]	; (8002194 <HAL_GetTick+0x10>)
 800218a:	681b      	ldr	r3, [r3, #0]
}
 800218c:	4618      	mov	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr
 8002194:	20000370 	.word	0x20000370

08002198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021a0:	f7ff fff0 	bl	8002184 <HAL_GetTick>
 80021a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021b0:	d005      	beq.n	80021be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021b2:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <HAL_Delay+0x40>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	461a      	mov	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4413      	add	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021be:	bf00      	nop
 80021c0:	f7ff ffe0 	bl	8002184 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d8f7      	bhi.n	80021c0 <HAL_Delay+0x28>
  {
  }
}
 80021d0:	bf00      	nop
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	2000002c 	.word	0x2000002c

080021dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021ec:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <__NVIC_SetPriorityGrouping+0x44>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021f2:	68ba      	ldr	r2, [r7, #8]
 80021f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021f8:	4013      	ands	r3, r2
 80021fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002204:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800220c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800220e:	4a04      	ldr	r2, [pc, #16]	; (8002220 <__NVIC_SetPriorityGrouping+0x44>)
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	60d3      	str	r3, [r2, #12]
}
 8002214:	bf00      	nop
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	e000ed00 	.word	0xe000ed00

08002224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002228:	4b04      	ldr	r3, [pc, #16]	; (800223c <__NVIC_GetPriorityGrouping+0x18>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	0a1b      	lsrs	r3, r3, #8
 800222e:	f003 0307 	and.w	r3, r3, #7
}
 8002232:	4618      	mov	r0, r3
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800224a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224e:	2b00      	cmp	r3, #0
 8002250:	db0b      	blt.n	800226a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	f003 021f 	and.w	r2, r3, #31
 8002258:	4906      	ldr	r1, [pc, #24]	; (8002274 <__NVIC_EnableIRQ+0x34>)
 800225a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225e:	095b      	lsrs	r3, r3, #5
 8002260:	2001      	movs	r0, #1
 8002262:	fa00 f202 	lsl.w	r2, r0, r2
 8002266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr
 8002274:	e000e100 	.word	0xe000e100

08002278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	6039      	str	r1, [r7, #0]
 8002282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002288:	2b00      	cmp	r3, #0
 800228a:	db0a      	blt.n	80022a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	b2da      	uxtb	r2, r3
 8002290:	490c      	ldr	r1, [pc, #48]	; (80022c4 <__NVIC_SetPriority+0x4c>)
 8002292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002296:	0112      	lsls	r2, r2, #4
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	440b      	add	r3, r1
 800229c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022a0:	e00a      	b.n	80022b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	4908      	ldr	r1, [pc, #32]	; (80022c8 <__NVIC_SetPriority+0x50>)
 80022a8:	79fb      	ldrb	r3, [r7, #7]
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	3b04      	subs	r3, #4
 80022b0:	0112      	lsls	r2, r2, #4
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	440b      	add	r3, r1
 80022b6:	761a      	strb	r2, [r3, #24]
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	bc80      	pop	{r7}
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	e000e100 	.word	0xe000e100
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b089      	sub	sp, #36	; 0x24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	f1c3 0307 	rsb	r3, r3, #7
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	bf28      	it	cs
 80022ea:	2304      	movcs	r3, #4
 80022ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	3304      	adds	r3, #4
 80022f2:	2b06      	cmp	r3, #6
 80022f4:	d902      	bls.n	80022fc <NVIC_EncodePriority+0x30>
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3b03      	subs	r3, #3
 80022fa:	e000      	b.n	80022fe <NVIC_EncodePriority+0x32>
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002300:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43da      	mvns	r2, r3
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	401a      	ands	r2, r3
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002314:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	fa01 f303 	lsl.w	r3, r1, r3
 800231e:	43d9      	mvns	r1, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002324:	4313      	orrs	r3, r2
         );
}
 8002326:	4618      	mov	r0, r3
 8002328:	3724      	adds	r7, #36	; 0x24
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr

08002330 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3b01      	subs	r3, #1
 800233c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002340:	d301      	bcc.n	8002346 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002342:	2301      	movs	r3, #1
 8002344:	e00f      	b.n	8002366 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002346:	4a0a      	ldr	r2, [pc, #40]	; (8002370 <SysTick_Config+0x40>)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3b01      	subs	r3, #1
 800234c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800234e:	210f      	movs	r1, #15
 8002350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002354:	f7ff ff90 	bl	8002278 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002358:	4b05      	ldr	r3, [pc, #20]	; (8002370 <SysTick_Config+0x40>)
 800235a:	2200      	movs	r2, #0
 800235c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800235e:	4b04      	ldr	r3, [pc, #16]	; (8002370 <SysTick_Config+0x40>)
 8002360:	2207      	movs	r2, #7
 8002362:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	e000e010 	.word	0xe000e010

08002374 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7ff ff2d 	bl	80021dc <__NVIC_SetPriorityGrouping>
}
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800238a:	b580      	push	{r7, lr}
 800238c:	b086      	sub	sp, #24
 800238e:	af00      	add	r7, sp, #0
 8002390:	4603      	mov	r3, r0
 8002392:	60b9      	str	r1, [r7, #8]
 8002394:	607a      	str	r2, [r7, #4]
 8002396:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800239c:	f7ff ff42 	bl	8002224 <__NVIC_GetPriorityGrouping>
 80023a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	68b9      	ldr	r1, [r7, #8]
 80023a6:	6978      	ldr	r0, [r7, #20]
 80023a8:	f7ff ff90 	bl	80022cc <NVIC_EncodePriority>
 80023ac:	4602      	mov	r2, r0
 80023ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023b2:	4611      	mov	r1, r2
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff ff5f 	bl	8002278 <__NVIC_SetPriority>
}
 80023ba:	bf00      	nop
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b082      	sub	sp, #8
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	4603      	mov	r3, r0
 80023ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff ff35 	bl	8002240 <__NVIC_EnableIRQ>
}
 80023d6:	bf00      	nop
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b082      	sub	sp, #8
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7ff ffa2 	bl	8002330 <SysTick_Config>
 80023ec:	4603      	mov	r3, r0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
	...

080023f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002400:	2300      	movs	r3, #0
 8002402:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800240a:	2b02      	cmp	r3, #2
 800240c:	d005      	beq.n	800241a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2204      	movs	r2, #4
 8002412:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	73fb      	strb	r3, [r7, #15]
 8002418:	e051      	b.n	80024be <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 020e 	bic.w	r2, r2, #14
 8002428:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 0201 	bic.w	r2, r2, #1
 8002438:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a22      	ldr	r2, [pc, #136]	; (80024c8 <HAL_DMA_Abort_IT+0xd0>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d029      	beq.n	8002498 <HAL_DMA_Abort_IT+0xa0>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a20      	ldr	r2, [pc, #128]	; (80024cc <HAL_DMA_Abort_IT+0xd4>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d022      	beq.n	8002494 <HAL_DMA_Abort_IT+0x9c>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a1f      	ldr	r2, [pc, #124]	; (80024d0 <HAL_DMA_Abort_IT+0xd8>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d01a      	beq.n	800248e <HAL_DMA_Abort_IT+0x96>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a1d      	ldr	r2, [pc, #116]	; (80024d4 <HAL_DMA_Abort_IT+0xdc>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d012      	beq.n	8002488 <HAL_DMA_Abort_IT+0x90>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a1c      	ldr	r2, [pc, #112]	; (80024d8 <HAL_DMA_Abort_IT+0xe0>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d00a      	beq.n	8002482 <HAL_DMA_Abort_IT+0x8a>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a1a      	ldr	r2, [pc, #104]	; (80024dc <HAL_DMA_Abort_IT+0xe4>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d102      	bne.n	800247c <HAL_DMA_Abort_IT+0x84>
 8002476:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800247a:	e00e      	b.n	800249a <HAL_DMA_Abort_IT+0xa2>
 800247c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002480:	e00b      	b.n	800249a <HAL_DMA_Abort_IT+0xa2>
 8002482:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002486:	e008      	b.n	800249a <HAL_DMA_Abort_IT+0xa2>
 8002488:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800248c:	e005      	b.n	800249a <HAL_DMA_Abort_IT+0xa2>
 800248e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002492:	e002      	b.n	800249a <HAL_DMA_Abort_IT+0xa2>
 8002494:	2310      	movs	r3, #16
 8002496:	e000      	b.n	800249a <HAL_DMA_Abort_IT+0xa2>
 8002498:	2301      	movs	r3, #1
 800249a:	4a11      	ldr	r2, [pc, #68]	; (80024e0 <HAL_DMA_Abort_IT+0xe8>)
 800249c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	4798      	blx	r3
    } 
  }
  return status;
 80024be:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40020008 	.word	0x40020008
 80024cc:	4002001c 	.word	0x4002001c
 80024d0:	40020030 	.word	0x40020030
 80024d4:	40020044 	.word	0x40020044
 80024d8:	40020058 	.word	0x40020058
 80024dc:	4002006c 	.word	0x4002006c
 80024e0:	40020000 	.word	0x40020000

080024e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b08b      	sub	sp, #44	; 0x2c
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024ee:	2300      	movs	r3, #0
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024f2:	2300      	movs	r3, #0
 80024f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024f6:	e127      	b.n	8002748 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024f8:	2201      	movs	r2, #1
 80024fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	69fa      	ldr	r2, [r7, #28]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	429a      	cmp	r2, r3
 8002512:	f040 8116 	bne.w	8002742 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b12      	cmp	r3, #18
 800251c:	d034      	beq.n	8002588 <HAL_GPIO_Init+0xa4>
 800251e:	2b12      	cmp	r3, #18
 8002520:	d80d      	bhi.n	800253e <HAL_GPIO_Init+0x5a>
 8002522:	2b02      	cmp	r3, #2
 8002524:	d02b      	beq.n	800257e <HAL_GPIO_Init+0x9a>
 8002526:	2b02      	cmp	r3, #2
 8002528:	d804      	bhi.n	8002534 <HAL_GPIO_Init+0x50>
 800252a:	2b00      	cmp	r3, #0
 800252c:	d031      	beq.n	8002592 <HAL_GPIO_Init+0xae>
 800252e:	2b01      	cmp	r3, #1
 8002530:	d01c      	beq.n	800256c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002532:	e048      	b.n	80025c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002534:	2b03      	cmp	r3, #3
 8002536:	d043      	beq.n	80025c0 <HAL_GPIO_Init+0xdc>
 8002538:	2b11      	cmp	r3, #17
 800253a:	d01b      	beq.n	8002574 <HAL_GPIO_Init+0x90>
          break;
 800253c:	e043      	b.n	80025c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800253e:	4a89      	ldr	r2, [pc, #548]	; (8002764 <HAL_GPIO_Init+0x280>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d026      	beq.n	8002592 <HAL_GPIO_Init+0xae>
 8002544:	4a87      	ldr	r2, [pc, #540]	; (8002764 <HAL_GPIO_Init+0x280>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d806      	bhi.n	8002558 <HAL_GPIO_Init+0x74>
 800254a:	4a87      	ldr	r2, [pc, #540]	; (8002768 <HAL_GPIO_Init+0x284>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d020      	beq.n	8002592 <HAL_GPIO_Init+0xae>
 8002550:	4a86      	ldr	r2, [pc, #536]	; (800276c <HAL_GPIO_Init+0x288>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d01d      	beq.n	8002592 <HAL_GPIO_Init+0xae>
          break;
 8002556:	e036      	b.n	80025c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002558:	4a85      	ldr	r2, [pc, #532]	; (8002770 <HAL_GPIO_Init+0x28c>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d019      	beq.n	8002592 <HAL_GPIO_Init+0xae>
 800255e:	4a85      	ldr	r2, [pc, #532]	; (8002774 <HAL_GPIO_Init+0x290>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d016      	beq.n	8002592 <HAL_GPIO_Init+0xae>
 8002564:	4a84      	ldr	r2, [pc, #528]	; (8002778 <HAL_GPIO_Init+0x294>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d013      	beq.n	8002592 <HAL_GPIO_Init+0xae>
          break;
 800256a:	e02c      	b.n	80025c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	623b      	str	r3, [r7, #32]
          break;
 8002572:	e028      	b.n	80025c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	3304      	adds	r3, #4
 800257a:	623b      	str	r3, [r7, #32]
          break;
 800257c:	e023      	b.n	80025c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	3308      	adds	r3, #8
 8002584:	623b      	str	r3, [r7, #32]
          break;
 8002586:	e01e      	b.n	80025c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	330c      	adds	r3, #12
 800258e:	623b      	str	r3, [r7, #32]
          break;
 8002590:	e019      	b.n	80025c6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d102      	bne.n	80025a0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800259a:	2304      	movs	r3, #4
 800259c:	623b      	str	r3, [r7, #32]
          break;
 800259e:	e012      	b.n	80025c6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d105      	bne.n	80025b4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025a8:	2308      	movs	r3, #8
 80025aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	69fa      	ldr	r2, [r7, #28]
 80025b0:	611a      	str	r2, [r3, #16]
          break;
 80025b2:	e008      	b.n	80025c6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025b4:	2308      	movs	r3, #8
 80025b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69fa      	ldr	r2, [r7, #28]
 80025bc:	615a      	str	r2, [r3, #20]
          break;
 80025be:	e002      	b.n	80025c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80025c0:	2300      	movs	r3, #0
 80025c2:	623b      	str	r3, [r7, #32]
          break;
 80025c4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	2bff      	cmp	r3, #255	; 0xff
 80025ca:	d801      	bhi.n	80025d0 <HAL_GPIO_Init+0xec>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	e001      	b.n	80025d4 <HAL_GPIO_Init+0xf0>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3304      	adds	r3, #4
 80025d4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	2bff      	cmp	r3, #255	; 0xff
 80025da:	d802      	bhi.n	80025e2 <HAL_GPIO_Init+0xfe>
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	e002      	b.n	80025e8 <HAL_GPIO_Init+0x104>
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	3b08      	subs	r3, #8
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	210f      	movs	r1, #15
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	fa01 f303 	lsl.w	r3, r1, r3
 80025f6:	43db      	mvns	r3, r3
 80025f8:	401a      	ands	r2, r3
 80025fa:	6a39      	ldr	r1, [r7, #32]
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002602:	431a      	orrs	r2, r3
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 8096 	beq.w	8002742 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002616:	4b59      	ldr	r3, [pc, #356]	; (800277c <HAL_GPIO_Init+0x298>)
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	4a58      	ldr	r2, [pc, #352]	; (800277c <HAL_GPIO_Init+0x298>)
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	6193      	str	r3, [r2, #24]
 8002622:	4b56      	ldr	r3, [pc, #344]	; (800277c <HAL_GPIO_Init+0x298>)
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800262e:	4a54      	ldr	r2, [pc, #336]	; (8002780 <HAL_GPIO_Init+0x29c>)
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	089b      	lsrs	r3, r3, #2
 8002634:	3302      	adds	r3, #2
 8002636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800263a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	220f      	movs	r2, #15
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43db      	mvns	r3, r3
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	4013      	ands	r3, r2
 8002650:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a4b      	ldr	r2, [pc, #300]	; (8002784 <HAL_GPIO_Init+0x2a0>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d013      	beq.n	8002682 <HAL_GPIO_Init+0x19e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a4a      	ldr	r2, [pc, #296]	; (8002788 <HAL_GPIO_Init+0x2a4>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d00d      	beq.n	800267e <HAL_GPIO_Init+0x19a>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a49      	ldr	r2, [pc, #292]	; (800278c <HAL_GPIO_Init+0x2a8>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d007      	beq.n	800267a <HAL_GPIO_Init+0x196>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a48      	ldr	r2, [pc, #288]	; (8002790 <HAL_GPIO_Init+0x2ac>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d101      	bne.n	8002676 <HAL_GPIO_Init+0x192>
 8002672:	2303      	movs	r3, #3
 8002674:	e006      	b.n	8002684 <HAL_GPIO_Init+0x1a0>
 8002676:	2304      	movs	r3, #4
 8002678:	e004      	b.n	8002684 <HAL_GPIO_Init+0x1a0>
 800267a:	2302      	movs	r3, #2
 800267c:	e002      	b.n	8002684 <HAL_GPIO_Init+0x1a0>
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <HAL_GPIO_Init+0x1a0>
 8002682:	2300      	movs	r3, #0
 8002684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002686:	f002 0203 	and.w	r2, r2, #3
 800268a:	0092      	lsls	r2, r2, #2
 800268c:	4093      	lsls	r3, r2
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	4313      	orrs	r3, r2
 8002692:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002694:	493a      	ldr	r1, [pc, #232]	; (8002780 <HAL_GPIO_Init+0x29c>)
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	089b      	lsrs	r3, r3, #2
 800269a:	3302      	adds	r3, #2
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d006      	beq.n	80026bc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026ae:	4b39      	ldr	r3, [pc, #228]	; (8002794 <HAL_GPIO_Init+0x2b0>)
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	4938      	ldr	r1, [pc, #224]	; (8002794 <HAL_GPIO_Init+0x2b0>)
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	600b      	str	r3, [r1, #0]
 80026ba:	e006      	b.n	80026ca <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026bc:	4b35      	ldr	r3, [pc, #212]	; (8002794 <HAL_GPIO_Init+0x2b0>)
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	43db      	mvns	r3, r3
 80026c4:	4933      	ldr	r1, [pc, #204]	; (8002794 <HAL_GPIO_Init+0x2b0>)
 80026c6:	4013      	ands	r3, r2
 80026c8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d006      	beq.n	80026e4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026d6:	4b2f      	ldr	r3, [pc, #188]	; (8002794 <HAL_GPIO_Init+0x2b0>)
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	492e      	ldr	r1, [pc, #184]	; (8002794 <HAL_GPIO_Init+0x2b0>)
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	4313      	orrs	r3, r2
 80026e0:	604b      	str	r3, [r1, #4]
 80026e2:	e006      	b.n	80026f2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026e4:	4b2b      	ldr	r3, [pc, #172]	; (8002794 <HAL_GPIO_Init+0x2b0>)
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	43db      	mvns	r3, r3
 80026ec:	4929      	ldr	r1, [pc, #164]	; (8002794 <HAL_GPIO_Init+0x2b0>)
 80026ee:	4013      	ands	r3, r2
 80026f0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d006      	beq.n	800270c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026fe:	4b25      	ldr	r3, [pc, #148]	; (8002794 <HAL_GPIO_Init+0x2b0>)
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	4924      	ldr	r1, [pc, #144]	; (8002794 <HAL_GPIO_Init+0x2b0>)
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	4313      	orrs	r3, r2
 8002708:	608b      	str	r3, [r1, #8]
 800270a:	e006      	b.n	800271a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800270c:	4b21      	ldr	r3, [pc, #132]	; (8002794 <HAL_GPIO_Init+0x2b0>)
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	43db      	mvns	r3, r3
 8002714:	491f      	ldr	r1, [pc, #124]	; (8002794 <HAL_GPIO_Init+0x2b0>)
 8002716:	4013      	ands	r3, r2
 8002718:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d006      	beq.n	8002734 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002726:	4b1b      	ldr	r3, [pc, #108]	; (8002794 <HAL_GPIO_Init+0x2b0>)
 8002728:	68da      	ldr	r2, [r3, #12]
 800272a:	491a      	ldr	r1, [pc, #104]	; (8002794 <HAL_GPIO_Init+0x2b0>)
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	4313      	orrs	r3, r2
 8002730:	60cb      	str	r3, [r1, #12]
 8002732:	e006      	b.n	8002742 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002734:	4b17      	ldr	r3, [pc, #92]	; (8002794 <HAL_GPIO_Init+0x2b0>)
 8002736:	68da      	ldr	r2, [r3, #12]
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	43db      	mvns	r3, r3
 800273c:	4915      	ldr	r1, [pc, #84]	; (8002794 <HAL_GPIO_Init+0x2b0>)
 800273e:	4013      	ands	r3, r2
 8002740:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	3301      	adds	r3, #1
 8002746:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	fa22 f303 	lsr.w	r3, r2, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	f47f aed0 	bne.w	80024f8 <HAL_GPIO_Init+0x14>
  }
}
 8002758:	bf00      	nop
 800275a:	372c      	adds	r7, #44	; 0x2c
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	10210000 	.word	0x10210000
 8002768:	10110000 	.word	0x10110000
 800276c:	10120000 	.word	0x10120000
 8002770:	10310000 	.word	0x10310000
 8002774:	10320000 	.word	0x10320000
 8002778:	10220000 	.word	0x10220000
 800277c:	40021000 	.word	0x40021000
 8002780:	40010000 	.word	0x40010000
 8002784:	40010800 	.word	0x40010800
 8002788:	40010c00 	.word	0x40010c00
 800278c:	40011000 	.word	0x40011000
 8002790:	40011400 	.word	0x40011400
 8002794:	40010400 	.word	0x40010400

08002798 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	460b      	mov	r3, r1
 80027a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	887b      	ldrh	r3, [r7, #2]
 80027aa:	4013      	ands	r3, r2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d002      	beq.n	80027b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027b0:	2301      	movs	r3, #1
 80027b2:	73fb      	strb	r3, [r7, #15]
 80027b4:	e001      	b.n	80027ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027b6:	2300      	movs	r3, #0
 80027b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr

080027c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	460b      	mov	r3, r1
 80027d0:	807b      	strh	r3, [r7, #2]
 80027d2:	4613      	mov	r3, r2
 80027d4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027d6:	787b      	ldrb	r3, [r7, #1]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027dc:	887a      	ldrh	r2, [r7, #2]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027e2:	e003      	b.n	80027ec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027e4:	887b      	ldrh	r3, [r7, #2]
 80027e6:	041a      	lsls	r2, r3, #16
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	611a      	str	r2, [r3, #16]
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr
	...

080027f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e26c      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 8087 	beq.w	8002926 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002818:	4b92      	ldr	r3, [pc, #584]	; (8002a64 <HAL_RCC_OscConfig+0x26c>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 030c 	and.w	r3, r3, #12
 8002820:	2b04      	cmp	r3, #4
 8002822:	d00c      	beq.n	800283e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002824:	4b8f      	ldr	r3, [pc, #572]	; (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 030c 	and.w	r3, r3, #12
 800282c:	2b08      	cmp	r3, #8
 800282e:	d112      	bne.n	8002856 <HAL_RCC_OscConfig+0x5e>
 8002830:	4b8c      	ldr	r3, [pc, #560]	; (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800283c:	d10b      	bne.n	8002856 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800283e:	4b89      	ldr	r3, [pc, #548]	; (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d06c      	beq.n	8002924 <HAL_RCC_OscConfig+0x12c>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d168      	bne.n	8002924 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e246      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800285e:	d106      	bne.n	800286e <HAL_RCC_OscConfig+0x76>
 8002860:	4b80      	ldr	r3, [pc, #512]	; (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a7f      	ldr	r2, [pc, #508]	; (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800286a:	6013      	str	r3, [r2, #0]
 800286c:	e02e      	b.n	80028cc <HAL_RCC_OscConfig+0xd4>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10c      	bne.n	8002890 <HAL_RCC_OscConfig+0x98>
 8002876:	4b7b      	ldr	r3, [pc, #492]	; (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a7a      	ldr	r2, [pc, #488]	; (8002a64 <HAL_RCC_OscConfig+0x26c>)
 800287c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	4b78      	ldr	r3, [pc, #480]	; (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a77      	ldr	r2, [pc, #476]	; (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002888:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	e01d      	b.n	80028cc <HAL_RCC_OscConfig+0xd4>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002898:	d10c      	bne.n	80028b4 <HAL_RCC_OscConfig+0xbc>
 800289a:	4b72      	ldr	r3, [pc, #456]	; (8002a64 <HAL_RCC_OscConfig+0x26c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a71      	ldr	r2, [pc, #452]	; (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80028a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	4b6f      	ldr	r3, [pc, #444]	; (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a6e      	ldr	r2, [pc, #440]	; (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80028ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	e00b      	b.n	80028cc <HAL_RCC_OscConfig+0xd4>
 80028b4:	4b6b      	ldr	r3, [pc, #428]	; (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a6a      	ldr	r2, [pc, #424]	; (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80028ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028be:	6013      	str	r3, [r2, #0]
 80028c0:	4b68      	ldr	r3, [pc, #416]	; (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a67      	ldr	r2, [pc, #412]	; (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80028c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d013      	beq.n	80028fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d4:	f7ff fc56 	bl	8002184 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028dc:	f7ff fc52 	bl	8002184 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b64      	cmp	r3, #100	; 0x64
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e1fa      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ee:	4b5d      	ldr	r3, [pc, #372]	; (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0xe4>
 80028fa:	e014      	b.n	8002926 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fc:	f7ff fc42 	bl	8002184 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002904:	f7ff fc3e 	bl	8002184 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b64      	cmp	r3, #100	; 0x64
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e1e6      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002916:	4b53      	ldr	r3, [pc, #332]	; (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1f0      	bne.n	8002904 <HAL_RCC_OscConfig+0x10c>
 8002922:	e000      	b.n	8002926 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d063      	beq.n	80029fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002932:	4b4c      	ldr	r3, [pc, #304]	; (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 030c 	and.w	r3, r3, #12
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00b      	beq.n	8002956 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800293e:	4b49      	ldr	r3, [pc, #292]	; (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f003 030c 	and.w	r3, r3, #12
 8002946:	2b08      	cmp	r3, #8
 8002948:	d11c      	bne.n	8002984 <HAL_RCC_OscConfig+0x18c>
 800294a:	4b46      	ldr	r3, [pc, #280]	; (8002a64 <HAL_RCC_OscConfig+0x26c>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d116      	bne.n	8002984 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002956:	4b43      	ldr	r3, [pc, #268]	; (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d005      	beq.n	800296e <HAL_RCC_OscConfig+0x176>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d001      	beq.n	800296e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e1ba      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800296e:	4b3d      	ldr	r3, [pc, #244]	; (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	4939      	ldr	r1, [pc, #228]	; (8002a64 <HAL_RCC_OscConfig+0x26c>)
 800297e:	4313      	orrs	r3, r2
 8002980:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002982:	e03a      	b.n	80029fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d020      	beq.n	80029ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800298c:	4b36      	ldr	r3, [pc, #216]	; (8002a68 <HAL_RCC_OscConfig+0x270>)
 800298e:	2201      	movs	r2, #1
 8002990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002992:	f7ff fbf7 	bl	8002184 <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002998:	e008      	b.n	80029ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800299a:	f7ff fbf3 	bl	8002184 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e19b      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ac:	4b2d      	ldr	r3, [pc, #180]	; (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0f0      	beq.n	800299a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b8:	4b2a      	ldr	r3, [pc, #168]	; (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	4927      	ldr	r1, [pc, #156]	; (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	600b      	str	r3, [r1, #0]
 80029cc:	e015      	b.n	80029fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ce:	4b26      	ldr	r3, [pc, #152]	; (8002a68 <HAL_RCC_OscConfig+0x270>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d4:	f7ff fbd6 	bl	8002184 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029dc:	f7ff fbd2 	bl	8002184 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e17a      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ee:	4b1d      	ldr	r3, [pc, #116]	; (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f0      	bne.n	80029dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0308 	and.w	r3, r3, #8
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d03a      	beq.n	8002a7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d019      	beq.n	8002a42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a0e:	4b17      	ldr	r3, [pc, #92]	; (8002a6c <HAL_RCC_OscConfig+0x274>)
 8002a10:	2201      	movs	r2, #1
 8002a12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a14:	f7ff fbb6 	bl	8002184 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a1c:	f7ff fbb2 	bl	8002184 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e15a      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a2e:	4b0d      	ldr	r3, [pc, #52]	; (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0f0      	beq.n	8002a1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a3a:	2001      	movs	r0, #1
 8002a3c:	f000 fada 	bl	8002ff4 <RCC_Delay>
 8002a40:	e01c      	b.n	8002a7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a42:	4b0a      	ldr	r3, [pc, #40]	; (8002a6c <HAL_RCC_OscConfig+0x274>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a48:	f7ff fb9c 	bl	8002184 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a4e:	e00f      	b.n	8002a70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a50:	f7ff fb98 	bl	8002184 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d908      	bls.n	8002a70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e140      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4ec>
 8002a62:	bf00      	nop
 8002a64:	40021000 	.word	0x40021000
 8002a68:	42420000 	.word	0x42420000
 8002a6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a70:	4b9e      	ldr	r3, [pc, #632]	; (8002cec <HAL_RCC_OscConfig+0x4f4>)
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1e9      	bne.n	8002a50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 80a6 	beq.w	8002bd6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a8e:	4b97      	ldr	r3, [pc, #604]	; (8002cec <HAL_RCC_OscConfig+0x4f4>)
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10d      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a9a:	4b94      	ldr	r3, [pc, #592]	; (8002cec <HAL_RCC_OscConfig+0x4f4>)
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	4a93      	ldr	r2, [pc, #588]	; (8002cec <HAL_RCC_OscConfig+0x4f4>)
 8002aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aa4:	61d3      	str	r3, [r2, #28]
 8002aa6:	4b91      	ldr	r3, [pc, #580]	; (8002cec <HAL_RCC_OscConfig+0x4f4>)
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aae:	60bb      	str	r3, [r7, #8]
 8002ab0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab6:	4b8e      	ldr	r3, [pc, #568]	; (8002cf0 <HAL_RCC_OscConfig+0x4f8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d118      	bne.n	8002af4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ac2:	4b8b      	ldr	r3, [pc, #556]	; (8002cf0 <HAL_RCC_OscConfig+0x4f8>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a8a      	ldr	r2, [pc, #552]	; (8002cf0 <HAL_RCC_OscConfig+0x4f8>)
 8002ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002acc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ace:	f7ff fb59 	bl	8002184 <HAL_GetTick>
 8002ad2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad4:	e008      	b.n	8002ae8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ad6:	f7ff fb55 	bl	8002184 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b64      	cmp	r3, #100	; 0x64
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e0fd      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae8:	4b81      	ldr	r3, [pc, #516]	; (8002cf0 <HAL_RCC_OscConfig+0x4f8>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0f0      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d106      	bne.n	8002b0a <HAL_RCC_OscConfig+0x312>
 8002afc:	4b7b      	ldr	r3, [pc, #492]	; (8002cec <HAL_RCC_OscConfig+0x4f4>)
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	4a7a      	ldr	r2, [pc, #488]	; (8002cec <HAL_RCC_OscConfig+0x4f4>)
 8002b02:	f043 0301 	orr.w	r3, r3, #1
 8002b06:	6213      	str	r3, [r2, #32]
 8002b08:	e02d      	b.n	8002b66 <HAL_RCC_OscConfig+0x36e>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10c      	bne.n	8002b2c <HAL_RCC_OscConfig+0x334>
 8002b12:	4b76      	ldr	r3, [pc, #472]	; (8002cec <HAL_RCC_OscConfig+0x4f4>)
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	4a75      	ldr	r2, [pc, #468]	; (8002cec <HAL_RCC_OscConfig+0x4f4>)
 8002b18:	f023 0301 	bic.w	r3, r3, #1
 8002b1c:	6213      	str	r3, [r2, #32]
 8002b1e:	4b73      	ldr	r3, [pc, #460]	; (8002cec <HAL_RCC_OscConfig+0x4f4>)
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	4a72      	ldr	r2, [pc, #456]	; (8002cec <HAL_RCC_OscConfig+0x4f4>)
 8002b24:	f023 0304 	bic.w	r3, r3, #4
 8002b28:	6213      	str	r3, [r2, #32]
 8002b2a:	e01c      	b.n	8002b66 <HAL_RCC_OscConfig+0x36e>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	2b05      	cmp	r3, #5
 8002b32:	d10c      	bne.n	8002b4e <HAL_RCC_OscConfig+0x356>
 8002b34:	4b6d      	ldr	r3, [pc, #436]	; (8002cec <HAL_RCC_OscConfig+0x4f4>)
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	4a6c      	ldr	r2, [pc, #432]	; (8002cec <HAL_RCC_OscConfig+0x4f4>)
 8002b3a:	f043 0304 	orr.w	r3, r3, #4
 8002b3e:	6213      	str	r3, [r2, #32]
 8002b40:	4b6a      	ldr	r3, [pc, #424]	; (8002cec <HAL_RCC_OscConfig+0x4f4>)
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	4a69      	ldr	r2, [pc, #420]	; (8002cec <HAL_RCC_OscConfig+0x4f4>)
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	6213      	str	r3, [r2, #32]
 8002b4c:	e00b      	b.n	8002b66 <HAL_RCC_OscConfig+0x36e>
 8002b4e:	4b67      	ldr	r3, [pc, #412]	; (8002cec <HAL_RCC_OscConfig+0x4f4>)
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	4a66      	ldr	r2, [pc, #408]	; (8002cec <HAL_RCC_OscConfig+0x4f4>)
 8002b54:	f023 0301 	bic.w	r3, r3, #1
 8002b58:	6213      	str	r3, [r2, #32]
 8002b5a:	4b64      	ldr	r3, [pc, #400]	; (8002cec <HAL_RCC_OscConfig+0x4f4>)
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	4a63      	ldr	r2, [pc, #396]	; (8002cec <HAL_RCC_OscConfig+0x4f4>)
 8002b60:	f023 0304 	bic.w	r3, r3, #4
 8002b64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d015      	beq.n	8002b9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b6e:	f7ff fb09 	bl	8002184 <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b74:	e00a      	b.n	8002b8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b76:	f7ff fb05 	bl	8002184 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e0ab      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b8c:	4b57      	ldr	r3, [pc, #348]	; (8002cec <HAL_RCC_OscConfig+0x4f4>)
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0ee      	beq.n	8002b76 <HAL_RCC_OscConfig+0x37e>
 8002b98:	e014      	b.n	8002bc4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b9a:	f7ff faf3 	bl	8002184 <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ba0:	e00a      	b.n	8002bb8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba2:	f7ff faef 	bl	8002184 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e095      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb8:	4b4c      	ldr	r3, [pc, #304]	; (8002cec <HAL_RCC_OscConfig+0x4f4>)
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1ee      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bc4:	7dfb      	ldrb	r3, [r7, #23]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d105      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bca:	4b48      	ldr	r3, [pc, #288]	; (8002cec <HAL_RCC_OscConfig+0x4f4>)
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	4a47      	ldr	r2, [pc, #284]	; (8002cec <HAL_RCC_OscConfig+0x4f4>)
 8002bd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bd4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 8081 	beq.w	8002ce2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002be0:	4b42      	ldr	r3, [pc, #264]	; (8002cec <HAL_RCC_OscConfig+0x4f4>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 030c 	and.w	r3, r3, #12
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d061      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d146      	bne.n	8002c82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf4:	4b3f      	ldr	r3, [pc, #252]	; (8002cf4 <HAL_RCC_OscConfig+0x4fc>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfa:	f7ff fac3 	bl	8002184 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c02:	f7ff fabf 	bl	8002184 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e067      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c14:	4b35      	ldr	r3, [pc, #212]	; (8002cec <HAL_RCC_OscConfig+0x4f4>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1f0      	bne.n	8002c02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c28:	d108      	bne.n	8002c3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c2a:	4b30      	ldr	r3, [pc, #192]	; (8002cec <HAL_RCC_OscConfig+0x4f4>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	492d      	ldr	r1, [pc, #180]	; (8002cec <HAL_RCC_OscConfig+0x4f4>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c3c:	4b2b      	ldr	r3, [pc, #172]	; (8002cec <HAL_RCC_OscConfig+0x4f4>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a19      	ldr	r1, [r3, #32]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4c:	430b      	orrs	r3, r1
 8002c4e:	4927      	ldr	r1, [pc, #156]	; (8002cec <HAL_RCC_OscConfig+0x4f4>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c54:	4b27      	ldr	r3, [pc, #156]	; (8002cf4 <HAL_RCC_OscConfig+0x4fc>)
 8002c56:	2201      	movs	r2, #1
 8002c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5a:	f7ff fa93 	bl	8002184 <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c60:	e008      	b.n	8002c74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c62:	f7ff fa8f 	bl	8002184 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e037      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c74:	4b1d      	ldr	r3, [pc, #116]	; (8002cec <HAL_RCC_OscConfig+0x4f4>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d0f0      	beq.n	8002c62 <HAL_RCC_OscConfig+0x46a>
 8002c80:	e02f      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c82:	4b1c      	ldr	r3, [pc, #112]	; (8002cf4 <HAL_RCC_OscConfig+0x4fc>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c88:	f7ff fa7c 	bl	8002184 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c90:	f7ff fa78 	bl	8002184 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e020      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ca2:	4b12      	ldr	r3, [pc, #72]	; (8002cec <HAL_RCC_OscConfig+0x4f4>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f0      	bne.n	8002c90 <HAL_RCC_OscConfig+0x498>
 8002cae:	e018      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d101      	bne.n	8002cbc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e013      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cbc:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <HAL_RCC_OscConfig+0x4f4>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d106      	bne.n	8002cde <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d001      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e000      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	40007000 	.word	0x40007000
 8002cf4:	42420060 	.word	0x42420060

08002cf8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e0d0      	b.n	8002eae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d0c:	4b6a      	ldr	r3, [pc, #424]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d910      	bls.n	8002d3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1a:	4b67      	ldr	r3, [pc, #412]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f023 0207 	bic.w	r2, r3, #7
 8002d22:	4965      	ldr	r1, [pc, #404]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2a:	4b63      	ldr	r3, [pc, #396]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d001      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e0b8      	b.n	8002eae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d020      	beq.n	8002d8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0304 	and.w	r3, r3, #4
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d005      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d54:	4b59      	ldr	r3, [pc, #356]	; (8002ebc <HAL_RCC_ClockConfig+0x1c4>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	4a58      	ldr	r2, [pc, #352]	; (8002ebc <HAL_RCC_ClockConfig+0x1c4>)
 8002d5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0308 	and.w	r3, r3, #8
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d005      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d6c:	4b53      	ldr	r3, [pc, #332]	; (8002ebc <HAL_RCC_ClockConfig+0x1c4>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	4a52      	ldr	r2, [pc, #328]	; (8002ebc <HAL_RCC_ClockConfig+0x1c4>)
 8002d72:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d78:	4b50      	ldr	r3, [pc, #320]	; (8002ebc <HAL_RCC_ClockConfig+0x1c4>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	494d      	ldr	r1, [pc, #308]	; (8002ebc <HAL_RCC_ClockConfig+0x1c4>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d040      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d107      	bne.n	8002dae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d9e:	4b47      	ldr	r3, [pc, #284]	; (8002ebc <HAL_RCC_ClockConfig+0x1c4>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d115      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e07f      	b.n	8002eae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d107      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002db6:	4b41      	ldr	r3, [pc, #260]	; (8002ebc <HAL_RCC_ClockConfig+0x1c4>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d109      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e073      	b.n	8002eae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc6:	4b3d      	ldr	r3, [pc, #244]	; (8002ebc <HAL_RCC_ClockConfig+0x1c4>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e06b      	b.n	8002eae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dd6:	4b39      	ldr	r3, [pc, #228]	; (8002ebc <HAL_RCC_ClockConfig+0x1c4>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f023 0203 	bic.w	r2, r3, #3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	4936      	ldr	r1, [pc, #216]	; (8002ebc <HAL_RCC_ClockConfig+0x1c4>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002de8:	f7ff f9cc 	bl	8002184 <HAL_GetTick>
 8002dec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dee:	e00a      	b.n	8002e06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002df0:	f7ff f9c8 	bl	8002184 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e053      	b.n	8002eae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e06:	4b2d      	ldr	r3, [pc, #180]	; (8002ebc <HAL_RCC_ClockConfig+0x1c4>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f003 020c 	and.w	r2, r3, #12
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d1eb      	bne.n	8002df0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e18:	4b27      	ldr	r3, [pc, #156]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d210      	bcs.n	8002e48 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e26:	4b24      	ldr	r3, [pc, #144]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f023 0207 	bic.w	r2, r3, #7
 8002e2e:	4922      	ldr	r1, [pc, #136]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e36:	4b20      	ldr	r3, [pc, #128]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d001      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e032      	b.n	8002eae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d008      	beq.n	8002e66 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e54:	4b19      	ldr	r3, [pc, #100]	; (8002ebc <HAL_RCC_ClockConfig+0x1c4>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	4916      	ldr	r1, [pc, #88]	; (8002ebc <HAL_RCC_ClockConfig+0x1c4>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0308 	and.w	r3, r3, #8
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d009      	beq.n	8002e86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e72:	4b12      	ldr	r3, [pc, #72]	; (8002ebc <HAL_RCC_ClockConfig+0x1c4>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	490e      	ldr	r1, [pc, #56]	; (8002ebc <HAL_RCC_ClockConfig+0x1c4>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e86:	f000 f821 	bl	8002ecc <HAL_RCC_GetSysClockFreq>
 8002e8a:	4601      	mov	r1, r0
 8002e8c:	4b0b      	ldr	r3, [pc, #44]	; (8002ebc <HAL_RCC_ClockConfig+0x1c4>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	091b      	lsrs	r3, r3, #4
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	4a0a      	ldr	r2, [pc, #40]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e98:	5cd3      	ldrb	r3, [r2, r3]
 8002e9a:	fa21 f303 	lsr.w	r3, r1, r3
 8002e9e:	4a09      	ldr	r2, [pc, #36]	; (8002ec4 <HAL_RCC_ClockConfig+0x1cc>)
 8002ea0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ea2:	4b09      	ldr	r3, [pc, #36]	; (8002ec8 <HAL_RCC_ClockConfig+0x1d0>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff f92a 	bl	8002100 <HAL_InitTick>

  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40022000 	.word	0x40022000
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	08006294 	.word	0x08006294
 8002ec4:	20000024 	.word	0x20000024
 8002ec8:	20000028 	.word	0x20000028

08002ecc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ecc:	b490      	push	{r4, r7}
 8002ece:	b08a      	sub	sp, #40	; 0x28
 8002ed0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002ed2:	4b2a      	ldr	r3, [pc, #168]	; (8002f7c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ed4:	1d3c      	adds	r4, r7, #4
 8002ed6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ed8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002edc:	4b28      	ldr	r3, [pc, #160]	; (8002f80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ede:	881b      	ldrh	r3, [r3, #0]
 8002ee0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61fb      	str	r3, [r7, #28]
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61bb      	str	r3, [r7, #24]
 8002eea:	2300      	movs	r3, #0
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24
 8002eee:	2300      	movs	r3, #0
 8002ef0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ef6:	4b23      	ldr	r3, [pc, #140]	; (8002f84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	f003 030c 	and.w	r3, r3, #12
 8002f02:	2b04      	cmp	r3, #4
 8002f04:	d002      	beq.n	8002f0c <HAL_RCC_GetSysClockFreq+0x40>
 8002f06:	2b08      	cmp	r3, #8
 8002f08:	d003      	beq.n	8002f12 <HAL_RCC_GetSysClockFreq+0x46>
 8002f0a:	e02d      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f0c:	4b1e      	ldr	r3, [pc, #120]	; (8002f88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f0e:	623b      	str	r3, [r7, #32]
      break;
 8002f10:	e02d      	b.n	8002f6e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	0c9b      	lsrs	r3, r3, #18
 8002f16:	f003 030f 	and.w	r3, r3, #15
 8002f1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f1e:	4413      	add	r3, r2
 8002f20:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f24:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d013      	beq.n	8002f58 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f30:	4b14      	ldr	r3, [pc, #80]	; (8002f84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	0c5b      	lsrs	r3, r3, #17
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f3e:	4413      	add	r3, r2
 8002f40:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002f44:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	4a0f      	ldr	r2, [pc, #60]	; (8002f88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f4a:	fb02 f203 	mul.w	r2, r2, r3
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f54:	627b      	str	r3, [r7, #36]	; 0x24
 8002f56:	e004      	b.n	8002f62 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	4a0c      	ldr	r2, [pc, #48]	; (8002f8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f5c:	fb02 f303 	mul.w	r3, r2, r3
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	623b      	str	r3, [r7, #32]
      break;
 8002f66:	e002      	b.n	8002f6e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f68:	4b07      	ldr	r3, [pc, #28]	; (8002f88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f6a:	623b      	str	r3, [r7, #32]
      break;
 8002f6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3728      	adds	r7, #40	; 0x28
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bc90      	pop	{r4, r7}
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	08006280 	.word	0x08006280
 8002f80:	08006290 	.word	0x08006290
 8002f84:	40021000 	.word	0x40021000
 8002f88:	007a1200 	.word	0x007a1200
 8002f8c:	003d0900 	.word	0x003d0900

08002f90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f94:	4b02      	ldr	r3, [pc, #8]	; (8002fa0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f96:	681b      	ldr	r3, [r3, #0]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr
 8002fa0:	20000024 	.word	0x20000024

08002fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fa8:	f7ff fff2 	bl	8002f90 <HAL_RCC_GetHCLKFreq>
 8002fac:	4601      	mov	r1, r0
 8002fae:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	0a1b      	lsrs	r3, r3, #8
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	4a03      	ldr	r2, [pc, #12]	; (8002fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fba:	5cd3      	ldrb	r3, [r2, r3]
 8002fbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	080062a4 	.word	0x080062a4

08002fcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fd0:	f7ff ffde 	bl	8002f90 <HAL_RCC_GetHCLKFreq>
 8002fd4:	4601      	mov	r1, r0
 8002fd6:	4b05      	ldr	r3, [pc, #20]	; (8002fec <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	0adb      	lsrs	r3, r3, #11
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	4a03      	ldr	r2, [pc, #12]	; (8002ff0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fe2:	5cd3      	ldrb	r3, [r2, r3]
 8002fe4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	080062a4 	.word	0x080062a4

08002ff4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ffc:	4b0a      	ldr	r3, [pc, #40]	; (8003028 <RCC_Delay+0x34>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a0a      	ldr	r2, [pc, #40]	; (800302c <RCC_Delay+0x38>)
 8003002:	fba2 2303 	umull	r2, r3, r2, r3
 8003006:	0a5b      	lsrs	r3, r3, #9
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	fb02 f303 	mul.w	r3, r2, r3
 800300e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003010:	bf00      	nop
  }
  while (Delay --);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	1e5a      	subs	r2, r3, #1
 8003016:	60fa      	str	r2, [r7, #12]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1f9      	bne.n	8003010 <RCC_Delay+0x1c>
}
 800301c:	bf00      	nop
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	bc80      	pop	{r7}
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	20000024 	.word	0x20000024
 800302c:	10624dd3 	.word	0x10624dd3

08003030 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e041      	b.n	80030c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d106      	bne.n	800305c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7fe ff06 	bl	8001e68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2202      	movs	r2, #2
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3304      	adds	r3, #4
 800306c:	4619      	mov	r1, r3
 800306e:	4610      	mov	r0, r2
 8003070:	f000 f930 	bl	80032d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
	...

080030d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d001      	beq.n	80030e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e032      	b.n	800314e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a18      	ldr	r2, [pc, #96]	; (8003158 <HAL_TIM_Base_Start+0x88>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d00e      	beq.n	8003118 <HAL_TIM_Base_Start+0x48>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003102:	d009      	beq.n	8003118 <HAL_TIM_Base_Start+0x48>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a14      	ldr	r2, [pc, #80]	; (800315c <HAL_TIM_Base_Start+0x8c>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d004      	beq.n	8003118 <HAL_TIM_Base_Start+0x48>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a13      	ldr	r2, [pc, #76]	; (8003160 <HAL_TIM_Base_Start+0x90>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d111      	bne.n	800313c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2b06      	cmp	r3, #6
 8003128:	d010      	beq.n	800314c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f042 0201 	orr.w	r2, r2, #1
 8003138:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800313a:	e007      	b.n	800314c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 0201 	orr.w	r2, r2, #1
 800314a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3714      	adds	r7, #20
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr
 8003158:	40012c00 	.word	0x40012c00
 800315c:	40000400 	.word	0x40000400
 8003160:	40000800 	.word	0x40000800

08003164 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_TIM_ConfigClockSource+0x18>
 8003178:	2302      	movs	r3, #2
 800317a:	e0a6      	b.n	80032ca <HAL_TIM_ConfigClockSource+0x166>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2202      	movs	r2, #2
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800319a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b40      	cmp	r3, #64	; 0x40
 80031b2:	d067      	beq.n	8003284 <HAL_TIM_ConfigClockSource+0x120>
 80031b4:	2b40      	cmp	r3, #64	; 0x40
 80031b6:	d80b      	bhi.n	80031d0 <HAL_TIM_ConfigClockSource+0x6c>
 80031b8:	2b10      	cmp	r3, #16
 80031ba:	d073      	beq.n	80032a4 <HAL_TIM_ConfigClockSource+0x140>
 80031bc:	2b10      	cmp	r3, #16
 80031be:	d802      	bhi.n	80031c6 <HAL_TIM_ConfigClockSource+0x62>
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d06f      	beq.n	80032a4 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80031c4:	e078      	b.n	80032b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80031c6:	2b20      	cmp	r3, #32
 80031c8:	d06c      	beq.n	80032a4 <HAL_TIM_ConfigClockSource+0x140>
 80031ca:	2b30      	cmp	r3, #48	; 0x30
 80031cc:	d06a      	beq.n	80032a4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80031ce:	e073      	b.n	80032b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80031d0:	2b70      	cmp	r3, #112	; 0x70
 80031d2:	d00d      	beq.n	80031f0 <HAL_TIM_ConfigClockSource+0x8c>
 80031d4:	2b70      	cmp	r3, #112	; 0x70
 80031d6:	d804      	bhi.n	80031e2 <HAL_TIM_ConfigClockSource+0x7e>
 80031d8:	2b50      	cmp	r3, #80	; 0x50
 80031da:	d033      	beq.n	8003244 <HAL_TIM_ConfigClockSource+0xe0>
 80031dc:	2b60      	cmp	r3, #96	; 0x60
 80031de:	d041      	beq.n	8003264 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80031e0:	e06a      	b.n	80032b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80031e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031e6:	d066      	beq.n	80032b6 <HAL_TIM_ConfigClockSource+0x152>
 80031e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ec:	d017      	beq.n	800321e <HAL_TIM_ConfigClockSource+0xba>
      break;
 80031ee:	e063      	b.n	80032b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6818      	ldr	r0, [r3, #0]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	6899      	ldr	r1, [r3, #8]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	f000 f941 	bl	8003486 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003212:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	609a      	str	r2, [r3, #8]
      break;
 800321c:	e04c      	b.n	80032b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6818      	ldr	r0, [r3, #0]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	6899      	ldr	r1, [r3, #8]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f000 f92a 	bl	8003486 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003240:	609a      	str	r2, [r3, #8]
      break;
 8003242:	e039      	b.n	80032b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6818      	ldr	r0, [r3, #0]
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	6859      	ldr	r1, [r3, #4]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	461a      	mov	r2, r3
 8003252:	f000 f8a1 	bl	8003398 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2150      	movs	r1, #80	; 0x50
 800325c:	4618      	mov	r0, r3
 800325e:	f000 f8f8 	bl	8003452 <TIM_ITRx_SetConfig>
      break;
 8003262:	e029      	b.n	80032b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6818      	ldr	r0, [r3, #0]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	6859      	ldr	r1, [r3, #4]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	461a      	mov	r2, r3
 8003272:	f000 f8bf 	bl	80033f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2160      	movs	r1, #96	; 0x60
 800327c:	4618      	mov	r0, r3
 800327e:	f000 f8e8 	bl	8003452 <TIM_ITRx_SetConfig>
      break;
 8003282:	e019      	b.n	80032b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6818      	ldr	r0, [r3, #0]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	6859      	ldr	r1, [r3, #4]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	461a      	mov	r2, r3
 8003292:	f000 f881 	bl	8003398 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2140      	movs	r1, #64	; 0x40
 800329c:	4618      	mov	r0, r3
 800329e:	f000 f8d8 	bl	8003452 <TIM_ITRx_SetConfig>
      break;
 80032a2:	e009      	b.n	80032b8 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4619      	mov	r1, r3
 80032ae:	4610      	mov	r0, r2
 80032b0:	f000 f8cf 	bl	8003452 <TIM_ITRx_SetConfig>
        break;
 80032b4:	e000      	b.n	80032b8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80032b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
	...

080032d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a29      	ldr	r2, [pc, #164]	; (800338c <TIM_Base_SetConfig+0xb8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d00b      	beq.n	8003304 <TIM_Base_SetConfig+0x30>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f2:	d007      	beq.n	8003304 <TIM_Base_SetConfig+0x30>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a26      	ldr	r2, [pc, #152]	; (8003390 <TIM_Base_SetConfig+0xbc>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d003      	beq.n	8003304 <TIM_Base_SetConfig+0x30>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a25      	ldr	r2, [pc, #148]	; (8003394 <TIM_Base_SetConfig+0xc0>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d108      	bne.n	8003316 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800330a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	4313      	orrs	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a1c      	ldr	r2, [pc, #112]	; (800338c <TIM_Base_SetConfig+0xb8>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d00b      	beq.n	8003336 <TIM_Base_SetConfig+0x62>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003324:	d007      	beq.n	8003336 <TIM_Base_SetConfig+0x62>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a19      	ldr	r2, [pc, #100]	; (8003390 <TIM_Base_SetConfig+0xbc>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d003      	beq.n	8003336 <TIM_Base_SetConfig+0x62>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a18      	ldr	r2, [pc, #96]	; (8003394 <TIM_Base_SetConfig+0xc0>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d108      	bne.n	8003348 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800333c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	4313      	orrs	r3, r2
 8003346:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	4313      	orrs	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a07      	ldr	r2, [pc, #28]	; (800338c <TIM_Base_SetConfig+0xb8>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d103      	bne.n	800337c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	691a      	ldr	r2, [r3, #16]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	615a      	str	r2, [r3, #20]
}
 8003382:	bf00      	nop
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	bc80      	pop	{r7}
 800338a:	4770      	bx	lr
 800338c:	40012c00 	.word	0x40012c00
 8003390:	40000400 	.word	0x40000400
 8003394:	40000800 	.word	0x40000800

08003398 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003398:	b480      	push	{r7}
 800339a:	b087      	sub	sp, #28
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	f023 0201 	bic.w	r2, r3, #1
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f023 030a 	bic.w	r3, r3, #10
 80033d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	4313      	orrs	r3, r2
 80033dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	621a      	str	r2, [r3, #32]
}
 80033ea:	bf00      	nop
 80033ec:	371c      	adds	r7, #28
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bc80      	pop	{r7}
 80033f2:	4770      	bx	lr

080033f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	f023 0210 	bic.w	r2, r3, #16
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800341e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	031b      	lsls	r3, r3, #12
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	4313      	orrs	r3, r2
 8003428:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003430:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	011b      	lsls	r3, r3, #4
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	621a      	str	r2, [r3, #32]
}
 8003448:	bf00      	nop
 800344a:	371c      	adds	r7, #28
 800344c:	46bd      	mov	sp, r7
 800344e:	bc80      	pop	{r7}
 8003450:	4770      	bx	lr

08003452 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003452:	b480      	push	{r7}
 8003454:	b085      	sub	sp, #20
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
 800345a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003468:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4313      	orrs	r3, r2
 8003470:	f043 0307 	orr.w	r3, r3, #7
 8003474:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	609a      	str	r2, [r3, #8]
}
 800347c:	bf00      	nop
 800347e:	3714      	adds	r7, #20
 8003480:	46bd      	mov	sp, r7
 8003482:	bc80      	pop	{r7}
 8003484:	4770      	bx	lr

08003486 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003486:	b480      	push	{r7}
 8003488:	b087      	sub	sp, #28
 800348a:	af00      	add	r7, sp, #0
 800348c:	60f8      	str	r0, [r7, #12]
 800348e:	60b9      	str	r1, [r7, #8]
 8003490:	607a      	str	r2, [r7, #4]
 8003492:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	021a      	lsls	r2, r3, #8
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	431a      	orrs	r2, r3
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	609a      	str	r2, [r3, #8]
}
 80034ba:	bf00      	nop
 80034bc:	371c      	adds	r7, #28
 80034be:	46bd      	mov	sp, r7
 80034c0:	bc80      	pop	{r7}
 80034c2:	4770      	bx	lr

080034c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d101      	bne.n	80034dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034d8:	2302      	movs	r3, #2
 80034da:	e046      	b.n	800356a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2202      	movs	r2, #2
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003502:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	4313      	orrs	r3, r2
 800350c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a16      	ldr	r2, [pc, #88]	; (8003574 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d00e      	beq.n	800353e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003528:	d009      	beq.n	800353e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a12      	ldr	r2, [pc, #72]	; (8003578 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d004      	beq.n	800353e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a10      	ldr	r2, [pc, #64]	; (800357c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d10c      	bne.n	8003558 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003544:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	4313      	orrs	r3, r2
 800354e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr
 8003574:	40012c00 	.word	0x40012c00
 8003578:	40000400 	.word	0x40000400
 800357c:	40000800 	.word	0x40000800

08003580 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e03f      	b.n	8003612 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d106      	bne.n	80035ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7fe fc7c 	bl	8001ea4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2224      	movs	r2, #36	; 0x24
 80035b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 fb83 	bl	8003cd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	691a      	ldr	r2, [r3, #16]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	695a      	ldr	r2, [r3, #20]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68da      	ldr	r2, [r3, #12]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2220      	movs	r2, #32
 8003604:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b08a      	sub	sp, #40	; 0x28
 800361e:	af02      	add	r7, sp, #8
 8003620:	60f8      	str	r0, [r7, #12]
 8003622:	60b9      	str	r1, [r7, #8]
 8003624:	603b      	str	r3, [r7, #0]
 8003626:	4613      	mov	r3, r2
 8003628:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800362a:	2300      	movs	r3, #0
 800362c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b20      	cmp	r3, #32
 8003638:	d17c      	bne.n	8003734 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d002      	beq.n	8003646 <HAL_UART_Transmit+0x2c>
 8003640:	88fb      	ldrh	r3, [r7, #6]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e075      	b.n	8003736 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003650:	2b01      	cmp	r3, #1
 8003652:	d101      	bne.n	8003658 <HAL_UART_Transmit+0x3e>
 8003654:	2302      	movs	r3, #2
 8003656:	e06e      	b.n	8003736 <HAL_UART_Transmit+0x11c>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2221      	movs	r2, #33	; 0x21
 800366a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800366e:	f7fe fd89 	bl	8002184 <HAL_GetTick>
 8003672:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	88fa      	ldrh	r2, [r7, #6]
 8003678:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	88fa      	ldrh	r2, [r7, #6]
 800367e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003688:	d108      	bne.n	800369c <HAL_UART_Transmit+0x82>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d104      	bne.n	800369c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003692:	2300      	movs	r3, #0
 8003694:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	61bb      	str	r3, [r7, #24]
 800369a:	e003      	b.n	80036a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036a0:	2300      	movs	r3, #0
 80036a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80036ac:	e02a      	b.n	8003704 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2200      	movs	r2, #0
 80036b6:	2180      	movs	r1, #128	; 0x80
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 f9a7 	bl	8003a0c <UART_WaitOnFlagUntilTimeout>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e036      	b.n	8003736 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10b      	bne.n	80036e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	881b      	ldrh	r3, [r3, #0]
 80036d2:	461a      	mov	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	3302      	adds	r3, #2
 80036e2:	61bb      	str	r3, [r7, #24]
 80036e4:	e007      	b.n	80036f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	781a      	ldrb	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	3301      	adds	r3, #1
 80036f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	3b01      	subs	r3, #1
 80036fe:	b29a      	uxth	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003708:	b29b      	uxth	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1cf      	bne.n	80036ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2200      	movs	r2, #0
 8003716:	2140      	movs	r1, #64	; 0x40
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f000 f977 	bl	8003a0c <UART_WaitOnFlagUntilTimeout>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e006      	b.n	8003736 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2220      	movs	r2, #32
 800372c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003730:	2300      	movs	r3, #0
 8003732:	e000      	b.n	8003736 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003734:	2302      	movs	r3, #2
  }
}
 8003736:	4618      	mov	r0, r3
 8003738:	3720      	adds	r7, #32
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800373e:	b480      	push	{r7}
 8003740:	b085      	sub	sp, #20
 8003742:	af00      	add	r7, sp, #0
 8003744:	60f8      	str	r0, [r7, #12]
 8003746:	60b9      	str	r1, [r7, #8]
 8003748:	4613      	mov	r3, r2
 800374a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b20      	cmp	r3, #32
 8003756:	d140      	bne.n	80037da <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d002      	beq.n	8003764 <HAL_UART_Receive_IT+0x26>
 800375e:	88fb      	ldrh	r3, [r7, #6]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e039      	b.n	80037dc <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800376e:	2b01      	cmp	r3, #1
 8003770:	d101      	bne.n	8003776 <HAL_UART_Receive_IT+0x38>
 8003772:	2302      	movs	r3, #2
 8003774:	e032      	b.n	80037dc <HAL_UART_Receive_IT+0x9e>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	88fa      	ldrh	r2, [r7, #6]
 8003788:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	88fa      	ldrh	r2, [r7, #6]
 800378e:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2222      	movs	r2, #34	; 0x22
 800379a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68da      	ldr	r2, [r3, #12]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037b4:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	695a      	ldr	r2, [r3, #20]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f042 0201 	orr.w	r2, r2, #1
 80037c4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f042 0220 	orr.w	r2, r2, #32
 80037d4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80037d6:	2300      	movs	r3, #0
 80037d8:	e000      	b.n	80037dc <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80037da:	2302      	movs	r3, #2
  }
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bc80      	pop	{r7}
 80037e4:	4770      	bx	lr
	...

080037e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b088      	sub	sp, #32
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003808:	2300      	movs	r3, #0
 800380a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800380c:	2300      	movs	r3, #0
 800380e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	f003 030f 	and.w	r3, r3, #15
 8003816:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10d      	bne.n	800383a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	f003 0320 	and.w	r3, r3, #32
 8003824:	2b00      	cmp	r3, #0
 8003826:	d008      	beq.n	800383a <HAL_UART_IRQHandler+0x52>
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	f003 0320 	and.w	r3, r3, #32
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f9cc 	bl	8003bd0 <UART_Receive_IT>
      return;
 8003838:	e0d1      	b.n	80039de <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 80b0 	beq.w	80039a2 <HAL_UART_IRQHandler+0x1ba>
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	2b00      	cmp	r3, #0
 800384a:	d105      	bne.n	8003858 <HAL_UART_IRQHandler+0x70>
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 80a5 	beq.w	80039a2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00a      	beq.n	8003878 <HAL_UART_IRQHandler+0x90>
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003868:	2b00      	cmp	r3, #0
 800386a:	d005      	beq.n	8003878 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003870:	f043 0201 	orr.w	r2, r3, #1
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	f003 0304 	and.w	r3, r3, #4
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00a      	beq.n	8003898 <HAL_UART_IRQHandler+0xb0>
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b00      	cmp	r3, #0
 800388a:	d005      	beq.n	8003898 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003890:	f043 0202 	orr.w	r2, r3, #2
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00a      	beq.n	80038b8 <HAL_UART_IRQHandler+0xd0>
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d005      	beq.n	80038b8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b0:	f043 0204 	orr.w	r2, r3, #4
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	f003 0308 	and.w	r3, r3, #8
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00f      	beq.n	80038e2 <HAL_UART_IRQHandler+0xfa>
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d104      	bne.n	80038d6 <HAL_UART_IRQHandler+0xee>
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d005      	beq.n	80038e2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038da:	f043 0208 	orr.w	r2, r3, #8
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d078      	beq.n	80039dc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	f003 0320 	and.w	r3, r3, #32
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d007      	beq.n	8003904 <HAL_UART_IRQHandler+0x11c>
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	f003 0320 	and.w	r3, r3, #32
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d002      	beq.n	8003904 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f966 	bl	8003bd0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800390e:	2b00      	cmp	r3, #0
 8003910:	bf14      	ite	ne
 8003912:	2301      	movne	r3, #1
 8003914:	2300      	moveq	r3, #0
 8003916:	b2db      	uxtb	r3, r3
 8003918:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391e:	f003 0308 	and.w	r3, r3, #8
 8003922:	2b00      	cmp	r3, #0
 8003924:	d102      	bne.n	800392c <HAL_UART_IRQHandler+0x144>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d031      	beq.n	8003990 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 f8b7 	bl	8003aa0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393c:	2b00      	cmp	r3, #0
 800393e:	d023      	beq.n	8003988 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695a      	ldr	r2, [r3, #20]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800394e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003954:	2b00      	cmp	r3, #0
 8003956:	d013      	beq.n	8003980 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800395c:	4a21      	ldr	r2, [pc, #132]	; (80039e4 <HAL_UART_IRQHandler+0x1fc>)
 800395e:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003964:	4618      	mov	r0, r3
 8003966:	f7fe fd47 	bl	80023f8 <HAL_DMA_Abort_IT>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d016      	beq.n	800399e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800397a:	4610      	mov	r0, r2
 800397c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800397e:	e00e      	b.n	800399e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 f83a 	bl	80039fa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003986:	e00a      	b.n	800399e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 f836 	bl	80039fa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800398e:	e006      	b.n	800399e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 f832 	bl	80039fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800399c:	e01e      	b.n	80039dc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800399e:	bf00      	nop
    return;
 80039a0:	e01c      	b.n	80039dc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d008      	beq.n	80039be <HAL_UART_IRQHandler+0x1d6>
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f8a3 	bl	8003b02 <UART_Transmit_IT>
    return;
 80039bc:	e00f      	b.n	80039de <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00a      	beq.n	80039de <HAL_UART_IRQHandler+0x1f6>
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d005      	beq.n	80039de <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f8e4 	bl	8003ba0 <UART_EndTransmit_IT>
    return;
 80039d8:	bf00      	nop
 80039da:	e000      	b.n	80039de <HAL_UART_IRQHandler+0x1f6>
    return;
 80039dc:	bf00      	nop
  }
}
 80039de:	3720      	adds	r7, #32
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	08003adb 	.word	0x08003adb

080039e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bc80      	pop	{r7}
 80039f8:	4770      	bx	lr

080039fa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039fa:	b480      	push	{r7}
 80039fc:	b083      	sub	sp, #12
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bc80      	pop	{r7}
 8003a0a:	4770      	bx	lr

08003a0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	603b      	str	r3, [r7, #0]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a1c:	e02c      	b.n	8003a78 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a24:	d028      	beq.n	8003a78 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d007      	beq.n	8003a3c <UART_WaitOnFlagUntilTimeout+0x30>
 8003a2c:	f7fe fbaa 	bl	8002184 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	69ba      	ldr	r2, [r7, #24]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d21d      	bcs.n	8003a78 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68da      	ldr	r2, [r3, #12]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a4a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	695a      	ldr	r2, [r3, #20]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0201 	bic.w	r2, r2, #1
 8003a5a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2220      	movs	r2, #32
 8003a68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e00f      	b.n	8003a98 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	4013      	ands	r3, r2
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	bf0c      	ite	eq
 8003a88:	2301      	moveq	r3, #1
 8003a8a:	2300      	movne	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	461a      	mov	r2, r3
 8003a90:	79fb      	ldrb	r3, [r7, #7]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d0c3      	beq.n	8003a1e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ab6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695a      	ldr	r2, [r3, #20]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0201 	bic.w	r2, r2, #1
 8003ac6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2220      	movs	r2, #32
 8003acc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bc80      	pop	{r7}
 8003ad8:	4770      	bx	lr

08003ada <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b084      	sub	sp, #16
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f7ff ff80 	bl	80039fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003afa:	bf00      	nop
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b085      	sub	sp, #20
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b21      	cmp	r3, #33	; 0x21
 8003b14:	d13e      	bne.n	8003b94 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b1e:	d114      	bne.n	8003b4a <UART_Transmit_IT+0x48>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d110      	bne.n	8003b4a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	881b      	ldrh	r3, [r3, #0]
 8003b32:	461a      	mov	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b3c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	1c9a      	adds	r2, r3, #2
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	621a      	str	r2, [r3, #32]
 8003b48:	e008      	b.n	8003b5c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	1c59      	adds	r1, r3, #1
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	6211      	str	r1, [r2, #32]
 8003b54:	781a      	ldrb	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	3b01      	subs	r3, #1
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	4619      	mov	r1, r3
 8003b6a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10f      	bne.n	8003b90 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68da      	ldr	r2, [r3, #12]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b7e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b8e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b90:	2300      	movs	r3, #0
 8003b92:	e000      	b.n	8003b96 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003b94:	2302      	movs	r3, #2
  }
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bc80      	pop	{r7}
 8003b9e:	4770      	bx	lr

08003ba0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bb6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f7ff ff11 	bl	80039e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b22      	cmp	r3, #34	; 0x22
 8003be2:	d170      	bne.n	8003cc6 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bec:	d117      	bne.n	8003c1e <UART_Receive_IT+0x4e>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d113      	bne.n	8003c1e <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfe:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c16:	1c9a      	adds	r2, r3, #2
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	629a      	str	r2, [r3, #40]	; 0x28
 8003c1c:	e026      	b.n	8003c6c <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c22:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003c24:	2300      	movs	r3, #0
 8003c26:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c30:	d007      	beq.n	8003c42 <UART_Receive_IT+0x72>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10a      	bne.n	8003c50 <UART_Receive_IT+0x80>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d106      	bne.n	8003c50 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	b2da      	uxtb	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	701a      	strb	r2, [r3, #0]
 8003c4e:	e008      	b.n	8003c62 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c66:	1c5a      	adds	r2, r3, #1
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	3b01      	subs	r3, #1
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	4619      	mov	r1, r3
 8003c7a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d120      	bne.n	8003cc2 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68da      	ldr	r2, [r3, #12]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 0220 	bic.w	r2, r2, #32
 8003c8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68da      	ldr	r2, [r3, #12]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	695a      	ldr	r2, [r3, #20]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0201 	bic.w	r2, r2, #1
 8003cae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f7fe f81f 	bl	8001cfc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	e002      	b.n	8003cc8 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	e000      	b.n	8003cc8 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8003cc6:	2302      	movs	r3, #2
  }
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689a      	ldr	r2, [r3, #8]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003d0a:	f023 030c 	bic.w	r3, r3, #12
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	6812      	ldr	r2, [r2, #0]
 8003d12:	68b9      	ldr	r1, [r7, #8]
 8003d14:	430b      	orrs	r3, r1
 8003d16:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	699a      	ldr	r2, [r3, #24]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a2c      	ldr	r2, [pc, #176]	; (8003de4 <UART_SetConfig+0x114>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d103      	bne.n	8003d40 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d38:	f7ff f948 	bl	8002fcc <HAL_RCC_GetPCLK2Freq>
 8003d3c:	60f8      	str	r0, [r7, #12]
 8003d3e:	e002      	b.n	8003d46 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003d40:	f7ff f930 	bl	8002fa4 <HAL_RCC_GetPCLK1Freq>
 8003d44:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	009a      	lsls	r2, r3, #2
 8003d50:	441a      	add	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5c:	4a22      	ldr	r2, [pc, #136]	; (8003de8 <UART_SetConfig+0x118>)
 8003d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d62:	095b      	lsrs	r3, r3, #5
 8003d64:	0119      	lsls	r1, r3, #4
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009a      	lsls	r2, r3, #2
 8003d70:	441a      	add	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d7c:	4b1a      	ldr	r3, [pc, #104]	; (8003de8 <UART_SetConfig+0x118>)
 8003d7e:	fba3 0302 	umull	r0, r3, r3, r2
 8003d82:	095b      	lsrs	r3, r3, #5
 8003d84:	2064      	movs	r0, #100	; 0x64
 8003d86:	fb00 f303 	mul.w	r3, r0, r3
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	011b      	lsls	r3, r3, #4
 8003d8e:	3332      	adds	r3, #50	; 0x32
 8003d90:	4a15      	ldr	r2, [pc, #84]	; (8003de8 <UART_SetConfig+0x118>)
 8003d92:	fba2 2303 	umull	r2, r3, r2, r3
 8003d96:	095b      	lsrs	r3, r3, #5
 8003d98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d9c:	4419      	add	r1, r3
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	4613      	mov	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4413      	add	r3, r2
 8003da6:	009a      	lsls	r2, r3, #2
 8003da8:	441a      	add	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003db4:	4b0c      	ldr	r3, [pc, #48]	; (8003de8 <UART_SetConfig+0x118>)
 8003db6:	fba3 0302 	umull	r0, r3, r3, r2
 8003dba:	095b      	lsrs	r3, r3, #5
 8003dbc:	2064      	movs	r0, #100	; 0x64
 8003dbe:	fb00 f303 	mul.w	r3, r0, r3
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	3332      	adds	r3, #50	; 0x32
 8003dc8:	4a07      	ldr	r2, [pc, #28]	; (8003de8 <UART_SetConfig+0x118>)
 8003dca:	fba2 2303 	umull	r2, r3, r2, r3
 8003dce:	095b      	lsrs	r3, r3, #5
 8003dd0:	f003 020f 	and.w	r2, r3, #15
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	440a      	add	r2, r1
 8003dda:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ddc:	bf00      	nop
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40013800 	.word	0x40013800
 8003de8:	51eb851f 	.word	0x51eb851f

08003dec <__errno>:
 8003dec:	4b01      	ldr	r3, [pc, #4]	; (8003df4 <__errno+0x8>)
 8003dee:	6818      	ldr	r0, [r3, #0]
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	20000030 	.word	0x20000030

08003df8 <__libc_init_array>:
 8003df8:	b570      	push	{r4, r5, r6, lr}
 8003dfa:	2500      	movs	r5, #0
 8003dfc:	4e0c      	ldr	r6, [pc, #48]	; (8003e30 <__libc_init_array+0x38>)
 8003dfe:	4c0d      	ldr	r4, [pc, #52]	; (8003e34 <__libc_init_array+0x3c>)
 8003e00:	1ba4      	subs	r4, r4, r6
 8003e02:	10a4      	asrs	r4, r4, #2
 8003e04:	42a5      	cmp	r5, r4
 8003e06:	d109      	bne.n	8003e1c <__libc_init_array+0x24>
 8003e08:	f002 f8b4 	bl	8005f74 <_init>
 8003e0c:	2500      	movs	r5, #0
 8003e0e:	4e0a      	ldr	r6, [pc, #40]	; (8003e38 <__libc_init_array+0x40>)
 8003e10:	4c0a      	ldr	r4, [pc, #40]	; (8003e3c <__libc_init_array+0x44>)
 8003e12:	1ba4      	subs	r4, r4, r6
 8003e14:	10a4      	asrs	r4, r4, #2
 8003e16:	42a5      	cmp	r5, r4
 8003e18:	d105      	bne.n	8003e26 <__libc_init_array+0x2e>
 8003e1a:	bd70      	pop	{r4, r5, r6, pc}
 8003e1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e20:	4798      	blx	r3
 8003e22:	3501      	adds	r5, #1
 8003e24:	e7ee      	b.n	8003e04 <__libc_init_array+0xc>
 8003e26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e2a:	4798      	blx	r3
 8003e2c:	3501      	adds	r5, #1
 8003e2e:	e7f2      	b.n	8003e16 <__libc_init_array+0x1e>
 8003e30:	08006510 	.word	0x08006510
 8003e34:	08006510 	.word	0x08006510
 8003e38:	08006510 	.word	0x08006510
 8003e3c:	08006514 	.word	0x08006514

08003e40 <memcpy>:
 8003e40:	b510      	push	{r4, lr}
 8003e42:	1e43      	subs	r3, r0, #1
 8003e44:	440a      	add	r2, r1
 8003e46:	4291      	cmp	r1, r2
 8003e48:	d100      	bne.n	8003e4c <memcpy+0xc>
 8003e4a:	bd10      	pop	{r4, pc}
 8003e4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e54:	e7f7      	b.n	8003e46 <memcpy+0x6>

08003e56 <memset>:
 8003e56:	4603      	mov	r3, r0
 8003e58:	4402      	add	r2, r0
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d100      	bne.n	8003e60 <memset+0xa>
 8003e5e:	4770      	bx	lr
 8003e60:	f803 1b01 	strb.w	r1, [r3], #1
 8003e64:	e7f9      	b.n	8003e5a <memset+0x4>

08003e66 <__cvt>:
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e6c:	461e      	mov	r6, r3
 8003e6e:	bfbb      	ittet	lt
 8003e70:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003e74:	461e      	movlt	r6, r3
 8003e76:	2300      	movge	r3, #0
 8003e78:	232d      	movlt	r3, #45	; 0x2d
 8003e7a:	b088      	sub	sp, #32
 8003e7c:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003e7e:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8003e82:	f027 0720 	bic.w	r7, r7, #32
 8003e86:	2f46      	cmp	r7, #70	; 0x46
 8003e88:	4614      	mov	r4, r2
 8003e8a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003e8c:	700b      	strb	r3, [r1, #0]
 8003e8e:	d004      	beq.n	8003e9a <__cvt+0x34>
 8003e90:	2f45      	cmp	r7, #69	; 0x45
 8003e92:	d100      	bne.n	8003e96 <__cvt+0x30>
 8003e94:	3501      	adds	r5, #1
 8003e96:	2302      	movs	r3, #2
 8003e98:	e000      	b.n	8003e9c <__cvt+0x36>
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	aa07      	add	r2, sp, #28
 8003e9e:	9204      	str	r2, [sp, #16]
 8003ea0:	aa06      	add	r2, sp, #24
 8003ea2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003ea6:	e9cd 3500 	strd	r3, r5, [sp]
 8003eaa:	4622      	mov	r2, r4
 8003eac:	4633      	mov	r3, r6
 8003eae:	f000 fd2f 	bl	8004910 <_dtoa_r>
 8003eb2:	2f47      	cmp	r7, #71	; 0x47
 8003eb4:	4680      	mov	r8, r0
 8003eb6:	d102      	bne.n	8003ebe <__cvt+0x58>
 8003eb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003eba:	07db      	lsls	r3, r3, #31
 8003ebc:	d526      	bpl.n	8003f0c <__cvt+0xa6>
 8003ebe:	2f46      	cmp	r7, #70	; 0x46
 8003ec0:	eb08 0905 	add.w	r9, r8, r5
 8003ec4:	d111      	bne.n	8003eea <__cvt+0x84>
 8003ec6:	f898 3000 	ldrb.w	r3, [r8]
 8003eca:	2b30      	cmp	r3, #48	; 0x30
 8003ecc:	d10a      	bne.n	8003ee4 <__cvt+0x7e>
 8003ece:	2200      	movs	r2, #0
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	4620      	mov	r0, r4
 8003ed4:	4631      	mov	r1, r6
 8003ed6:	f7fc fd67 	bl	80009a8 <__aeabi_dcmpeq>
 8003eda:	b918      	cbnz	r0, 8003ee4 <__cvt+0x7e>
 8003edc:	f1c5 0501 	rsb	r5, r5, #1
 8003ee0:	f8ca 5000 	str.w	r5, [sl]
 8003ee4:	f8da 3000 	ldr.w	r3, [sl]
 8003ee8:	4499      	add	r9, r3
 8003eea:	2200      	movs	r2, #0
 8003eec:	2300      	movs	r3, #0
 8003eee:	4620      	mov	r0, r4
 8003ef0:	4631      	mov	r1, r6
 8003ef2:	f7fc fd59 	bl	80009a8 <__aeabi_dcmpeq>
 8003ef6:	b938      	cbnz	r0, 8003f08 <__cvt+0xa2>
 8003ef8:	2230      	movs	r2, #48	; 0x30
 8003efa:	9b07      	ldr	r3, [sp, #28]
 8003efc:	454b      	cmp	r3, r9
 8003efe:	d205      	bcs.n	8003f0c <__cvt+0xa6>
 8003f00:	1c59      	adds	r1, r3, #1
 8003f02:	9107      	str	r1, [sp, #28]
 8003f04:	701a      	strb	r2, [r3, #0]
 8003f06:	e7f8      	b.n	8003efa <__cvt+0x94>
 8003f08:	f8cd 901c 	str.w	r9, [sp, #28]
 8003f0c:	4640      	mov	r0, r8
 8003f0e:	9b07      	ldr	r3, [sp, #28]
 8003f10:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003f12:	eba3 0308 	sub.w	r3, r3, r8
 8003f16:	6013      	str	r3, [r2, #0]
 8003f18:	b008      	add	sp, #32
 8003f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003f1e <__exponent>:
 8003f1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f20:	2900      	cmp	r1, #0
 8003f22:	bfb4      	ite	lt
 8003f24:	232d      	movlt	r3, #45	; 0x2d
 8003f26:	232b      	movge	r3, #43	; 0x2b
 8003f28:	4604      	mov	r4, r0
 8003f2a:	bfb8      	it	lt
 8003f2c:	4249      	neglt	r1, r1
 8003f2e:	2909      	cmp	r1, #9
 8003f30:	f804 2b02 	strb.w	r2, [r4], #2
 8003f34:	7043      	strb	r3, [r0, #1]
 8003f36:	dd21      	ble.n	8003f7c <__exponent+0x5e>
 8003f38:	f10d 0307 	add.w	r3, sp, #7
 8003f3c:	461f      	mov	r7, r3
 8003f3e:	260a      	movs	r6, #10
 8003f40:	fb91 f5f6 	sdiv	r5, r1, r6
 8003f44:	fb06 1115 	mls	r1, r6, r5, r1
 8003f48:	2d09      	cmp	r5, #9
 8003f4a:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8003f4e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003f52:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8003f56:	4629      	mov	r1, r5
 8003f58:	dc09      	bgt.n	8003f6e <__exponent+0x50>
 8003f5a:	3130      	adds	r1, #48	; 0x30
 8003f5c:	3b02      	subs	r3, #2
 8003f5e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003f62:	42bb      	cmp	r3, r7
 8003f64:	4622      	mov	r2, r4
 8003f66:	d304      	bcc.n	8003f72 <__exponent+0x54>
 8003f68:	1a10      	subs	r0, r2, r0
 8003f6a:	b003      	add	sp, #12
 8003f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f6e:	4613      	mov	r3, r2
 8003f70:	e7e6      	b.n	8003f40 <__exponent+0x22>
 8003f72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f76:	f804 2b01 	strb.w	r2, [r4], #1
 8003f7a:	e7f2      	b.n	8003f62 <__exponent+0x44>
 8003f7c:	2330      	movs	r3, #48	; 0x30
 8003f7e:	4419      	add	r1, r3
 8003f80:	7083      	strb	r3, [r0, #2]
 8003f82:	1d02      	adds	r2, r0, #4
 8003f84:	70c1      	strb	r1, [r0, #3]
 8003f86:	e7ef      	b.n	8003f68 <__exponent+0x4a>

08003f88 <_printf_float>:
 8003f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f8c:	b091      	sub	sp, #68	; 0x44
 8003f8e:	460c      	mov	r4, r1
 8003f90:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8003f92:	4693      	mov	fp, r2
 8003f94:	461e      	mov	r6, r3
 8003f96:	4605      	mov	r5, r0
 8003f98:	f001 fa6e 	bl	8005478 <_localeconv_r>
 8003f9c:	6803      	ldr	r3, [r0, #0]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	9309      	str	r3, [sp, #36]	; 0x24
 8003fa2:	f7fc f8d5 	bl	8000150 <strlen>
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	930e      	str	r3, [sp, #56]	; 0x38
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	900a      	str	r0, [sp, #40]	; 0x28
 8003fae:	3307      	adds	r3, #7
 8003fb0:	f023 0307 	bic.w	r3, r3, #7
 8003fb4:	f103 0208 	add.w	r2, r3, #8
 8003fb8:	f894 8018 	ldrb.w	r8, [r4, #24]
 8003fbc:	f8d4 a000 	ldr.w	sl, [r4]
 8003fc0:	603a      	str	r2, [r7, #0]
 8003fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003fca:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8003fce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003fd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8003fd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fd8:	4ba6      	ldr	r3, [pc, #664]	; (8004274 <_printf_float+0x2ec>)
 8003fda:	4638      	mov	r0, r7
 8003fdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003fde:	f7fc fd15 	bl	8000a0c <__aeabi_dcmpun>
 8003fe2:	bb68      	cbnz	r0, 8004040 <_printf_float+0xb8>
 8003fe4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fe8:	4ba2      	ldr	r3, [pc, #648]	; (8004274 <_printf_float+0x2ec>)
 8003fea:	4638      	mov	r0, r7
 8003fec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003fee:	f7fc fcef 	bl	80009d0 <__aeabi_dcmple>
 8003ff2:	bb28      	cbnz	r0, 8004040 <_printf_float+0xb8>
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	4638      	mov	r0, r7
 8003ffa:	4649      	mov	r1, r9
 8003ffc:	f7fc fcde 	bl	80009bc <__aeabi_dcmplt>
 8004000:	b110      	cbz	r0, 8004008 <_printf_float+0x80>
 8004002:	232d      	movs	r3, #45	; 0x2d
 8004004:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004008:	4f9b      	ldr	r7, [pc, #620]	; (8004278 <_printf_float+0x2f0>)
 800400a:	4b9c      	ldr	r3, [pc, #624]	; (800427c <_printf_float+0x2f4>)
 800400c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004010:	bf98      	it	ls
 8004012:	461f      	movls	r7, r3
 8004014:	2303      	movs	r3, #3
 8004016:	f04f 0900 	mov.w	r9, #0
 800401a:	6123      	str	r3, [r4, #16]
 800401c:	f02a 0304 	bic.w	r3, sl, #4
 8004020:	6023      	str	r3, [r4, #0]
 8004022:	9600      	str	r6, [sp, #0]
 8004024:	465b      	mov	r3, fp
 8004026:	aa0f      	add	r2, sp, #60	; 0x3c
 8004028:	4621      	mov	r1, r4
 800402a:	4628      	mov	r0, r5
 800402c:	f000 f9e2 	bl	80043f4 <_printf_common>
 8004030:	3001      	adds	r0, #1
 8004032:	f040 8090 	bne.w	8004156 <_printf_float+0x1ce>
 8004036:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800403a:	b011      	add	sp, #68	; 0x44
 800403c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004040:	463a      	mov	r2, r7
 8004042:	464b      	mov	r3, r9
 8004044:	4638      	mov	r0, r7
 8004046:	4649      	mov	r1, r9
 8004048:	f7fc fce0 	bl	8000a0c <__aeabi_dcmpun>
 800404c:	b110      	cbz	r0, 8004054 <_printf_float+0xcc>
 800404e:	4f8c      	ldr	r7, [pc, #560]	; (8004280 <_printf_float+0x2f8>)
 8004050:	4b8c      	ldr	r3, [pc, #560]	; (8004284 <_printf_float+0x2fc>)
 8004052:	e7db      	b.n	800400c <_printf_float+0x84>
 8004054:	6863      	ldr	r3, [r4, #4]
 8004056:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800405a:	1c59      	adds	r1, r3, #1
 800405c:	a80d      	add	r0, sp, #52	; 0x34
 800405e:	a90e      	add	r1, sp, #56	; 0x38
 8004060:	d140      	bne.n	80040e4 <_printf_float+0x15c>
 8004062:	2306      	movs	r3, #6
 8004064:	6063      	str	r3, [r4, #4]
 8004066:	f04f 0c00 	mov.w	ip, #0
 800406a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800406e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004072:	6863      	ldr	r3, [r4, #4]
 8004074:	6022      	str	r2, [r4, #0]
 8004076:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	463a      	mov	r2, r7
 800407e:	464b      	mov	r3, r9
 8004080:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004084:	4628      	mov	r0, r5
 8004086:	f7ff feee 	bl	8003e66 <__cvt>
 800408a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800408e:	2b47      	cmp	r3, #71	; 0x47
 8004090:	4607      	mov	r7, r0
 8004092:	d109      	bne.n	80040a8 <_printf_float+0x120>
 8004094:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004096:	1cd8      	adds	r0, r3, #3
 8004098:	db02      	blt.n	80040a0 <_printf_float+0x118>
 800409a:	6862      	ldr	r2, [r4, #4]
 800409c:	4293      	cmp	r3, r2
 800409e:	dd47      	ble.n	8004130 <_printf_float+0x1a8>
 80040a0:	f1a8 0802 	sub.w	r8, r8, #2
 80040a4:	fa5f f888 	uxtb.w	r8, r8
 80040a8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80040ac:	990d      	ldr	r1, [sp, #52]	; 0x34
 80040ae:	d824      	bhi.n	80040fa <_printf_float+0x172>
 80040b0:	3901      	subs	r1, #1
 80040b2:	4642      	mov	r2, r8
 80040b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80040b8:	910d      	str	r1, [sp, #52]	; 0x34
 80040ba:	f7ff ff30 	bl	8003f1e <__exponent>
 80040be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80040c0:	4681      	mov	r9, r0
 80040c2:	1813      	adds	r3, r2, r0
 80040c4:	2a01      	cmp	r2, #1
 80040c6:	6123      	str	r3, [r4, #16]
 80040c8:	dc02      	bgt.n	80040d0 <_printf_float+0x148>
 80040ca:	6822      	ldr	r2, [r4, #0]
 80040cc:	07d1      	lsls	r1, r2, #31
 80040ce:	d501      	bpl.n	80040d4 <_printf_float+0x14c>
 80040d0:	3301      	adds	r3, #1
 80040d2:	6123      	str	r3, [r4, #16]
 80040d4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d0a2      	beq.n	8004022 <_printf_float+0x9a>
 80040dc:	232d      	movs	r3, #45	; 0x2d
 80040de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040e2:	e79e      	b.n	8004022 <_printf_float+0x9a>
 80040e4:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80040e8:	f000 816e 	beq.w	80043c8 <_printf_float+0x440>
 80040ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80040f0:	d1b9      	bne.n	8004066 <_printf_float+0xde>
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1b7      	bne.n	8004066 <_printf_float+0xde>
 80040f6:	2301      	movs	r3, #1
 80040f8:	e7b4      	b.n	8004064 <_printf_float+0xdc>
 80040fa:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80040fe:	d119      	bne.n	8004134 <_printf_float+0x1ac>
 8004100:	2900      	cmp	r1, #0
 8004102:	6863      	ldr	r3, [r4, #4]
 8004104:	dd0c      	ble.n	8004120 <_printf_float+0x198>
 8004106:	6121      	str	r1, [r4, #16]
 8004108:	b913      	cbnz	r3, 8004110 <_printf_float+0x188>
 800410a:	6822      	ldr	r2, [r4, #0]
 800410c:	07d2      	lsls	r2, r2, #31
 800410e:	d502      	bpl.n	8004116 <_printf_float+0x18e>
 8004110:	3301      	adds	r3, #1
 8004112:	440b      	add	r3, r1
 8004114:	6123      	str	r3, [r4, #16]
 8004116:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004118:	f04f 0900 	mov.w	r9, #0
 800411c:	65a3      	str	r3, [r4, #88]	; 0x58
 800411e:	e7d9      	b.n	80040d4 <_printf_float+0x14c>
 8004120:	b913      	cbnz	r3, 8004128 <_printf_float+0x1a0>
 8004122:	6822      	ldr	r2, [r4, #0]
 8004124:	07d0      	lsls	r0, r2, #31
 8004126:	d501      	bpl.n	800412c <_printf_float+0x1a4>
 8004128:	3302      	adds	r3, #2
 800412a:	e7f3      	b.n	8004114 <_printf_float+0x18c>
 800412c:	2301      	movs	r3, #1
 800412e:	e7f1      	b.n	8004114 <_printf_float+0x18c>
 8004130:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004134:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004138:	4293      	cmp	r3, r2
 800413a:	db05      	blt.n	8004148 <_printf_float+0x1c0>
 800413c:	6822      	ldr	r2, [r4, #0]
 800413e:	6123      	str	r3, [r4, #16]
 8004140:	07d1      	lsls	r1, r2, #31
 8004142:	d5e8      	bpl.n	8004116 <_printf_float+0x18e>
 8004144:	3301      	adds	r3, #1
 8004146:	e7e5      	b.n	8004114 <_printf_float+0x18c>
 8004148:	2b00      	cmp	r3, #0
 800414a:	bfcc      	ite	gt
 800414c:	2301      	movgt	r3, #1
 800414e:	f1c3 0302 	rsble	r3, r3, #2
 8004152:	4413      	add	r3, r2
 8004154:	e7de      	b.n	8004114 <_printf_float+0x18c>
 8004156:	6823      	ldr	r3, [r4, #0]
 8004158:	055a      	lsls	r2, r3, #21
 800415a:	d407      	bmi.n	800416c <_printf_float+0x1e4>
 800415c:	6923      	ldr	r3, [r4, #16]
 800415e:	463a      	mov	r2, r7
 8004160:	4659      	mov	r1, fp
 8004162:	4628      	mov	r0, r5
 8004164:	47b0      	blx	r6
 8004166:	3001      	adds	r0, #1
 8004168:	d129      	bne.n	80041be <_printf_float+0x236>
 800416a:	e764      	b.n	8004036 <_printf_float+0xae>
 800416c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004170:	f240 80d7 	bls.w	8004322 <_printf_float+0x39a>
 8004174:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004178:	2200      	movs	r2, #0
 800417a:	2300      	movs	r3, #0
 800417c:	f7fc fc14 	bl	80009a8 <__aeabi_dcmpeq>
 8004180:	b388      	cbz	r0, 80041e6 <_printf_float+0x25e>
 8004182:	2301      	movs	r3, #1
 8004184:	4a40      	ldr	r2, [pc, #256]	; (8004288 <_printf_float+0x300>)
 8004186:	4659      	mov	r1, fp
 8004188:	4628      	mov	r0, r5
 800418a:	47b0      	blx	r6
 800418c:	3001      	adds	r0, #1
 800418e:	f43f af52 	beq.w	8004036 <_printf_float+0xae>
 8004192:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004196:	429a      	cmp	r2, r3
 8004198:	db02      	blt.n	80041a0 <_printf_float+0x218>
 800419a:	6823      	ldr	r3, [r4, #0]
 800419c:	07d8      	lsls	r0, r3, #31
 800419e:	d50e      	bpl.n	80041be <_printf_float+0x236>
 80041a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041a4:	4659      	mov	r1, fp
 80041a6:	4628      	mov	r0, r5
 80041a8:	47b0      	blx	r6
 80041aa:	3001      	adds	r0, #1
 80041ac:	f43f af43 	beq.w	8004036 <_printf_float+0xae>
 80041b0:	2700      	movs	r7, #0
 80041b2:	f104 081a 	add.w	r8, r4, #26
 80041b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041b8:	3b01      	subs	r3, #1
 80041ba:	42bb      	cmp	r3, r7
 80041bc:	dc09      	bgt.n	80041d2 <_printf_float+0x24a>
 80041be:	6823      	ldr	r3, [r4, #0]
 80041c0:	079f      	lsls	r7, r3, #30
 80041c2:	f100 80fd 	bmi.w	80043c0 <_printf_float+0x438>
 80041c6:	68e0      	ldr	r0, [r4, #12]
 80041c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80041ca:	4298      	cmp	r0, r3
 80041cc:	bfb8      	it	lt
 80041ce:	4618      	movlt	r0, r3
 80041d0:	e733      	b.n	800403a <_printf_float+0xb2>
 80041d2:	2301      	movs	r3, #1
 80041d4:	4642      	mov	r2, r8
 80041d6:	4659      	mov	r1, fp
 80041d8:	4628      	mov	r0, r5
 80041da:	47b0      	blx	r6
 80041dc:	3001      	adds	r0, #1
 80041de:	f43f af2a 	beq.w	8004036 <_printf_float+0xae>
 80041e2:	3701      	adds	r7, #1
 80041e4:	e7e7      	b.n	80041b6 <_printf_float+0x22e>
 80041e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	dc2b      	bgt.n	8004244 <_printf_float+0x2bc>
 80041ec:	2301      	movs	r3, #1
 80041ee:	4a26      	ldr	r2, [pc, #152]	; (8004288 <_printf_float+0x300>)
 80041f0:	4659      	mov	r1, fp
 80041f2:	4628      	mov	r0, r5
 80041f4:	47b0      	blx	r6
 80041f6:	3001      	adds	r0, #1
 80041f8:	f43f af1d 	beq.w	8004036 <_printf_float+0xae>
 80041fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80041fe:	b923      	cbnz	r3, 800420a <_printf_float+0x282>
 8004200:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004202:	b913      	cbnz	r3, 800420a <_printf_float+0x282>
 8004204:	6823      	ldr	r3, [r4, #0]
 8004206:	07d9      	lsls	r1, r3, #31
 8004208:	d5d9      	bpl.n	80041be <_printf_float+0x236>
 800420a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800420e:	4659      	mov	r1, fp
 8004210:	4628      	mov	r0, r5
 8004212:	47b0      	blx	r6
 8004214:	3001      	adds	r0, #1
 8004216:	f43f af0e 	beq.w	8004036 <_printf_float+0xae>
 800421a:	f04f 0800 	mov.w	r8, #0
 800421e:	f104 091a 	add.w	r9, r4, #26
 8004222:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004224:	425b      	negs	r3, r3
 8004226:	4543      	cmp	r3, r8
 8004228:	dc01      	bgt.n	800422e <_printf_float+0x2a6>
 800422a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800422c:	e797      	b.n	800415e <_printf_float+0x1d6>
 800422e:	2301      	movs	r3, #1
 8004230:	464a      	mov	r2, r9
 8004232:	4659      	mov	r1, fp
 8004234:	4628      	mov	r0, r5
 8004236:	47b0      	blx	r6
 8004238:	3001      	adds	r0, #1
 800423a:	f43f aefc 	beq.w	8004036 <_printf_float+0xae>
 800423e:	f108 0801 	add.w	r8, r8, #1
 8004242:	e7ee      	b.n	8004222 <_printf_float+0x29a>
 8004244:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004246:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004248:	429a      	cmp	r2, r3
 800424a:	bfa8      	it	ge
 800424c:	461a      	movge	r2, r3
 800424e:	2a00      	cmp	r2, #0
 8004250:	4690      	mov	r8, r2
 8004252:	dd07      	ble.n	8004264 <_printf_float+0x2dc>
 8004254:	4613      	mov	r3, r2
 8004256:	4659      	mov	r1, fp
 8004258:	463a      	mov	r2, r7
 800425a:	4628      	mov	r0, r5
 800425c:	47b0      	blx	r6
 800425e:	3001      	adds	r0, #1
 8004260:	f43f aee9 	beq.w	8004036 <_printf_float+0xae>
 8004264:	f104 031a 	add.w	r3, r4, #26
 8004268:	f04f 0a00 	mov.w	sl, #0
 800426c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004270:	930b      	str	r3, [sp, #44]	; 0x2c
 8004272:	e015      	b.n	80042a0 <_printf_float+0x318>
 8004274:	7fefffff 	.word	0x7fefffff
 8004278:	080062b0 	.word	0x080062b0
 800427c:	080062ac 	.word	0x080062ac
 8004280:	080062b8 	.word	0x080062b8
 8004284:	080062b4 	.word	0x080062b4
 8004288:	080062bc 	.word	0x080062bc
 800428c:	2301      	movs	r3, #1
 800428e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004290:	4659      	mov	r1, fp
 8004292:	4628      	mov	r0, r5
 8004294:	47b0      	blx	r6
 8004296:	3001      	adds	r0, #1
 8004298:	f43f aecd 	beq.w	8004036 <_printf_float+0xae>
 800429c:	f10a 0a01 	add.w	sl, sl, #1
 80042a0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80042a4:	eba9 0308 	sub.w	r3, r9, r8
 80042a8:	4553      	cmp	r3, sl
 80042aa:	dcef      	bgt.n	800428c <_printf_float+0x304>
 80042ac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80042b0:	429a      	cmp	r2, r3
 80042b2:	444f      	add	r7, r9
 80042b4:	db14      	blt.n	80042e0 <_printf_float+0x358>
 80042b6:	6823      	ldr	r3, [r4, #0]
 80042b8:	07da      	lsls	r2, r3, #31
 80042ba:	d411      	bmi.n	80042e0 <_printf_float+0x358>
 80042bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042be:	990d      	ldr	r1, [sp, #52]	; 0x34
 80042c0:	eba3 0209 	sub.w	r2, r3, r9
 80042c4:	eba3 0901 	sub.w	r9, r3, r1
 80042c8:	4591      	cmp	r9, r2
 80042ca:	bfa8      	it	ge
 80042cc:	4691      	movge	r9, r2
 80042ce:	f1b9 0f00 	cmp.w	r9, #0
 80042d2:	dc0d      	bgt.n	80042f0 <_printf_float+0x368>
 80042d4:	2700      	movs	r7, #0
 80042d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80042da:	f104 081a 	add.w	r8, r4, #26
 80042de:	e018      	b.n	8004312 <_printf_float+0x38a>
 80042e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042e4:	4659      	mov	r1, fp
 80042e6:	4628      	mov	r0, r5
 80042e8:	47b0      	blx	r6
 80042ea:	3001      	adds	r0, #1
 80042ec:	d1e6      	bne.n	80042bc <_printf_float+0x334>
 80042ee:	e6a2      	b.n	8004036 <_printf_float+0xae>
 80042f0:	464b      	mov	r3, r9
 80042f2:	463a      	mov	r2, r7
 80042f4:	4659      	mov	r1, fp
 80042f6:	4628      	mov	r0, r5
 80042f8:	47b0      	blx	r6
 80042fa:	3001      	adds	r0, #1
 80042fc:	d1ea      	bne.n	80042d4 <_printf_float+0x34c>
 80042fe:	e69a      	b.n	8004036 <_printf_float+0xae>
 8004300:	2301      	movs	r3, #1
 8004302:	4642      	mov	r2, r8
 8004304:	4659      	mov	r1, fp
 8004306:	4628      	mov	r0, r5
 8004308:	47b0      	blx	r6
 800430a:	3001      	adds	r0, #1
 800430c:	f43f ae93 	beq.w	8004036 <_printf_float+0xae>
 8004310:	3701      	adds	r7, #1
 8004312:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004316:	1a9b      	subs	r3, r3, r2
 8004318:	eba3 0309 	sub.w	r3, r3, r9
 800431c:	42bb      	cmp	r3, r7
 800431e:	dcef      	bgt.n	8004300 <_printf_float+0x378>
 8004320:	e74d      	b.n	80041be <_printf_float+0x236>
 8004322:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004324:	2a01      	cmp	r2, #1
 8004326:	dc01      	bgt.n	800432c <_printf_float+0x3a4>
 8004328:	07db      	lsls	r3, r3, #31
 800432a:	d538      	bpl.n	800439e <_printf_float+0x416>
 800432c:	2301      	movs	r3, #1
 800432e:	463a      	mov	r2, r7
 8004330:	4659      	mov	r1, fp
 8004332:	4628      	mov	r0, r5
 8004334:	47b0      	blx	r6
 8004336:	3001      	adds	r0, #1
 8004338:	f43f ae7d 	beq.w	8004036 <_printf_float+0xae>
 800433c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004340:	4659      	mov	r1, fp
 8004342:	4628      	mov	r0, r5
 8004344:	47b0      	blx	r6
 8004346:	3001      	adds	r0, #1
 8004348:	f107 0701 	add.w	r7, r7, #1
 800434c:	f43f ae73 	beq.w	8004036 <_printf_float+0xae>
 8004350:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004354:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004356:	2200      	movs	r2, #0
 8004358:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800435c:	2300      	movs	r3, #0
 800435e:	f7fc fb23 	bl	80009a8 <__aeabi_dcmpeq>
 8004362:	b9c0      	cbnz	r0, 8004396 <_printf_float+0x40e>
 8004364:	4643      	mov	r3, r8
 8004366:	463a      	mov	r2, r7
 8004368:	4659      	mov	r1, fp
 800436a:	4628      	mov	r0, r5
 800436c:	47b0      	blx	r6
 800436e:	3001      	adds	r0, #1
 8004370:	d10d      	bne.n	800438e <_printf_float+0x406>
 8004372:	e660      	b.n	8004036 <_printf_float+0xae>
 8004374:	2301      	movs	r3, #1
 8004376:	4642      	mov	r2, r8
 8004378:	4659      	mov	r1, fp
 800437a:	4628      	mov	r0, r5
 800437c:	47b0      	blx	r6
 800437e:	3001      	adds	r0, #1
 8004380:	f43f ae59 	beq.w	8004036 <_printf_float+0xae>
 8004384:	3701      	adds	r7, #1
 8004386:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004388:	3b01      	subs	r3, #1
 800438a:	42bb      	cmp	r3, r7
 800438c:	dcf2      	bgt.n	8004374 <_printf_float+0x3ec>
 800438e:	464b      	mov	r3, r9
 8004390:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004394:	e6e4      	b.n	8004160 <_printf_float+0x1d8>
 8004396:	2700      	movs	r7, #0
 8004398:	f104 081a 	add.w	r8, r4, #26
 800439c:	e7f3      	b.n	8004386 <_printf_float+0x3fe>
 800439e:	2301      	movs	r3, #1
 80043a0:	e7e1      	b.n	8004366 <_printf_float+0x3de>
 80043a2:	2301      	movs	r3, #1
 80043a4:	4642      	mov	r2, r8
 80043a6:	4659      	mov	r1, fp
 80043a8:	4628      	mov	r0, r5
 80043aa:	47b0      	blx	r6
 80043ac:	3001      	adds	r0, #1
 80043ae:	f43f ae42 	beq.w	8004036 <_printf_float+0xae>
 80043b2:	3701      	adds	r7, #1
 80043b4:	68e3      	ldr	r3, [r4, #12]
 80043b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80043b8:	1a9b      	subs	r3, r3, r2
 80043ba:	42bb      	cmp	r3, r7
 80043bc:	dcf1      	bgt.n	80043a2 <_printf_float+0x41a>
 80043be:	e702      	b.n	80041c6 <_printf_float+0x23e>
 80043c0:	2700      	movs	r7, #0
 80043c2:	f104 0819 	add.w	r8, r4, #25
 80043c6:	e7f5      	b.n	80043b4 <_printf_float+0x42c>
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f43f ae94 	beq.w	80040f6 <_printf_float+0x16e>
 80043ce:	f04f 0c00 	mov.w	ip, #0
 80043d2:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80043d6:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80043da:	6022      	str	r2, [r4, #0]
 80043dc:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80043e0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	463a      	mov	r2, r7
 80043e8:	464b      	mov	r3, r9
 80043ea:	4628      	mov	r0, r5
 80043ec:	f7ff fd3b 	bl	8003e66 <__cvt>
 80043f0:	4607      	mov	r7, r0
 80043f2:	e64f      	b.n	8004094 <_printf_float+0x10c>

080043f4 <_printf_common>:
 80043f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043f8:	4691      	mov	r9, r2
 80043fa:	461f      	mov	r7, r3
 80043fc:	688a      	ldr	r2, [r1, #8]
 80043fe:	690b      	ldr	r3, [r1, #16]
 8004400:	4606      	mov	r6, r0
 8004402:	4293      	cmp	r3, r2
 8004404:	bfb8      	it	lt
 8004406:	4613      	movlt	r3, r2
 8004408:	f8c9 3000 	str.w	r3, [r9]
 800440c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004410:	460c      	mov	r4, r1
 8004412:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004416:	b112      	cbz	r2, 800441e <_printf_common+0x2a>
 8004418:	3301      	adds	r3, #1
 800441a:	f8c9 3000 	str.w	r3, [r9]
 800441e:	6823      	ldr	r3, [r4, #0]
 8004420:	0699      	lsls	r1, r3, #26
 8004422:	bf42      	ittt	mi
 8004424:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004428:	3302      	addmi	r3, #2
 800442a:	f8c9 3000 	strmi.w	r3, [r9]
 800442e:	6825      	ldr	r5, [r4, #0]
 8004430:	f015 0506 	ands.w	r5, r5, #6
 8004434:	d107      	bne.n	8004446 <_printf_common+0x52>
 8004436:	f104 0a19 	add.w	sl, r4, #25
 800443a:	68e3      	ldr	r3, [r4, #12]
 800443c:	f8d9 2000 	ldr.w	r2, [r9]
 8004440:	1a9b      	subs	r3, r3, r2
 8004442:	42ab      	cmp	r3, r5
 8004444:	dc29      	bgt.n	800449a <_printf_common+0xa6>
 8004446:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800444a:	6822      	ldr	r2, [r4, #0]
 800444c:	3300      	adds	r3, #0
 800444e:	bf18      	it	ne
 8004450:	2301      	movne	r3, #1
 8004452:	0692      	lsls	r2, r2, #26
 8004454:	d42e      	bmi.n	80044b4 <_printf_common+0xc0>
 8004456:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800445a:	4639      	mov	r1, r7
 800445c:	4630      	mov	r0, r6
 800445e:	47c0      	blx	r8
 8004460:	3001      	adds	r0, #1
 8004462:	d021      	beq.n	80044a8 <_printf_common+0xb4>
 8004464:	6823      	ldr	r3, [r4, #0]
 8004466:	68e5      	ldr	r5, [r4, #12]
 8004468:	f003 0306 	and.w	r3, r3, #6
 800446c:	2b04      	cmp	r3, #4
 800446e:	bf18      	it	ne
 8004470:	2500      	movne	r5, #0
 8004472:	f8d9 2000 	ldr.w	r2, [r9]
 8004476:	f04f 0900 	mov.w	r9, #0
 800447a:	bf08      	it	eq
 800447c:	1aad      	subeq	r5, r5, r2
 800447e:	68a3      	ldr	r3, [r4, #8]
 8004480:	6922      	ldr	r2, [r4, #16]
 8004482:	bf08      	it	eq
 8004484:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004488:	4293      	cmp	r3, r2
 800448a:	bfc4      	itt	gt
 800448c:	1a9b      	subgt	r3, r3, r2
 800448e:	18ed      	addgt	r5, r5, r3
 8004490:	341a      	adds	r4, #26
 8004492:	454d      	cmp	r5, r9
 8004494:	d11a      	bne.n	80044cc <_printf_common+0xd8>
 8004496:	2000      	movs	r0, #0
 8004498:	e008      	b.n	80044ac <_printf_common+0xb8>
 800449a:	2301      	movs	r3, #1
 800449c:	4652      	mov	r2, sl
 800449e:	4639      	mov	r1, r7
 80044a0:	4630      	mov	r0, r6
 80044a2:	47c0      	blx	r8
 80044a4:	3001      	adds	r0, #1
 80044a6:	d103      	bne.n	80044b0 <_printf_common+0xbc>
 80044a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044b0:	3501      	adds	r5, #1
 80044b2:	e7c2      	b.n	800443a <_printf_common+0x46>
 80044b4:	2030      	movs	r0, #48	; 0x30
 80044b6:	18e1      	adds	r1, r4, r3
 80044b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044bc:	1c5a      	adds	r2, r3, #1
 80044be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044c2:	4422      	add	r2, r4
 80044c4:	3302      	adds	r3, #2
 80044c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044ca:	e7c4      	b.n	8004456 <_printf_common+0x62>
 80044cc:	2301      	movs	r3, #1
 80044ce:	4622      	mov	r2, r4
 80044d0:	4639      	mov	r1, r7
 80044d2:	4630      	mov	r0, r6
 80044d4:	47c0      	blx	r8
 80044d6:	3001      	adds	r0, #1
 80044d8:	d0e6      	beq.n	80044a8 <_printf_common+0xb4>
 80044da:	f109 0901 	add.w	r9, r9, #1
 80044de:	e7d8      	b.n	8004492 <_printf_common+0x9e>

080044e0 <_printf_i>:
 80044e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80044e4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80044e8:	460c      	mov	r4, r1
 80044ea:	7e09      	ldrb	r1, [r1, #24]
 80044ec:	b085      	sub	sp, #20
 80044ee:	296e      	cmp	r1, #110	; 0x6e
 80044f0:	4617      	mov	r7, r2
 80044f2:	4606      	mov	r6, r0
 80044f4:	4698      	mov	r8, r3
 80044f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80044f8:	f000 80b3 	beq.w	8004662 <_printf_i+0x182>
 80044fc:	d822      	bhi.n	8004544 <_printf_i+0x64>
 80044fe:	2963      	cmp	r1, #99	; 0x63
 8004500:	d036      	beq.n	8004570 <_printf_i+0x90>
 8004502:	d80a      	bhi.n	800451a <_printf_i+0x3a>
 8004504:	2900      	cmp	r1, #0
 8004506:	f000 80b9 	beq.w	800467c <_printf_i+0x19c>
 800450a:	2958      	cmp	r1, #88	; 0x58
 800450c:	f000 8083 	beq.w	8004616 <_printf_i+0x136>
 8004510:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004514:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004518:	e032      	b.n	8004580 <_printf_i+0xa0>
 800451a:	2964      	cmp	r1, #100	; 0x64
 800451c:	d001      	beq.n	8004522 <_printf_i+0x42>
 800451e:	2969      	cmp	r1, #105	; 0x69
 8004520:	d1f6      	bne.n	8004510 <_printf_i+0x30>
 8004522:	6820      	ldr	r0, [r4, #0]
 8004524:	6813      	ldr	r3, [r2, #0]
 8004526:	0605      	lsls	r5, r0, #24
 8004528:	f103 0104 	add.w	r1, r3, #4
 800452c:	d52a      	bpl.n	8004584 <_printf_i+0xa4>
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6011      	str	r1, [r2, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	da03      	bge.n	800453e <_printf_i+0x5e>
 8004536:	222d      	movs	r2, #45	; 0x2d
 8004538:	425b      	negs	r3, r3
 800453a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800453e:	486f      	ldr	r0, [pc, #444]	; (80046fc <_printf_i+0x21c>)
 8004540:	220a      	movs	r2, #10
 8004542:	e039      	b.n	80045b8 <_printf_i+0xd8>
 8004544:	2973      	cmp	r1, #115	; 0x73
 8004546:	f000 809d 	beq.w	8004684 <_printf_i+0x1a4>
 800454a:	d808      	bhi.n	800455e <_printf_i+0x7e>
 800454c:	296f      	cmp	r1, #111	; 0x6f
 800454e:	d020      	beq.n	8004592 <_printf_i+0xb2>
 8004550:	2970      	cmp	r1, #112	; 0x70
 8004552:	d1dd      	bne.n	8004510 <_printf_i+0x30>
 8004554:	6823      	ldr	r3, [r4, #0]
 8004556:	f043 0320 	orr.w	r3, r3, #32
 800455a:	6023      	str	r3, [r4, #0]
 800455c:	e003      	b.n	8004566 <_printf_i+0x86>
 800455e:	2975      	cmp	r1, #117	; 0x75
 8004560:	d017      	beq.n	8004592 <_printf_i+0xb2>
 8004562:	2978      	cmp	r1, #120	; 0x78
 8004564:	d1d4      	bne.n	8004510 <_printf_i+0x30>
 8004566:	2378      	movs	r3, #120	; 0x78
 8004568:	4865      	ldr	r0, [pc, #404]	; (8004700 <_printf_i+0x220>)
 800456a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800456e:	e055      	b.n	800461c <_printf_i+0x13c>
 8004570:	6813      	ldr	r3, [r2, #0]
 8004572:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004576:	1d19      	adds	r1, r3, #4
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6011      	str	r1, [r2, #0]
 800457c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004580:	2301      	movs	r3, #1
 8004582:	e08c      	b.n	800469e <_printf_i+0x1be>
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f010 0f40 	tst.w	r0, #64	; 0x40
 800458a:	6011      	str	r1, [r2, #0]
 800458c:	bf18      	it	ne
 800458e:	b21b      	sxthne	r3, r3
 8004590:	e7cf      	b.n	8004532 <_printf_i+0x52>
 8004592:	6813      	ldr	r3, [r2, #0]
 8004594:	6825      	ldr	r5, [r4, #0]
 8004596:	1d18      	adds	r0, r3, #4
 8004598:	6010      	str	r0, [r2, #0]
 800459a:	0628      	lsls	r0, r5, #24
 800459c:	d501      	bpl.n	80045a2 <_printf_i+0xc2>
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	e002      	b.n	80045a8 <_printf_i+0xc8>
 80045a2:	0668      	lsls	r0, r5, #25
 80045a4:	d5fb      	bpl.n	800459e <_printf_i+0xbe>
 80045a6:	881b      	ldrh	r3, [r3, #0]
 80045a8:	296f      	cmp	r1, #111	; 0x6f
 80045aa:	bf14      	ite	ne
 80045ac:	220a      	movne	r2, #10
 80045ae:	2208      	moveq	r2, #8
 80045b0:	4852      	ldr	r0, [pc, #328]	; (80046fc <_printf_i+0x21c>)
 80045b2:	2100      	movs	r1, #0
 80045b4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045b8:	6865      	ldr	r5, [r4, #4]
 80045ba:	2d00      	cmp	r5, #0
 80045bc:	60a5      	str	r5, [r4, #8]
 80045be:	f2c0 8095 	blt.w	80046ec <_printf_i+0x20c>
 80045c2:	6821      	ldr	r1, [r4, #0]
 80045c4:	f021 0104 	bic.w	r1, r1, #4
 80045c8:	6021      	str	r1, [r4, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d13d      	bne.n	800464a <_printf_i+0x16a>
 80045ce:	2d00      	cmp	r5, #0
 80045d0:	f040 808e 	bne.w	80046f0 <_printf_i+0x210>
 80045d4:	4665      	mov	r5, ip
 80045d6:	2a08      	cmp	r2, #8
 80045d8:	d10b      	bne.n	80045f2 <_printf_i+0x112>
 80045da:	6823      	ldr	r3, [r4, #0]
 80045dc:	07db      	lsls	r3, r3, #31
 80045de:	d508      	bpl.n	80045f2 <_printf_i+0x112>
 80045e0:	6923      	ldr	r3, [r4, #16]
 80045e2:	6862      	ldr	r2, [r4, #4]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	bfde      	ittt	le
 80045e8:	2330      	movle	r3, #48	; 0x30
 80045ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 80045ee:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80045f2:	ebac 0305 	sub.w	r3, ip, r5
 80045f6:	6123      	str	r3, [r4, #16]
 80045f8:	f8cd 8000 	str.w	r8, [sp]
 80045fc:	463b      	mov	r3, r7
 80045fe:	aa03      	add	r2, sp, #12
 8004600:	4621      	mov	r1, r4
 8004602:	4630      	mov	r0, r6
 8004604:	f7ff fef6 	bl	80043f4 <_printf_common>
 8004608:	3001      	adds	r0, #1
 800460a:	d14d      	bne.n	80046a8 <_printf_i+0x1c8>
 800460c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004610:	b005      	add	sp, #20
 8004612:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004616:	4839      	ldr	r0, [pc, #228]	; (80046fc <_printf_i+0x21c>)
 8004618:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800461c:	6813      	ldr	r3, [r2, #0]
 800461e:	6821      	ldr	r1, [r4, #0]
 8004620:	1d1d      	adds	r5, r3, #4
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6015      	str	r5, [r2, #0]
 8004626:	060a      	lsls	r2, r1, #24
 8004628:	d50b      	bpl.n	8004642 <_printf_i+0x162>
 800462a:	07ca      	lsls	r2, r1, #31
 800462c:	bf44      	itt	mi
 800462e:	f041 0120 	orrmi.w	r1, r1, #32
 8004632:	6021      	strmi	r1, [r4, #0]
 8004634:	b91b      	cbnz	r3, 800463e <_printf_i+0x15e>
 8004636:	6822      	ldr	r2, [r4, #0]
 8004638:	f022 0220 	bic.w	r2, r2, #32
 800463c:	6022      	str	r2, [r4, #0]
 800463e:	2210      	movs	r2, #16
 8004640:	e7b7      	b.n	80045b2 <_printf_i+0xd2>
 8004642:	064d      	lsls	r5, r1, #25
 8004644:	bf48      	it	mi
 8004646:	b29b      	uxthmi	r3, r3
 8004648:	e7ef      	b.n	800462a <_printf_i+0x14a>
 800464a:	4665      	mov	r5, ip
 800464c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004650:	fb02 3311 	mls	r3, r2, r1, r3
 8004654:	5cc3      	ldrb	r3, [r0, r3]
 8004656:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800465a:	460b      	mov	r3, r1
 800465c:	2900      	cmp	r1, #0
 800465e:	d1f5      	bne.n	800464c <_printf_i+0x16c>
 8004660:	e7b9      	b.n	80045d6 <_printf_i+0xf6>
 8004662:	6813      	ldr	r3, [r2, #0]
 8004664:	6825      	ldr	r5, [r4, #0]
 8004666:	1d18      	adds	r0, r3, #4
 8004668:	6961      	ldr	r1, [r4, #20]
 800466a:	6010      	str	r0, [r2, #0]
 800466c:	0628      	lsls	r0, r5, #24
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	d501      	bpl.n	8004676 <_printf_i+0x196>
 8004672:	6019      	str	r1, [r3, #0]
 8004674:	e002      	b.n	800467c <_printf_i+0x19c>
 8004676:	066a      	lsls	r2, r5, #25
 8004678:	d5fb      	bpl.n	8004672 <_printf_i+0x192>
 800467a:	8019      	strh	r1, [r3, #0]
 800467c:	2300      	movs	r3, #0
 800467e:	4665      	mov	r5, ip
 8004680:	6123      	str	r3, [r4, #16]
 8004682:	e7b9      	b.n	80045f8 <_printf_i+0x118>
 8004684:	6813      	ldr	r3, [r2, #0]
 8004686:	1d19      	adds	r1, r3, #4
 8004688:	6011      	str	r1, [r2, #0]
 800468a:	681d      	ldr	r5, [r3, #0]
 800468c:	6862      	ldr	r2, [r4, #4]
 800468e:	2100      	movs	r1, #0
 8004690:	4628      	mov	r0, r5
 8004692:	f000 ff07 	bl	80054a4 <memchr>
 8004696:	b108      	cbz	r0, 800469c <_printf_i+0x1bc>
 8004698:	1b40      	subs	r0, r0, r5
 800469a:	6060      	str	r0, [r4, #4]
 800469c:	6863      	ldr	r3, [r4, #4]
 800469e:	6123      	str	r3, [r4, #16]
 80046a0:	2300      	movs	r3, #0
 80046a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046a6:	e7a7      	b.n	80045f8 <_printf_i+0x118>
 80046a8:	6923      	ldr	r3, [r4, #16]
 80046aa:	462a      	mov	r2, r5
 80046ac:	4639      	mov	r1, r7
 80046ae:	4630      	mov	r0, r6
 80046b0:	47c0      	blx	r8
 80046b2:	3001      	adds	r0, #1
 80046b4:	d0aa      	beq.n	800460c <_printf_i+0x12c>
 80046b6:	6823      	ldr	r3, [r4, #0]
 80046b8:	079b      	lsls	r3, r3, #30
 80046ba:	d413      	bmi.n	80046e4 <_printf_i+0x204>
 80046bc:	68e0      	ldr	r0, [r4, #12]
 80046be:	9b03      	ldr	r3, [sp, #12]
 80046c0:	4298      	cmp	r0, r3
 80046c2:	bfb8      	it	lt
 80046c4:	4618      	movlt	r0, r3
 80046c6:	e7a3      	b.n	8004610 <_printf_i+0x130>
 80046c8:	2301      	movs	r3, #1
 80046ca:	464a      	mov	r2, r9
 80046cc:	4639      	mov	r1, r7
 80046ce:	4630      	mov	r0, r6
 80046d0:	47c0      	blx	r8
 80046d2:	3001      	adds	r0, #1
 80046d4:	d09a      	beq.n	800460c <_printf_i+0x12c>
 80046d6:	3501      	adds	r5, #1
 80046d8:	68e3      	ldr	r3, [r4, #12]
 80046da:	9a03      	ldr	r2, [sp, #12]
 80046dc:	1a9b      	subs	r3, r3, r2
 80046de:	42ab      	cmp	r3, r5
 80046e0:	dcf2      	bgt.n	80046c8 <_printf_i+0x1e8>
 80046e2:	e7eb      	b.n	80046bc <_printf_i+0x1dc>
 80046e4:	2500      	movs	r5, #0
 80046e6:	f104 0919 	add.w	r9, r4, #25
 80046ea:	e7f5      	b.n	80046d8 <_printf_i+0x1f8>
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1ac      	bne.n	800464a <_printf_i+0x16a>
 80046f0:	7803      	ldrb	r3, [r0, #0]
 80046f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046fa:	e76c      	b.n	80045d6 <_printf_i+0xf6>
 80046fc:	080062be 	.word	0x080062be
 8004700:	080062cf 	.word	0x080062cf

08004704 <srand>:
 8004704:	b538      	push	{r3, r4, r5, lr}
 8004706:	4b0d      	ldr	r3, [pc, #52]	; (800473c <srand+0x38>)
 8004708:	4605      	mov	r5, r0
 800470a:	681c      	ldr	r4, [r3, #0]
 800470c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800470e:	b97b      	cbnz	r3, 8004730 <srand+0x2c>
 8004710:	2018      	movs	r0, #24
 8004712:	f000 febf 	bl	8005494 <malloc>
 8004716:	4a0a      	ldr	r2, [pc, #40]	; (8004740 <srand+0x3c>)
 8004718:	4b0a      	ldr	r3, [pc, #40]	; (8004744 <srand+0x40>)
 800471a:	63a0      	str	r0, [r4, #56]	; 0x38
 800471c:	e9c0 2300 	strd	r2, r3, [r0]
 8004720:	4b09      	ldr	r3, [pc, #36]	; (8004748 <srand+0x44>)
 8004722:	2201      	movs	r2, #1
 8004724:	6083      	str	r3, [r0, #8]
 8004726:	230b      	movs	r3, #11
 8004728:	8183      	strh	r3, [r0, #12]
 800472a:	2300      	movs	r3, #0
 800472c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004730:	2200      	movs	r2, #0
 8004732:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004734:	611d      	str	r5, [r3, #16]
 8004736:	615a      	str	r2, [r3, #20]
 8004738:	bd38      	pop	{r3, r4, r5, pc}
 800473a:	bf00      	nop
 800473c:	20000030 	.word	0x20000030
 8004740:	abcd330e 	.word	0xabcd330e
 8004744:	e66d1234 	.word	0xe66d1234
 8004748:	0005deec 	.word	0x0005deec

0800474c <rand>:
 800474c:	b538      	push	{r3, r4, r5, lr}
 800474e:	4b13      	ldr	r3, [pc, #76]	; (800479c <rand+0x50>)
 8004750:	681c      	ldr	r4, [r3, #0]
 8004752:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004754:	b97b      	cbnz	r3, 8004776 <rand+0x2a>
 8004756:	2018      	movs	r0, #24
 8004758:	f000 fe9c 	bl	8005494 <malloc>
 800475c:	4a10      	ldr	r2, [pc, #64]	; (80047a0 <rand+0x54>)
 800475e:	4b11      	ldr	r3, [pc, #68]	; (80047a4 <rand+0x58>)
 8004760:	63a0      	str	r0, [r4, #56]	; 0x38
 8004762:	e9c0 2300 	strd	r2, r3, [r0]
 8004766:	4b10      	ldr	r3, [pc, #64]	; (80047a8 <rand+0x5c>)
 8004768:	2201      	movs	r2, #1
 800476a:	6083      	str	r3, [r0, #8]
 800476c:	230b      	movs	r3, #11
 800476e:	8183      	strh	r3, [r0, #12]
 8004770:	2300      	movs	r3, #0
 8004772:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004776:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004778:	480c      	ldr	r0, [pc, #48]	; (80047ac <rand+0x60>)
 800477a:	690a      	ldr	r2, [r1, #16]
 800477c:	694b      	ldr	r3, [r1, #20]
 800477e:	4350      	muls	r0, r2
 8004780:	4c0b      	ldr	r4, [pc, #44]	; (80047b0 <rand+0x64>)
 8004782:	fb04 0003 	mla	r0, r4, r3, r0
 8004786:	fba2 2304 	umull	r2, r3, r2, r4
 800478a:	4403      	add	r3, r0
 800478c:	1c54      	adds	r4, r2, #1
 800478e:	f143 0500 	adc.w	r5, r3, #0
 8004792:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8004796:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800479a:	bd38      	pop	{r3, r4, r5, pc}
 800479c:	20000030 	.word	0x20000030
 80047a0:	abcd330e 	.word	0xabcd330e
 80047a4:	e66d1234 	.word	0xe66d1234
 80047a8:	0005deec 	.word	0x0005deec
 80047ac:	5851f42d 	.word	0x5851f42d
 80047b0:	4c957f2d 	.word	0x4c957f2d

080047b4 <siprintf>:
 80047b4:	b40e      	push	{r1, r2, r3}
 80047b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80047ba:	b500      	push	{lr}
 80047bc:	b09c      	sub	sp, #112	; 0x70
 80047be:	ab1d      	add	r3, sp, #116	; 0x74
 80047c0:	9002      	str	r0, [sp, #8]
 80047c2:	9006      	str	r0, [sp, #24]
 80047c4:	9107      	str	r1, [sp, #28]
 80047c6:	9104      	str	r1, [sp, #16]
 80047c8:	4808      	ldr	r0, [pc, #32]	; (80047ec <siprintf+0x38>)
 80047ca:	4909      	ldr	r1, [pc, #36]	; (80047f0 <siprintf+0x3c>)
 80047cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80047d0:	9105      	str	r1, [sp, #20]
 80047d2:	6800      	ldr	r0, [r0, #0]
 80047d4:	a902      	add	r1, sp, #8
 80047d6:	9301      	str	r3, [sp, #4]
 80047d8:	f001 fa5c 	bl	8005c94 <_svfiprintf_r>
 80047dc:	2200      	movs	r2, #0
 80047de:	9b02      	ldr	r3, [sp, #8]
 80047e0:	701a      	strb	r2, [r3, #0]
 80047e2:	b01c      	add	sp, #112	; 0x70
 80047e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80047e8:	b003      	add	sp, #12
 80047ea:	4770      	bx	lr
 80047ec:	20000030 	.word	0x20000030
 80047f0:	ffff0208 	.word	0xffff0208

080047f4 <quorem>:
 80047f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047f8:	6903      	ldr	r3, [r0, #16]
 80047fa:	690c      	ldr	r4, [r1, #16]
 80047fc:	4680      	mov	r8, r0
 80047fe:	42a3      	cmp	r3, r4
 8004800:	f2c0 8084 	blt.w	800490c <quorem+0x118>
 8004804:	3c01      	subs	r4, #1
 8004806:	f101 0714 	add.w	r7, r1, #20
 800480a:	f100 0614 	add.w	r6, r0, #20
 800480e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004812:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004816:	3501      	adds	r5, #1
 8004818:	fbb0 f5f5 	udiv	r5, r0, r5
 800481c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004820:	eb06 030c 	add.w	r3, r6, ip
 8004824:	eb07 090c 	add.w	r9, r7, ip
 8004828:	9301      	str	r3, [sp, #4]
 800482a:	b39d      	cbz	r5, 8004894 <quorem+0xa0>
 800482c:	f04f 0a00 	mov.w	sl, #0
 8004830:	4638      	mov	r0, r7
 8004832:	46b6      	mov	lr, r6
 8004834:	46d3      	mov	fp, sl
 8004836:	f850 2b04 	ldr.w	r2, [r0], #4
 800483a:	b293      	uxth	r3, r2
 800483c:	fb05 a303 	mla	r3, r5, r3, sl
 8004840:	0c12      	lsrs	r2, r2, #16
 8004842:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004846:	fb05 a202 	mla	r2, r5, r2, sl
 800484a:	b29b      	uxth	r3, r3
 800484c:	ebab 0303 	sub.w	r3, fp, r3
 8004850:	f8de b000 	ldr.w	fp, [lr]
 8004854:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004858:	fa1f fb8b 	uxth.w	fp, fp
 800485c:	445b      	add	r3, fp
 800485e:	fa1f fb82 	uxth.w	fp, r2
 8004862:	f8de 2000 	ldr.w	r2, [lr]
 8004866:	4581      	cmp	r9, r0
 8004868:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800486c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004870:	b29b      	uxth	r3, r3
 8004872:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004876:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800487a:	f84e 3b04 	str.w	r3, [lr], #4
 800487e:	d2da      	bcs.n	8004836 <quorem+0x42>
 8004880:	f856 300c 	ldr.w	r3, [r6, ip]
 8004884:	b933      	cbnz	r3, 8004894 <quorem+0xa0>
 8004886:	9b01      	ldr	r3, [sp, #4]
 8004888:	3b04      	subs	r3, #4
 800488a:	429e      	cmp	r6, r3
 800488c:	461a      	mov	r2, r3
 800488e:	d331      	bcc.n	80048f4 <quorem+0x100>
 8004890:	f8c8 4010 	str.w	r4, [r8, #16]
 8004894:	4640      	mov	r0, r8
 8004896:	f001 f827 	bl	80058e8 <__mcmp>
 800489a:	2800      	cmp	r0, #0
 800489c:	db26      	blt.n	80048ec <quorem+0xf8>
 800489e:	4630      	mov	r0, r6
 80048a0:	f04f 0c00 	mov.w	ip, #0
 80048a4:	3501      	adds	r5, #1
 80048a6:	f857 1b04 	ldr.w	r1, [r7], #4
 80048aa:	f8d0 e000 	ldr.w	lr, [r0]
 80048ae:	b28b      	uxth	r3, r1
 80048b0:	ebac 0303 	sub.w	r3, ip, r3
 80048b4:	fa1f f28e 	uxth.w	r2, lr
 80048b8:	4413      	add	r3, r2
 80048ba:	0c0a      	lsrs	r2, r1, #16
 80048bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80048c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80048ca:	45b9      	cmp	r9, r7
 80048cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80048d0:	f840 3b04 	str.w	r3, [r0], #4
 80048d4:	d2e7      	bcs.n	80048a6 <quorem+0xb2>
 80048d6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80048da:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80048de:	b92a      	cbnz	r2, 80048ec <quorem+0xf8>
 80048e0:	3b04      	subs	r3, #4
 80048e2:	429e      	cmp	r6, r3
 80048e4:	461a      	mov	r2, r3
 80048e6:	d30b      	bcc.n	8004900 <quorem+0x10c>
 80048e8:	f8c8 4010 	str.w	r4, [r8, #16]
 80048ec:	4628      	mov	r0, r5
 80048ee:	b003      	add	sp, #12
 80048f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048f4:	6812      	ldr	r2, [r2, #0]
 80048f6:	3b04      	subs	r3, #4
 80048f8:	2a00      	cmp	r2, #0
 80048fa:	d1c9      	bne.n	8004890 <quorem+0x9c>
 80048fc:	3c01      	subs	r4, #1
 80048fe:	e7c4      	b.n	800488a <quorem+0x96>
 8004900:	6812      	ldr	r2, [r2, #0]
 8004902:	3b04      	subs	r3, #4
 8004904:	2a00      	cmp	r2, #0
 8004906:	d1ef      	bne.n	80048e8 <quorem+0xf4>
 8004908:	3c01      	subs	r4, #1
 800490a:	e7ea      	b.n	80048e2 <quorem+0xee>
 800490c:	2000      	movs	r0, #0
 800490e:	e7ee      	b.n	80048ee <quorem+0xfa>

08004910 <_dtoa_r>:
 8004910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004914:	4616      	mov	r6, r2
 8004916:	461f      	mov	r7, r3
 8004918:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800491a:	b095      	sub	sp, #84	; 0x54
 800491c:	4604      	mov	r4, r0
 800491e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8004922:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004926:	b93d      	cbnz	r5, 8004938 <_dtoa_r+0x28>
 8004928:	2010      	movs	r0, #16
 800492a:	f000 fdb3 	bl	8005494 <malloc>
 800492e:	6260      	str	r0, [r4, #36]	; 0x24
 8004930:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004934:	6005      	str	r5, [r0, #0]
 8004936:	60c5      	str	r5, [r0, #12]
 8004938:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800493a:	6819      	ldr	r1, [r3, #0]
 800493c:	b151      	cbz	r1, 8004954 <_dtoa_r+0x44>
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	2301      	movs	r3, #1
 8004942:	4093      	lsls	r3, r2
 8004944:	604a      	str	r2, [r1, #4]
 8004946:	608b      	str	r3, [r1, #8]
 8004948:	4620      	mov	r0, r4
 800494a:	f000 fded 	bl	8005528 <_Bfree>
 800494e:	2200      	movs	r2, #0
 8004950:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	1e3b      	subs	r3, r7, #0
 8004956:	bfaf      	iteee	ge
 8004958:	2300      	movge	r3, #0
 800495a:	2201      	movlt	r2, #1
 800495c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004960:	9303      	strlt	r3, [sp, #12]
 8004962:	bfac      	ite	ge
 8004964:	f8c8 3000 	strge.w	r3, [r8]
 8004968:	f8c8 2000 	strlt.w	r2, [r8]
 800496c:	4bae      	ldr	r3, [pc, #696]	; (8004c28 <_dtoa_r+0x318>)
 800496e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004972:	ea33 0308 	bics.w	r3, r3, r8
 8004976:	d11b      	bne.n	80049b0 <_dtoa_r+0xa0>
 8004978:	f242 730f 	movw	r3, #9999	; 0x270f
 800497c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800497e:	6013      	str	r3, [r2, #0]
 8004980:	9b02      	ldr	r3, [sp, #8]
 8004982:	b923      	cbnz	r3, 800498e <_dtoa_r+0x7e>
 8004984:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004988:	2800      	cmp	r0, #0
 800498a:	f000 8545 	beq.w	8005418 <_dtoa_r+0xb08>
 800498e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004990:	b953      	cbnz	r3, 80049a8 <_dtoa_r+0x98>
 8004992:	4ba6      	ldr	r3, [pc, #664]	; (8004c2c <_dtoa_r+0x31c>)
 8004994:	e021      	b.n	80049da <_dtoa_r+0xca>
 8004996:	4ba6      	ldr	r3, [pc, #664]	; (8004c30 <_dtoa_r+0x320>)
 8004998:	9306      	str	r3, [sp, #24]
 800499a:	3308      	adds	r3, #8
 800499c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800499e:	6013      	str	r3, [r2, #0]
 80049a0:	9806      	ldr	r0, [sp, #24]
 80049a2:	b015      	add	sp, #84	; 0x54
 80049a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049a8:	4ba0      	ldr	r3, [pc, #640]	; (8004c2c <_dtoa_r+0x31c>)
 80049aa:	9306      	str	r3, [sp, #24]
 80049ac:	3303      	adds	r3, #3
 80049ae:	e7f5      	b.n	800499c <_dtoa_r+0x8c>
 80049b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80049b4:	2200      	movs	r2, #0
 80049b6:	2300      	movs	r3, #0
 80049b8:	4630      	mov	r0, r6
 80049ba:	4639      	mov	r1, r7
 80049bc:	f7fb fff4 	bl	80009a8 <__aeabi_dcmpeq>
 80049c0:	4682      	mov	sl, r0
 80049c2:	b160      	cbz	r0, 80049de <_dtoa_r+0xce>
 80049c4:	2301      	movs	r3, #1
 80049c6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80049c8:	6013      	str	r3, [r2, #0]
 80049ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 8520 	beq.w	8005412 <_dtoa_r+0xb02>
 80049d2:	4b98      	ldr	r3, [pc, #608]	; (8004c34 <_dtoa_r+0x324>)
 80049d4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80049d6:	6013      	str	r3, [r2, #0]
 80049d8:	3b01      	subs	r3, #1
 80049da:	9306      	str	r3, [sp, #24]
 80049dc:	e7e0      	b.n	80049a0 <_dtoa_r+0x90>
 80049de:	ab12      	add	r3, sp, #72	; 0x48
 80049e0:	9301      	str	r3, [sp, #4]
 80049e2:	ab13      	add	r3, sp, #76	; 0x4c
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	4632      	mov	r2, r6
 80049e8:	463b      	mov	r3, r7
 80049ea:	4620      	mov	r0, r4
 80049ec:	f000 fff4 	bl	80059d8 <__d2b>
 80049f0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80049f4:	4683      	mov	fp, r0
 80049f6:	2d00      	cmp	r5, #0
 80049f8:	d07d      	beq.n	8004af6 <_dtoa_r+0x1e6>
 80049fa:	46b0      	mov	r8, r6
 80049fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004a00:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8004a04:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8004a08:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004a0c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8004a10:	2200      	movs	r2, #0
 8004a12:	4b89      	ldr	r3, [pc, #548]	; (8004c38 <_dtoa_r+0x328>)
 8004a14:	4640      	mov	r0, r8
 8004a16:	4649      	mov	r1, r9
 8004a18:	f7fb fba6 	bl	8000168 <__aeabi_dsub>
 8004a1c:	a37c      	add	r3, pc, #496	; (adr r3, 8004c10 <_dtoa_r+0x300>)
 8004a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a22:	f7fb fd59 	bl	80004d8 <__aeabi_dmul>
 8004a26:	a37c      	add	r3, pc, #496	; (adr r3, 8004c18 <_dtoa_r+0x308>)
 8004a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2c:	f7fb fb9e 	bl	800016c <__adddf3>
 8004a30:	4606      	mov	r6, r0
 8004a32:	4628      	mov	r0, r5
 8004a34:	460f      	mov	r7, r1
 8004a36:	f7fb fce5 	bl	8000404 <__aeabi_i2d>
 8004a3a:	a379      	add	r3, pc, #484	; (adr r3, 8004c20 <_dtoa_r+0x310>)
 8004a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a40:	f7fb fd4a 	bl	80004d8 <__aeabi_dmul>
 8004a44:	4602      	mov	r2, r0
 8004a46:	460b      	mov	r3, r1
 8004a48:	4630      	mov	r0, r6
 8004a4a:	4639      	mov	r1, r7
 8004a4c:	f7fb fb8e 	bl	800016c <__adddf3>
 8004a50:	4606      	mov	r6, r0
 8004a52:	460f      	mov	r7, r1
 8004a54:	f7fb fff0 	bl	8000a38 <__aeabi_d2iz>
 8004a58:	2200      	movs	r2, #0
 8004a5a:	4682      	mov	sl, r0
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	4630      	mov	r0, r6
 8004a60:	4639      	mov	r1, r7
 8004a62:	f7fb ffab 	bl	80009bc <__aeabi_dcmplt>
 8004a66:	b148      	cbz	r0, 8004a7c <_dtoa_r+0x16c>
 8004a68:	4650      	mov	r0, sl
 8004a6a:	f7fb fccb 	bl	8000404 <__aeabi_i2d>
 8004a6e:	4632      	mov	r2, r6
 8004a70:	463b      	mov	r3, r7
 8004a72:	f7fb ff99 	bl	80009a8 <__aeabi_dcmpeq>
 8004a76:	b908      	cbnz	r0, 8004a7c <_dtoa_r+0x16c>
 8004a78:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004a7c:	f1ba 0f16 	cmp.w	sl, #22
 8004a80:	d85a      	bhi.n	8004b38 <_dtoa_r+0x228>
 8004a82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004a86:	496d      	ldr	r1, [pc, #436]	; (8004c3c <_dtoa_r+0x32c>)
 8004a88:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004a8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a90:	f7fb ffb2 	bl	80009f8 <__aeabi_dcmpgt>
 8004a94:	2800      	cmp	r0, #0
 8004a96:	d051      	beq.n	8004b3c <_dtoa_r+0x22c>
 8004a98:	2300      	movs	r3, #0
 8004a9a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004a9e:	930d      	str	r3, [sp, #52]	; 0x34
 8004aa0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004aa2:	1b5d      	subs	r5, r3, r5
 8004aa4:	1e6b      	subs	r3, r5, #1
 8004aa6:	9307      	str	r3, [sp, #28]
 8004aa8:	bf43      	ittte	mi
 8004aaa:	2300      	movmi	r3, #0
 8004aac:	f1c5 0901 	rsbmi	r9, r5, #1
 8004ab0:	9307      	strmi	r3, [sp, #28]
 8004ab2:	f04f 0900 	movpl.w	r9, #0
 8004ab6:	f1ba 0f00 	cmp.w	sl, #0
 8004aba:	db41      	blt.n	8004b40 <_dtoa_r+0x230>
 8004abc:	9b07      	ldr	r3, [sp, #28]
 8004abe:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8004ac2:	4453      	add	r3, sl
 8004ac4:	9307      	str	r3, [sp, #28]
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	9308      	str	r3, [sp, #32]
 8004aca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004acc:	2b09      	cmp	r3, #9
 8004ace:	f200 808f 	bhi.w	8004bf0 <_dtoa_r+0x2e0>
 8004ad2:	2b05      	cmp	r3, #5
 8004ad4:	bfc4      	itt	gt
 8004ad6:	3b04      	subgt	r3, #4
 8004ad8:	931e      	strgt	r3, [sp, #120]	; 0x78
 8004ada:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004adc:	bfc8      	it	gt
 8004ade:	2500      	movgt	r5, #0
 8004ae0:	f1a3 0302 	sub.w	r3, r3, #2
 8004ae4:	bfd8      	it	le
 8004ae6:	2501      	movle	r5, #1
 8004ae8:	2b03      	cmp	r3, #3
 8004aea:	f200 808d 	bhi.w	8004c08 <_dtoa_r+0x2f8>
 8004aee:	e8df f003 	tbb	[pc, r3]
 8004af2:	7d7b      	.short	0x7d7b
 8004af4:	6f2f      	.short	0x6f2f
 8004af6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004afa:	441d      	add	r5, r3
 8004afc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004b00:	2820      	cmp	r0, #32
 8004b02:	dd13      	ble.n	8004b2c <_dtoa_r+0x21c>
 8004b04:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004b08:	9b02      	ldr	r3, [sp, #8]
 8004b0a:	fa08 f800 	lsl.w	r8, r8, r0
 8004b0e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004b12:	fa23 f000 	lsr.w	r0, r3, r0
 8004b16:	ea48 0000 	orr.w	r0, r8, r0
 8004b1a:	f7fb fc63 	bl	80003e4 <__aeabi_ui2d>
 8004b1e:	2301      	movs	r3, #1
 8004b20:	4680      	mov	r8, r0
 8004b22:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8004b26:	3d01      	subs	r5, #1
 8004b28:	9310      	str	r3, [sp, #64]	; 0x40
 8004b2a:	e771      	b.n	8004a10 <_dtoa_r+0x100>
 8004b2c:	9b02      	ldr	r3, [sp, #8]
 8004b2e:	f1c0 0020 	rsb	r0, r0, #32
 8004b32:	fa03 f000 	lsl.w	r0, r3, r0
 8004b36:	e7f0      	b.n	8004b1a <_dtoa_r+0x20a>
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e7b0      	b.n	8004a9e <_dtoa_r+0x18e>
 8004b3c:	900d      	str	r0, [sp, #52]	; 0x34
 8004b3e:	e7af      	b.n	8004aa0 <_dtoa_r+0x190>
 8004b40:	f1ca 0300 	rsb	r3, sl, #0
 8004b44:	9308      	str	r3, [sp, #32]
 8004b46:	2300      	movs	r3, #0
 8004b48:	eba9 090a 	sub.w	r9, r9, sl
 8004b4c:	930c      	str	r3, [sp, #48]	; 0x30
 8004b4e:	e7bc      	b.n	8004aca <_dtoa_r+0x1ba>
 8004b50:	2301      	movs	r3, #1
 8004b52:	9309      	str	r3, [sp, #36]	; 0x24
 8004b54:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	dd74      	ble.n	8004c44 <_dtoa_r+0x334>
 8004b5a:	4698      	mov	r8, r3
 8004b5c:	9304      	str	r3, [sp, #16]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004b62:	6072      	str	r2, [r6, #4]
 8004b64:	2204      	movs	r2, #4
 8004b66:	f102 0014 	add.w	r0, r2, #20
 8004b6a:	4298      	cmp	r0, r3
 8004b6c:	6871      	ldr	r1, [r6, #4]
 8004b6e:	d96e      	bls.n	8004c4e <_dtoa_r+0x33e>
 8004b70:	4620      	mov	r0, r4
 8004b72:	f000 fca5 	bl	80054c0 <_Balloc>
 8004b76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b78:	6030      	str	r0, [r6, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f1b8 0f0e 	cmp.w	r8, #14
 8004b80:	9306      	str	r3, [sp, #24]
 8004b82:	f200 80ed 	bhi.w	8004d60 <_dtoa_r+0x450>
 8004b86:	2d00      	cmp	r5, #0
 8004b88:	f000 80ea 	beq.w	8004d60 <_dtoa_r+0x450>
 8004b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b90:	f1ba 0f00 	cmp.w	sl, #0
 8004b94:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004b98:	dd77      	ble.n	8004c8a <_dtoa_r+0x37a>
 8004b9a:	4a28      	ldr	r2, [pc, #160]	; (8004c3c <_dtoa_r+0x32c>)
 8004b9c:	f00a 030f 	and.w	r3, sl, #15
 8004ba0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004ba4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004ba8:	06f0      	lsls	r0, r6, #27
 8004baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004bb2:	d568      	bpl.n	8004c86 <_dtoa_r+0x376>
 8004bb4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004bb8:	4b21      	ldr	r3, [pc, #132]	; (8004c40 <_dtoa_r+0x330>)
 8004bba:	2503      	movs	r5, #3
 8004bbc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004bc0:	f7fb fdb4 	bl	800072c <__aeabi_ddiv>
 8004bc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004bc8:	f006 060f 	and.w	r6, r6, #15
 8004bcc:	4f1c      	ldr	r7, [pc, #112]	; (8004c40 <_dtoa_r+0x330>)
 8004bce:	e04f      	b.n	8004c70 <_dtoa_r+0x360>
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	9309      	str	r3, [sp, #36]	; 0x24
 8004bd4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004bd6:	4453      	add	r3, sl
 8004bd8:	f103 0801 	add.w	r8, r3, #1
 8004bdc:	9304      	str	r3, [sp, #16]
 8004bde:	4643      	mov	r3, r8
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	bfb8      	it	lt
 8004be4:	2301      	movlt	r3, #1
 8004be6:	e7ba      	b.n	8004b5e <_dtoa_r+0x24e>
 8004be8:	2300      	movs	r3, #0
 8004bea:	e7b2      	b.n	8004b52 <_dtoa_r+0x242>
 8004bec:	2300      	movs	r3, #0
 8004bee:	e7f0      	b.n	8004bd2 <_dtoa_r+0x2c2>
 8004bf0:	2501      	movs	r5, #1
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	9509      	str	r5, [sp, #36]	; 0x24
 8004bf6:	931e      	str	r3, [sp, #120]	; 0x78
 8004bf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	9304      	str	r3, [sp, #16]
 8004c00:	4698      	mov	r8, r3
 8004c02:	2312      	movs	r3, #18
 8004c04:	921f      	str	r2, [sp, #124]	; 0x7c
 8004c06:	e7aa      	b.n	8004b5e <_dtoa_r+0x24e>
 8004c08:	2301      	movs	r3, #1
 8004c0a:	9309      	str	r3, [sp, #36]	; 0x24
 8004c0c:	e7f4      	b.n	8004bf8 <_dtoa_r+0x2e8>
 8004c0e:	bf00      	nop
 8004c10:	636f4361 	.word	0x636f4361
 8004c14:	3fd287a7 	.word	0x3fd287a7
 8004c18:	8b60c8b3 	.word	0x8b60c8b3
 8004c1c:	3fc68a28 	.word	0x3fc68a28
 8004c20:	509f79fb 	.word	0x509f79fb
 8004c24:	3fd34413 	.word	0x3fd34413
 8004c28:	7ff00000 	.word	0x7ff00000
 8004c2c:	080062e9 	.word	0x080062e9
 8004c30:	080062e0 	.word	0x080062e0
 8004c34:	080062bd 	.word	0x080062bd
 8004c38:	3ff80000 	.word	0x3ff80000
 8004c3c:	08006318 	.word	0x08006318
 8004c40:	080062f0 	.word	0x080062f0
 8004c44:	2301      	movs	r3, #1
 8004c46:	9304      	str	r3, [sp, #16]
 8004c48:	4698      	mov	r8, r3
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	e7da      	b.n	8004c04 <_dtoa_r+0x2f4>
 8004c4e:	3101      	adds	r1, #1
 8004c50:	6071      	str	r1, [r6, #4]
 8004c52:	0052      	lsls	r2, r2, #1
 8004c54:	e787      	b.n	8004b66 <_dtoa_r+0x256>
 8004c56:	07f1      	lsls	r1, r6, #31
 8004c58:	d508      	bpl.n	8004c6c <_dtoa_r+0x35c>
 8004c5a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004c5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c62:	f7fb fc39 	bl	80004d8 <__aeabi_dmul>
 8004c66:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004c6a:	3501      	adds	r5, #1
 8004c6c:	1076      	asrs	r6, r6, #1
 8004c6e:	3708      	adds	r7, #8
 8004c70:	2e00      	cmp	r6, #0
 8004c72:	d1f0      	bne.n	8004c56 <_dtoa_r+0x346>
 8004c74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004c78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c7c:	f7fb fd56 	bl	800072c <__aeabi_ddiv>
 8004c80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c84:	e01b      	b.n	8004cbe <_dtoa_r+0x3ae>
 8004c86:	2502      	movs	r5, #2
 8004c88:	e7a0      	b.n	8004bcc <_dtoa_r+0x2bc>
 8004c8a:	f000 80a4 	beq.w	8004dd6 <_dtoa_r+0x4c6>
 8004c8e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004c92:	f1ca 0600 	rsb	r6, sl, #0
 8004c96:	4ba0      	ldr	r3, [pc, #640]	; (8004f18 <_dtoa_r+0x608>)
 8004c98:	f006 020f 	and.w	r2, r6, #15
 8004c9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca4:	f7fb fc18 	bl	80004d8 <__aeabi_dmul>
 8004ca8:	2502      	movs	r5, #2
 8004caa:	2300      	movs	r3, #0
 8004cac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004cb0:	4f9a      	ldr	r7, [pc, #616]	; (8004f1c <_dtoa_r+0x60c>)
 8004cb2:	1136      	asrs	r6, r6, #4
 8004cb4:	2e00      	cmp	r6, #0
 8004cb6:	f040 8083 	bne.w	8004dc0 <_dtoa_r+0x4b0>
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1e0      	bne.n	8004c80 <_dtoa_r+0x370>
 8004cbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f000 808a 	beq.w	8004dda <_dtoa_r+0x4ca>
 8004cc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004cca:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004cce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	4b92      	ldr	r3, [pc, #584]	; (8004f20 <_dtoa_r+0x610>)
 8004cd6:	f7fb fe71 	bl	80009bc <__aeabi_dcmplt>
 8004cda:	2800      	cmp	r0, #0
 8004cdc:	d07d      	beq.n	8004dda <_dtoa_r+0x4ca>
 8004cde:	f1b8 0f00 	cmp.w	r8, #0
 8004ce2:	d07a      	beq.n	8004dda <_dtoa_r+0x4ca>
 8004ce4:	9b04      	ldr	r3, [sp, #16]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	dd36      	ble.n	8004d58 <_dtoa_r+0x448>
 8004cea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004cee:	2200      	movs	r2, #0
 8004cf0:	4b8c      	ldr	r3, [pc, #560]	; (8004f24 <_dtoa_r+0x614>)
 8004cf2:	f7fb fbf1 	bl	80004d8 <__aeabi_dmul>
 8004cf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004cfa:	9e04      	ldr	r6, [sp, #16]
 8004cfc:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8004d00:	3501      	adds	r5, #1
 8004d02:	4628      	mov	r0, r5
 8004d04:	f7fb fb7e 	bl	8000404 <__aeabi_i2d>
 8004d08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d0c:	f7fb fbe4 	bl	80004d8 <__aeabi_dmul>
 8004d10:	2200      	movs	r2, #0
 8004d12:	4b85      	ldr	r3, [pc, #532]	; (8004f28 <_dtoa_r+0x618>)
 8004d14:	f7fb fa2a 	bl	800016c <__adddf3>
 8004d18:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8004d1c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004d20:	950b      	str	r5, [sp, #44]	; 0x2c
 8004d22:	2e00      	cmp	r6, #0
 8004d24:	d15c      	bne.n	8004de0 <_dtoa_r+0x4d0>
 8004d26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	4b7f      	ldr	r3, [pc, #508]	; (8004f2c <_dtoa_r+0x61c>)
 8004d2e:	f7fb fa1b 	bl	8000168 <__aeabi_dsub>
 8004d32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d34:	462b      	mov	r3, r5
 8004d36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d3a:	f7fb fe5d 	bl	80009f8 <__aeabi_dcmpgt>
 8004d3e:	2800      	cmp	r0, #0
 8004d40:	f040 8281 	bne.w	8005246 <_dtoa_r+0x936>
 8004d44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d4a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004d4e:	f7fb fe35 	bl	80009bc <__aeabi_dcmplt>
 8004d52:	2800      	cmp	r0, #0
 8004d54:	f040 8275 	bne.w	8005242 <_dtoa_r+0x932>
 8004d58:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004d5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004d60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f2c0 814b 	blt.w	8004ffe <_dtoa_r+0x6ee>
 8004d68:	f1ba 0f0e 	cmp.w	sl, #14
 8004d6c:	f300 8147 	bgt.w	8004ffe <_dtoa_r+0x6ee>
 8004d70:	4b69      	ldr	r3, [pc, #420]	; (8004f18 <_dtoa_r+0x608>)
 8004d72:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004d7e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f280 80d7 	bge.w	8004f34 <_dtoa_r+0x624>
 8004d86:	f1b8 0f00 	cmp.w	r8, #0
 8004d8a:	f300 80d3 	bgt.w	8004f34 <_dtoa_r+0x624>
 8004d8e:	f040 8257 	bne.w	8005240 <_dtoa_r+0x930>
 8004d92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d96:	2200      	movs	r2, #0
 8004d98:	4b64      	ldr	r3, [pc, #400]	; (8004f2c <_dtoa_r+0x61c>)
 8004d9a:	f7fb fb9d 	bl	80004d8 <__aeabi_dmul>
 8004d9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004da2:	f7fb fe1f 	bl	80009e4 <__aeabi_dcmpge>
 8004da6:	4646      	mov	r6, r8
 8004da8:	4647      	mov	r7, r8
 8004daa:	2800      	cmp	r0, #0
 8004dac:	f040 822d 	bne.w	800520a <_dtoa_r+0x8fa>
 8004db0:	9b06      	ldr	r3, [sp, #24]
 8004db2:	9a06      	ldr	r2, [sp, #24]
 8004db4:	1c5d      	adds	r5, r3, #1
 8004db6:	2331      	movs	r3, #49	; 0x31
 8004db8:	f10a 0a01 	add.w	sl, sl, #1
 8004dbc:	7013      	strb	r3, [r2, #0]
 8004dbe:	e228      	b.n	8005212 <_dtoa_r+0x902>
 8004dc0:	07f2      	lsls	r2, r6, #31
 8004dc2:	d505      	bpl.n	8004dd0 <_dtoa_r+0x4c0>
 8004dc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dc8:	f7fb fb86 	bl	80004d8 <__aeabi_dmul>
 8004dcc:	2301      	movs	r3, #1
 8004dce:	3501      	adds	r5, #1
 8004dd0:	1076      	asrs	r6, r6, #1
 8004dd2:	3708      	adds	r7, #8
 8004dd4:	e76e      	b.n	8004cb4 <_dtoa_r+0x3a4>
 8004dd6:	2502      	movs	r5, #2
 8004dd8:	e771      	b.n	8004cbe <_dtoa_r+0x3ae>
 8004dda:	4657      	mov	r7, sl
 8004ddc:	4646      	mov	r6, r8
 8004dde:	e790      	b.n	8004d02 <_dtoa_r+0x3f2>
 8004de0:	4b4d      	ldr	r3, [pc, #308]	; (8004f18 <_dtoa_r+0x608>)
 8004de2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004de6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d048      	beq.n	8004e82 <_dtoa_r+0x572>
 8004df0:	4602      	mov	r2, r0
 8004df2:	460b      	mov	r3, r1
 8004df4:	2000      	movs	r0, #0
 8004df6:	494e      	ldr	r1, [pc, #312]	; (8004f30 <_dtoa_r+0x620>)
 8004df8:	f7fb fc98 	bl	800072c <__aeabi_ddiv>
 8004dfc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004e00:	f7fb f9b2 	bl	8000168 <__aeabi_dsub>
 8004e04:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004e08:	9d06      	ldr	r5, [sp, #24]
 8004e0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e0e:	f7fb fe13 	bl	8000a38 <__aeabi_d2iz>
 8004e12:	9011      	str	r0, [sp, #68]	; 0x44
 8004e14:	f7fb faf6 	bl	8000404 <__aeabi_i2d>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e20:	f7fb f9a2 	bl	8000168 <__aeabi_dsub>
 8004e24:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004e26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e2a:	3330      	adds	r3, #48	; 0x30
 8004e2c:	f805 3b01 	strb.w	r3, [r5], #1
 8004e30:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004e34:	f7fb fdc2 	bl	80009bc <__aeabi_dcmplt>
 8004e38:	2800      	cmp	r0, #0
 8004e3a:	d163      	bne.n	8004f04 <_dtoa_r+0x5f4>
 8004e3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e40:	2000      	movs	r0, #0
 8004e42:	4937      	ldr	r1, [pc, #220]	; (8004f20 <_dtoa_r+0x610>)
 8004e44:	f7fb f990 	bl	8000168 <__aeabi_dsub>
 8004e48:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004e4c:	f7fb fdb6 	bl	80009bc <__aeabi_dcmplt>
 8004e50:	2800      	cmp	r0, #0
 8004e52:	f040 80b5 	bne.w	8004fc0 <_dtoa_r+0x6b0>
 8004e56:	9b06      	ldr	r3, [sp, #24]
 8004e58:	1aeb      	subs	r3, r5, r3
 8004e5a:	429e      	cmp	r6, r3
 8004e5c:	f77f af7c 	ble.w	8004d58 <_dtoa_r+0x448>
 8004e60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004e64:	2200      	movs	r2, #0
 8004e66:	4b2f      	ldr	r3, [pc, #188]	; (8004f24 <_dtoa_r+0x614>)
 8004e68:	f7fb fb36 	bl	80004d8 <__aeabi_dmul>
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004e72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e76:	4b2b      	ldr	r3, [pc, #172]	; (8004f24 <_dtoa_r+0x614>)
 8004e78:	f7fb fb2e 	bl	80004d8 <__aeabi_dmul>
 8004e7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e80:	e7c3      	b.n	8004e0a <_dtoa_r+0x4fa>
 8004e82:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004e86:	f7fb fb27 	bl	80004d8 <__aeabi_dmul>
 8004e8a:	9b06      	ldr	r3, [sp, #24]
 8004e8c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004e90:	199d      	adds	r5, r3, r6
 8004e92:	461e      	mov	r6, r3
 8004e94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e98:	f7fb fdce 	bl	8000a38 <__aeabi_d2iz>
 8004e9c:	9011      	str	r0, [sp, #68]	; 0x44
 8004e9e:	f7fb fab1 	bl	8000404 <__aeabi_i2d>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004eaa:	f7fb f95d 	bl	8000168 <__aeabi_dsub>
 8004eae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004eb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004eb4:	3330      	adds	r3, #48	; 0x30
 8004eb6:	f806 3b01 	strb.w	r3, [r6], #1
 8004eba:	42ae      	cmp	r6, r5
 8004ebc:	f04f 0200 	mov.w	r2, #0
 8004ec0:	d124      	bne.n	8004f0c <_dtoa_r+0x5fc>
 8004ec2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004ec6:	4b1a      	ldr	r3, [pc, #104]	; (8004f30 <_dtoa_r+0x620>)
 8004ec8:	f7fb f950 	bl	800016c <__adddf3>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	460b      	mov	r3, r1
 8004ed0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ed4:	f7fb fd90 	bl	80009f8 <__aeabi_dcmpgt>
 8004ed8:	2800      	cmp	r0, #0
 8004eda:	d171      	bne.n	8004fc0 <_dtoa_r+0x6b0>
 8004edc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004ee0:	2000      	movs	r0, #0
 8004ee2:	4913      	ldr	r1, [pc, #76]	; (8004f30 <_dtoa_r+0x620>)
 8004ee4:	f7fb f940 	bl	8000168 <__aeabi_dsub>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	460b      	mov	r3, r1
 8004eec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ef0:	f7fb fd64 	bl	80009bc <__aeabi_dcmplt>
 8004ef4:	2800      	cmp	r0, #0
 8004ef6:	f43f af2f 	beq.w	8004d58 <_dtoa_r+0x448>
 8004efa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004efe:	1e6a      	subs	r2, r5, #1
 8004f00:	2b30      	cmp	r3, #48	; 0x30
 8004f02:	d001      	beq.n	8004f08 <_dtoa_r+0x5f8>
 8004f04:	46ba      	mov	sl, r7
 8004f06:	e04a      	b.n	8004f9e <_dtoa_r+0x68e>
 8004f08:	4615      	mov	r5, r2
 8004f0a:	e7f6      	b.n	8004efa <_dtoa_r+0x5ea>
 8004f0c:	4b05      	ldr	r3, [pc, #20]	; (8004f24 <_dtoa_r+0x614>)
 8004f0e:	f7fb fae3 	bl	80004d8 <__aeabi_dmul>
 8004f12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f16:	e7bd      	b.n	8004e94 <_dtoa_r+0x584>
 8004f18:	08006318 	.word	0x08006318
 8004f1c:	080062f0 	.word	0x080062f0
 8004f20:	3ff00000 	.word	0x3ff00000
 8004f24:	40240000 	.word	0x40240000
 8004f28:	401c0000 	.word	0x401c0000
 8004f2c:	40140000 	.word	0x40140000
 8004f30:	3fe00000 	.word	0x3fe00000
 8004f34:	9d06      	ldr	r5, [sp, #24]
 8004f36:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004f3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f3e:	4630      	mov	r0, r6
 8004f40:	4639      	mov	r1, r7
 8004f42:	f7fb fbf3 	bl	800072c <__aeabi_ddiv>
 8004f46:	f7fb fd77 	bl	8000a38 <__aeabi_d2iz>
 8004f4a:	4681      	mov	r9, r0
 8004f4c:	f7fb fa5a 	bl	8000404 <__aeabi_i2d>
 8004f50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f54:	f7fb fac0 	bl	80004d8 <__aeabi_dmul>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	4630      	mov	r0, r6
 8004f5e:	4639      	mov	r1, r7
 8004f60:	f7fb f902 	bl	8000168 <__aeabi_dsub>
 8004f64:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8004f68:	f805 6b01 	strb.w	r6, [r5], #1
 8004f6c:	9e06      	ldr	r6, [sp, #24]
 8004f6e:	4602      	mov	r2, r0
 8004f70:	1bae      	subs	r6, r5, r6
 8004f72:	45b0      	cmp	r8, r6
 8004f74:	460b      	mov	r3, r1
 8004f76:	d135      	bne.n	8004fe4 <_dtoa_r+0x6d4>
 8004f78:	f7fb f8f8 	bl	800016c <__adddf3>
 8004f7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f80:	4606      	mov	r6, r0
 8004f82:	460f      	mov	r7, r1
 8004f84:	f7fb fd38 	bl	80009f8 <__aeabi_dcmpgt>
 8004f88:	b9c8      	cbnz	r0, 8004fbe <_dtoa_r+0x6ae>
 8004f8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f8e:	4630      	mov	r0, r6
 8004f90:	4639      	mov	r1, r7
 8004f92:	f7fb fd09 	bl	80009a8 <__aeabi_dcmpeq>
 8004f96:	b110      	cbz	r0, 8004f9e <_dtoa_r+0x68e>
 8004f98:	f019 0f01 	tst.w	r9, #1
 8004f9c:	d10f      	bne.n	8004fbe <_dtoa_r+0x6ae>
 8004f9e:	4659      	mov	r1, fp
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	f000 fac1 	bl	8005528 <_Bfree>
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004faa:	702b      	strb	r3, [r5, #0]
 8004fac:	f10a 0301 	add.w	r3, sl, #1
 8004fb0:	6013      	str	r3, [r2, #0]
 8004fb2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f43f acf3 	beq.w	80049a0 <_dtoa_r+0x90>
 8004fba:	601d      	str	r5, [r3, #0]
 8004fbc:	e4f0      	b.n	80049a0 <_dtoa_r+0x90>
 8004fbe:	4657      	mov	r7, sl
 8004fc0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004fc4:	1e6b      	subs	r3, r5, #1
 8004fc6:	2a39      	cmp	r2, #57	; 0x39
 8004fc8:	d106      	bne.n	8004fd8 <_dtoa_r+0x6c8>
 8004fca:	9a06      	ldr	r2, [sp, #24]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d107      	bne.n	8004fe0 <_dtoa_r+0x6d0>
 8004fd0:	2330      	movs	r3, #48	; 0x30
 8004fd2:	7013      	strb	r3, [r2, #0]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	3701      	adds	r7, #1
 8004fd8:	781a      	ldrb	r2, [r3, #0]
 8004fda:	3201      	adds	r2, #1
 8004fdc:	701a      	strb	r2, [r3, #0]
 8004fde:	e791      	b.n	8004f04 <_dtoa_r+0x5f4>
 8004fe0:	461d      	mov	r5, r3
 8004fe2:	e7ed      	b.n	8004fc0 <_dtoa_r+0x6b0>
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	4b99      	ldr	r3, [pc, #612]	; (800524c <_dtoa_r+0x93c>)
 8004fe8:	f7fb fa76 	bl	80004d8 <__aeabi_dmul>
 8004fec:	2200      	movs	r2, #0
 8004fee:	2300      	movs	r3, #0
 8004ff0:	4606      	mov	r6, r0
 8004ff2:	460f      	mov	r7, r1
 8004ff4:	f7fb fcd8 	bl	80009a8 <__aeabi_dcmpeq>
 8004ff8:	2800      	cmp	r0, #0
 8004ffa:	d09e      	beq.n	8004f3a <_dtoa_r+0x62a>
 8004ffc:	e7cf      	b.n	8004f9e <_dtoa_r+0x68e>
 8004ffe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005000:	2a00      	cmp	r2, #0
 8005002:	f000 8088 	beq.w	8005116 <_dtoa_r+0x806>
 8005006:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005008:	2a01      	cmp	r2, #1
 800500a:	dc6d      	bgt.n	80050e8 <_dtoa_r+0x7d8>
 800500c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800500e:	2a00      	cmp	r2, #0
 8005010:	d066      	beq.n	80050e0 <_dtoa_r+0x7d0>
 8005012:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005016:	464d      	mov	r5, r9
 8005018:	9e08      	ldr	r6, [sp, #32]
 800501a:	9a07      	ldr	r2, [sp, #28]
 800501c:	2101      	movs	r1, #1
 800501e:	441a      	add	r2, r3
 8005020:	4620      	mov	r0, r4
 8005022:	4499      	add	r9, r3
 8005024:	9207      	str	r2, [sp, #28]
 8005026:	f000 fb1f 	bl	8005668 <__i2b>
 800502a:	4607      	mov	r7, r0
 800502c:	2d00      	cmp	r5, #0
 800502e:	dd0b      	ble.n	8005048 <_dtoa_r+0x738>
 8005030:	9b07      	ldr	r3, [sp, #28]
 8005032:	2b00      	cmp	r3, #0
 8005034:	dd08      	ble.n	8005048 <_dtoa_r+0x738>
 8005036:	42ab      	cmp	r3, r5
 8005038:	bfa8      	it	ge
 800503a:	462b      	movge	r3, r5
 800503c:	9a07      	ldr	r2, [sp, #28]
 800503e:	eba9 0903 	sub.w	r9, r9, r3
 8005042:	1aed      	subs	r5, r5, r3
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	9307      	str	r3, [sp, #28]
 8005048:	9b08      	ldr	r3, [sp, #32]
 800504a:	b1eb      	cbz	r3, 8005088 <_dtoa_r+0x778>
 800504c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800504e:	2b00      	cmp	r3, #0
 8005050:	d065      	beq.n	800511e <_dtoa_r+0x80e>
 8005052:	b18e      	cbz	r6, 8005078 <_dtoa_r+0x768>
 8005054:	4639      	mov	r1, r7
 8005056:	4632      	mov	r2, r6
 8005058:	4620      	mov	r0, r4
 800505a:	f000 fba3 	bl	80057a4 <__pow5mult>
 800505e:	465a      	mov	r2, fp
 8005060:	4601      	mov	r1, r0
 8005062:	4607      	mov	r7, r0
 8005064:	4620      	mov	r0, r4
 8005066:	f000 fb08 	bl	800567a <__multiply>
 800506a:	4659      	mov	r1, fp
 800506c:	900a      	str	r0, [sp, #40]	; 0x28
 800506e:	4620      	mov	r0, r4
 8005070:	f000 fa5a 	bl	8005528 <_Bfree>
 8005074:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005076:	469b      	mov	fp, r3
 8005078:	9b08      	ldr	r3, [sp, #32]
 800507a:	1b9a      	subs	r2, r3, r6
 800507c:	d004      	beq.n	8005088 <_dtoa_r+0x778>
 800507e:	4659      	mov	r1, fp
 8005080:	4620      	mov	r0, r4
 8005082:	f000 fb8f 	bl	80057a4 <__pow5mult>
 8005086:	4683      	mov	fp, r0
 8005088:	2101      	movs	r1, #1
 800508a:	4620      	mov	r0, r4
 800508c:	f000 faec 	bl	8005668 <__i2b>
 8005090:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005092:	4606      	mov	r6, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 81c6 	beq.w	8005426 <_dtoa_r+0xb16>
 800509a:	461a      	mov	r2, r3
 800509c:	4601      	mov	r1, r0
 800509e:	4620      	mov	r0, r4
 80050a0:	f000 fb80 	bl	80057a4 <__pow5mult>
 80050a4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80050a6:	4606      	mov	r6, r0
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	dc3e      	bgt.n	800512a <_dtoa_r+0x81a>
 80050ac:	9b02      	ldr	r3, [sp, #8]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d137      	bne.n	8005122 <_dtoa_r+0x812>
 80050b2:	9b03      	ldr	r3, [sp, #12]
 80050b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d134      	bne.n	8005126 <_dtoa_r+0x816>
 80050bc:	9b03      	ldr	r3, [sp, #12]
 80050be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80050c2:	0d1b      	lsrs	r3, r3, #20
 80050c4:	051b      	lsls	r3, r3, #20
 80050c6:	b12b      	cbz	r3, 80050d4 <_dtoa_r+0x7c4>
 80050c8:	9b07      	ldr	r3, [sp, #28]
 80050ca:	f109 0901 	add.w	r9, r9, #1
 80050ce:	3301      	adds	r3, #1
 80050d0:	9307      	str	r3, [sp, #28]
 80050d2:	2301      	movs	r3, #1
 80050d4:	9308      	str	r3, [sp, #32]
 80050d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d128      	bne.n	800512e <_dtoa_r+0x81e>
 80050dc:	2001      	movs	r0, #1
 80050de:	e02e      	b.n	800513e <_dtoa_r+0x82e>
 80050e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80050e2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80050e6:	e796      	b.n	8005016 <_dtoa_r+0x706>
 80050e8:	9b08      	ldr	r3, [sp, #32]
 80050ea:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 80050ee:	42b3      	cmp	r3, r6
 80050f0:	bfb7      	itett	lt
 80050f2:	9b08      	ldrlt	r3, [sp, #32]
 80050f4:	1b9e      	subge	r6, r3, r6
 80050f6:	1af2      	sublt	r2, r6, r3
 80050f8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80050fa:	bfbf      	itttt	lt
 80050fc:	9608      	strlt	r6, [sp, #32]
 80050fe:	189b      	addlt	r3, r3, r2
 8005100:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005102:	2600      	movlt	r6, #0
 8005104:	f1b8 0f00 	cmp.w	r8, #0
 8005108:	bfb9      	ittee	lt
 800510a:	eba9 0508 	sublt.w	r5, r9, r8
 800510e:	2300      	movlt	r3, #0
 8005110:	464d      	movge	r5, r9
 8005112:	4643      	movge	r3, r8
 8005114:	e781      	b.n	800501a <_dtoa_r+0x70a>
 8005116:	9e08      	ldr	r6, [sp, #32]
 8005118:	464d      	mov	r5, r9
 800511a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800511c:	e786      	b.n	800502c <_dtoa_r+0x71c>
 800511e:	9a08      	ldr	r2, [sp, #32]
 8005120:	e7ad      	b.n	800507e <_dtoa_r+0x76e>
 8005122:	2300      	movs	r3, #0
 8005124:	e7d6      	b.n	80050d4 <_dtoa_r+0x7c4>
 8005126:	9b02      	ldr	r3, [sp, #8]
 8005128:	e7d4      	b.n	80050d4 <_dtoa_r+0x7c4>
 800512a:	2300      	movs	r3, #0
 800512c:	9308      	str	r3, [sp, #32]
 800512e:	6933      	ldr	r3, [r6, #16]
 8005130:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005134:	6918      	ldr	r0, [r3, #16]
 8005136:	f000 fa49 	bl	80055cc <__hi0bits>
 800513a:	f1c0 0020 	rsb	r0, r0, #32
 800513e:	9b07      	ldr	r3, [sp, #28]
 8005140:	4418      	add	r0, r3
 8005142:	f010 001f 	ands.w	r0, r0, #31
 8005146:	d047      	beq.n	80051d8 <_dtoa_r+0x8c8>
 8005148:	f1c0 0320 	rsb	r3, r0, #32
 800514c:	2b04      	cmp	r3, #4
 800514e:	dd3b      	ble.n	80051c8 <_dtoa_r+0x8b8>
 8005150:	9b07      	ldr	r3, [sp, #28]
 8005152:	f1c0 001c 	rsb	r0, r0, #28
 8005156:	4481      	add	r9, r0
 8005158:	4405      	add	r5, r0
 800515a:	4403      	add	r3, r0
 800515c:	9307      	str	r3, [sp, #28]
 800515e:	f1b9 0f00 	cmp.w	r9, #0
 8005162:	dd05      	ble.n	8005170 <_dtoa_r+0x860>
 8005164:	4659      	mov	r1, fp
 8005166:	464a      	mov	r2, r9
 8005168:	4620      	mov	r0, r4
 800516a:	f000 fb69 	bl	8005840 <__lshift>
 800516e:	4683      	mov	fp, r0
 8005170:	9b07      	ldr	r3, [sp, #28]
 8005172:	2b00      	cmp	r3, #0
 8005174:	dd05      	ble.n	8005182 <_dtoa_r+0x872>
 8005176:	4631      	mov	r1, r6
 8005178:	461a      	mov	r2, r3
 800517a:	4620      	mov	r0, r4
 800517c:	f000 fb60 	bl	8005840 <__lshift>
 8005180:	4606      	mov	r6, r0
 8005182:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005184:	b353      	cbz	r3, 80051dc <_dtoa_r+0x8cc>
 8005186:	4631      	mov	r1, r6
 8005188:	4658      	mov	r0, fp
 800518a:	f000 fbad 	bl	80058e8 <__mcmp>
 800518e:	2800      	cmp	r0, #0
 8005190:	da24      	bge.n	80051dc <_dtoa_r+0x8cc>
 8005192:	2300      	movs	r3, #0
 8005194:	4659      	mov	r1, fp
 8005196:	220a      	movs	r2, #10
 8005198:	4620      	mov	r0, r4
 800519a:	f000 f9dc 	bl	8005556 <__multadd>
 800519e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051a0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80051a4:	4683      	mov	fp, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f000 8144 	beq.w	8005434 <_dtoa_r+0xb24>
 80051ac:	2300      	movs	r3, #0
 80051ae:	4639      	mov	r1, r7
 80051b0:	220a      	movs	r2, #10
 80051b2:	4620      	mov	r0, r4
 80051b4:	f000 f9cf 	bl	8005556 <__multadd>
 80051b8:	9b04      	ldr	r3, [sp, #16]
 80051ba:	4607      	mov	r7, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	dc4d      	bgt.n	800525c <_dtoa_r+0x94c>
 80051c0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	dd4a      	ble.n	800525c <_dtoa_r+0x94c>
 80051c6:	e011      	b.n	80051ec <_dtoa_r+0x8dc>
 80051c8:	d0c9      	beq.n	800515e <_dtoa_r+0x84e>
 80051ca:	9a07      	ldr	r2, [sp, #28]
 80051cc:	331c      	adds	r3, #28
 80051ce:	441a      	add	r2, r3
 80051d0:	4499      	add	r9, r3
 80051d2:	441d      	add	r5, r3
 80051d4:	4613      	mov	r3, r2
 80051d6:	e7c1      	b.n	800515c <_dtoa_r+0x84c>
 80051d8:	4603      	mov	r3, r0
 80051da:	e7f6      	b.n	80051ca <_dtoa_r+0x8ba>
 80051dc:	f1b8 0f00 	cmp.w	r8, #0
 80051e0:	dc36      	bgt.n	8005250 <_dtoa_r+0x940>
 80051e2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	dd33      	ble.n	8005250 <_dtoa_r+0x940>
 80051e8:	f8cd 8010 	str.w	r8, [sp, #16]
 80051ec:	9b04      	ldr	r3, [sp, #16]
 80051ee:	b963      	cbnz	r3, 800520a <_dtoa_r+0x8fa>
 80051f0:	4631      	mov	r1, r6
 80051f2:	2205      	movs	r2, #5
 80051f4:	4620      	mov	r0, r4
 80051f6:	f000 f9ae 	bl	8005556 <__multadd>
 80051fa:	4601      	mov	r1, r0
 80051fc:	4606      	mov	r6, r0
 80051fe:	4658      	mov	r0, fp
 8005200:	f000 fb72 	bl	80058e8 <__mcmp>
 8005204:	2800      	cmp	r0, #0
 8005206:	f73f add3 	bgt.w	8004db0 <_dtoa_r+0x4a0>
 800520a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800520c:	9d06      	ldr	r5, [sp, #24]
 800520e:	ea6f 0a03 	mvn.w	sl, r3
 8005212:	f04f 0900 	mov.w	r9, #0
 8005216:	4631      	mov	r1, r6
 8005218:	4620      	mov	r0, r4
 800521a:	f000 f985 	bl	8005528 <_Bfree>
 800521e:	2f00      	cmp	r7, #0
 8005220:	f43f aebd 	beq.w	8004f9e <_dtoa_r+0x68e>
 8005224:	f1b9 0f00 	cmp.w	r9, #0
 8005228:	d005      	beq.n	8005236 <_dtoa_r+0x926>
 800522a:	45b9      	cmp	r9, r7
 800522c:	d003      	beq.n	8005236 <_dtoa_r+0x926>
 800522e:	4649      	mov	r1, r9
 8005230:	4620      	mov	r0, r4
 8005232:	f000 f979 	bl	8005528 <_Bfree>
 8005236:	4639      	mov	r1, r7
 8005238:	4620      	mov	r0, r4
 800523a:	f000 f975 	bl	8005528 <_Bfree>
 800523e:	e6ae      	b.n	8004f9e <_dtoa_r+0x68e>
 8005240:	2600      	movs	r6, #0
 8005242:	4637      	mov	r7, r6
 8005244:	e7e1      	b.n	800520a <_dtoa_r+0x8fa>
 8005246:	46ba      	mov	sl, r7
 8005248:	4637      	mov	r7, r6
 800524a:	e5b1      	b.n	8004db0 <_dtoa_r+0x4a0>
 800524c:	40240000 	.word	0x40240000
 8005250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005252:	f8cd 8010 	str.w	r8, [sp, #16]
 8005256:	2b00      	cmp	r3, #0
 8005258:	f000 80f3 	beq.w	8005442 <_dtoa_r+0xb32>
 800525c:	2d00      	cmp	r5, #0
 800525e:	dd05      	ble.n	800526c <_dtoa_r+0x95c>
 8005260:	4639      	mov	r1, r7
 8005262:	462a      	mov	r2, r5
 8005264:	4620      	mov	r0, r4
 8005266:	f000 faeb 	bl	8005840 <__lshift>
 800526a:	4607      	mov	r7, r0
 800526c:	9b08      	ldr	r3, [sp, #32]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d04c      	beq.n	800530c <_dtoa_r+0x9fc>
 8005272:	6879      	ldr	r1, [r7, #4]
 8005274:	4620      	mov	r0, r4
 8005276:	f000 f923 	bl	80054c0 <_Balloc>
 800527a:	4605      	mov	r5, r0
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	f107 010c 	add.w	r1, r7, #12
 8005282:	3202      	adds	r2, #2
 8005284:	0092      	lsls	r2, r2, #2
 8005286:	300c      	adds	r0, #12
 8005288:	f7fe fdda 	bl	8003e40 <memcpy>
 800528c:	2201      	movs	r2, #1
 800528e:	4629      	mov	r1, r5
 8005290:	4620      	mov	r0, r4
 8005292:	f000 fad5 	bl	8005840 <__lshift>
 8005296:	46b9      	mov	r9, r7
 8005298:	4607      	mov	r7, r0
 800529a:	9b06      	ldr	r3, [sp, #24]
 800529c:	9307      	str	r3, [sp, #28]
 800529e:	9b02      	ldr	r3, [sp, #8]
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	9308      	str	r3, [sp, #32]
 80052a6:	4631      	mov	r1, r6
 80052a8:	4658      	mov	r0, fp
 80052aa:	f7ff faa3 	bl	80047f4 <quorem>
 80052ae:	4649      	mov	r1, r9
 80052b0:	4605      	mov	r5, r0
 80052b2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80052b6:	4658      	mov	r0, fp
 80052b8:	f000 fb16 	bl	80058e8 <__mcmp>
 80052bc:	463a      	mov	r2, r7
 80052be:	9002      	str	r0, [sp, #8]
 80052c0:	4631      	mov	r1, r6
 80052c2:	4620      	mov	r0, r4
 80052c4:	f000 fb2a 	bl	800591c <__mdiff>
 80052c8:	68c3      	ldr	r3, [r0, #12]
 80052ca:	4602      	mov	r2, r0
 80052cc:	bb03      	cbnz	r3, 8005310 <_dtoa_r+0xa00>
 80052ce:	4601      	mov	r1, r0
 80052d0:	9009      	str	r0, [sp, #36]	; 0x24
 80052d2:	4658      	mov	r0, fp
 80052d4:	f000 fb08 	bl	80058e8 <__mcmp>
 80052d8:	4603      	mov	r3, r0
 80052da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052dc:	4611      	mov	r1, r2
 80052de:	4620      	mov	r0, r4
 80052e0:	9309      	str	r3, [sp, #36]	; 0x24
 80052e2:	f000 f921 	bl	8005528 <_Bfree>
 80052e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052e8:	b9a3      	cbnz	r3, 8005314 <_dtoa_r+0xa04>
 80052ea:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80052ec:	b992      	cbnz	r2, 8005314 <_dtoa_r+0xa04>
 80052ee:	9a08      	ldr	r2, [sp, #32]
 80052f0:	b982      	cbnz	r2, 8005314 <_dtoa_r+0xa04>
 80052f2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80052f6:	d029      	beq.n	800534c <_dtoa_r+0xa3c>
 80052f8:	9b02      	ldr	r3, [sp, #8]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	dd01      	ble.n	8005302 <_dtoa_r+0x9f2>
 80052fe:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005302:	9b07      	ldr	r3, [sp, #28]
 8005304:	1c5d      	adds	r5, r3, #1
 8005306:	f883 8000 	strb.w	r8, [r3]
 800530a:	e784      	b.n	8005216 <_dtoa_r+0x906>
 800530c:	4638      	mov	r0, r7
 800530e:	e7c2      	b.n	8005296 <_dtoa_r+0x986>
 8005310:	2301      	movs	r3, #1
 8005312:	e7e3      	b.n	80052dc <_dtoa_r+0x9cc>
 8005314:	9a02      	ldr	r2, [sp, #8]
 8005316:	2a00      	cmp	r2, #0
 8005318:	db04      	blt.n	8005324 <_dtoa_r+0xa14>
 800531a:	d123      	bne.n	8005364 <_dtoa_r+0xa54>
 800531c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800531e:	bb0a      	cbnz	r2, 8005364 <_dtoa_r+0xa54>
 8005320:	9a08      	ldr	r2, [sp, #32]
 8005322:	b9fa      	cbnz	r2, 8005364 <_dtoa_r+0xa54>
 8005324:	2b00      	cmp	r3, #0
 8005326:	ddec      	ble.n	8005302 <_dtoa_r+0x9f2>
 8005328:	4659      	mov	r1, fp
 800532a:	2201      	movs	r2, #1
 800532c:	4620      	mov	r0, r4
 800532e:	f000 fa87 	bl	8005840 <__lshift>
 8005332:	4631      	mov	r1, r6
 8005334:	4683      	mov	fp, r0
 8005336:	f000 fad7 	bl	80058e8 <__mcmp>
 800533a:	2800      	cmp	r0, #0
 800533c:	dc03      	bgt.n	8005346 <_dtoa_r+0xa36>
 800533e:	d1e0      	bne.n	8005302 <_dtoa_r+0x9f2>
 8005340:	f018 0f01 	tst.w	r8, #1
 8005344:	d0dd      	beq.n	8005302 <_dtoa_r+0x9f2>
 8005346:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800534a:	d1d8      	bne.n	80052fe <_dtoa_r+0x9ee>
 800534c:	9b07      	ldr	r3, [sp, #28]
 800534e:	9a07      	ldr	r2, [sp, #28]
 8005350:	1c5d      	adds	r5, r3, #1
 8005352:	2339      	movs	r3, #57	; 0x39
 8005354:	7013      	strb	r3, [r2, #0]
 8005356:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800535a:	1e6a      	subs	r2, r5, #1
 800535c:	2b39      	cmp	r3, #57	; 0x39
 800535e:	d04d      	beq.n	80053fc <_dtoa_r+0xaec>
 8005360:	3301      	adds	r3, #1
 8005362:	e052      	b.n	800540a <_dtoa_r+0xafa>
 8005364:	9a07      	ldr	r2, [sp, #28]
 8005366:	2b00      	cmp	r3, #0
 8005368:	f102 0501 	add.w	r5, r2, #1
 800536c:	dd06      	ble.n	800537c <_dtoa_r+0xa6c>
 800536e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005372:	d0eb      	beq.n	800534c <_dtoa_r+0xa3c>
 8005374:	f108 0801 	add.w	r8, r8, #1
 8005378:	9b07      	ldr	r3, [sp, #28]
 800537a:	e7c4      	b.n	8005306 <_dtoa_r+0x9f6>
 800537c:	9b06      	ldr	r3, [sp, #24]
 800537e:	9a04      	ldr	r2, [sp, #16]
 8005380:	1aeb      	subs	r3, r5, r3
 8005382:	4293      	cmp	r3, r2
 8005384:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005388:	d021      	beq.n	80053ce <_dtoa_r+0xabe>
 800538a:	4659      	mov	r1, fp
 800538c:	2300      	movs	r3, #0
 800538e:	220a      	movs	r2, #10
 8005390:	4620      	mov	r0, r4
 8005392:	f000 f8e0 	bl	8005556 <__multadd>
 8005396:	45b9      	cmp	r9, r7
 8005398:	4683      	mov	fp, r0
 800539a:	f04f 0300 	mov.w	r3, #0
 800539e:	f04f 020a 	mov.w	r2, #10
 80053a2:	4649      	mov	r1, r9
 80053a4:	4620      	mov	r0, r4
 80053a6:	d105      	bne.n	80053b4 <_dtoa_r+0xaa4>
 80053a8:	f000 f8d5 	bl	8005556 <__multadd>
 80053ac:	4681      	mov	r9, r0
 80053ae:	4607      	mov	r7, r0
 80053b0:	9507      	str	r5, [sp, #28]
 80053b2:	e778      	b.n	80052a6 <_dtoa_r+0x996>
 80053b4:	f000 f8cf 	bl	8005556 <__multadd>
 80053b8:	4639      	mov	r1, r7
 80053ba:	4681      	mov	r9, r0
 80053bc:	2300      	movs	r3, #0
 80053be:	220a      	movs	r2, #10
 80053c0:	4620      	mov	r0, r4
 80053c2:	f000 f8c8 	bl	8005556 <__multadd>
 80053c6:	4607      	mov	r7, r0
 80053c8:	e7f2      	b.n	80053b0 <_dtoa_r+0xaa0>
 80053ca:	f04f 0900 	mov.w	r9, #0
 80053ce:	4659      	mov	r1, fp
 80053d0:	2201      	movs	r2, #1
 80053d2:	4620      	mov	r0, r4
 80053d4:	f000 fa34 	bl	8005840 <__lshift>
 80053d8:	4631      	mov	r1, r6
 80053da:	4683      	mov	fp, r0
 80053dc:	f000 fa84 	bl	80058e8 <__mcmp>
 80053e0:	2800      	cmp	r0, #0
 80053e2:	dcb8      	bgt.n	8005356 <_dtoa_r+0xa46>
 80053e4:	d102      	bne.n	80053ec <_dtoa_r+0xadc>
 80053e6:	f018 0f01 	tst.w	r8, #1
 80053ea:	d1b4      	bne.n	8005356 <_dtoa_r+0xa46>
 80053ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80053f0:	1e6a      	subs	r2, r5, #1
 80053f2:	2b30      	cmp	r3, #48	; 0x30
 80053f4:	f47f af0f 	bne.w	8005216 <_dtoa_r+0x906>
 80053f8:	4615      	mov	r5, r2
 80053fa:	e7f7      	b.n	80053ec <_dtoa_r+0xadc>
 80053fc:	9b06      	ldr	r3, [sp, #24]
 80053fe:	4293      	cmp	r3, r2
 8005400:	d105      	bne.n	800540e <_dtoa_r+0xafe>
 8005402:	2331      	movs	r3, #49	; 0x31
 8005404:	9a06      	ldr	r2, [sp, #24]
 8005406:	f10a 0a01 	add.w	sl, sl, #1
 800540a:	7013      	strb	r3, [r2, #0]
 800540c:	e703      	b.n	8005216 <_dtoa_r+0x906>
 800540e:	4615      	mov	r5, r2
 8005410:	e7a1      	b.n	8005356 <_dtoa_r+0xa46>
 8005412:	4b17      	ldr	r3, [pc, #92]	; (8005470 <_dtoa_r+0xb60>)
 8005414:	f7ff bae1 	b.w	80049da <_dtoa_r+0xca>
 8005418:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800541a:	2b00      	cmp	r3, #0
 800541c:	f47f aabb 	bne.w	8004996 <_dtoa_r+0x86>
 8005420:	4b14      	ldr	r3, [pc, #80]	; (8005474 <_dtoa_r+0xb64>)
 8005422:	f7ff bada 	b.w	80049da <_dtoa_r+0xca>
 8005426:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005428:	2b01      	cmp	r3, #1
 800542a:	f77f ae3f 	ble.w	80050ac <_dtoa_r+0x79c>
 800542e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005430:	9308      	str	r3, [sp, #32]
 8005432:	e653      	b.n	80050dc <_dtoa_r+0x7cc>
 8005434:	9b04      	ldr	r3, [sp, #16]
 8005436:	2b00      	cmp	r3, #0
 8005438:	dc03      	bgt.n	8005442 <_dtoa_r+0xb32>
 800543a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800543c:	2b02      	cmp	r3, #2
 800543e:	f73f aed5 	bgt.w	80051ec <_dtoa_r+0x8dc>
 8005442:	9d06      	ldr	r5, [sp, #24]
 8005444:	4631      	mov	r1, r6
 8005446:	4658      	mov	r0, fp
 8005448:	f7ff f9d4 	bl	80047f4 <quorem>
 800544c:	9b06      	ldr	r3, [sp, #24]
 800544e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005452:	f805 8b01 	strb.w	r8, [r5], #1
 8005456:	9a04      	ldr	r2, [sp, #16]
 8005458:	1aeb      	subs	r3, r5, r3
 800545a:	429a      	cmp	r2, r3
 800545c:	ddb5      	ble.n	80053ca <_dtoa_r+0xaba>
 800545e:	4659      	mov	r1, fp
 8005460:	2300      	movs	r3, #0
 8005462:	220a      	movs	r2, #10
 8005464:	4620      	mov	r0, r4
 8005466:	f000 f876 	bl	8005556 <__multadd>
 800546a:	4683      	mov	fp, r0
 800546c:	e7ea      	b.n	8005444 <_dtoa_r+0xb34>
 800546e:	bf00      	nop
 8005470:	080062bc 	.word	0x080062bc
 8005474:	080062e0 	.word	0x080062e0

08005478 <_localeconv_r>:
 8005478:	4b04      	ldr	r3, [pc, #16]	; (800548c <_localeconv_r+0x14>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6a18      	ldr	r0, [r3, #32]
 800547e:	4b04      	ldr	r3, [pc, #16]	; (8005490 <_localeconv_r+0x18>)
 8005480:	2800      	cmp	r0, #0
 8005482:	bf08      	it	eq
 8005484:	4618      	moveq	r0, r3
 8005486:	30f0      	adds	r0, #240	; 0xf0
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	20000030 	.word	0x20000030
 8005490:	20000094 	.word	0x20000094

08005494 <malloc>:
 8005494:	4b02      	ldr	r3, [pc, #8]	; (80054a0 <malloc+0xc>)
 8005496:	4601      	mov	r1, r0
 8005498:	6818      	ldr	r0, [r3, #0]
 800549a:	f000 bb47 	b.w	8005b2c <_malloc_r>
 800549e:	bf00      	nop
 80054a0:	20000030 	.word	0x20000030

080054a4 <memchr>:
 80054a4:	b510      	push	{r4, lr}
 80054a6:	b2c9      	uxtb	r1, r1
 80054a8:	4402      	add	r2, r0
 80054aa:	4290      	cmp	r0, r2
 80054ac:	4603      	mov	r3, r0
 80054ae:	d101      	bne.n	80054b4 <memchr+0x10>
 80054b0:	2300      	movs	r3, #0
 80054b2:	e003      	b.n	80054bc <memchr+0x18>
 80054b4:	781c      	ldrb	r4, [r3, #0]
 80054b6:	3001      	adds	r0, #1
 80054b8:	428c      	cmp	r4, r1
 80054ba:	d1f6      	bne.n	80054aa <memchr+0x6>
 80054bc:	4618      	mov	r0, r3
 80054be:	bd10      	pop	{r4, pc}

080054c0 <_Balloc>:
 80054c0:	b570      	push	{r4, r5, r6, lr}
 80054c2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80054c4:	4604      	mov	r4, r0
 80054c6:	460e      	mov	r6, r1
 80054c8:	b93d      	cbnz	r5, 80054da <_Balloc+0x1a>
 80054ca:	2010      	movs	r0, #16
 80054cc:	f7ff ffe2 	bl	8005494 <malloc>
 80054d0:	6260      	str	r0, [r4, #36]	; 0x24
 80054d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80054d6:	6005      	str	r5, [r0, #0]
 80054d8:	60c5      	str	r5, [r0, #12]
 80054da:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80054dc:	68eb      	ldr	r3, [r5, #12]
 80054de:	b183      	cbz	r3, 8005502 <_Balloc+0x42>
 80054e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80054e8:	b9b8      	cbnz	r0, 800551a <_Balloc+0x5a>
 80054ea:	2101      	movs	r1, #1
 80054ec:	fa01 f506 	lsl.w	r5, r1, r6
 80054f0:	1d6a      	adds	r2, r5, #5
 80054f2:	0092      	lsls	r2, r2, #2
 80054f4:	4620      	mov	r0, r4
 80054f6:	f000 fabe 	bl	8005a76 <_calloc_r>
 80054fa:	b160      	cbz	r0, 8005516 <_Balloc+0x56>
 80054fc:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005500:	e00e      	b.n	8005520 <_Balloc+0x60>
 8005502:	2221      	movs	r2, #33	; 0x21
 8005504:	2104      	movs	r1, #4
 8005506:	4620      	mov	r0, r4
 8005508:	f000 fab5 	bl	8005a76 <_calloc_r>
 800550c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800550e:	60e8      	str	r0, [r5, #12]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1e4      	bne.n	80054e0 <_Balloc+0x20>
 8005516:	2000      	movs	r0, #0
 8005518:	bd70      	pop	{r4, r5, r6, pc}
 800551a:	6802      	ldr	r2, [r0, #0]
 800551c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005520:	2300      	movs	r3, #0
 8005522:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005526:	e7f7      	b.n	8005518 <_Balloc+0x58>

08005528 <_Bfree>:
 8005528:	b570      	push	{r4, r5, r6, lr}
 800552a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800552c:	4606      	mov	r6, r0
 800552e:	460d      	mov	r5, r1
 8005530:	b93c      	cbnz	r4, 8005542 <_Bfree+0x1a>
 8005532:	2010      	movs	r0, #16
 8005534:	f7ff ffae 	bl	8005494 <malloc>
 8005538:	6270      	str	r0, [r6, #36]	; 0x24
 800553a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800553e:	6004      	str	r4, [r0, #0]
 8005540:	60c4      	str	r4, [r0, #12]
 8005542:	b13d      	cbz	r5, 8005554 <_Bfree+0x2c>
 8005544:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005546:	686a      	ldr	r2, [r5, #4]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800554e:	6029      	str	r1, [r5, #0]
 8005550:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005554:	bd70      	pop	{r4, r5, r6, pc}

08005556 <__multadd>:
 8005556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800555a:	461f      	mov	r7, r3
 800555c:	4606      	mov	r6, r0
 800555e:	460c      	mov	r4, r1
 8005560:	2300      	movs	r3, #0
 8005562:	690d      	ldr	r5, [r1, #16]
 8005564:	f101 0c14 	add.w	ip, r1, #20
 8005568:	f8dc 0000 	ldr.w	r0, [ip]
 800556c:	3301      	adds	r3, #1
 800556e:	b281      	uxth	r1, r0
 8005570:	fb02 7101 	mla	r1, r2, r1, r7
 8005574:	0c00      	lsrs	r0, r0, #16
 8005576:	0c0f      	lsrs	r7, r1, #16
 8005578:	fb02 7000 	mla	r0, r2, r0, r7
 800557c:	b289      	uxth	r1, r1
 800557e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005582:	429d      	cmp	r5, r3
 8005584:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005588:	f84c 1b04 	str.w	r1, [ip], #4
 800558c:	dcec      	bgt.n	8005568 <__multadd+0x12>
 800558e:	b1d7      	cbz	r7, 80055c6 <__multadd+0x70>
 8005590:	68a3      	ldr	r3, [r4, #8]
 8005592:	42ab      	cmp	r3, r5
 8005594:	dc12      	bgt.n	80055bc <__multadd+0x66>
 8005596:	6861      	ldr	r1, [r4, #4]
 8005598:	4630      	mov	r0, r6
 800559a:	3101      	adds	r1, #1
 800559c:	f7ff ff90 	bl	80054c0 <_Balloc>
 80055a0:	4680      	mov	r8, r0
 80055a2:	6922      	ldr	r2, [r4, #16]
 80055a4:	f104 010c 	add.w	r1, r4, #12
 80055a8:	3202      	adds	r2, #2
 80055aa:	0092      	lsls	r2, r2, #2
 80055ac:	300c      	adds	r0, #12
 80055ae:	f7fe fc47 	bl	8003e40 <memcpy>
 80055b2:	4621      	mov	r1, r4
 80055b4:	4630      	mov	r0, r6
 80055b6:	f7ff ffb7 	bl	8005528 <_Bfree>
 80055ba:	4644      	mov	r4, r8
 80055bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80055c0:	3501      	adds	r5, #1
 80055c2:	615f      	str	r7, [r3, #20]
 80055c4:	6125      	str	r5, [r4, #16]
 80055c6:	4620      	mov	r0, r4
 80055c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080055cc <__hi0bits>:
 80055cc:	0c02      	lsrs	r2, r0, #16
 80055ce:	0412      	lsls	r2, r2, #16
 80055d0:	4603      	mov	r3, r0
 80055d2:	b9b2      	cbnz	r2, 8005602 <__hi0bits+0x36>
 80055d4:	0403      	lsls	r3, r0, #16
 80055d6:	2010      	movs	r0, #16
 80055d8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80055dc:	bf04      	itt	eq
 80055de:	021b      	lsleq	r3, r3, #8
 80055e0:	3008      	addeq	r0, #8
 80055e2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80055e6:	bf04      	itt	eq
 80055e8:	011b      	lsleq	r3, r3, #4
 80055ea:	3004      	addeq	r0, #4
 80055ec:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80055f0:	bf04      	itt	eq
 80055f2:	009b      	lsleq	r3, r3, #2
 80055f4:	3002      	addeq	r0, #2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	db06      	blt.n	8005608 <__hi0bits+0x3c>
 80055fa:	005b      	lsls	r3, r3, #1
 80055fc:	d503      	bpl.n	8005606 <__hi0bits+0x3a>
 80055fe:	3001      	adds	r0, #1
 8005600:	4770      	bx	lr
 8005602:	2000      	movs	r0, #0
 8005604:	e7e8      	b.n	80055d8 <__hi0bits+0xc>
 8005606:	2020      	movs	r0, #32
 8005608:	4770      	bx	lr

0800560a <__lo0bits>:
 800560a:	6803      	ldr	r3, [r0, #0]
 800560c:	4601      	mov	r1, r0
 800560e:	f013 0207 	ands.w	r2, r3, #7
 8005612:	d00b      	beq.n	800562c <__lo0bits+0x22>
 8005614:	07da      	lsls	r2, r3, #31
 8005616:	d423      	bmi.n	8005660 <__lo0bits+0x56>
 8005618:	0798      	lsls	r0, r3, #30
 800561a:	bf49      	itett	mi
 800561c:	085b      	lsrmi	r3, r3, #1
 800561e:	089b      	lsrpl	r3, r3, #2
 8005620:	2001      	movmi	r0, #1
 8005622:	600b      	strmi	r3, [r1, #0]
 8005624:	bf5c      	itt	pl
 8005626:	600b      	strpl	r3, [r1, #0]
 8005628:	2002      	movpl	r0, #2
 800562a:	4770      	bx	lr
 800562c:	b298      	uxth	r0, r3
 800562e:	b9a8      	cbnz	r0, 800565c <__lo0bits+0x52>
 8005630:	2010      	movs	r0, #16
 8005632:	0c1b      	lsrs	r3, r3, #16
 8005634:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005638:	bf04      	itt	eq
 800563a:	0a1b      	lsreq	r3, r3, #8
 800563c:	3008      	addeq	r0, #8
 800563e:	071a      	lsls	r2, r3, #28
 8005640:	bf04      	itt	eq
 8005642:	091b      	lsreq	r3, r3, #4
 8005644:	3004      	addeq	r0, #4
 8005646:	079a      	lsls	r2, r3, #30
 8005648:	bf04      	itt	eq
 800564a:	089b      	lsreq	r3, r3, #2
 800564c:	3002      	addeq	r0, #2
 800564e:	07da      	lsls	r2, r3, #31
 8005650:	d402      	bmi.n	8005658 <__lo0bits+0x4e>
 8005652:	085b      	lsrs	r3, r3, #1
 8005654:	d006      	beq.n	8005664 <__lo0bits+0x5a>
 8005656:	3001      	adds	r0, #1
 8005658:	600b      	str	r3, [r1, #0]
 800565a:	4770      	bx	lr
 800565c:	4610      	mov	r0, r2
 800565e:	e7e9      	b.n	8005634 <__lo0bits+0x2a>
 8005660:	2000      	movs	r0, #0
 8005662:	4770      	bx	lr
 8005664:	2020      	movs	r0, #32
 8005666:	4770      	bx	lr

08005668 <__i2b>:
 8005668:	b510      	push	{r4, lr}
 800566a:	460c      	mov	r4, r1
 800566c:	2101      	movs	r1, #1
 800566e:	f7ff ff27 	bl	80054c0 <_Balloc>
 8005672:	2201      	movs	r2, #1
 8005674:	6144      	str	r4, [r0, #20]
 8005676:	6102      	str	r2, [r0, #16]
 8005678:	bd10      	pop	{r4, pc}

0800567a <__multiply>:
 800567a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800567e:	4614      	mov	r4, r2
 8005680:	690a      	ldr	r2, [r1, #16]
 8005682:	6923      	ldr	r3, [r4, #16]
 8005684:	4688      	mov	r8, r1
 8005686:	429a      	cmp	r2, r3
 8005688:	bfbe      	ittt	lt
 800568a:	460b      	movlt	r3, r1
 800568c:	46a0      	movlt	r8, r4
 800568e:	461c      	movlt	r4, r3
 8005690:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005694:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005698:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800569c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80056a0:	eb07 0609 	add.w	r6, r7, r9
 80056a4:	42b3      	cmp	r3, r6
 80056a6:	bfb8      	it	lt
 80056a8:	3101      	addlt	r1, #1
 80056aa:	f7ff ff09 	bl	80054c0 <_Balloc>
 80056ae:	f100 0514 	add.w	r5, r0, #20
 80056b2:	462b      	mov	r3, r5
 80056b4:	2200      	movs	r2, #0
 80056b6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80056ba:	4573      	cmp	r3, lr
 80056bc:	d316      	bcc.n	80056ec <__multiply+0x72>
 80056be:	f104 0214 	add.w	r2, r4, #20
 80056c2:	f108 0114 	add.w	r1, r8, #20
 80056c6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80056ca:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80056ce:	9300      	str	r3, [sp, #0]
 80056d0:	9b00      	ldr	r3, [sp, #0]
 80056d2:	9201      	str	r2, [sp, #4]
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d80c      	bhi.n	80056f2 <__multiply+0x78>
 80056d8:	2e00      	cmp	r6, #0
 80056da:	dd03      	ble.n	80056e4 <__multiply+0x6a>
 80056dc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d05d      	beq.n	80057a0 <__multiply+0x126>
 80056e4:	6106      	str	r6, [r0, #16]
 80056e6:	b003      	add	sp, #12
 80056e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ec:	f843 2b04 	str.w	r2, [r3], #4
 80056f0:	e7e3      	b.n	80056ba <__multiply+0x40>
 80056f2:	f8b2 b000 	ldrh.w	fp, [r2]
 80056f6:	f1bb 0f00 	cmp.w	fp, #0
 80056fa:	d023      	beq.n	8005744 <__multiply+0xca>
 80056fc:	4689      	mov	r9, r1
 80056fe:	46ac      	mov	ip, r5
 8005700:	f04f 0800 	mov.w	r8, #0
 8005704:	f859 4b04 	ldr.w	r4, [r9], #4
 8005708:	f8dc a000 	ldr.w	sl, [ip]
 800570c:	b2a3      	uxth	r3, r4
 800570e:	fa1f fa8a 	uxth.w	sl, sl
 8005712:	fb0b a303 	mla	r3, fp, r3, sl
 8005716:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800571a:	f8dc 4000 	ldr.w	r4, [ip]
 800571e:	4443      	add	r3, r8
 8005720:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005724:	fb0b 840a 	mla	r4, fp, sl, r8
 8005728:	46e2      	mov	sl, ip
 800572a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800572e:	b29b      	uxth	r3, r3
 8005730:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005734:	454f      	cmp	r7, r9
 8005736:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800573a:	f84a 3b04 	str.w	r3, [sl], #4
 800573e:	d82b      	bhi.n	8005798 <__multiply+0x11e>
 8005740:	f8cc 8004 	str.w	r8, [ip, #4]
 8005744:	9b01      	ldr	r3, [sp, #4]
 8005746:	3204      	adds	r2, #4
 8005748:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800574c:	f1ba 0f00 	cmp.w	sl, #0
 8005750:	d020      	beq.n	8005794 <__multiply+0x11a>
 8005752:	4689      	mov	r9, r1
 8005754:	46a8      	mov	r8, r5
 8005756:	f04f 0b00 	mov.w	fp, #0
 800575a:	682b      	ldr	r3, [r5, #0]
 800575c:	f8b9 c000 	ldrh.w	ip, [r9]
 8005760:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005764:	b29b      	uxth	r3, r3
 8005766:	fb0a 440c 	mla	r4, sl, ip, r4
 800576a:	46c4      	mov	ip, r8
 800576c:	445c      	add	r4, fp
 800576e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005772:	f84c 3b04 	str.w	r3, [ip], #4
 8005776:	f859 3b04 	ldr.w	r3, [r9], #4
 800577a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800577e:	0c1b      	lsrs	r3, r3, #16
 8005780:	fb0a b303 	mla	r3, sl, r3, fp
 8005784:	454f      	cmp	r7, r9
 8005786:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800578a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800578e:	d805      	bhi.n	800579c <__multiply+0x122>
 8005790:	f8c8 3004 	str.w	r3, [r8, #4]
 8005794:	3504      	adds	r5, #4
 8005796:	e79b      	b.n	80056d0 <__multiply+0x56>
 8005798:	46d4      	mov	ip, sl
 800579a:	e7b3      	b.n	8005704 <__multiply+0x8a>
 800579c:	46e0      	mov	r8, ip
 800579e:	e7dd      	b.n	800575c <__multiply+0xe2>
 80057a0:	3e01      	subs	r6, #1
 80057a2:	e799      	b.n	80056d8 <__multiply+0x5e>

080057a4 <__pow5mult>:
 80057a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057a8:	4615      	mov	r5, r2
 80057aa:	f012 0203 	ands.w	r2, r2, #3
 80057ae:	4606      	mov	r6, r0
 80057b0:	460f      	mov	r7, r1
 80057b2:	d007      	beq.n	80057c4 <__pow5mult+0x20>
 80057b4:	4c21      	ldr	r4, [pc, #132]	; (800583c <__pow5mult+0x98>)
 80057b6:	3a01      	subs	r2, #1
 80057b8:	2300      	movs	r3, #0
 80057ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80057be:	f7ff feca 	bl	8005556 <__multadd>
 80057c2:	4607      	mov	r7, r0
 80057c4:	10ad      	asrs	r5, r5, #2
 80057c6:	d035      	beq.n	8005834 <__pow5mult+0x90>
 80057c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80057ca:	b93c      	cbnz	r4, 80057dc <__pow5mult+0x38>
 80057cc:	2010      	movs	r0, #16
 80057ce:	f7ff fe61 	bl	8005494 <malloc>
 80057d2:	6270      	str	r0, [r6, #36]	; 0x24
 80057d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80057d8:	6004      	str	r4, [r0, #0]
 80057da:	60c4      	str	r4, [r0, #12]
 80057dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80057e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80057e4:	b94c      	cbnz	r4, 80057fa <__pow5mult+0x56>
 80057e6:	f240 2171 	movw	r1, #625	; 0x271
 80057ea:	4630      	mov	r0, r6
 80057ec:	f7ff ff3c 	bl	8005668 <__i2b>
 80057f0:	2300      	movs	r3, #0
 80057f2:	4604      	mov	r4, r0
 80057f4:	f8c8 0008 	str.w	r0, [r8, #8]
 80057f8:	6003      	str	r3, [r0, #0]
 80057fa:	f04f 0800 	mov.w	r8, #0
 80057fe:	07eb      	lsls	r3, r5, #31
 8005800:	d50a      	bpl.n	8005818 <__pow5mult+0x74>
 8005802:	4639      	mov	r1, r7
 8005804:	4622      	mov	r2, r4
 8005806:	4630      	mov	r0, r6
 8005808:	f7ff ff37 	bl	800567a <__multiply>
 800580c:	4681      	mov	r9, r0
 800580e:	4639      	mov	r1, r7
 8005810:	4630      	mov	r0, r6
 8005812:	f7ff fe89 	bl	8005528 <_Bfree>
 8005816:	464f      	mov	r7, r9
 8005818:	106d      	asrs	r5, r5, #1
 800581a:	d00b      	beq.n	8005834 <__pow5mult+0x90>
 800581c:	6820      	ldr	r0, [r4, #0]
 800581e:	b938      	cbnz	r0, 8005830 <__pow5mult+0x8c>
 8005820:	4622      	mov	r2, r4
 8005822:	4621      	mov	r1, r4
 8005824:	4630      	mov	r0, r6
 8005826:	f7ff ff28 	bl	800567a <__multiply>
 800582a:	6020      	str	r0, [r4, #0]
 800582c:	f8c0 8000 	str.w	r8, [r0]
 8005830:	4604      	mov	r4, r0
 8005832:	e7e4      	b.n	80057fe <__pow5mult+0x5a>
 8005834:	4638      	mov	r0, r7
 8005836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800583a:	bf00      	nop
 800583c:	080063e0 	.word	0x080063e0

08005840 <__lshift>:
 8005840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005844:	460c      	mov	r4, r1
 8005846:	4607      	mov	r7, r0
 8005848:	4616      	mov	r6, r2
 800584a:	6923      	ldr	r3, [r4, #16]
 800584c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005850:	eb0a 0903 	add.w	r9, sl, r3
 8005854:	6849      	ldr	r1, [r1, #4]
 8005856:	68a3      	ldr	r3, [r4, #8]
 8005858:	f109 0501 	add.w	r5, r9, #1
 800585c:	42ab      	cmp	r3, r5
 800585e:	db32      	blt.n	80058c6 <__lshift+0x86>
 8005860:	4638      	mov	r0, r7
 8005862:	f7ff fe2d 	bl	80054c0 <_Balloc>
 8005866:	2300      	movs	r3, #0
 8005868:	4680      	mov	r8, r0
 800586a:	461a      	mov	r2, r3
 800586c:	f100 0114 	add.w	r1, r0, #20
 8005870:	4553      	cmp	r3, sl
 8005872:	db2b      	blt.n	80058cc <__lshift+0x8c>
 8005874:	6920      	ldr	r0, [r4, #16]
 8005876:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800587a:	f104 0314 	add.w	r3, r4, #20
 800587e:	f016 021f 	ands.w	r2, r6, #31
 8005882:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005886:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800588a:	d025      	beq.n	80058d8 <__lshift+0x98>
 800588c:	2000      	movs	r0, #0
 800588e:	f1c2 0e20 	rsb	lr, r2, #32
 8005892:	468a      	mov	sl, r1
 8005894:	681e      	ldr	r6, [r3, #0]
 8005896:	4096      	lsls	r6, r2
 8005898:	4330      	orrs	r0, r6
 800589a:	f84a 0b04 	str.w	r0, [sl], #4
 800589e:	f853 0b04 	ldr.w	r0, [r3], #4
 80058a2:	459c      	cmp	ip, r3
 80058a4:	fa20 f00e 	lsr.w	r0, r0, lr
 80058a8:	d814      	bhi.n	80058d4 <__lshift+0x94>
 80058aa:	6048      	str	r0, [r1, #4]
 80058ac:	b108      	cbz	r0, 80058b2 <__lshift+0x72>
 80058ae:	f109 0502 	add.w	r5, r9, #2
 80058b2:	3d01      	subs	r5, #1
 80058b4:	4638      	mov	r0, r7
 80058b6:	f8c8 5010 	str.w	r5, [r8, #16]
 80058ba:	4621      	mov	r1, r4
 80058bc:	f7ff fe34 	bl	8005528 <_Bfree>
 80058c0:	4640      	mov	r0, r8
 80058c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058c6:	3101      	adds	r1, #1
 80058c8:	005b      	lsls	r3, r3, #1
 80058ca:	e7c7      	b.n	800585c <__lshift+0x1c>
 80058cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80058d0:	3301      	adds	r3, #1
 80058d2:	e7cd      	b.n	8005870 <__lshift+0x30>
 80058d4:	4651      	mov	r1, sl
 80058d6:	e7dc      	b.n	8005892 <__lshift+0x52>
 80058d8:	3904      	subs	r1, #4
 80058da:	f853 2b04 	ldr.w	r2, [r3], #4
 80058de:	459c      	cmp	ip, r3
 80058e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80058e4:	d8f9      	bhi.n	80058da <__lshift+0x9a>
 80058e6:	e7e4      	b.n	80058b2 <__lshift+0x72>

080058e8 <__mcmp>:
 80058e8:	6903      	ldr	r3, [r0, #16]
 80058ea:	690a      	ldr	r2, [r1, #16]
 80058ec:	b530      	push	{r4, r5, lr}
 80058ee:	1a9b      	subs	r3, r3, r2
 80058f0:	d10c      	bne.n	800590c <__mcmp+0x24>
 80058f2:	0092      	lsls	r2, r2, #2
 80058f4:	3014      	adds	r0, #20
 80058f6:	3114      	adds	r1, #20
 80058f8:	1884      	adds	r4, r0, r2
 80058fa:	4411      	add	r1, r2
 80058fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005900:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005904:	4295      	cmp	r5, r2
 8005906:	d003      	beq.n	8005910 <__mcmp+0x28>
 8005908:	d305      	bcc.n	8005916 <__mcmp+0x2e>
 800590a:	2301      	movs	r3, #1
 800590c:	4618      	mov	r0, r3
 800590e:	bd30      	pop	{r4, r5, pc}
 8005910:	42a0      	cmp	r0, r4
 8005912:	d3f3      	bcc.n	80058fc <__mcmp+0x14>
 8005914:	e7fa      	b.n	800590c <__mcmp+0x24>
 8005916:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800591a:	e7f7      	b.n	800590c <__mcmp+0x24>

0800591c <__mdiff>:
 800591c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005920:	460d      	mov	r5, r1
 8005922:	4607      	mov	r7, r0
 8005924:	4611      	mov	r1, r2
 8005926:	4628      	mov	r0, r5
 8005928:	4614      	mov	r4, r2
 800592a:	f7ff ffdd 	bl	80058e8 <__mcmp>
 800592e:	1e06      	subs	r6, r0, #0
 8005930:	d108      	bne.n	8005944 <__mdiff+0x28>
 8005932:	4631      	mov	r1, r6
 8005934:	4638      	mov	r0, r7
 8005936:	f7ff fdc3 	bl	80054c0 <_Balloc>
 800593a:	2301      	movs	r3, #1
 800593c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005944:	bfa4      	itt	ge
 8005946:	4623      	movge	r3, r4
 8005948:	462c      	movge	r4, r5
 800594a:	4638      	mov	r0, r7
 800594c:	6861      	ldr	r1, [r4, #4]
 800594e:	bfa6      	itte	ge
 8005950:	461d      	movge	r5, r3
 8005952:	2600      	movge	r6, #0
 8005954:	2601      	movlt	r6, #1
 8005956:	f7ff fdb3 	bl	80054c0 <_Balloc>
 800595a:	f04f 0e00 	mov.w	lr, #0
 800595e:	60c6      	str	r6, [r0, #12]
 8005960:	692b      	ldr	r3, [r5, #16]
 8005962:	6926      	ldr	r6, [r4, #16]
 8005964:	f104 0214 	add.w	r2, r4, #20
 8005968:	f105 0914 	add.w	r9, r5, #20
 800596c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005970:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005974:	f100 0114 	add.w	r1, r0, #20
 8005978:	f852 ab04 	ldr.w	sl, [r2], #4
 800597c:	f859 5b04 	ldr.w	r5, [r9], #4
 8005980:	fa1f f38a 	uxth.w	r3, sl
 8005984:	4473      	add	r3, lr
 8005986:	b2ac      	uxth	r4, r5
 8005988:	1b1b      	subs	r3, r3, r4
 800598a:	0c2c      	lsrs	r4, r5, #16
 800598c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8005990:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8005994:	b29b      	uxth	r3, r3
 8005996:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800599a:	45c8      	cmp	r8, r9
 800599c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80059a0:	4694      	mov	ip, r2
 80059a2:	f841 4b04 	str.w	r4, [r1], #4
 80059a6:	d8e7      	bhi.n	8005978 <__mdiff+0x5c>
 80059a8:	45bc      	cmp	ip, r7
 80059aa:	d304      	bcc.n	80059b6 <__mdiff+0x9a>
 80059ac:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80059b0:	b183      	cbz	r3, 80059d4 <__mdiff+0xb8>
 80059b2:	6106      	str	r6, [r0, #16]
 80059b4:	e7c4      	b.n	8005940 <__mdiff+0x24>
 80059b6:	f85c 4b04 	ldr.w	r4, [ip], #4
 80059ba:	b2a2      	uxth	r2, r4
 80059bc:	4472      	add	r2, lr
 80059be:	1413      	asrs	r3, r2, #16
 80059c0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80059c4:	b292      	uxth	r2, r2
 80059c6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80059ca:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80059ce:	f841 2b04 	str.w	r2, [r1], #4
 80059d2:	e7e9      	b.n	80059a8 <__mdiff+0x8c>
 80059d4:	3e01      	subs	r6, #1
 80059d6:	e7e9      	b.n	80059ac <__mdiff+0x90>

080059d8 <__d2b>:
 80059d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80059dc:	461c      	mov	r4, r3
 80059de:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80059e2:	2101      	movs	r1, #1
 80059e4:	4690      	mov	r8, r2
 80059e6:	f7ff fd6b 	bl	80054c0 <_Balloc>
 80059ea:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80059ee:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80059f2:	4607      	mov	r7, r0
 80059f4:	bb34      	cbnz	r4, 8005a44 <__d2b+0x6c>
 80059f6:	9201      	str	r2, [sp, #4]
 80059f8:	f1b8 0200 	subs.w	r2, r8, #0
 80059fc:	d027      	beq.n	8005a4e <__d2b+0x76>
 80059fe:	a802      	add	r0, sp, #8
 8005a00:	f840 2d08 	str.w	r2, [r0, #-8]!
 8005a04:	f7ff fe01 	bl	800560a <__lo0bits>
 8005a08:	9900      	ldr	r1, [sp, #0]
 8005a0a:	b1f0      	cbz	r0, 8005a4a <__d2b+0x72>
 8005a0c:	9a01      	ldr	r2, [sp, #4]
 8005a0e:	f1c0 0320 	rsb	r3, r0, #32
 8005a12:	fa02 f303 	lsl.w	r3, r2, r3
 8005a16:	430b      	orrs	r3, r1
 8005a18:	40c2      	lsrs	r2, r0
 8005a1a:	617b      	str	r3, [r7, #20]
 8005a1c:	9201      	str	r2, [sp, #4]
 8005a1e:	9b01      	ldr	r3, [sp, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	bf14      	ite	ne
 8005a24:	2102      	movne	r1, #2
 8005a26:	2101      	moveq	r1, #1
 8005a28:	61bb      	str	r3, [r7, #24]
 8005a2a:	6139      	str	r1, [r7, #16]
 8005a2c:	b1c4      	cbz	r4, 8005a60 <__d2b+0x88>
 8005a2e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005a32:	4404      	add	r4, r0
 8005a34:	6034      	str	r4, [r6, #0]
 8005a36:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005a3a:	6028      	str	r0, [r5, #0]
 8005a3c:	4638      	mov	r0, r7
 8005a3e:	b002      	add	sp, #8
 8005a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a44:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005a48:	e7d5      	b.n	80059f6 <__d2b+0x1e>
 8005a4a:	6179      	str	r1, [r7, #20]
 8005a4c:	e7e7      	b.n	8005a1e <__d2b+0x46>
 8005a4e:	a801      	add	r0, sp, #4
 8005a50:	f7ff fddb 	bl	800560a <__lo0bits>
 8005a54:	2101      	movs	r1, #1
 8005a56:	9b01      	ldr	r3, [sp, #4]
 8005a58:	6139      	str	r1, [r7, #16]
 8005a5a:	617b      	str	r3, [r7, #20]
 8005a5c:	3020      	adds	r0, #32
 8005a5e:	e7e5      	b.n	8005a2c <__d2b+0x54>
 8005a60:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005a64:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005a68:	6030      	str	r0, [r6, #0]
 8005a6a:	6918      	ldr	r0, [r3, #16]
 8005a6c:	f7ff fdae 	bl	80055cc <__hi0bits>
 8005a70:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005a74:	e7e1      	b.n	8005a3a <__d2b+0x62>

08005a76 <_calloc_r>:
 8005a76:	b538      	push	{r3, r4, r5, lr}
 8005a78:	fb02 f401 	mul.w	r4, r2, r1
 8005a7c:	4621      	mov	r1, r4
 8005a7e:	f000 f855 	bl	8005b2c <_malloc_r>
 8005a82:	4605      	mov	r5, r0
 8005a84:	b118      	cbz	r0, 8005a8e <_calloc_r+0x18>
 8005a86:	4622      	mov	r2, r4
 8005a88:	2100      	movs	r1, #0
 8005a8a:	f7fe f9e4 	bl	8003e56 <memset>
 8005a8e:	4628      	mov	r0, r5
 8005a90:	bd38      	pop	{r3, r4, r5, pc}
	...

08005a94 <_free_r>:
 8005a94:	b538      	push	{r3, r4, r5, lr}
 8005a96:	4605      	mov	r5, r0
 8005a98:	2900      	cmp	r1, #0
 8005a9a:	d043      	beq.n	8005b24 <_free_r+0x90>
 8005a9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005aa0:	1f0c      	subs	r4, r1, #4
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	bfb8      	it	lt
 8005aa6:	18e4      	addlt	r4, r4, r3
 8005aa8:	f000 fa27 	bl	8005efa <__malloc_lock>
 8005aac:	4a1e      	ldr	r2, [pc, #120]	; (8005b28 <_free_r+0x94>)
 8005aae:	6813      	ldr	r3, [r2, #0]
 8005ab0:	4610      	mov	r0, r2
 8005ab2:	b933      	cbnz	r3, 8005ac2 <_free_r+0x2e>
 8005ab4:	6063      	str	r3, [r4, #4]
 8005ab6:	6014      	str	r4, [r2, #0]
 8005ab8:	4628      	mov	r0, r5
 8005aba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005abe:	f000 ba1d 	b.w	8005efc <__malloc_unlock>
 8005ac2:	42a3      	cmp	r3, r4
 8005ac4:	d90b      	bls.n	8005ade <_free_r+0x4a>
 8005ac6:	6821      	ldr	r1, [r4, #0]
 8005ac8:	1862      	adds	r2, r4, r1
 8005aca:	4293      	cmp	r3, r2
 8005acc:	bf01      	itttt	eq
 8005ace:	681a      	ldreq	r2, [r3, #0]
 8005ad0:	685b      	ldreq	r3, [r3, #4]
 8005ad2:	1852      	addeq	r2, r2, r1
 8005ad4:	6022      	streq	r2, [r4, #0]
 8005ad6:	6063      	str	r3, [r4, #4]
 8005ad8:	6004      	str	r4, [r0, #0]
 8005ada:	e7ed      	b.n	8005ab8 <_free_r+0x24>
 8005adc:	4613      	mov	r3, r2
 8005ade:	685a      	ldr	r2, [r3, #4]
 8005ae0:	b10a      	cbz	r2, 8005ae6 <_free_r+0x52>
 8005ae2:	42a2      	cmp	r2, r4
 8005ae4:	d9fa      	bls.n	8005adc <_free_r+0x48>
 8005ae6:	6819      	ldr	r1, [r3, #0]
 8005ae8:	1858      	adds	r0, r3, r1
 8005aea:	42a0      	cmp	r0, r4
 8005aec:	d10b      	bne.n	8005b06 <_free_r+0x72>
 8005aee:	6820      	ldr	r0, [r4, #0]
 8005af0:	4401      	add	r1, r0
 8005af2:	1858      	adds	r0, r3, r1
 8005af4:	4282      	cmp	r2, r0
 8005af6:	6019      	str	r1, [r3, #0]
 8005af8:	d1de      	bne.n	8005ab8 <_free_r+0x24>
 8005afa:	6810      	ldr	r0, [r2, #0]
 8005afc:	6852      	ldr	r2, [r2, #4]
 8005afe:	4401      	add	r1, r0
 8005b00:	6019      	str	r1, [r3, #0]
 8005b02:	605a      	str	r2, [r3, #4]
 8005b04:	e7d8      	b.n	8005ab8 <_free_r+0x24>
 8005b06:	d902      	bls.n	8005b0e <_free_r+0x7a>
 8005b08:	230c      	movs	r3, #12
 8005b0a:	602b      	str	r3, [r5, #0]
 8005b0c:	e7d4      	b.n	8005ab8 <_free_r+0x24>
 8005b0e:	6820      	ldr	r0, [r4, #0]
 8005b10:	1821      	adds	r1, r4, r0
 8005b12:	428a      	cmp	r2, r1
 8005b14:	bf01      	itttt	eq
 8005b16:	6811      	ldreq	r1, [r2, #0]
 8005b18:	6852      	ldreq	r2, [r2, #4]
 8005b1a:	1809      	addeq	r1, r1, r0
 8005b1c:	6021      	streq	r1, [r4, #0]
 8005b1e:	6062      	str	r2, [r4, #4]
 8005b20:	605c      	str	r4, [r3, #4]
 8005b22:	e7c9      	b.n	8005ab8 <_free_r+0x24>
 8005b24:	bd38      	pop	{r3, r4, r5, pc}
 8005b26:	bf00      	nop
 8005b28:	20000274 	.word	0x20000274

08005b2c <_malloc_r>:
 8005b2c:	b570      	push	{r4, r5, r6, lr}
 8005b2e:	1ccd      	adds	r5, r1, #3
 8005b30:	f025 0503 	bic.w	r5, r5, #3
 8005b34:	3508      	adds	r5, #8
 8005b36:	2d0c      	cmp	r5, #12
 8005b38:	bf38      	it	cc
 8005b3a:	250c      	movcc	r5, #12
 8005b3c:	2d00      	cmp	r5, #0
 8005b3e:	4606      	mov	r6, r0
 8005b40:	db01      	blt.n	8005b46 <_malloc_r+0x1a>
 8005b42:	42a9      	cmp	r1, r5
 8005b44:	d903      	bls.n	8005b4e <_malloc_r+0x22>
 8005b46:	230c      	movs	r3, #12
 8005b48:	6033      	str	r3, [r6, #0]
 8005b4a:	2000      	movs	r0, #0
 8005b4c:	bd70      	pop	{r4, r5, r6, pc}
 8005b4e:	f000 f9d4 	bl	8005efa <__malloc_lock>
 8005b52:	4a21      	ldr	r2, [pc, #132]	; (8005bd8 <_malloc_r+0xac>)
 8005b54:	6814      	ldr	r4, [r2, #0]
 8005b56:	4621      	mov	r1, r4
 8005b58:	b991      	cbnz	r1, 8005b80 <_malloc_r+0x54>
 8005b5a:	4c20      	ldr	r4, [pc, #128]	; (8005bdc <_malloc_r+0xb0>)
 8005b5c:	6823      	ldr	r3, [r4, #0]
 8005b5e:	b91b      	cbnz	r3, 8005b68 <_malloc_r+0x3c>
 8005b60:	4630      	mov	r0, r6
 8005b62:	f000 f98f 	bl	8005e84 <_sbrk_r>
 8005b66:	6020      	str	r0, [r4, #0]
 8005b68:	4629      	mov	r1, r5
 8005b6a:	4630      	mov	r0, r6
 8005b6c:	f000 f98a 	bl	8005e84 <_sbrk_r>
 8005b70:	1c43      	adds	r3, r0, #1
 8005b72:	d124      	bne.n	8005bbe <_malloc_r+0x92>
 8005b74:	230c      	movs	r3, #12
 8005b76:	4630      	mov	r0, r6
 8005b78:	6033      	str	r3, [r6, #0]
 8005b7a:	f000 f9bf 	bl	8005efc <__malloc_unlock>
 8005b7e:	e7e4      	b.n	8005b4a <_malloc_r+0x1e>
 8005b80:	680b      	ldr	r3, [r1, #0]
 8005b82:	1b5b      	subs	r3, r3, r5
 8005b84:	d418      	bmi.n	8005bb8 <_malloc_r+0x8c>
 8005b86:	2b0b      	cmp	r3, #11
 8005b88:	d90f      	bls.n	8005baa <_malloc_r+0x7e>
 8005b8a:	600b      	str	r3, [r1, #0]
 8005b8c:	18cc      	adds	r4, r1, r3
 8005b8e:	50cd      	str	r5, [r1, r3]
 8005b90:	4630      	mov	r0, r6
 8005b92:	f000 f9b3 	bl	8005efc <__malloc_unlock>
 8005b96:	f104 000b 	add.w	r0, r4, #11
 8005b9a:	1d23      	adds	r3, r4, #4
 8005b9c:	f020 0007 	bic.w	r0, r0, #7
 8005ba0:	1ac3      	subs	r3, r0, r3
 8005ba2:	d0d3      	beq.n	8005b4c <_malloc_r+0x20>
 8005ba4:	425a      	negs	r2, r3
 8005ba6:	50e2      	str	r2, [r4, r3]
 8005ba8:	e7d0      	b.n	8005b4c <_malloc_r+0x20>
 8005baa:	684b      	ldr	r3, [r1, #4]
 8005bac:	428c      	cmp	r4, r1
 8005bae:	bf16      	itet	ne
 8005bb0:	6063      	strne	r3, [r4, #4]
 8005bb2:	6013      	streq	r3, [r2, #0]
 8005bb4:	460c      	movne	r4, r1
 8005bb6:	e7eb      	b.n	8005b90 <_malloc_r+0x64>
 8005bb8:	460c      	mov	r4, r1
 8005bba:	6849      	ldr	r1, [r1, #4]
 8005bbc:	e7cc      	b.n	8005b58 <_malloc_r+0x2c>
 8005bbe:	1cc4      	adds	r4, r0, #3
 8005bc0:	f024 0403 	bic.w	r4, r4, #3
 8005bc4:	42a0      	cmp	r0, r4
 8005bc6:	d005      	beq.n	8005bd4 <_malloc_r+0xa8>
 8005bc8:	1a21      	subs	r1, r4, r0
 8005bca:	4630      	mov	r0, r6
 8005bcc:	f000 f95a 	bl	8005e84 <_sbrk_r>
 8005bd0:	3001      	adds	r0, #1
 8005bd2:	d0cf      	beq.n	8005b74 <_malloc_r+0x48>
 8005bd4:	6025      	str	r5, [r4, #0]
 8005bd6:	e7db      	b.n	8005b90 <_malloc_r+0x64>
 8005bd8:	20000274 	.word	0x20000274
 8005bdc:	20000278 	.word	0x20000278

08005be0 <__ssputs_r>:
 8005be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005be4:	688e      	ldr	r6, [r1, #8]
 8005be6:	4682      	mov	sl, r0
 8005be8:	429e      	cmp	r6, r3
 8005bea:	460c      	mov	r4, r1
 8005bec:	4690      	mov	r8, r2
 8005bee:	4699      	mov	r9, r3
 8005bf0:	d837      	bhi.n	8005c62 <__ssputs_r+0x82>
 8005bf2:	898a      	ldrh	r2, [r1, #12]
 8005bf4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005bf8:	d031      	beq.n	8005c5e <__ssputs_r+0x7e>
 8005bfa:	2302      	movs	r3, #2
 8005bfc:	6825      	ldr	r5, [r4, #0]
 8005bfe:	6909      	ldr	r1, [r1, #16]
 8005c00:	1a6f      	subs	r7, r5, r1
 8005c02:	6965      	ldr	r5, [r4, #20]
 8005c04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c08:	fb95 f5f3 	sdiv	r5, r5, r3
 8005c0c:	f109 0301 	add.w	r3, r9, #1
 8005c10:	443b      	add	r3, r7
 8005c12:	429d      	cmp	r5, r3
 8005c14:	bf38      	it	cc
 8005c16:	461d      	movcc	r5, r3
 8005c18:	0553      	lsls	r3, r2, #21
 8005c1a:	d530      	bpl.n	8005c7e <__ssputs_r+0x9e>
 8005c1c:	4629      	mov	r1, r5
 8005c1e:	f7ff ff85 	bl	8005b2c <_malloc_r>
 8005c22:	4606      	mov	r6, r0
 8005c24:	b950      	cbnz	r0, 8005c3c <__ssputs_r+0x5c>
 8005c26:	230c      	movs	r3, #12
 8005c28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c2c:	f8ca 3000 	str.w	r3, [sl]
 8005c30:	89a3      	ldrh	r3, [r4, #12]
 8005c32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c36:	81a3      	strh	r3, [r4, #12]
 8005c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c3c:	463a      	mov	r2, r7
 8005c3e:	6921      	ldr	r1, [r4, #16]
 8005c40:	f7fe f8fe 	bl	8003e40 <memcpy>
 8005c44:	89a3      	ldrh	r3, [r4, #12]
 8005c46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c4e:	81a3      	strh	r3, [r4, #12]
 8005c50:	6126      	str	r6, [r4, #16]
 8005c52:	443e      	add	r6, r7
 8005c54:	6026      	str	r6, [r4, #0]
 8005c56:	464e      	mov	r6, r9
 8005c58:	6165      	str	r5, [r4, #20]
 8005c5a:	1bed      	subs	r5, r5, r7
 8005c5c:	60a5      	str	r5, [r4, #8]
 8005c5e:	454e      	cmp	r6, r9
 8005c60:	d900      	bls.n	8005c64 <__ssputs_r+0x84>
 8005c62:	464e      	mov	r6, r9
 8005c64:	4632      	mov	r2, r6
 8005c66:	4641      	mov	r1, r8
 8005c68:	6820      	ldr	r0, [r4, #0]
 8005c6a:	f000 f92d 	bl	8005ec8 <memmove>
 8005c6e:	68a3      	ldr	r3, [r4, #8]
 8005c70:	2000      	movs	r0, #0
 8005c72:	1b9b      	subs	r3, r3, r6
 8005c74:	60a3      	str	r3, [r4, #8]
 8005c76:	6823      	ldr	r3, [r4, #0]
 8005c78:	441e      	add	r6, r3
 8005c7a:	6026      	str	r6, [r4, #0]
 8005c7c:	e7dc      	b.n	8005c38 <__ssputs_r+0x58>
 8005c7e:	462a      	mov	r2, r5
 8005c80:	f000 f93d 	bl	8005efe <_realloc_r>
 8005c84:	4606      	mov	r6, r0
 8005c86:	2800      	cmp	r0, #0
 8005c88:	d1e2      	bne.n	8005c50 <__ssputs_r+0x70>
 8005c8a:	6921      	ldr	r1, [r4, #16]
 8005c8c:	4650      	mov	r0, sl
 8005c8e:	f7ff ff01 	bl	8005a94 <_free_r>
 8005c92:	e7c8      	b.n	8005c26 <__ssputs_r+0x46>

08005c94 <_svfiprintf_r>:
 8005c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c98:	461d      	mov	r5, r3
 8005c9a:	898b      	ldrh	r3, [r1, #12]
 8005c9c:	b09d      	sub	sp, #116	; 0x74
 8005c9e:	061f      	lsls	r7, r3, #24
 8005ca0:	4680      	mov	r8, r0
 8005ca2:	460c      	mov	r4, r1
 8005ca4:	4616      	mov	r6, r2
 8005ca6:	d50f      	bpl.n	8005cc8 <_svfiprintf_r+0x34>
 8005ca8:	690b      	ldr	r3, [r1, #16]
 8005caa:	b96b      	cbnz	r3, 8005cc8 <_svfiprintf_r+0x34>
 8005cac:	2140      	movs	r1, #64	; 0x40
 8005cae:	f7ff ff3d 	bl	8005b2c <_malloc_r>
 8005cb2:	6020      	str	r0, [r4, #0]
 8005cb4:	6120      	str	r0, [r4, #16]
 8005cb6:	b928      	cbnz	r0, 8005cc4 <_svfiprintf_r+0x30>
 8005cb8:	230c      	movs	r3, #12
 8005cba:	f8c8 3000 	str.w	r3, [r8]
 8005cbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cc2:	e0c8      	b.n	8005e56 <_svfiprintf_r+0x1c2>
 8005cc4:	2340      	movs	r3, #64	; 0x40
 8005cc6:	6163      	str	r3, [r4, #20]
 8005cc8:	2300      	movs	r3, #0
 8005cca:	9309      	str	r3, [sp, #36]	; 0x24
 8005ccc:	2320      	movs	r3, #32
 8005cce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005cd2:	2330      	movs	r3, #48	; 0x30
 8005cd4:	f04f 0b01 	mov.w	fp, #1
 8005cd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005cdc:	9503      	str	r5, [sp, #12]
 8005cde:	4637      	mov	r7, r6
 8005ce0:	463d      	mov	r5, r7
 8005ce2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005ce6:	b10b      	cbz	r3, 8005cec <_svfiprintf_r+0x58>
 8005ce8:	2b25      	cmp	r3, #37	; 0x25
 8005cea:	d13e      	bne.n	8005d6a <_svfiprintf_r+0xd6>
 8005cec:	ebb7 0a06 	subs.w	sl, r7, r6
 8005cf0:	d00b      	beq.n	8005d0a <_svfiprintf_r+0x76>
 8005cf2:	4653      	mov	r3, sl
 8005cf4:	4632      	mov	r2, r6
 8005cf6:	4621      	mov	r1, r4
 8005cf8:	4640      	mov	r0, r8
 8005cfa:	f7ff ff71 	bl	8005be0 <__ssputs_r>
 8005cfe:	3001      	adds	r0, #1
 8005d00:	f000 80a4 	beq.w	8005e4c <_svfiprintf_r+0x1b8>
 8005d04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d06:	4453      	add	r3, sl
 8005d08:	9309      	str	r3, [sp, #36]	; 0x24
 8005d0a:	783b      	ldrb	r3, [r7, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f000 809d 	beq.w	8005e4c <_svfiprintf_r+0x1b8>
 8005d12:	2300      	movs	r3, #0
 8005d14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d1c:	9304      	str	r3, [sp, #16]
 8005d1e:	9307      	str	r3, [sp, #28]
 8005d20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d24:	931a      	str	r3, [sp, #104]	; 0x68
 8005d26:	462f      	mov	r7, r5
 8005d28:	2205      	movs	r2, #5
 8005d2a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005d2e:	4850      	ldr	r0, [pc, #320]	; (8005e70 <_svfiprintf_r+0x1dc>)
 8005d30:	f7ff fbb8 	bl	80054a4 <memchr>
 8005d34:	9b04      	ldr	r3, [sp, #16]
 8005d36:	b9d0      	cbnz	r0, 8005d6e <_svfiprintf_r+0xda>
 8005d38:	06d9      	lsls	r1, r3, #27
 8005d3a:	bf44      	itt	mi
 8005d3c:	2220      	movmi	r2, #32
 8005d3e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d42:	071a      	lsls	r2, r3, #28
 8005d44:	bf44      	itt	mi
 8005d46:	222b      	movmi	r2, #43	; 0x2b
 8005d48:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d4c:	782a      	ldrb	r2, [r5, #0]
 8005d4e:	2a2a      	cmp	r2, #42	; 0x2a
 8005d50:	d015      	beq.n	8005d7e <_svfiprintf_r+0xea>
 8005d52:	462f      	mov	r7, r5
 8005d54:	2000      	movs	r0, #0
 8005d56:	250a      	movs	r5, #10
 8005d58:	9a07      	ldr	r2, [sp, #28]
 8005d5a:	4639      	mov	r1, r7
 8005d5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d60:	3b30      	subs	r3, #48	; 0x30
 8005d62:	2b09      	cmp	r3, #9
 8005d64:	d94d      	bls.n	8005e02 <_svfiprintf_r+0x16e>
 8005d66:	b1b8      	cbz	r0, 8005d98 <_svfiprintf_r+0x104>
 8005d68:	e00f      	b.n	8005d8a <_svfiprintf_r+0xf6>
 8005d6a:	462f      	mov	r7, r5
 8005d6c:	e7b8      	b.n	8005ce0 <_svfiprintf_r+0x4c>
 8005d6e:	4a40      	ldr	r2, [pc, #256]	; (8005e70 <_svfiprintf_r+0x1dc>)
 8005d70:	463d      	mov	r5, r7
 8005d72:	1a80      	subs	r0, r0, r2
 8005d74:	fa0b f000 	lsl.w	r0, fp, r0
 8005d78:	4318      	orrs	r0, r3
 8005d7a:	9004      	str	r0, [sp, #16]
 8005d7c:	e7d3      	b.n	8005d26 <_svfiprintf_r+0x92>
 8005d7e:	9a03      	ldr	r2, [sp, #12]
 8005d80:	1d11      	adds	r1, r2, #4
 8005d82:	6812      	ldr	r2, [r2, #0]
 8005d84:	9103      	str	r1, [sp, #12]
 8005d86:	2a00      	cmp	r2, #0
 8005d88:	db01      	blt.n	8005d8e <_svfiprintf_r+0xfa>
 8005d8a:	9207      	str	r2, [sp, #28]
 8005d8c:	e004      	b.n	8005d98 <_svfiprintf_r+0x104>
 8005d8e:	4252      	negs	r2, r2
 8005d90:	f043 0302 	orr.w	r3, r3, #2
 8005d94:	9207      	str	r2, [sp, #28]
 8005d96:	9304      	str	r3, [sp, #16]
 8005d98:	783b      	ldrb	r3, [r7, #0]
 8005d9a:	2b2e      	cmp	r3, #46	; 0x2e
 8005d9c:	d10c      	bne.n	8005db8 <_svfiprintf_r+0x124>
 8005d9e:	787b      	ldrb	r3, [r7, #1]
 8005da0:	2b2a      	cmp	r3, #42	; 0x2a
 8005da2:	d133      	bne.n	8005e0c <_svfiprintf_r+0x178>
 8005da4:	9b03      	ldr	r3, [sp, #12]
 8005da6:	3702      	adds	r7, #2
 8005da8:	1d1a      	adds	r2, r3, #4
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	9203      	str	r2, [sp, #12]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	bfb8      	it	lt
 8005db2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005db6:	9305      	str	r3, [sp, #20]
 8005db8:	4d2e      	ldr	r5, [pc, #184]	; (8005e74 <_svfiprintf_r+0x1e0>)
 8005dba:	2203      	movs	r2, #3
 8005dbc:	7839      	ldrb	r1, [r7, #0]
 8005dbe:	4628      	mov	r0, r5
 8005dc0:	f7ff fb70 	bl	80054a4 <memchr>
 8005dc4:	b138      	cbz	r0, 8005dd6 <_svfiprintf_r+0x142>
 8005dc6:	2340      	movs	r3, #64	; 0x40
 8005dc8:	1b40      	subs	r0, r0, r5
 8005dca:	fa03 f000 	lsl.w	r0, r3, r0
 8005dce:	9b04      	ldr	r3, [sp, #16]
 8005dd0:	3701      	adds	r7, #1
 8005dd2:	4303      	orrs	r3, r0
 8005dd4:	9304      	str	r3, [sp, #16]
 8005dd6:	7839      	ldrb	r1, [r7, #0]
 8005dd8:	2206      	movs	r2, #6
 8005dda:	4827      	ldr	r0, [pc, #156]	; (8005e78 <_svfiprintf_r+0x1e4>)
 8005ddc:	1c7e      	adds	r6, r7, #1
 8005dde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005de2:	f7ff fb5f 	bl	80054a4 <memchr>
 8005de6:	2800      	cmp	r0, #0
 8005de8:	d038      	beq.n	8005e5c <_svfiprintf_r+0x1c8>
 8005dea:	4b24      	ldr	r3, [pc, #144]	; (8005e7c <_svfiprintf_r+0x1e8>)
 8005dec:	bb13      	cbnz	r3, 8005e34 <_svfiprintf_r+0x1a0>
 8005dee:	9b03      	ldr	r3, [sp, #12]
 8005df0:	3307      	adds	r3, #7
 8005df2:	f023 0307 	bic.w	r3, r3, #7
 8005df6:	3308      	adds	r3, #8
 8005df8:	9303      	str	r3, [sp, #12]
 8005dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dfc:	444b      	add	r3, r9
 8005dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8005e00:	e76d      	b.n	8005cde <_svfiprintf_r+0x4a>
 8005e02:	fb05 3202 	mla	r2, r5, r2, r3
 8005e06:	2001      	movs	r0, #1
 8005e08:	460f      	mov	r7, r1
 8005e0a:	e7a6      	b.n	8005d5a <_svfiprintf_r+0xc6>
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	250a      	movs	r5, #10
 8005e10:	4619      	mov	r1, r3
 8005e12:	3701      	adds	r7, #1
 8005e14:	9305      	str	r3, [sp, #20]
 8005e16:	4638      	mov	r0, r7
 8005e18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e1c:	3a30      	subs	r2, #48	; 0x30
 8005e1e:	2a09      	cmp	r2, #9
 8005e20:	d903      	bls.n	8005e2a <_svfiprintf_r+0x196>
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d0c8      	beq.n	8005db8 <_svfiprintf_r+0x124>
 8005e26:	9105      	str	r1, [sp, #20]
 8005e28:	e7c6      	b.n	8005db8 <_svfiprintf_r+0x124>
 8005e2a:	fb05 2101 	mla	r1, r5, r1, r2
 8005e2e:	2301      	movs	r3, #1
 8005e30:	4607      	mov	r7, r0
 8005e32:	e7f0      	b.n	8005e16 <_svfiprintf_r+0x182>
 8005e34:	ab03      	add	r3, sp, #12
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	4622      	mov	r2, r4
 8005e3a:	4b11      	ldr	r3, [pc, #68]	; (8005e80 <_svfiprintf_r+0x1ec>)
 8005e3c:	a904      	add	r1, sp, #16
 8005e3e:	4640      	mov	r0, r8
 8005e40:	f7fe f8a2 	bl	8003f88 <_printf_float>
 8005e44:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005e48:	4681      	mov	r9, r0
 8005e4a:	d1d6      	bne.n	8005dfa <_svfiprintf_r+0x166>
 8005e4c:	89a3      	ldrh	r3, [r4, #12]
 8005e4e:	065b      	lsls	r3, r3, #25
 8005e50:	f53f af35 	bmi.w	8005cbe <_svfiprintf_r+0x2a>
 8005e54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e56:	b01d      	add	sp, #116	; 0x74
 8005e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e5c:	ab03      	add	r3, sp, #12
 8005e5e:	9300      	str	r3, [sp, #0]
 8005e60:	4622      	mov	r2, r4
 8005e62:	4b07      	ldr	r3, [pc, #28]	; (8005e80 <_svfiprintf_r+0x1ec>)
 8005e64:	a904      	add	r1, sp, #16
 8005e66:	4640      	mov	r0, r8
 8005e68:	f7fe fb3a 	bl	80044e0 <_printf_i>
 8005e6c:	e7ea      	b.n	8005e44 <_svfiprintf_r+0x1b0>
 8005e6e:	bf00      	nop
 8005e70:	080063ec 	.word	0x080063ec
 8005e74:	080063f2 	.word	0x080063f2
 8005e78:	080063f6 	.word	0x080063f6
 8005e7c:	08003f89 	.word	0x08003f89
 8005e80:	08005be1 	.word	0x08005be1

08005e84 <_sbrk_r>:
 8005e84:	b538      	push	{r3, r4, r5, lr}
 8005e86:	2300      	movs	r3, #0
 8005e88:	4c05      	ldr	r4, [pc, #20]	; (8005ea0 <_sbrk_r+0x1c>)
 8005e8a:	4605      	mov	r5, r0
 8005e8c:	4608      	mov	r0, r1
 8005e8e:	6023      	str	r3, [r4, #0]
 8005e90:	f7fc f8a4 	bl	8001fdc <_sbrk>
 8005e94:	1c43      	adds	r3, r0, #1
 8005e96:	d102      	bne.n	8005e9e <_sbrk_r+0x1a>
 8005e98:	6823      	ldr	r3, [r4, #0]
 8005e9a:	b103      	cbz	r3, 8005e9e <_sbrk_r+0x1a>
 8005e9c:	602b      	str	r3, [r5, #0]
 8005e9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ea0:	20000374 	.word	0x20000374

08005ea4 <__ascii_mbtowc>:
 8005ea4:	b082      	sub	sp, #8
 8005ea6:	b901      	cbnz	r1, 8005eaa <__ascii_mbtowc+0x6>
 8005ea8:	a901      	add	r1, sp, #4
 8005eaa:	b142      	cbz	r2, 8005ebe <__ascii_mbtowc+0x1a>
 8005eac:	b14b      	cbz	r3, 8005ec2 <__ascii_mbtowc+0x1e>
 8005eae:	7813      	ldrb	r3, [r2, #0]
 8005eb0:	600b      	str	r3, [r1, #0]
 8005eb2:	7812      	ldrb	r2, [r2, #0]
 8005eb4:	1c10      	adds	r0, r2, #0
 8005eb6:	bf18      	it	ne
 8005eb8:	2001      	movne	r0, #1
 8005eba:	b002      	add	sp, #8
 8005ebc:	4770      	bx	lr
 8005ebe:	4610      	mov	r0, r2
 8005ec0:	e7fb      	b.n	8005eba <__ascii_mbtowc+0x16>
 8005ec2:	f06f 0001 	mvn.w	r0, #1
 8005ec6:	e7f8      	b.n	8005eba <__ascii_mbtowc+0x16>

08005ec8 <memmove>:
 8005ec8:	4288      	cmp	r0, r1
 8005eca:	b510      	push	{r4, lr}
 8005ecc:	eb01 0302 	add.w	r3, r1, r2
 8005ed0:	d807      	bhi.n	8005ee2 <memmove+0x1a>
 8005ed2:	1e42      	subs	r2, r0, #1
 8005ed4:	4299      	cmp	r1, r3
 8005ed6:	d00a      	beq.n	8005eee <memmove+0x26>
 8005ed8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005edc:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005ee0:	e7f8      	b.n	8005ed4 <memmove+0xc>
 8005ee2:	4283      	cmp	r3, r0
 8005ee4:	d9f5      	bls.n	8005ed2 <memmove+0xa>
 8005ee6:	1881      	adds	r1, r0, r2
 8005ee8:	1ad2      	subs	r2, r2, r3
 8005eea:	42d3      	cmn	r3, r2
 8005eec:	d100      	bne.n	8005ef0 <memmove+0x28>
 8005eee:	bd10      	pop	{r4, pc}
 8005ef0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ef4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005ef8:	e7f7      	b.n	8005eea <memmove+0x22>

08005efa <__malloc_lock>:
 8005efa:	4770      	bx	lr

08005efc <__malloc_unlock>:
 8005efc:	4770      	bx	lr

08005efe <_realloc_r>:
 8005efe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f00:	4607      	mov	r7, r0
 8005f02:	4614      	mov	r4, r2
 8005f04:	460e      	mov	r6, r1
 8005f06:	b921      	cbnz	r1, 8005f12 <_realloc_r+0x14>
 8005f08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005f0c:	4611      	mov	r1, r2
 8005f0e:	f7ff be0d 	b.w	8005b2c <_malloc_r>
 8005f12:	b922      	cbnz	r2, 8005f1e <_realloc_r+0x20>
 8005f14:	f7ff fdbe 	bl	8005a94 <_free_r>
 8005f18:	4625      	mov	r5, r4
 8005f1a:	4628      	mov	r0, r5
 8005f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f1e:	f000 f821 	bl	8005f64 <_malloc_usable_size_r>
 8005f22:	42a0      	cmp	r0, r4
 8005f24:	d20f      	bcs.n	8005f46 <_realloc_r+0x48>
 8005f26:	4621      	mov	r1, r4
 8005f28:	4638      	mov	r0, r7
 8005f2a:	f7ff fdff 	bl	8005b2c <_malloc_r>
 8005f2e:	4605      	mov	r5, r0
 8005f30:	2800      	cmp	r0, #0
 8005f32:	d0f2      	beq.n	8005f1a <_realloc_r+0x1c>
 8005f34:	4631      	mov	r1, r6
 8005f36:	4622      	mov	r2, r4
 8005f38:	f7fd ff82 	bl	8003e40 <memcpy>
 8005f3c:	4631      	mov	r1, r6
 8005f3e:	4638      	mov	r0, r7
 8005f40:	f7ff fda8 	bl	8005a94 <_free_r>
 8005f44:	e7e9      	b.n	8005f1a <_realloc_r+0x1c>
 8005f46:	4635      	mov	r5, r6
 8005f48:	e7e7      	b.n	8005f1a <_realloc_r+0x1c>

08005f4a <__ascii_wctomb>:
 8005f4a:	b149      	cbz	r1, 8005f60 <__ascii_wctomb+0x16>
 8005f4c:	2aff      	cmp	r2, #255	; 0xff
 8005f4e:	bf8b      	itete	hi
 8005f50:	238a      	movhi	r3, #138	; 0x8a
 8005f52:	700a      	strbls	r2, [r1, #0]
 8005f54:	6003      	strhi	r3, [r0, #0]
 8005f56:	2001      	movls	r0, #1
 8005f58:	bf88      	it	hi
 8005f5a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005f5e:	4770      	bx	lr
 8005f60:	4608      	mov	r0, r1
 8005f62:	4770      	bx	lr

08005f64 <_malloc_usable_size_r>:
 8005f64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f68:	1f18      	subs	r0, r3, #4
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	bfbc      	itt	lt
 8005f6e:	580b      	ldrlt	r3, [r1, r0]
 8005f70:	18c0      	addlt	r0, r0, r3
 8005f72:	4770      	bx	lr

08005f74 <_init>:
 8005f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f76:	bf00      	nop
 8005f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f7a:	bc08      	pop	{r3}
 8005f7c:	469e      	mov	lr, r3
 8005f7e:	4770      	bx	lr

08005f80 <_fini>:
 8005f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f82:	bf00      	nop
 8005f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f86:	bc08      	pop	{r3}
 8005f88:	469e      	mov	lr, r3
 8005f8a:	4770      	bx	lr
