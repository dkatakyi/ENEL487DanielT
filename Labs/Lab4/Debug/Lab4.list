
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d0c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001e1c  08001e1c  00011e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e3c  08001e3c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08001e3c  08001e3c  00011e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001e44  08001e44  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e44  08001e44  00011e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e48  08001e48  00011e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08001e4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000570  20000070  08001ebc  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005e0  08001ebc  000205e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b38d  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a43  00000000  00000000  0002b426  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00008c35  00000000  00000000  0002ce69  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000710  00000000  00000000  00035aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000fe0  00000000  00000000  000361b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00017438  00000000  00000000  00037190  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000860d  00000000  00000000  0004e5c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000877e5  00000000  00000000  00056bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000de3ba  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001b20  00000000  00000000  000de438  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08001e04 	.word	0x08001e04

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08001e04 	.word	0x08001e04

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_uldivmod>:
 80008ec:	b953      	cbnz	r3, 8000904 <__aeabi_uldivmod+0x18>
 80008ee:	b94a      	cbnz	r2, 8000904 <__aeabi_uldivmod+0x18>
 80008f0:	2900      	cmp	r1, #0
 80008f2:	bf08      	it	eq
 80008f4:	2800      	cmpeq	r0, #0
 80008f6:	bf1c      	itt	ne
 80008f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80008fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000900:	f000 b974 	b.w	8000bec <__aeabi_idiv0>
 8000904:	f1ad 0c08 	sub.w	ip, sp, #8
 8000908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800090c:	f000 f806 	bl	800091c <__udivmoddi4>
 8000910:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000918:	b004      	add	sp, #16
 800091a:	4770      	bx	lr

0800091c <__udivmoddi4>:
 800091c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000920:	468c      	mov	ip, r1
 8000922:	4604      	mov	r4, r0
 8000924:	9e08      	ldr	r6, [sp, #32]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d14b      	bne.n	80009c2 <__udivmoddi4+0xa6>
 800092a:	428a      	cmp	r2, r1
 800092c:	4615      	mov	r5, r2
 800092e:	d967      	bls.n	8000a00 <__udivmoddi4+0xe4>
 8000930:	fab2 f282 	clz	r2, r2
 8000934:	b14a      	cbz	r2, 800094a <__udivmoddi4+0x2e>
 8000936:	f1c2 0720 	rsb	r7, r2, #32
 800093a:	fa01 f302 	lsl.w	r3, r1, r2
 800093e:	fa20 f707 	lsr.w	r7, r0, r7
 8000942:	4095      	lsls	r5, r2
 8000944:	ea47 0c03 	orr.w	ip, r7, r3
 8000948:	4094      	lsls	r4, r2
 800094a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800094e:	fbbc f7fe 	udiv	r7, ip, lr
 8000952:	fa1f f885 	uxth.w	r8, r5
 8000956:	fb0e c317 	mls	r3, lr, r7, ip
 800095a:	fb07 f908 	mul.w	r9, r7, r8
 800095e:	0c21      	lsrs	r1, r4, #16
 8000960:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000964:	4599      	cmp	r9, r3
 8000966:	d909      	bls.n	800097c <__udivmoddi4+0x60>
 8000968:	18eb      	adds	r3, r5, r3
 800096a:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 800096e:	f080 811c 	bcs.w	8000baa <__udivmoddi4+0x28e>
 8000972:	4599      	cmp	r9, r3
 8000974:	f240 8119 	bls.w	8000baa <__udivmoddi4+0x28e>
 8000978:	3f02      	subs	r7, #2
 800097a:	442b      	add	r3, r5
 800097c:	eba3 0309 	sub.w	r3, r3, r9
 8000980:	fbb3 f0fe 	udiv	r0, r3, lr
 8000984:	fb0e 3310 	mls	r3, lr, r0, r3
 8000988:	fb00 f108 	mul.w	r1, r0, r8
 800098c:	b2a4      	uxth	r4, r4
 800098e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000992:	42a1      	cmp	r1, r4
 8000994:	d909      	bls.n	80009aa <__udivmoddi4+0x8e>
 8000996:	192c      	adds	r4, r5, r4
 8000998:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800099c:	f080 8107 	bcs.w	8000bae <__udivmoddi4+0x292>
 80009a0:	42a1      	cmp	r1, r4
 80009a2:	f240 8104 	bls.w	8000bae <__udivmoddi4+0x292>
 80009a6:	3802      	subs	r0, #2
 80009a8:	442c      	add	r4, r5
 80009aa:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80009ae:	2700      	movs	r7, #0
 80009b0:	1a64      	subs	r4, r4, r1
 80009b2:	b11e      	cbz	r6, 80009bc <__udivmoddi4+0xa0>
 80009b4:	2300      	movs	r3, #0
 80009b6:	40d4      	lsrs	r4, r2
 80009b8:	e9c6 4300 	strd	r4, r3, [r6]
 80009bc:	4639      	mov	r1, r7
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	428b      	cmp	r3, r1
 80009c4:	d909      	bls.n	80009da <__udivmoddi4+0xbe>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	f000 80ec 	beq.w	8000ba4 <__udivmoddi4+0x288>
 80009cc:	2700      	movs	r7, #0
 80009ce:	e9c6 0100 	strd	r0, r1, [r6]
 80009d2:	4638      	mov	r0, r7
 80009d4:	4639      	mov	r1, r7
 80009d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009da:	fab3 f783 	clz	r7, r3
 80009de:	2f00      	cmp	r7, #0
 80009e0:	d148      	bne.n	8000a74 <__udivmoddi4+0x158>
 80009e2:	428b      	cmp	r3, r1
 80009e4:	d302      	bcc.n	80009ec <__udivmoddi4+0xd0>
 80009e6:	4282      	cmp	r2, r0
 80009e8:	f200 80fb 	bhi.w	8000be2 <__udivmoddi4+0x2c6>
 80009ec:	1a84      	subs	r4, r0, r2
 80009ee:	eb61 0303 	sbc.w	r3, r1, r3
 80009f2:	2001      	movs	r0, #1
 80009f4:	469c      	mov	ip, r3
 80009f6:	2e00      	cmp	r6, #0
 80009f8:	d0e0      	beq.n	80009bc <__udivmoddi4+0xa0>
 80009fa:	e9c6 4c00 	strd	r4, ip, [r6]
 80009fe:	e7dd      	b.n	80009bc <__udivmoddi4+0xa0>
 8000a00:	b902      	cbnz	r2, 8000a04 <__udivmoddi4+0xe8>
 8000a02:	deff      	udf	#255	; 0xff
 8000a04:	fab2 f282 	clz	r2, r2
 8000a08:	2a00      	cmp	r2, #0
 8000a0a:	f040 808f 	bne.w	8000b2c <__udivmoddi4+0x210>
 8000a0e:	2701      	movs	r7, #1
 8000a10:	1b49      	subs	r1, r1, r5
 8000a12:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000a16:	fa1f f985 	uxth.w	r9, r5
 8000a1a:	fbb1 fef8 	udiv	lr, r1, r8
 8000a1e:	fb08 111e 	mls	r1, r8, lr, r1
 8000a22:	fb09 f00e 	mul.w	r0, r9, lr
 8000a26:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000a2a:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000a2e:	4298      	cmp	r0, r3
 8000a30:	d907      	bls.n	8000a42 <__udivmoddi4+0x126>
 8000a32:	18eb      	adds	r3, r5, r3
 8000a34:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8000a38:	d202      	bcs.n	8000a40 <__udivmoddi4+0x124>
 8000a3a:	4298      	cmp	r0, r3
 8000a3c:	f200 80cd 	bhi.w	8000bda <__udivmoddi4+0x2be>
 8000a40:	468e      	mov	lr, r1
 8000a42:	1a1b      	subs	r3, r3, r0
 8000a44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a48:	fb08 3310 	mls	r3, r8, r0, r3
 8000a4c:	fb09 f900 	mul.w	r9, r9, r0
 8000a50:	b2a4      	uxth	r4, r4
 8000a52:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a56:	45a1      	cmp	r9, r4
 8000a58:	d907      	bls.n	8000a6a <__udivmoddi4+0x14e>
 8000a5a:	192c      	adds	r4, r5, r4
 8000a5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a60:	d202      	bcs.n	8000a68 <__udivmoddi4+0x14c>
 8000a62:	45a1      	cmp	r9, r4
 8000a64:	f200 80b6 	bhi.w	8000bd4 <__udivmoddi4+0x2b8>
 8000a68:	4618      	mov	r0, r3
 8000a6a:	eba4 0409 	sub.w	r4, r4, r9
 8000a6e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000a72:	e79e      	b.n	80009b2 <__udivmoddi4+0x96>
 8000a74:	f1c7 0520 	rsb	r5, r7, #32
 8000a78:	40bb      	lsls	r3, r7
 8000a7a:	fa22 fc05 	lsr.w	ip, r2, r5
 8000a7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a82:	fa21 f405 	lsr.w	r4, r1, r5
 8000a86:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a8a:	fbb4 f9fe 	udiv	r9, r4, lr
 8000a8e:	fa1f f88c 	uxth.w	r8, ip
 8000a92:	fb0e 4419 	mls	r4, lr, r9, r4
 8000a96:	fa20 f305 	lsr.w	r3, r0, r5
 8000a9a:	40b9      	lsls	r1, r7
 8000a9c:	fb09 fa08 	mul.w	sl, r9, r8
 8000aa0:	4319      	orrs	r1, r3
 8000aa2:	0c0b      	lsrs	r3, r1, #16
 8000aa4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000aa8:	45a2      	cmp	sl, r4
 8000aaa:	fa02 f207 	lsl.w	r2, r2, r7
 8000aae:	fa00 f307 	lsl.w	r3, r0, r7
 8000ab2:	d90b      	bls.n	8000acc <__udivmoddi4+0x1b0>
 8000ab4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ab8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000abc:	f080 8088 	bcs.w	8000bd0 <__udivmoddi4+0x2b4>
 8000ac0:	45a2      	cmp	sl, r4
 8000ac2:	f240 8085 	bls.w	8000bd0 <__udivmoddi4+0x2b4>
 8000ac6:	f1a9 0902 	sub.w	r9, r9, #2
 8000aca:	4464      	add	r4, ip
 8000acc:	eba4 040a 	sub.w	r4, r4, sl
 8000ad0:	fbb4 f0fe 	udiv	r0, r4, lr
 8000ad4:	fb0e 4410 	mls	r4, lr, r0, r4
 8000ad8:	fb00 fa08 	mul.w	sl, r0, r8
 8000adc:	b289      	uxth	r1, r1
 8000ade:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000ae2:	45a2      	cmp	sl, r4
 8000ae4:	d908      	bls.n	8000af8 <__udivmoddi4+0x1dc>
 8000ae6:	eb1c 0404 	adds.w	r4, ip, r4
 8000aea:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000aee:	d26b      	bcs.n	8000bc8 <__udivmoddi4+0x2ac>
 8000af0:	45a2      	cmp	sl, r4
 8000af2:	d969      	bls.n	8000bc8 <__udivmoddi4+0x2ac>
 8000af4:	3802      	subs	r0, #2
 8000af6:	4464      	add	r4, ip
 8000af8:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000afc:	fba0 8902 	umull	r8, r9, r0, r2
 8000b00:	eba4 040a 	sub.w	r4, r4, sl
 8000b04:	454c      	cmp	r4, r9
 8000b06:	4641      	mov	r1, r8
 8000b08:	46ce      	mov	lr, r9
 8000b0a:	d354      	bcc.n	8000bb6 <__udivmoddi4+0x29a>
 8000b0c:	d051      	beq.n	8000bb2 <__udivmoddi4+0x296>
 8000b0e:	2e00      	cmp	r6, #0
 8000b10:	d069      	beq.n	8000be6 <__udivmoddi4+0x2ca>
 8000b12:	1a5a      	subs	r2, r3, r1
 8000b14:	eb64 040e 	sbc.w	r4, r4, lr
 8000b18:	fa04 f505 	lsl.w	r5, r4, r5
 8000b1c:	fa22 f307 	lsr.w	r3, r2, r7
 8000b20:	40fc      	lsrs	r4, r7
 8000b22:	431d      	orrs	r5, r3
 8000b24:	e9c6 5400 	strd	r5, r4, [r6]
 8000b28:	2700      	movs	r7, #0
 8000b2a:	e747      	b.n	80009bc <__udivmoddi4+0xa0>
 8000b2c:	4095      	lsls	r5, r2
 8000b2e:	f1c2 0320 	rsb	r3, r2, #32
 8000b32:	fa21 f003 	lsr.w	r0, r1, r3
 8000b36:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000b3a:	fbb0 f7f8 	udiv	r7, r0, r8
 8000b3e:	fa1f f985 	uxth.w	r9, r5
 8000b42:	fb08 0017 	mls	r0, r8, r7, r0
 8000b46:	fa24 f303 	lsr.w	r3, r4, r3
 8000b4a:	4091      	lsls	r1, r2
 8000b4c:	fb07 fc09 	mul.w	ip, r7, r9
 8000b50:	430b      	orrs	r3, r1
 8000b52:	0c19      	lsrs	r1, r3, #16
 8000b54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b58:	458c      	cmp	ip, r1
 8000b5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000b5e:	d907      	bls.n	8000b70 <__udivmoddi4+0x254>
 8000b60:	1869      	adds	r1, r5, r1
 8000b62:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b66:	d231      	bcs.n	8000bcc <__udivmoddi4+0x2b0>
 8000b68:	458c      	cmp	ip, r1
 8000b6a:	d92f      	bls.n	8000bcc <__udivmoddi4+0x2b0>
 8000b6c:	3f02      	subs	r7, #2
 8000b6e:	4429      	add	r1, r5
 8000b70:	eba1 010c 	sub.w	r1, r1, ip
 8000b74:	fbb1 f0f8 	udiv	r0, r1, r8
 8000b78:	fb08 1c10 	mls	ip, r8, r0, r1
 8000b7c:	fb00 fe09 	mul.w	lr, r0, r9
 8000b80:	b299      	uxth	r1, r3
 8000b82:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000b86:	458e      	cmp	lr, r1
 8000b88:	d907      	bls.n	8000b9a <__udivmoddi4+0x27e>
 8000b8a:	1869      	adds	r1, r5, r1
 8000b8c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b90:	d218      	bcs.n	8000bc4 <__udivmoddi4+0x2a8>
 8000b92:	458e      	cmp	lr, r1
 8000b94:	d916      	bls.n	8000bc4 <__udivmoddi4+0x2a8>
 8000b96:	3802      	subs	r0, #2
 8000b98:	4429      	add	r1, r5
 8000b9a:	eba1 010e 	sub.w	r1, r1, lr
 8000b9e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ba2:	e73a      	b.n	8000a1a <__udivmoddi4+0xfe>
 8000ba4:	4637      	mov	r7, r6
 8000ba6:	4630      	mov	r0, r6
 8000ba8:	e708      	b.n	80009bc <__udivmoddi4+0xa0>
 8000baa:	460f      	mov	r7, r1
 8000bac:	e6e6      	b.n	800097c <__udivmoddi4+0x60>
 8000bae:	4618      	mov	r0, r3
 8000bb0:	e6fb      	b.n	80009aa <__udivmoddi4+0x8e>
 8000bb2:	4543      	cmp	r3, r8
 8000bb4:	d2ab      	bcs.n	8000b0e <__udivmoddi4+0x1f2>
 8000bb6:	ebb8 0102 	subs.w	r1, r8, r2
 8000bba:	eb69 020c 	sbc.w	r2, r9, ip
 8000bbe:	3801      	subs	r0, #1
 8000bc0:	4696      	mov	lr, r2
 8000bc2:	e7a4      	b.n	8000b0e <__udivmoddi4+0x1f2>
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	e7e8      	b.n	8000b9a <__udivmoddi4+0x27e>
 8000bc8:	4608      	mov	r0, r1
 8000bca:	e795      	b.n	8000af8 <__udivmoddi4+0x1dc>
 8000bcc:	4607      	mov	r7, r0
 8000bce:	e7cf      	b.n	8000b70 <__udivmoddi4+0x254>
 8000bd0:	4681      	mov	r9, r0
 8000bd2:	e77b      	b.n	8000acc <__udivmoddi4+0x1b0>
 8000bd4:	3802      	subs	r0, #2
 8000bd6:	442c      	add	r4, r5
 8000bd8:	e747      	b.n	8000a6a <__udivmoddi4+0x14e>
 8000bda:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bde:	442b      	add	r3, r5
 8000be0:	e72f      	b.n	8000a42 <__udivmoddi4+0x126>
 8000be2:	4638      	mov	r0, r7
 8000be4:	e707      	b.n	80009f6 <__udivmoddi4+0xda>
 8000be6:	4637      	mov	r7, r6
 8000be8:	e6e8      	b.n	80009bc <__udivmoddi4+0xa0>
 8000bea:	bf00      	nop

08000bec <__aeabi_idiv0>:
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <rand32>:

#include "TimingTest.h"


uint32_t rand32()
{
 8000bf0:	b510      	push	{r4, lr}
	return (rand() | (rand() << 15) | ((rand() & 0x6000) << 17));
 8000bf2:	f001 f85f 	bl	8001cb4 <rand>
 8000bf6:	4604      	mov	r4, r0
 8000bf8:	f001 f85c 	bl	8001cb4 <rand>
 8000bfc:	ea44 34c0 	orr.w	r4, r4, r0, lsl #15
 8000c00:	f001 f858 	bl	8001cb4 <rand>
 8000c04:	0440      	lsls	r0, r0, #17
 8000c06:	f000 4040 	and.w	r0, r0, #3221225472	; 0xc0000000
}
 8000c0a:	4320      	orrs	r0, r4
 8000c0c:	bd10      	pop	{r4, pc}
 8000c0e:	bf00      	nop

08000c10 <rand64>:

uint64_t rand64()
{
 8000c10:	b570      	push	{r4, r5, r6, lr}
	uint64_t x;
	x = rand();
 8000c12:	f001 f84f 	bl	8001cb4 <rand>
 8000c16:	4605      	mov	r5, r0
	x |= (rand() << 15);
 8000c18:	f001 f84c 	bl	8001cb4 <rand>
 8000c1c:	4606      	mov	r6, r0
	x |= (rand() << 30);
 8000c1e:	f001 f849 	bl	8001cb4 <rand>
 8000c22:	4604      	mov	r4, r0
	x |= (rand() << 45);
 8000c24:	f001 f846 	bl	8001cb4 <rand>
	x |= ((rand() & 0xF000) << 49);
 8000c28:	f001 f844 	bl	8001cb4 <rand>
	x |= (rand() << 30);
 8000c2c:	07a0      	lsls	r0, r4, #30
 8000c2e:	ea40 30c6 	orr.w	r0, r0, r6, lsl #15
 8000c32:	4328      	orrs	r0, r5
	return x;
	//return (rand() | (rand() << 15) | (rand() << 30) | (rand() << 45) | ((rand() & 0xF000) << 49));
}
 8000c34:	17c1      	asrs	r1, r0, #31
 8000c36:	bd70      	pop	{r4, r5, r6, pc}

08000c38 <add32>:

uint32_t add32(uint32_t op1, uint32_t op2)
{
	return op1 + op2;
}
 8000c38:	4408      	add	r0, r1
 8000c3a:	4770      	bx	lr

08000c3c <add64>:

uint64_t add64(uint64_t op1, uint64_t op2)
{
	return op1 + op2;
}
 8000c3c:	1880      	adds	r0, r0, r2
 8000c3e:	4159      	adcs	r1, r3
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop

08000c44 <mult32>:

uint64_t mult32(uint32_t op1, uint32_t op2)
{
	return op1 * op2;
}
 8000c44:	fb01 f000 	mul.w	r0, r1, r0
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4770      	bx	lr

08000c4c <mult64>:

uint64_t mult64(uint64_t op1, uint64_t op2)
{
	return op1 * op2;
 8000c4c:	fb00 f303 	mul.w	r3, r0, r3
{
 8000c50:	b430      	push	{r4, r5}
	return op1 * op2;
 8000c52:	fba0 4502 	umull	r4, r5, r0, r2
 8000c56:	fb02 3201 	mla	r2, r2, r1, r3
 8000c5a:	4415      	add	r5, r2
}
 8000c5c:	4620      	mov	r0, r4
 8000c5e:	4629      	mov	r1, r5
 8000c60:	bc30      	pop	{r4, r5}
 8000c62:	4770      	bx	lr

08000c64 <div32>:

uint32_t div32(uint32_t op1, uint32_t op2)
{
	if(op2 == 0)
 8000c64:	b111      	cbz	r1, 8000c6c <div32+0x8>
	{
		return 0xFFFFFFFF;
	}
	return op1 / op2;
 8000c66:	fbb0 f0f1 	udiv	r0, r0, r1
 8000c6a:	4770      	bx	lr
		return 0xFFFFFFFF;
 8000c6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop

08000c74 <div64>:

uint64_t div64(uint64_t op1, uint64_t op2)
{
	if(op2 == 0)
 8000c74:	ea52 0c03 	orrs.w	ip, r2, r3
 8000c78:	d003      	beq.n	8000c82 <div64+0xe>
{
 8000c7a:	b508      	push	{r3, lr}
	{
		return 0xFFFFFFFFFFFFFFFF;
	}
	return op1 / op2;
 8000c7c:	f7ff fe36 	bl	80008ec <__aeabi_uldivmod>
}
 8000c80:	bd08      	pop	{r3, pc}
		return 0xFFFFFFFFFFFFFFFF;
 8000c82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c86:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
}
 8000c8a:	4770      	bx	lr

08000c8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration)
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c8c:	b510      	push	{r4, lr}
 8000c8e:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c90:	2224      	movs	r2, #36	; 0x24
 8000c92:	2100      	movs	r1, #0
 8000c94:	a807      	add	r0, sp, #28
 8000c96:	f000 ffe1 	bl	8001c5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c9a:	2400      	movs	r4, #0

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c9c:	2201      	movs	r2, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c9e:	2102      	movs	r1, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ca0:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca2:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ca4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ca8:	e9cd 4105 	strd	r4, r1, [sp, #20]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cac:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8000cb0:	e9cd 4403 	strd	r4, r4, [sp, #12]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb4:	f000 fb82 	bl	80013bc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb8:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cba:	a801      	add	r0, sp, #4
 8000cbc:	4621      	mov	r1, r4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cbe:	e9cd 4402 	strd	r4, r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cc2:	e9cd 4404 	strd	r4, r4, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc6:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cc8:	f000 fd70 	bl	80017ac <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000ccc:	b010      	add	sp, #64	; 0x40
 8000cce:	bd10      	pop	{r4, pc}

08000cd0 <main>:
{
 8000cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cd4:	2500      	movs	r5, #0
{
 8000cd6:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 8000cd8:	f000 faec 	bl	80012b4 <HAL_Init>
  __HAL_RCC_TIM4_CLK_ENABLE();

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 0;
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000cdc:	2610      	movs	r6, #16
  SystemClock_Config();
 8000cde:	f7ff ffd5 	bl	8000c8c <SystemClock_Config>
  htim4.Init.Period = 65535;
 8000ce2:	f64f 71ff 	movw	r1, #65535	; 0xffff
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	4bb6      	ldr	r3, [pc, #728]	; (8000fc0 <main+0x2f0>)
  htim4.Instance = TIM4;
 8000ce8:	4cb6      	ldr	r4, [pc, #728]	; (8000fc4 <main+0x2f4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	699a      	ldr	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000cec:	4620      	mov	r0, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cee:	f042 0204 	orr.w	r2, r2, #4
 8000cf2:	619a      	str	r2, [r3, #24]
 8000cf4:	699a      	ldr	r2, [r3, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cf6:	e9cd 550d 	strd	r5, r5, [sp, #52]	; 0x34
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	f002 0204 	and.w	r2, r2, #4
 8000cfe:	9208      	str	r2, [sp, #32]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d00:	950c      	str	r5, [sp, #48]	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d02:	950a      	str	r5, [sp, #40]	; 0x28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d04:	950f      	str	r5, [sp, #60]	; 0x3c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d06:	950b      	str	r5, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d08:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000d0a:	69da      	ldr	r2, [r3, #28]
  while (num < 100)
 8000d0c:	f8df b2f8 	ldr.w	fp, [pc, #760]	; 8001008 <main+0x338>
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000d10:	f042 0204 	orr.w	r2, r2, #4
 8000d14:	61da      	str	r2, [r3, #28]
 8000d16:	69db      	ldr	r3, [r3, #28]
  htim4.Init.Period = 65535;
 8000d18:	e9c4 6102 	strd	r6, r1, [r4, #8]
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000d1c:	f003 0304 	and.w	r3, r3, #4
 8000d20:	9309      	str	r3, [sp, #36]	; 0x24
  htim4.Instance = TIM4;
 8000d22:	4ba9      	ldr	r3, [pc, #676]	; (8000fc8 <main+0x2f8>)
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000d24:	9a09      	ldr	r2, [sp, #36]	; 0x24
  htim4.Instance = TIM4;
 8000d26:	6023      	str	r3, [r4, #0]
  htim4.Init.Prescaler = 0;
 8000d28:	6065      	str	r5, [r4, #4]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2a:	6125      	str	r5, [r4, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d2c:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d2e:	f000 fe09 	bl	8001944 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d36:	a90c      	add	r1, sp, #48	; 0x30
 8000d38:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d3a:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d3c:	f000 fe8a 	bl	8001a54 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d40:	a90a      	add	r1, sp, #40	; 0x28
 8000d42:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d44:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d48:	f000 ff2a 	bl	8001ba0 <HAL_TIMEx_MasterConfigSynchronization>
  HAL_TIM_Base_MspInit(&htim4);
 8000d4c:	4620      	mov	r0, r4
 8000d4e:	f000 fa03 	bl	8001158 <HAL_TIM_Base_MspInit>
  HAL_TIM_Base_Init(&htim4);
 8000d52:	4620      	mov	r0, r4
 8000d54:	f000 fdf6 	bl	8001944 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(&htim4);
 8000d58:	4620      	mov	r0, r4
 8000d5a:	f000 fe53 	bl	8001a04 <HAL_TIM_Base_Start>
  srand(timer_start());
 8000d5e:	f000 fa49 	bl	80011f4 <timer_start>
 8000d62:	f000 ff83 	bl	8001c6c <srand>
  while (num < 100)
 8000d66:	f8db 3000 	ldr.w	r3, [fp]
 8000d6a:	2b63      	cmp	r3, #99	; 0x63
 8000d6c:	f300 81a5 	bgt.w	80010ba <main+0x3ea>
 8000d70:	4b96      	ldr	r3, [pc, #600]	; (8000fcc <main+0x2fc>)
 8000d72:	f8df 8298 	ldr.w	r8, [pc, #664]	; 800100c <main+0x33c>
 8000d76:	9303      	str	r3, [sp, #12]
 8000d78:	4b95      	ldr	r3, [pc, #596]	; (8000fd0 <main+0x300>)
 8000d7a:	4f96      	ldr	r7, [pc, #600]	; (8000fd4 <main+0x304>)
 8000d7c:	9304      	str	r3, [sp, #16]
 8000d7e:	4b96      	ldr	r3, [pc, #600]	; (8000fd8 <main+0x308>)
 8000d80:	4e96      	ldr	r6, [pc, #600]	; (8000fdc <main+0x30c>)
 8000d82:	9305      	str	r3, [sp, #20]
 8000d84:	4b96      	ldr	r3, [pc, #600]	; (8000fe0 <main+0x310>)
 8000d86:	4c97      	ldr	r4, [pc, #604]	; (8000fe4 <main+0x314>)
 8000d88:	9306      	str	r3, [sp, #24]
 8000d8a:	4b97      	ldr	r3, [pc, #604]	; (8000fe8 <main+0x318>)
 8000d8c:	4d97      	ldr	r5, [pc, #604]	; (8000fec <main+0x31c>)
 8000d8e:	9307      	str	r3, [sp, #28]
 8000d90:	4b97      	ldr	r3, [pc, #604]	; (8000ff0 <main+0x320>)
 8000d92:	f8df a27c 	ldr.w	sl, [pc, #636]	; 8001010 <main+0x340>
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	4b96      	ldr	r3, [pc, #600]	; (8000ff4 <main+0x324>)
 8000d9a:	9301      	str	r3, [sp, #4]
 8000d9c:	4b96      	ldr	r3, [pc, #600]	; (8000ff8 <main+0x328>)
 8000d9e:	9302      	str	r3, [sp, #8]
	  operand1 = rand32();
 8000da0:	f7ff ff26 	bl	8000bf0 <rand32>
 8000da4:	f8c8 0000 	str.w	r0, [r8]
	  operand2 = rand32();
 8000da8:	f7ff ff22 	bl	8000bf0 <rand32>
 8000dac:	6038      	str	r0, [r7, #0]
	  operand3 = rand64();
 8000dae:	f7ff ff2f 	bl	8000c10 <rand64>
 8000db2:	4b92      	ldr	r3, [pc, #584]	; (8000ffc <main+0x32c>)
 8000db4:	f8df 925c 	ldr.w	r9, [pc, #604]	; 8001014 <main+0x344>
 8000db8:	e9c3 0100 	strd	r0, r1, [r3]
	  operand4 = rand64();
 8000dbc:	f7ff ff28 	bl	8000c10 <rand64>
 8000dc0:	4b8f      	ldr	r3, [pc, #572]	; (8001000 <main+0x330>)
 8000dc2:	e9c3 0100 	strd	r0, r1, [r3]
		  src8.dat[k] = rand();
 8000dc6:	f000 ff75 	bl	8001cb4 <rand>
 8000dca:	4b8e      	ldr	r3, [pc, #568]	; (8001004 <main+0x334>)
 8000dcc:	6018      	str	r0, [r3, #0]
 8000dce:	f000 ff71 	bl	8001cb4 <rand>
 8000dd2:	4b8c      	ldr	r3, [pc, #560]	; (8001004 <main+0x334>)
 8000dd4:	6058      	str	r0, [r3, #4]
		  src128.dat[k] = rand();
 8000dd6:	f000 ff6d 	bl	8001cb4 <rand>
 8000dda:	f849 0f04 	str.w	r0, [r9, #4]!
	  for(int k = 0; k < 32; k++)
 8000dde:	454e      	cmp	r6, r9
 8000de0:	d1f9      	bne.n	8000dd6 <main+0x106>
 8000de2:	f8df 9234 	ldr.w	r9, [pc, #564]	; 8001018 <main+0x348>
		  src1024.dat[k] = rand();
 8000de6:	f000 ff65 	bl	8001cb4 <rand>
 8000dea:	f849 0f04 	str.w	r0, [r9, #4]!
	  for(int k = 0; k < 256; k++)
 8000dee:	454c      	cmp	r4, r9
 8000df0:	d1f9      	bne.n	8000de6 <main+0x116>
	  timStart = timer_start();
 8000df2:	f000 f9ff 	bl	80011f4 <timer_start>
 8000df6:	4603      	mov	r3, r0
	  add32(operand1, operand2);
 8000df8:	6839      	ldr	r1, [r7, #0]
 8000dfa:	f8d8 0000 	ldr.w	r0, [r8]
	  timStart = timer_start();
 8000dfe:	802b      	strh	r3, [r5, #0]
	  add32(operand1, operand2);
 8000e00:	f7ff ff1a 	bl	8000c38 <add32>
	  timA32 += (double)timer_stop(timStart);
 8000e04:	8828      	ldrh	r0, [r5, #0]
 8000e06:	f000 f9fd 	bl	8001204 <timer_stop>
 8000e0a:	f7ff fae3 	bl	80003d4 <__aeabi_ui2d>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	460b      	mov	r3, r1
 8000e12:	e9da 0100 	ldrd	r0, r1, [sl]
 8000e16:	f7ff f9a1 	bl	800015c <__adddf3>
 8000e1a:	e9ca 0100 	strd	r0, r1, [sl]
	  timStart = timer_start();
 8000e1e:	f000 f9e9 	bl	80011f4 <timer_start>
 8000e22:	4684      	mov	ip, r0
	  add64(operand3, operand4);
 8000e24:	4b76      	ldr	r3, [pc, #472]	; (8001000 <main+0x330>)
 8000e26:	4975      	ldr	r1, [pc, #468]	; (8000ffc <main+0x32c>)
 8000e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e2c:	e9d1 0100 	ldrd	r0, r1, [r1]
	  timStart = timer_start();
 8000e30:	f8a5 c000 	strh.w	ip, [r5]
	  add64(operand3, operand4);
 8000e34:	f7ff ff02 	bl	8000c3c <add64>
	  timA64 += (double)timer_stop(timStart);
 8000e38:	8828      	ldrh	r0, [r5, #0]
 8000e3a:	f000 f9e3 	bl	8001204 <timer_stop>
 8000e3e:	f7ff fac9 	bl	80003d4 <__aeabi_ui2d>
 8000e42:	460b      	mov	r3, r1
 8000e44:	9903      	ldr	r1, [sp, #12]
 8000e46:	4602      	mov	r2, r0
 8000e48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e4c:	f7ff f986 	bl	800015c <__adddf3>
 8000e50:	9b03      	ldr	r3, [sp, #12]
 8000e52:	e9c3 0100 	strd	r0, r1, [r3]
	  timStart = timer_start();
 8000e56:	f000 f9cd 	bl	80011f4 <timer_start>
 8000e5a:	4603      	mov	r3, r0
	  mult32(operand1, operand2);
 8000e5c:	6839      	ldr	r1, [r7, #0]
 8000e5e:	f8d8 0000 	ldr.w	r0, [r8]
	  timStart = timer_start();
 8000e62:	802b      	strh	r3, [r5, #0]
	  mult32(operand1, operand2);
 8000e64:	f7ff feee 	bl	8000c44 <mult32>
	  timM32 += (double)timer_stop(timStart);
 8000e68:	8828      	ldrh	r0, [r5, #0]
 8000e6a:	f000 f9cb 	bl	8001204 <timer_stop>
 8000e6e:	f7ff fab1 	bl	80003d4 <__aeabi_ui2d>
 8000e72:	460b      	mov	r3, r1
 8000e74:	9904      	ldr	r1, [sp, #16]
 8000e76:	4602      	mov	r2, r0
 8000e78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e7c:	f7ff f96e 	bl	800015c <__adddf3>
 8000e80:	9b04      	ldr	r3, [sp, #16]
 8000e82:	e9c3 0100 	strd	r0, r1, [r3]
	  timStart = timer_start();
 8000e86:	f000 f9b5 	bl	80011f4 <timer_start>
	  mult64(operand1, operand2);
 8000e8a:	2300      	movs	r3, #0
	  timStart = timer_start();
 8000e8c:	4684      	mov	ip, r0
	  mult64(operand1, operand2);
 8000e8e:	683a      	ldr	r2, [r7, #0]
 8000e90:	4619      	mov	r1, r3
 8000e92:	f8d8 0000 	ldr.w	r0, [r8]
	  timStart = timer_start();
 8000e96:	f8a5 c000 	strh.w	ip, [r5]
	  mult64(operand1, operand2);
 8000e9a:	f7ff fed7 	bl	8000c4c <mult64>
	  timM64 += (double)timer_stop(timStart);
 8000e9e:	8828      	ldrh	r0, [r5, #0]
 8000ea0:	f000 f9b0 	bl	8001204 <timer_stop>
 8000ea4:	f7ff fa96 	bl	80003d4 <__aeabi_ui2d>
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	9905      	ldr	r1, [sp, #20]
 8000eac:	4602      	mov	r2, r0
 8000eae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000eb2:	f7ff f953 	bl	800015c <__adddf3>
 8000eb6:	9b05      	ldr	r3, [sp, #20]
 8000eb8:	e9c3 0100 	strd	r0, r1, [r3]
	  timStart = timer_start();
 8000ebc:	f000 f99a 	bl	80011f4 <timer_start>
 8000ec0:	4603      	mov	r3, r0
	  div32(operand1, operand2);
 8000ec2:	6839      	ldr	r1, [r7, #0]
 8000ec4:	f8d8 0000 	ldr.w	r0, [r8]
	  timStart = timer_start();
 8000ec8:	802b      	strh	r3, [r5, #0]
	  div32(operand1, operand2);
 8000eca:	f7ff fecb 	bl	8000c64 <div32>
	  timD32 += (double)timer_stop(timStart);
 8000ece:	8828      	ldrh	r0, [r5, #0]
 8000ed0:	f000 f998 	bl	8001204 <timer_stop>
 8000ed4:	f7ff fa7e 	bl	80003d4 <__aeabi_ui2d>
 8000ed8:	460b      	mov	r3, r1
 8000eda:	9906      	ldr	r1, [sp, #24]
 8000edc:	4602      	mov	r2, r0
 8000ede:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000ee2:	f7ff f93b 	bl	800015c <__adddf3>
 8000ee6:	9b06      	ldr	r3, [sp, #24]
 8000ee8:	e9c3 0100 	strd	r0, r1, [r3]
	  timStart = timer_start();
 8000eec:	f000 f982 	bl	80011f4 <timer_start>
	  div64(operand1, operand2);
 8000ef0:	2300      	movs	r3, #0
	  timStart = timer_start();
 8000ef2:	4684      	mov	ip, r0
	  div64(operand1, operand2);
 8000ef4:	683a      	ldr	r2, [r7, #0]
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f8d8 0000 	ldr.w	r0, [r8]
	  timStart = timer_start();
 8000efc:	f8a5 c000 	strh.w	ip, [r5]
	  div64(operand1, operand2);
 8000f00:	f7ff feb8 	bl	8000c74 <div64>
	  timD64 += (double)timer_stop(timStart);
 8000f04:	8828      	ldrh	r0, [r5, #0]
 8000f06:	f000 f97d 	bl	8001204 <timer_stop>
 8000f0a:	f7ff fa63 	bl	80003d4 <__aeabi_ui2d>
 8000f0e:	460b      	mov	r3, r1
 8000f10:	9907      	ldr	r1, [sp, #28]
 8000f12:	4602      	mov	r2, r0
 8000f14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f18:	f7ff f920 	bl	800015c <__adddf3>
 8000f1c:	9b07      	ldr	r3, [sp, #28]
 8000f1e:	e9c3 0100 	strd	r0, r1, [r3]
	  timStart = timer_start();
 8000f22:	f000 f967 	bl	80011f4 <timer_start>
 8000f26:	8028      	strh	r0, [r5, #0]
	  timStrc8 += (double)timer_stop(timStart);
 8000f28:	8828      	ldrh	r0, [r5, #0]
 8000f2a:	f000 f96b 	bl	8001204 <timer_stop>
 8000f2e:	f7ff fa51 	bl	80003d4 <__aeabi_ui2d>
 8000f32:	460b      	mov	r3, r1
 8000f34:	9900      	ldr	r1, [sp, #0]
 8000f36:	4602      	mov	r2, r0
 8000f38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f3c:	f7ff f90e 	bl	800015c <__adddf3>
 8000f40:	9b00      	ldr	r3, [sp, #0]
 8000f42:	e9c3 0100 	strd	r0, r1, [r3]
	  timStart = timer_start();
 8000f46:	f000 f955 	bl	80011f4 <timer_start>
 8000f4a:	8028      	strh	r0, [r5, #0]
	  timStrc128 += (double)timer_stop(timStart);
 8000f4c:	8828      	ldrh	r0, [r5, #0]
 8000f4e:	f000 f959 	bl	8001204 <timer_stop>
 8000f52:	f7ff fa3f 	bl	80003d4 <__aeabi_ui2d>
 8000f56:	460b      	mov	r3, r1
 8000f58:	9901      	ldr	r1, [sp, #4]
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f60:	f7ff f8fc 	bl	800015c <__adddf3>
 8000f64:	9b01      	ldr	r3, [sp, #4]
 8000f66:	e9c3 0100 	strd	r0, r1, [r3]
	  timStart = timer_start();
 8000f6a:	f000 f943 	bl	80011f4 <timer_start>
 8000f6e:	8028      	strh	r0, [r5, #0]
	  timStrc1024 += (double)timer_stop(timStart);
 8000f70:	8828      	ldrh	r0, [r5, #0]
 8000f72:	f000 f947 	bl	8001204 <timer_stop>
 8000f76:	f7ff fa2d 	bl	80003d4 <__aeabi_ui2d>
 8000f7a:	9b02      	ldr	r3, [sp, #8]
 8000f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f80:	f7ff f8ec 	bl	800015c <__adddf3>
	  num++;
 8000f84:	f8db 3000 	ldr.w	r3, [fp]
	  timStrc1024 += (double)timer_stop(timStart);
 8000f88:	9a02      	ldr	r2, [sp, #8]
	  num++;
 8000f8a:	3301      	adds	r3, #1
  while (num < 100)
 8000f8c:	2b63      	cmp	r3, #99	; 0x63
	  timStrc1024 += (double)timer_stop(timStart);
 8000f8e:	e9c2 0100 	strd	r0, r1, [r2]
	  num++;
 8000f92:	f8cb 3000 	str.w	r3, [fp]
  while (num < 100)
 8000f96:	f77f af03 	ble.w	8000da0 <main+0xd0>
 8000f9a:	4605      	mov	r5, r0
 8000f9c:	460e      	mov	r6, r1
  timA32 = timA32 / 8000 / 100;					//divide by 8000 to get milliseconds, and divide by 100 to get average trial
 8000f9e:	a306      	add	r3, pc, #24	; (adr r3, 8000fb8 <main+0x2e8>)
 8000fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa4:	e9da 0100 	ldrd	r0, r1, [sl]
 8000fa8:	f7ff fa8e 	bl	80004c8 <__aeabi_dmul>
  timA64 = timA64 / 8000 / 100;
 8000fac:	a302      	add	r3, pc, #8	; (adr r3, 8000fb8 <main+0x2e8>)
 8000fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb2:	9c03      	ldr	r4, [sp, #12]
 8000fb4:	e032      	b.n	800101c <main+0x34c>
 8000fb6:	bf00      	nop
 8000fb8:	88e368f1 	.word	0x88e368f1
 8000fbc:	3eb4f8b5 	.word	0x3eb4f8b5
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	20000574 	.word	0x20000574
 8000fc8:	40000800 	.word	0x40000800
 8000fcc:	20000520 	.word	0x20000520
 8000fd0:	20000538 	.word	0x20000538
 8000fd4:	20000570 	.word	0x20000570
 8000fd8:	20000540 	.word	0x20000540
 8000fdc:	2000050c 	.word	0x2000050c
 8000fe0:	20000528 	.word	0x20000528
 8000fe4:	2000048c 	.word	0x2000048c
 8000fe8:	20000530 	.word	0x20000530
 8000fec:	200005bc 	.word	0x200005bc
 8000ff0:	20000558 	.word	0x20000558
 8000ff4:	20000550 	.word	0x20000550
 8000ff8:	20000548 	.word	0x20000548
 8000ffc:	200005d0 	.word	0x200005d0
 8001000:	200005c8 	.word	0x200005c8
 8001004:	20000510 	.word	0x20000510
 8001008:	2000008c 	.word	0x2000008c
 800100c:	200005c0 	.word	0x200005c0
 8001010:	20000518 	.word	0x20000518
 8001014:	2000048c 	.word	0x2000048c
 8001018:	2000008c 	.word	0x2000008c
  timA32 = timA32 / 8000 / 100;					//divide by 8000 to get milliseconds, and divide by 100 to get average trial
 800101c:	e9ca 0100 	strd	r0, r1, [sl]
  timA64 = timA64 / 8000 / 100;
 8001020:	e9d4 0100 	ldrd	r0, r1, [r4]
 8001024:	f7ff fa50 	bl	80004c8 <__aeabi_dmul>
  timM32 = timM32 / 8000 / 100;
 8001028:	a32f      	add	r3, pc, #188	; (adr r3, 80010e8 <main+0x418>)
 800102a:	e9d3 2300 	ldrd	r2, r3, [r3]
  timA64 = timA64 / 8000 / 100;
 800102e:	e9c4 0100 	strd	r0, r1, [r4]
  timM32 = timM32 / 8000 / 100;
 8001032:	9c04      	ldr	r4, [sp, #16]
 8001034:	e9d4 0100 	ldrd	r0, r1, [r4]
 8001038:	f7ff fa46 	bl	80004c8 <__aeabi_dmul>
  timM64 = timM64 / 8000 / 100;
 800103c:	a32a      	add	r3, pc, #168	; (adr r3, 80010e8 <main+0x418>)
 800103e:	e9d3 2300 	ldrd	r2, r3, [r3]
  timM32 = timM32 / 8000 / 100;
 8001042:	e9c4 0100 	strd	r0, r1, [r4]
  timM64 = timM64 / 8000 / 100;
 8001046:	9c05      	ldr	r4, [sp, #20]
 8001048:	e9d4 0100 	ldrd	r0, r1, [r4]
 800104c:	f7ff fa3c 	bl	80004c8 <__aeabi_dmul>
  timD32 = timD32 / 8000 / 100;
 8001050:	a325      	add	r3, pc, #148	; (adr r3, 80010e8 <main+0x418>)
 8001052:	e9d3 2300 	ldrd	r2, r3, [r3]
  timM64 = timM64 / 8000 / 100;
 8001056:	e9c4 0100 	strd	r0, r1, [r4]
  timD32 = timD32 / 8000 / 100;
 800105a:	9c06      	ldr	r4, [sp, #24]
 800105c:	e9d4 0100 	ldrd	r0, r1, [r4]
 8001060:	f7ff fa32 	bl	80004c8 <__aeabi_dmul>
  timD64 = timD64 / 8000 / 100;
 8001064:	a320      	add	r3, pc, #128	; (adr r3, 80010e8 <main+0x418>)
 8001066:	e9d3 2300 	ldrd	r2, r3, [r3]
  timD32 = timD32 / 8000 / 100;
 800106a:	e9c4 0100 	strd	r0, r1, [r4]
  timD64 = timD64 / 8000 / 100;
 800106e:	9c07      	ldr	r4, [sp, #28]
 8001070:	e9d4 0100 	ldrd	r0, r1, [r4]
 8001074:	f7ff fa28 	bl	80004c8 <__aeabi_dmul>
  timStrc8 = timStrc8 / 8000 / 100;
 8001078:	a31b      	add	r3, pc, #108	; (adr r3, 80010e8 <main+0x418>)
 800107a:	e9d3 2300 	ldrd	r2, r3, [r3]
  timD64 = timD64 / 8000 / 100;
 800107e:	e9c4 0100 	strd	r0, r1, [r4]
  timStrc8 = timStrc8 / 8000 / 100;
 8001082:	9c00      	ldr	r4, [sp, #0]
 8001084:	e9d4 0100 	ldrd	r0, r1, [r4]
 8001088:	f7ff fa1e 	bl	80004c8 <__aeabi_dmul>
  timStrc128 = timStrc128 / 8000 / 100;
 800108c:	a316      	add	r3, pc, #88	; (adr r3, 80010e8 <main+0x418>)
 800108e:	e9d3 2300 	ldrd	r2, r3, [r3]
  timStrc8 = timStrc8 / 8000 / 100;
 8001092:	e9c4 0100 	strd	r0, r1, [r4]
  timStrc128 = timStrc128 / 8000 / 100;
 8001096:	9c01      	ldr	r4, [sp, #4]
 8001098:	e9d4 0100 	ldrd	r0, r1, [r4]
 800109c:	f7ff fa14 	bl	80004c8 <__aeabi_dmul>
  timStrc1024 = timStrc1024 / 8000 / 100;
 80010a0:	a311      	add	r3, pc, #68	; (adr r3, 80010e8 <main+0x418>)
 80010a2:	e9d3 2300 	ldrd	r2, r3, [r3]
  timStrc128 = timStrc128 / 8000 / 100;
 80010a6:	e9c4 0100 	strd	r0, r1, [r4]
  timStrc1024 = timStrc1024 / 8000 / 100;
 80010aa:	4628      	mov	r0, r5
 80010ac:	4631      	mov	r1, r6
 80010ae:	f7ff fa0b 	bl	80004c8 <__aeabi_dmul>
 80010b2:	9b02      	ldr	r3, [sp, #8]
 80010b4:	e9c3 0100 	strd	r0, r1, [r3]
 80010b8:	e7fe      	b.n	80010b8 <main+0x3e8>
 80010ba:	4a0d      	ldr	r2, [pc, #52]	; (80010f0 <main+0x420>)
 80010bc:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <main+0x424>)
 80010be:	9203      	str	r2, [sp, #12]
 80010c0:	4a0d      	ldr	r2, [pc, #52]	; (80010f8 <main+0x428>)
 80010c2:	9302      	str	r3, [sp, #8]
 80010c4:	9204      	str	r2, [sp, #16]
 80010c6:	4a0d      	ldr	r2, [pc, #52]	; (80010fc <main+0x42c>)
 80010c8:	cb18      	ldmia	r3, {r3, r4}
 80010ca:	9205      	str	r2, [sp, #20]
 80010cc:	4a0c      	ldr	r2, [pc, #48]	; (8001100 <main+0x430>)
 80010ce:	f8df a040 	ldr.w	sl, [pc, #64]	; 8001110 <main+0x440>
 80010d2:	9206      	str	r2, [sp, #24]
 80010d4:	4a0b      	ldr	r2, [pc, #44]	; (8001104 <main+0x434>)
 80010d6:	461d      	mov	r5, r3
 80010d8:	9207      	str	r2, [sp, #28]
 80010da:	4a0b      	ldr	r2, [pc, #44]	; (8001108 <main+0x438>)
 80010dc:	4626      	mov	r6, r4
 80010de:	9200      	str	r2, [sp, #0]
 80010e0:	4a0a      	ldr	r2, [pc, #40]	; (800110c <main+0x43c>)
 80010e2:	9201      	str	r2, [sp, #4]
 80010e4:	e75b      	b.n	8000f9e <main+0x2ce>
 80010e6:	bf00      	nop
 80010e8:	88e368f1 	.word	0x88e368f1
 80010ec:	3eb4f8b5 	.word	0x3eb4f8b5
 80010f0:	20000520 	.word	0x20000520
 80010f4:	20000548 	.word	0x20000548
 80010f8:	20000538 	.word	0x20000538
 80010fc:	20000540 	.word	0x20000540
 8001100:	20000528 	.word	0x20000528
 8001104:	20000530 	.word	0x20000530
 8001108:	20000558 	.word	0x20000558
 800110c:	20000550 	.word	0x20000550
 8001110:	20000518 	.word	0x20000518

08001114 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001114:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <HAL_MspInit+0x3c>)
{
 8001116:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001118:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800111a:	490e      	ldr	r1, [pc, #56]	; (8001154 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 800111c:	f042 0201 	orr.w	r2, r2, #1
 8001120:	619a      	str	r2, [r3, #24]
 8001122:	699a      	ldr	r2, [r3, #24]
 8001124:	f002 0201 	and.w	r2, r2, #1
 8001128:	9200      	str	r2, [sp, #0]
 800112a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800112c:	69da      	ldr	r2, [r3, #28]
 800112e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001132:	61da      	str	r2, [r3, #28]
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113a:	9301      	str	r3, [sp, #4]
 800113c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800113e:	684b      	ldr	r3, [r1, #4]
 8001140:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001144:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001148:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800114a:	b002      	add	sp, #8
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	40021000 	.word	0x40021000
 8001154:	40010000 	.word	0x40010000

08001158 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM4)
 8001158:	6802      	ldr	r2, [r0, #0]
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <HAL_TIM_Base_MspInit+0x28>)
 800115c:	429a      	cmp	r2, r3
 800115e:	d000      	beq.n	8001162 <HAL_TIM_Base_MspInit+0xa>
 8001160:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001162:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001166:	69da      	ldr	r2, [r3, #28]
{
 8001168:	b082      	sub	sp, #8
    __HAL_RCC_TIM4_CLK_ENABLE();
 800116a:	f042 0204 	orr.w	r2, r2, #4
 800116e:	61da      	str	r2, [r3, #28]
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	f003 0304 	and.w	r3, r3, #4
 8001176:	9301      	str	r3, [sp, #4]
 8001178:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800117a:	b002      	add	sp, #8
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40000800 	.word	0x40000800

08001184 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop

08001188 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001188:	e7fe      	b.n	8001188 <HardFault_Handler>
 800118a:	bf00      	nop

0800118c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800118c:	e7fe      	b.n	800118c <MemManage_Handler>
 800118e:	bf00      	nop

08001190 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001190:	e7fe      	b.n	8001190 <BusFault_Handler>
 8001192:	bf00      	nop

08001194 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001194:	e7fe      	b.n	8001194 <UsageFault_Handler>
 8001196:	bf00      	nop

08001198 <SVC_Handler>:
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <DebugMon_Handler>:
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop

080011a0 <PendSV_Handler>:
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop

080011a4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a4:	f000 b898 	b.w	80012d8 <HAL_IncTick>

080011a8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011a8:	490d      	ldr	r1, [pc, #52]	; (80011e0 <_sbrk+0x38>)
{
 80011aa:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011ac:	4a0d      	ldr	r2, [pc, #52]	; (80011e4 <_sbrk+0x3c>)
 80011ae:	4c0e      	ldr	r4, [pc, #56]	; (80011e8 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 80011b0:	680b      	ldr	r3, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011b2:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80011b4:	b12b      	cbz	r3, 80011c2 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011b6:	4418      	add	r0, r3
 80011b8:	4290      	cmp	r0, r2
 80011ba:	d808      	bhi.n	80011ce <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80011bc:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 80011be:	4618      	mov	r0, r3
 80011c0:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80011c2:	4c0a      	ldr	r4, [pc, #40]	; (80011ec <_sbrk+0x44>)
 80011c4:	4623      	mov	r3, r4
  if (__sbrk_heap_end + incr > max_heap)
 80011c6:	4418      	add	r0, r3
 80011c8:	4290      	cmp	r0, r2
    __sbrk_heap_end = &_end;
 80011ca:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80011cc:	d9f6      	bls.n	80011bc <_sbrk+0x14>
    errno = ENOMEM;
 80011ce:	f000 fd1b 	bl	8001c08 <__errno>
 80011d2:	220c      	movs	r2, #12
    return (void *)-1;
 80011d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    errno = ENOMEM;
 80011d8:	6002      	str	r2, [r0, #0]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	bd10      	pop	{r4, pc}
 80011de:	bf00      	nop
 80011e0:	20000560 	.word	0x20000560
 80011e4:	20005000 	.word	0x20005000
 80011e8:	00000400 	.word	0x00000400
 80011ec:	200005e0 	.word	0x200005e0

080011f0 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop

080011f4 <timer_start>:
#include "timer.h"


uint16_t timer_start()
{
	return __HAL_TIM_GET_COUNTER(&htim4);
 80011f4:	4b02      	ldr	r3, [pc, #8]	; (8001200 <timer_start+0xc>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
 80011fa:	b280      	uxth	r0, r0
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	20000574 	.word	0x20000574

08001204 <timer_stop>:

uint16_t timer_stop(uint16_t first)
{
	uint16_t temp = __HAL_TIM_GET_COUNTER(&htim4);
 8001204:	4b05      	ldr	r3, [pc, #20]	; (800121c <timer_stop+0x18>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120a:	b29b      	uxth	r3, r3

	if(temp > first)
 800120c:	4283      	cmp	r3, r0
	{
		return (first + (0xFFFF - temp));
 800120e:	bf88      	it	hi
 8001210:	f100 30ff 	addhi.w	r0, r0, #4294967295	; 0xffffffff
	}

	return (first - temp);
 8001214:	1ac0      	subs	r0, r0, r3
 8001216:	b280      	uxth	r0, r0
}
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	20000574 	.word	0x20000574

08001220 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001220:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001222:	e003      	b.n	800122c <LoopCopyDataInit>

08001224 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001224:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001226:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001228:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800122a:	3104      	adds	r1, #4

0800122c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800122c:	480a      	ldr	r0, [pc, #40]	; (8001258 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800122e:	4b0b      	ldr	r3, [pc, #44]	; (800125c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001230:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001232:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001234:	d3f6      	bcc.n	8001224 <CopyDataInit>
  ldr r2, =_sbss
 8001236:	4a0a      	ldr	r2, [pc, #40]	; (8001260 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001238:	e002      	b.n	8001240 <LoopFillZerobss>

0800123a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800123a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800123c:	f842 3b04 	str.w	r3, [r2], #4

08001240 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001240:	4b08      	ldr	r3, [pc, #32]	; (8001264 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001242:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001244:	d3f9      	bcc.n	800123a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001246:	f7ff ffd3 	bl	80011f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800124a:	f000 fce3 	bl	8001c14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800124e:	f7ff fd3f 	bl	8000cd0 <main>
  bx lr
 8001252:	4770      	bx	lr
  ldr r3, =_sidata
 8001254:	08001e4c 	.word	0x08001e4c
  ldr r0, =_sdata
 8001258:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800125c:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001260:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001264:	200005e0 	.word	0x200005e0

08001268 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001268:	e7fe      	b.n	8001268 <ADC1_2_IRQHandler>
	...

0800126c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800126c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800126e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001272:	490d      	ldr	r1, [pc, #52]	; (80012a8 <HAL_InitTick+0x3c>)
 8001274:	4a0d      	ldr	r2, [pc, #52]	; (80012ac <HAL_InitTick+0x40>)
 8001276:	7809      	ldrb	r1, [r1, #0]
 8001278:	6812      	ldr	r2, [r2, #0]
 800127a:	fbb3 f3f1 	udiv	r3, r3, r1
{
 800127e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001280:	fbb2 f0f3 	udiv	r0, r2, r3
 8001284:	f000 f882 	bl	800138c <HAL_SYSTICK_Config>
 8001288:	b908      	cbnz	r0, 800128e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128a:	2d0f      	cmp	r5, #15
 800128c:	d901      	bls.n	8001292 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800128e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001290:	bd38      	pop	{r3, r4, r5, pc}
 8001292:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001294:	4602      	mov	r2, r0
 8001296:	4629      	mov	r1, r5
 8001298:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800129c:	f000 f840 	bl	8001320 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a0:	4b03      	ldr	r3, [pc, #12]	; (80012b0 <HAL_InitTick+0x44>)
 80012a2:	4620      	mov	r0, r4
 80012a4:	601d      	str	r5, [r3, #0]
}
 80012a6:	bd38      	pop	{r3, r4, r5, pc}
 80012a8:	20000004 	.word	0x20000004
 80012ac:	20000000 	.word	0x20000000
 80012b0:	20000008 	.word	0x20000008

080012b4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b4:	4a07      	ldr	r2, [pc, #28]	; (80012d4 <HAL_Init+0x20>)
{
 80012b6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ba:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012bc:	f043 0310 	orr.w	r3, r3, #16
 80012c0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c2:	f000 f81b 	bl	80012fc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80012c6:	2000      	movs	r0, #0
 80012c8:	f7ff ffd0 	bl	800126c <HAL_InitTick>
  HAL_MspInit();
 80012cc:	f7ff ff22 	bl	8001114 <HAL_MspInit>
}
 80012d0:	2000      	movs	r0, #0
 80012d2:	bd08      	pop	{r3, pc}
 80012d4:	40022000 	.word	0x40022000

080012d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80012d8:	4a03      	ldr	r2, [pc, #12]	; (80012e8 <HAL_IncTick+0x10>)
 80012da:	4b04      	ldr	r3, [pc, #16]	; (80012ec <HAL_IncTick+0x14>)
 80012dc:	6811      	ldr	r1, [r2, #0]
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	440b      	add	r3, r1
 80012e2:	6013      	str	r3, [r2, #0]
}
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	200005d8 	.word	0x200005d8
 80012ec:	20000004 	.word	0x20000004

080012f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80012f0:	4b01      	ldr	r3, [pc, #4]	; (80012f8 <HAL_GetTick+0x8>)
 80012f2:	6818      	ldr	r0, [r3, #0]
}
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	200005d8 	.word	0x200005d8

080012fc <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012fc:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001300:	4a06      	ldr	r2, [pc, #24]	; (800131c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001302:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001304:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001306:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800130a:	400b      	ands	r3, r1
 800130c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001314:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001316:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001320:	4b18      	ldr	r3, [pc, #96]	; (8001384 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001322:	b430      	push	{r4, r5}
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800132a:	f1c3 0507 	rsb	r5, r3, #7
 800132e:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001330:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001334:	bf28      	it	cs
 8001336:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001338:	2c06      	cmp	r4, #6
 800133a:	d919      	bls.n	8001370 <HAL_NVIC_SetPriority+0x50>
 800133c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001340:	3b03      	subs	r3, #3
 8001342:	409c      	lsls	r4, r3
 8001344:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800134c:	40aa      	lsls	r2, r5
 800134e:	ea21 0102 	bic.w	r1, r1, r2
 8001352:	fa01 f203 	lsl.w	r2, r1, r3
 8001356:	4322      	orrs	r2, r4
 8001358:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 800135a:	2800      	cmp	r0, #0
 800135c:	b2d2      	uxtb	r2, r2
 800135e:	db0a      	blt.n	8001376 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001360:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001364:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001368:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800136c:	bc30      	pop	{r4, r5}
 800136e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001370:	2400      	movs	r4, #0
 8001372:	4623      	mov	r3, r4
 8001374:	e7e8      	b.n	8001348 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001376:	4b04      	ldr	r3, [pc, #16]	; (8001388 <HAL_NVIC_SetPriority+0x68>)
 8001378:	f000 000f 	and.w	r0, r0, #15
 800137c:	4403      	add	r3, r0
 800137e:	761a      	strb	r2, [r3, #24]
 8001380:	bc30      	pop	{r4, r5}
 8001382:	4770      	bx	lr
 8001384:	e000ed00 	.word	0xe000ed00
 8001388:	e000ecfc 	.word	0xe000ecfc

0800138c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800138c:	3801      	subs	r0, #1
 800138e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001392:	d20d      	bcs.n	80013b0 <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001394:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001396:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001398:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139a:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800139c:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139e:	4c06      	ldr	r4, [pc, #24]	; (80013b8 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013a0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a2:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a6:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 80013a8:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013aa:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ac:	6019      	str	r1, [r3, #0]
 80013ae:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80013b0:	2001      	movs	r0, #1
 80013b2:	4770      	bx	lr
 80013b4:	e000e010 	.word	0xe000e010
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013bc:	2800      	cmp	r0, #0
 80013be:	f000 8155 	beq.w	800166c <HAL_RCC_OscConfig+0x2b0>
{
 80013c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013c6:	6803      	ldr	r3, [r0, #0]
{
 80013c8:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ca:	07dd      	lsls	r5, r3, #31
 80013cc:	4604      	mov	r4, r0
 80013ce:	d535      	bpl.n	800143c <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013d0:	49a8      	ldr	r1, [pc, #672]	; (8001674 <HAL_RCC_OscConfig+0x2b8>)
 80013d2:	684a      	ldr	r2, [r1, #4]
 80013d4:	f002 020c 	and.w	r2, r2, #12
 80013d8:	2a04      	cmp	r2, #4
 80013da:	f000 8105 	beq.w	80015e8 <HAL_RCC_OscConfig+0x22c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013de:	684a      	ldr	r2, [r1, #4]
 80013e0:	f002 020c 	and.w	r2, r2, #12
 80013e4:	2a08      	cmp	r2, #8
 80013e6:	f000 80fb 	beq.w	80015e0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ea:	6863      	ldr	r3, [r4, #4]
 80013ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013f0:	d010      	beq.n	8001414 <HAL_RCC_OscConfig+0x58>
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 8120 	beq.w	8001638 <HAL_RCC_OscConfig+0x27c>
 80013f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013fc:	f000 8178 	beq.w	80016f0 <HAL_RCC_OscConfig+0x334>
 8001400:	4b9c      	ldr	r3, [pc, #624]	; (8001674 <HAL_RCC_OscConfig+0x2b8>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	e004      	b.n	800141e <HAL_RCC_OscConfig+0x62>
 8001414:	4a97      	ldr	r2, [pc, #604]	; (8001674 <HAL_RCC_OscConfig+0x2b8>)
 8001416:	6813      	ldr	r3, [r2, #0]
 8001418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800141c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141e:	f7ff ff67 	bl	80012f0 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001422:	4d94      	ldr	r5, [pc, #592]	; (8001674 <HAL_RCC_OscConfig+0x2b8>)
        tickstart = HAL_GetTick();
 8001424:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001426:	e005      	b.n	8001434 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001428:	f7ff ff62 	bl	80012f0 <HAL_GetTick>
 800142c:	1b80      	subs	r0, r0, r6
 800142e:	2864      	cmp	r0, #100	; 0x64
 8001430:	f200 80f5 	bhi.w	800161e <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001434:	682b      	ldr	r3, [r5, #0]
 8001436:	039a      	lsls	r2, r3, #14
 8001438:	d5f6      	bpl.n	8001428 <HAL_RCC_OscConfig+0x6c>
 800143a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800143c:	079f      	lsls	r7, r3, #30
 800143e:	d44d      	bmi.n	80014dc <HAL_RCC_OscConfig+0x120>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001440:	071a      	lsls	r2, r3, #28
 8001442:	d522      	bpl.n	800148a <HAL_RCC_OscConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001444:	69a3      	ldr	r3, [r4, #24]
 8001446:	2b00      	cmp	r3, #0
 8001448:	f000 80ba 	beq.w	80015c0 <HAL_RCC_OscConfig+0x204>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800144c:	2201      	movs	r2, #1
 800144e:	4b8a      	ldr	r3, [pc, #552]	; (8001678 <HAL_RCC_OscConfig+0x2bc>)

      /* Get Start Tick */
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001450:	4d88      	ldr	r5, [pc, #544]	; (8001674 <HAL_RCC_OscConfig+0x2b8>)
      __HAL_RCC_LSI_ENABLE();
 8001452:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001454:	f7ff ff4c 	bl	80012f0 <HAL_GetTick>
 8001458:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800145a:	e005      	b.n	8001468 <HAL_RCC_OscConfig+0xac>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800145c:	f7ff ff48 	bl	80012f0 <HAL_GetTick>
 8001460:	1b80      	subs	r0, r0, r6
 8001462:	2802      	cmp	r0, #2
 8001464:	f200 80db 	bhi.w	800161e <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001468:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800146a:	079b      	lsls	r3, r3, #30
 800146c:	d5f6      	bpl.n	800145c <HAL_RCC_OscConfig+0xa0>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800146e:	4b83      	ldr	r3, [pc, #524]	; (800167c <HAL_RCC_OscConfig+0x2c0>)
 8001470:	4a83      	ldr	r2, [pc, #524]	; (8001680 <HAL_RCC_OscConfig+0x2c4>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	fba2 2303 	umull	r2, r3, r2, r3
 8001478:	0a5b      	lsrs	r3, r3, #9
 800147a:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800147c:	bf00      	nop
  }
  while (Delay --);
 800147e:	9b01      	ldr	r3, [sp, #4]
 8001480:	1e5a      	subs	r2, r3, #1
 8001482:	9201      	str	r2, [sp, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1f9      	bne.n	800147c <HAL_RCC_OscConfig+0xc0>
 8001488:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800148a:	075d      	lsls	r5, r3, #29
 800148c:	d569      	bpl.n	8001562 <HAL_RCC_OscConfig+0x1a6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800148e:	4b79      	ldr	r3, [pc, #484]	; (8001674 <HAL_RCC_OscConfig+0x2b8>)
 8001490:	69da      	ldr	r2, [r3, #28]
 8001492:	00d0      	lsls	r0, r2, #3
 8001494:	f100 80ec 	bmi.w	8001670 <HAL_RCC_OscConfig+0x2b4>
      pwrclkchanged = SET;
 8001498:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800149a:	69da      	ldr	r2, [r3, #28]
 800149c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014a0:	61da      	str	r2, [r3, #28]
 80014a2:	69db      	ldr	r3, [r3, #28]
 80014a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ac:	4b75      	ldr	r3, [pc, #468]	; (8001684 <HAL_RCC_OscConfig+0x2c8>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	05d1      	lsls	r1, r2, #23
 80014b2:	f140 80a3 	bpl.w	80015fc <HAL_RCC_OscConfig+0x240>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b6:	68e3      	ldr	r3, [r4, #12]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d037      	beq.n	800152c <HAL_RCC_OscConfig+0x170>
 80014bc:	2b00      	cmp	r3, #0
 80014be:	f000 80e7 	beq.w	8001690 <HAL_RCC_OscConfig+0x2d4>
 80014c2:	2b05      	cmp	r3, #5
 80014c4:	4b6b      	ldr	r3, [pc, #428]	; (8001674 <HAL_RCC_OscConfig+0x2b8>)
 80014c6:	6a1a      	ldr	r2, [r3, #32]
 80014c8:	f000 811f 	beq.w	800170a <HAL_RCC_OscConfig+0x34e>
 80014cc:	f022 0201 	bic.w	r2, r2, #1
 80014d0:	621a      	str	r2, [r3, #32]
 80014d2:	6a1a      	ldr	r2, [r3, #32]
 80014d4:	f022 0204 	bic.w	r2, r2, #4
 80014d8:	621a      	str	r2, [r3, #32]
 80014da:	e02c      	b.n	8001536 <HAL_RCC_OscConfig+0x17a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014dc:	4a65      	ldr	r2, [pc, #404]	; (8001674 <HAL_RCC_OscConfig+0x2b8>)
 80014de:	6851      	ldr	r1, [r2, #4]
 80014e0:	f011 0f0c 	tst.w	r1, #12
 80014e4:	d061      	beq.n	80015aa <HAL_RCC_OscConfig+0x1ee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014e6:	6851      	ldr	r1, [r2, #4]
 80014e8:	f001 010c 	and.w	r1, r1, #12
 80014ec:	2908      	cmp	r1, #8
 80014ee:	d059      	beq.n	80015a4 <HAL_RCC_OscConfig+0x1e8>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014f0:	6923      	ldr	r3, [r4, #16]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f000 80eb 	beq.w	80016ce <HAL_RCC_OscConfig+0x312>
        __HAL_RCC_HSI_ENABLE();
 80014f8:	2201      	movs	r2, #1
 80014fa:	4b63      	ldr	r3, [pc, #396]	; (8001688 <HAL_RCC_OscConfig+0x2cc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014fc:	4d5d      	ldr	r5, [pc, #372]	; (8001674 <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_ENABLE();
 80014fe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001500:	f7ff fef6 	bl	80012f0 <HAL_GetTick>
 8001504:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001506:	e005      	b.n	8001514 <HAL_RCC_OscConfig+0x158>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001508:	f7ff fef2 	bl	80012f0 <HAL_GetTick>
 800150c:	1b80      	subs	r0, r0, r6
 800150e:	2802      	cmp	r0, #2
 8001510:	f200 8085 	bhi.w	800161e <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001514:	682b      	ldr	r3, [r5, #0]
 8001516:	0798      	lsls	r0, r3, #30
 8001518:	d5f6      	bpl.n	8001508 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151a:	682b      	ldr	r3, [r5, #0]
 800151c:	6962      	ldr	r2, [r4, #20]
 800151e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001522:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001526:	602b      	str	r3, [r5, #0]
 8001528:	6823      	ldr	r3, [r4, #0]
 800152a:	e789      	b.n	8001440 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800152c:	4a51      	ldr	r2, [pc, #324]	; (8001674 <HAL_RCC_OscConfig+0x2b8>)
 800152e:	6a13      	ldr	r3, [r2, #32]
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8001536:	f7ff fedb 	bl	80012f0 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800153a:	4e4e      	ldr	r6, [pc, #312]	; (8001674 <HAL_RCC_OscConfig+0x2b8>)
      tickstart = HAL_GetTick();
 800153c:	4680      	mov	r8, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800153e:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001542:	e005      	b.n	8001550 <HAL_RCC_OscConfig+0x194>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001544:	f7ff fed4 	bl	80012f0 <HAL_GetTick>
 8001548:	eba0 0008 	sub.w	r0, r0, r8
 800154c:	42b8      	cmp	r0, r7
 800154e:	d866      	bhi.n	800161e <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001550:	6a33      	ldr	r3, [r6, #32]
 8001552:	079b      	lsls	r3, r3, #30
 8001554:	d5f6      	bpl.n	8001544 <HAL_RCC_OscConfig+0x188>
    if (pwrclkchanged == SET)
 8001556:	b125      	cbz	r5, 8001562 <HAL_RCC_OscConfig+0x1a6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001558:	4a46      	ldr	r2, [pc, #280]	; (8001674 <HAL_RCC_OscConfig+0x2b8>)
 800155a:	69d3      	ldr	r3, [r2, #28]
 800155c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001560:	61d3      	str	r3, [r2, #28]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001562:	69e0      	ldr	r0, [r4, #28]
 8001564:	b1d0      	cbz	r0, 800159c <HAL_RCC_OscConfig+0x1e0>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001566:	4d43      	ldr	r5, [pc, #268]	; (8001674 <HAL_RCC_OscConfig+0x2b8>)
 8001568:	686a      	ldr	r2, [r5, #4]
 800156a:	f002 020c 	and.w	r2, r2, #12
 800156e:	2a08      	cmp	r2, #8
 8001570:	f000 80d3 	beq.w	800171a <HAL_RCC_OscConfig+0x35e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001574:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001576:	f04f 0100 	mov.w	r1, #0
 800157a:	4a44      	ldr	r2, [pc, #272]	; (800168c <HAL_RCC_OscConfig+0x2d0>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800157c:	f000 80de 	beq.w	800173c <HAL_RCC_OscConfig+0x380>
        __HAL_RCC_PLL_DISABLE();
 8001580:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 8001582:	f7ff feb5 	bl	80012f0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001586:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8001588:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800158a:	e004      	b.n	8001596 <HAL_RCC_OscConfig+0x1da>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800158c:	f7ff feb0 	bl	80012f0 <HAL_GetTick>
 8001590:	1b40      	subs	r0, r0, r5
 8001592:	2802      	cmp	r0, #2
 8001594:	d843      	bhi.n	800161e <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001596:	6823      	ldr	r3, [r4, #0]
 8001598:	019b      	lsls	r3, r3, #6
 800159a:	d4f7      	bmi.n	800158c <HAL_RCC_OscConfig+0x1d0>
  return HAL_OK;
 800159c:	2000      	movs	r0, #0
}
 800159e:	b002      	add	sp, #8
 80015a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015a4:	6852      	ldr	r2, [r2, #4]
 80015a6:	03d6      	lsls	r6, r2, #15
 80015a8:	d4a2      	bmi.n	80014f0 <HAL_RCC_OscConfig+0x134>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015aa:	4a32      	ldr	r2, [pc, #200]	; (8001674 <HAL_RCC_OscConfig+0x2b8>)
 80015ac:	6812      	ldr	r2, [r2, #0]
 80015ae:	0795      	lsls	r5, r2, #30
 80015b0:	d539      	bpl.n	8001626 <HAL_RCC_OscConfig+0x26a>
 80015b2:	6922      	ldr	r2, [r4, #16]
 80015b4:	2a01      	cmp	r2, #1
 80015b6:	d036      	beq.n	8001626 <HAL_RCC_OscConfig+0x26a>
        return HAL_ERROR;
 80015b8:	2001      	movs	r0, #1
}
 80015ba:	b002      	add	sp, #8
 80015bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80015c0:	4a2d      	ldr	r2, [pc, #180]	; (8001678 <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c2:	4d2c      	ldr	r5, [pc, #176]	; (8001674 <HAL_RCC_OscConfig+0x2b8>)
      __HAL_RCC_LSI_DISABLE();
 80015c4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80015c6:	f7ff fe93 	bl	80012f0 <HAL_GetTick>
 80015ca:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015cc:	e004      	b.n	80015d8 <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ce:	f7ff fe8f 	bl	80012f0 <HAL_GetTick>
 80015d2:	1b80      	subs	r0, r0, r6
 80015d4:	2802      	cmp	r0, #2
 80015d6:	d822      	bhi.n	800161e <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80015da:	079f      	lsls	r7, r3, #30
 80015dc:	d4f7      	bmi.n	80015ce <HAL_RCC_OscConfig+0x212>
 80015de:	e753      	b.n	8001488 <HAL_RCC_OscConfig+0xcc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015e0:	684a      	ldr	r2, [r1, #4]
 80015e2:	03d0      	lsls	r0, r2, #15
 80015e4:	f57f af01 	bpl.w	80013ea <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e8:	4a22      	ldr	r2, [pc, #136]	; (8001674 <HAL_RCC_OscConfig+0x2b8>)
 80015ea:	6812      	ldr	r2, [r2, #0]
 80015ec:	0391      	lsls	r1, r2, #14
 80015ee:	f57f af25 	bpl.w	800143c <HAL_RCC_OscConfig+0x80>
 80015f2:	6862      	ldr	r2, [r4, #4]
 80015f4:	2a00      	cmp	r2, #0
 80015f6:	f47f af21 	bne.w	800143c <HAL_RCC_OscConfig+0x80>
 80015fa:	e7dd      	b.n	80015b8 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015fc:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015fe:	461e      	mov	r6, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001600:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001604:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001606:	f7ff fe73 	bl	80012f0 <HAL_GetTick>
 800160a:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160c:	6833      	ldr	r3, [r6, #0]
 800160e:	05da      	lsls	r2, r3, #23
 8001610:	f53f af51 	bmi.w	80014b6 <HAL_RCC_OscConfig+0xfa>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001614:	f7ff fe6c 	bl	80012f0 <HAL_GetTick>
 8001618:	1bc0      	subs	r0, r0, r7
 800161a:	2864      	cmp	r0, #100	; 0x64
 800161c:	d9f6      	bls.n	800160c <HAL_RCC_OscConfig+0x250>
            return HAL_TIMEOUT;
 800161e:	2003      	movs	r0, #3
}
 8001620:	b002      	add	sp, #8
 8001622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001626:	4913      	ldr	r1, [pc, #76]	; (8001674 <HAL_RCC_OscConfig+0x2b8>)
 8001628:	6960      	ldr	r0, [r4, #20]
 800162a:	680a      	ldr	r2, [r1, #0]
 800162c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001630:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001634:	600a      	str	r2, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001636:	e703      	b.n	8001440 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001638:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800163c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001640:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001642:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001644:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001650:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001652:	f7ff fe4d 	bl	80012f0 <HAL_GetTick>
 8001656:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001658:	e004      	b.n	8001664 <HAL_RCC_OscConfig+0x2a8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800165a:	f7ff fe49 	bl	80012f0 <HAL_GetTick>
 800165e:	1b80      	subs	r0, r0, r6
 8001660:	2864      	cmp	r0, #100	; 0x64
 8001662:	d8dc      	bhi.n	800161e <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001664:	682b      	ldr	r3, [r5, #0]
 8001666:	039b      	lsls	r3, r3, #14
 8001668:	d4f7      	bmi.n	800165a <HAL_RCC_OscConfig+0x29e>
 800166a:	e6e6      	b.n	800143a <HAL_RCC_OscConfig+0x7e>
    return HAL_ERROR;
 800166c:	2001      	movs	r0, #1
}
 800166e:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 8001670:	2500      	movs	r5, #0
 8001672:	e71b      	b.n	80014ac <HAL_RCC_OscConfig+0xf0>
 8001674:	40021000 	.word	0x40021000
 8001678:	42420480 	.word	0x42420480
 800167c:	20000000 	.word	0x20000000
 8001680:	10624dd3 	.word	0x10624dd3
 8001684:	40007000 	.word	0x40007000
 8001688:	42420000 	.word	0x42420000
 800168c:	42420060 	.word	0x42420060
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001690:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001694:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001698:	6a1a      	ldr	r2, [r3, #32]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800169a:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800169c:	f022 0201 	bic.w	r2, r2, #1
 80016a0:	621a      	str	r2, [r3, #32]
 80016a2:	6a1a      	ldr	r2, [r3, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016a8:	f022 0204 	bic.w	r2, r2, #4
 80016ac:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 80016ae:	f7ff fe1f 	bl	80012f0 <HAL_GetTick>
 80016b2:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b4:	e004      	b.n	80016c0 <HAL_RCC_OscConfig+0x304>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b6:	f7ff fe1b 	bl	80012f0 <HAL_GetTick>
 80016ba:	1bc0      	subs	r0, r0, r7
 80016bc:	4540      	cmp	r0, r8
 80016be:	d8ae      	bhi.n	800161e <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c0:	6a33      	ldr	r3, [r6, #32]
 80016c2:	0798      	lsls	r0, r3, #30
 80016c4:	d4f7      	bmi.n	80016b6 <HAL_RCC_OscConfig+0x2fa>
    if (pwrclkchanged == SET)
 80016c6:	2d00      	cmp	r5, #0
 80016c8:	f43f af4b 	beq.w	8001562 <HAL_RCC_OscConfig+0x1a6>
 80016cc:	e744      	b.n	8001558 <HAL_RCC_OscConfig+0x19c>
        __HAL_RCC_HSI_DISABLE();
 80016ce:	4a34      	ldr	r2, [pc, #208]	; (80017a0 <HAL_RCC_OscConfig+0x3e4>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d0:	4d34      	ldr	r5, [pc, #208]	; (80017a4 <HAL_RCC_OscConfig+0x3e8>)
        __HAL_RCC_HSI_DISABLE();
 80016d2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80016d4:	f7ff fe0c 	bl	80012f0 <HAL_GetTick>
 80016d8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016da:	e004      	b.n	80016e6 <HAL_RCC_OscConfig+0x32a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016dc:	f7ff fe08 	bl	80012f0 <HAL_GetTick>
 80016e0:	1b80      	subs	r0, r0, r6
 80016e2:	2802      	cmp	r0, #2
 80016e4:	d89b      	bhi.n	800161e <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016e6:	682b      	ldr	r3, [r5, #0]
 80016e8:	0799      	lsls	r1, r3, #30
 80016ea:	d4f7      	bmi.n	80016dc <HAL_RCC_OscConfig+0x320>
 80016ec:	6823      	ldr	r3, [r4, #0]
 80016ee:	e6a7      	b.n	8001440 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80016f4:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	e689      	b.n	800141e <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800170a:	f042 0204 	orr.w	r2, r2, #4
 800170e:	621a      	str	r2, [r3, #32]
 8001710:	6a1a      	ldr	r2, [r3, #32]
 8001712:	f042 0201 	orr.w	r2, r2, #1
 8001716:	621a      	str	r2, [r3, #32]
 8001718:	e70d      	b.n	8001536 <HAL_RCC_OscConfig+0x17a>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800171a:	2801      	cmp	r0, #1
 800171c:	f43f af4d 	beq.w	80015ba <HAL_RCC_OscConfig+0x1fe>
        pll_config = RCC->CFGR;
 8001720:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001722:	6a22      	ldr	r2, [r4, #32]
 8001724:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001728:	4291      	cmp	r1, r2
 800172a:	f47f af45 	bne.w	80015b8 <HAL_RCC_OscConfig+0x1fc>
 800172e:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001730:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    return HAL_ERROR;
 8001734:	1a18      	subs	r0, r3, r0
 8001736:	bf18      	it	ne
 8001738:	2001      	movne	r0, #1
 800173a:	e73e      	b.n	80015ba <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_PLL_DISABLE();
 800173c:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 800173e:	f7ff fdd7 	bl	80012f0 <HAL_GetTick>
 8001742:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001744:	e005      	b.n	8001752 <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001746:	f7ff fdd3 	bl	80012f0 <HAL_GetTick>
 800174a:	1b80      	subs	r0, r0, r6
 800174c:	2802      	cmp	r0, #2
 800174e:	f63f af66 	bhi.w	800161e <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001752:	682b      	ldr	r3, [r5, #0]
 8001754:	0199      	lsls	r1, r3, #6
 8001756:	d4f6      	bmi.n	8001746 <HAL_RCC_OscConfig+0x38a>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001758:	6a22      	ldr	r2, [r4, #32]
 800175a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800175e:	d105      	bne.n	800176c <HAL_RCC_OscConfig+0x3b0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001760:	686b      	ldr	r3, [r5, #4]
 8001762:	68a1      	ldr	r1, [r4, #8]
 8001764:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001768:	430b      	orrs	r3, r1
 800176a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800176c:	2501      	movs	r5, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800176e:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <HAL_RCC_OscConfig+0x3e8>)
 8001770:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001772:	6859      	ldr	r1, [r3, #4]
 8001774:	4302      	orrs	r2, r0
 8001776:	f421 1174 	bic.w	r1, r1, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 800177a:	480b      	ldr	r0, [pc, #44]	; (80017a8 <HAL_RCC_OscConfig+0x3ec>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800177c:	430a      	orrs	r2, r1
 800177e:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8001780:	6005      	str	r5, [r0, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001782:	461c      	mov	r4, r3
        tickstart = HAL_GetTick();
 8001784:	f7ff fdb4 	bl	80012f0 <HAL_GetTick>
 8001788:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800178a:	e005      	b.n	8001798 <HAL_RCC_OscConfig+0x3dc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178c:	f7ff fdb0 	bl	80012f0 <HAL_GetTick>
 8001790:	1b40      	subs	r0, r0, r5
 8001792:	2802      	cmp	r0, #2
 8001794:	f63f af43 	bhi.w	800161e <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001798:	6823      	ldr	r3, [r4, #0]
 800179a:	019a      	lsls	r2, r3, #6
 800179c:	d5f6      	bpl.n	800178c <HAL_RCC_OscConfig+0x3d0>
 800179e:	e6fd      	b.n	800159c <HAL_RCC_OscConfig+0x1e0>
 80017a0:	42420000 	.word	0x42420000
 80017a4:	40021000 	.word	0x40021000
 80017a8:	42420060 	.word	0x42420060

080017ac <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80017ac:	b178      	cbz	r0, 80017ce <HAL_RCC_ClockConfig+0x22>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017ae:	4a5d      	ldr	r2, [pc, #372]	; (8001924 <HAL_RCC_ClockConfig+0x178>)
 80017b0:	6813      	ldr	r3, [r2, #0]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	428b      	cmp	r3, r1
 80017b8:	d20b      	bcs.n	80017d2 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ba:	6813      	ldr	r3, [r2, #0]
 80017bc:	f023 0307 	bic.w	r3, r3, #7
 80017c0:	430b      	orrs	r3, r1
 80017c2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c4:	6813      	ldr	r3, [r2, #0]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	428b      	cmp	r3, r1
 80017cc:	d001      	beq.n	80017d2 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 80017ce:	2001      	movs	r0, #1
}
 80017d0:	4770      	bx	lr
{
 80017d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d6:	6803      	ldr	r3, [r0, #0]
{
 80017d8:	b086      	sub	sp, #24
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017da:	079d      	lsls	r5, r3, #30
 80017dc:	d514      	bpl.n	8001808 <HAL_RCC_ClockConfig+0x5c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017de:	075c      	lsls	r4, r3, #29
 80017e0:	d504      	bpl.n	80017ec <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017e2:	4c51      	ldr	r4, [pc, #324]	; (8001928 <HAL_RCC_ClockConfig+0x17c>)
 80017e4:	6862      	ldr	r2, [r4, #4]
 80017e6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80017ea:	6062      	str	r2, [r4, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ec:	071a      	lsls	r2, r3, #28
 80017ee:	d504      	bpl.n	80017fa <HAL_RCC_ClockConfig+0x4e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017f0:	4c4d      	ldr	r4, [pc, #308]	; (8001928 <HAL_RCC_ClockConfig+0x17c>)
 80017f2:	6862      	ldr	r2, [r4, #4]
 80017f4:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 80017f8:	6062      	str	r2, [r4, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017fa:	4c4b      	ldr	r4, [pc, #300]	; (8001928 <HAL_RCC_ClockConfig+0x17c>)
 80017fc:	6885      	ldr	r5, [r0, #8]
 80017fe:	6862      	ldr	r2, [r4, #4]
 8001800:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001804:	432a      	orrs	r2, r5
 8001806:	6062      	str	r2, [r4, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001808:	07db      	lsls	r3, r3, #31
 800180a:	4604      	mov	r4, r0
 800180c:	460d      	mov	r5, r1
 800180e:	d520      	bpl.n	8001852 <HAL_RCC_ClockConfig+0xa6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001810:	6842      	ldr	r2, [r0, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001812:	4b45      	ldr	r3, [pc, #276]	; (8001928 <HAL_RCC_ClockConfig+0x17c>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001814:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001816:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001818:	d06f      	beq.n	80018fa <HAL_RCC_ClockConfig+0x14e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800181a:	2a02      	cmp	r2, #2
 800181c:	d07e      	beq.n	800191c <HAL_RCC_ClockConfig+0x170>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181e:	0798      	lsls	r0, r3, #30
 8001820:	d527      	bpl.n	8001872 <HAL_RCC_ClockConfig+0xc6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001822:	4e41      	ldr	r6, [pc, #260]	; (8001928 <HAL_RCC_ClockConfig+0x17c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001824:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001828:	6873      	ldr	r3, [r6, #4]
 800182a:	f023 0303 	bic.w	r3, r3, #3
 800182e:	4313      	orrs	r3, r2
 8001830:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001832:	f7ff fd5d 	bl	80012f0 <HAL_GetTick>
 8001836:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001838:	e004      	b.n	8001844 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800183a:	f7ff fd59 	bl	80012f0 <HAL_GetTick>
 800183e:	1bc0      	subs	r0, r0, r7
 8001840:	4540      	cmp	r0, r8
 8001842:	d869      	bhi.n	8001918 <HAL_RCC_ClockConfig+0x16c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001844:	6873      	ldr	r3, [r6, #4]
 8001846:	6862      	ldr	r2, [r4, #4]
 8001848:	f003 030c 	and.w	r3, r3, #12
 800184c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001850:	d1f3      	bne.n	800183a <HAL_RCC_ClockConfig+0x8e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001852:	4a34      	ldr	r2, [pc, #208]	; (8001924 <HAL_RCC_ClockConfig+0x178>)
 8001854:	6813      	ldr	r3, [r2, #0]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	42ab      	cmp	r3, r5
 800185c:	d90d      	bls.n	800187a <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185e:	6813      	ldr	r3, [r2, #0]
 8001860:	f023 0307 	bic.w	r3, r3, #7
 8001864:	432b      	orrs	r3, r5
 8001866:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001868:	6813      	ldr	r3, [r2, #0]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	42ab      	cmp	r3, r5
 8001870:	d003      	beq.n	800187a <HAL_RCC_ClockConfig+0xce>
    return HAL_ERROR;
 8001872:	2001      	movs	r0, #1
}
 8001874:	b006      	add	sp, #24
 8001876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800187a:	6823      	ldr	r3, [r4, #0]
 800187c:	0759      	lsls	r1, r3, #29
 800187e:	d506      	bpl.n	800188e <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001880:	4929      	ldr	r1, [pc, #164]	; (8001928 <HAL_RCC_ClockConfig+0x17c>)
 8001882:	68e0      	ldr	r0, [r4, #12]
 8001884:	684a      	ldr	r2, [r1, #4]
 8001886:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800188a:	4302      	orrs	r2, r0
 800188c:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188e:	071a      	lsls	r2, r3, #28
 8001890:	d507      	bpl.n	80018a2 <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001892:	4a25      	ldr	r2, [pc, #148]	; (8001928 <HAL_RCC_ClockConfig+0x17c>)
 8001894:	6921      	ldr	r1, [r4, #16]
 8001896:	6853      	ldr	r3, [r2, #4]
 8001898:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800189c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80018a0:	6053      	str	r3, [r2, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018a2:	f240 2201 	movw	r2, #513	; 0x201
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018a6:	4b21      	ldr	r3, [pc, #132]	; (800192c <HAL_RCC_ClockConfig+0x180>)
 80018a8:	ac06      	add	r4, sp, #24
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018aa:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018b0:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 80018b4:	491c      	ldr	r1, [pc, #112]	; (8001928 <HAL_RCC_ClockConfig+0x17c>)
 80018b6:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80018b8:	f002 030c 	and.w	r3, r2, #12
 80018bc:	2b08      	cmp	r3, #8
 80018be:	d11a      	bne.n	80018f6 <HAL_RCC_ClockConfig+0x14a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018c0:	f3c2 4383 	ubfx	r3, r2, #18, #4
 80018c4:	4423      	add	r3, r4
 80018c6:	f813 0c10 	ldrb.w	r0, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018ca:	03d3      	lsls	r3, r2, #15
 80018cc:	d418      	bmi.n	8001900 <HAL_RCC_ClockConfig+0x154>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018ce:	4b18      	ldr	r3, [pc, #96]	; (8001930 <HAL_RCC_ClockConfig+0x184>)
 80018d0:	fb03 f300 	mul.w	r3, r3, r0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018d4:	4a14      	ldr	r2, [pc, #80]	; (8001928 <HAL_RCC_ClockConfig+0x17c>)
 80018d6:	4817      	ldr	r0, [pc, #92]	; (8001934 <HAL_RCC_ClockConfig+0x188>)
 80018d8:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 80018da:	4917      	ldr	r1, [pc, #92]	; (8001938 <HAL_RCC_ClockConfig+0x18c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018dc:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80018e0:	5c80      	ldrb	r0, [r0, r2]
 80018e2:	4a16      	ldr	r2, [pc, #88]	; (800193c <HAL_RCC_ClockConfig+0x190>)
 80018e4:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 80018e6:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018e8:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 80018ea:	f7ff fcbf 	bl	800126c <HAL_InitTick>
  return HAL_OK;
 80018ee:	2000      	movs	r0, #0
}
 80018f0:	b006      	add	sp, #24
 80018f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      sysclockfreq = HSE_VALUE;
 80018f6:	4b12      	ldr	r3, [pc, #72]	; (8001940 <HAL_RCC_ClockConfig+0x194>)
 80018f8:	e7ec      	b.n	80018d4 <HAL_RCC_ClockConfig+0x128>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fa:	039f      	lsls	r7, r3, #14
 80018fc:	d491      	bmi.n	8001822 <HAL_RCC_ClockConfig+0x76>
 80018fe:	e7b8      	b.n	8001872 <HAL_RCC_ClockConfig+0xc6>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001900:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001902:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <HAL_RCC_ClockConfig+0x194>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001904:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001908:	fb03 f300 	mul.w	r3, r3, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800190c:	4422      	add	r2, r4
 800190e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001912:	fbb3 f3f2 	udiv	r3, r3, r2
 8001916:	e7dd      	b.n	80018d4 <HAL_RCC_ClockConfig+0x128>
        return HAL_TIMEOUT;
 8001918:	2003      	movs	r0, #3
 800191a:	e7ab      	b.n	8001874 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800191c:	019e      	lsls	r6, r3, #6
 800191e:	d480      	bmi.n	8001822 <HAL_RCC_ClockConfig+0x76>
 8001920:	e7a7      	b.n	8001872 <HAL_RCC_ClockConfig+0xc6>
 8001922:	bf00      	nop
 8001924:	40022000 	.word	0x40022000
 8001928:	40021000 	.word	0x40021000
 800192c:	08001e1c 	.word	0x08001e1c
 8001930:	003d0900 	.word	0x003d0900
 8001934:	08001e2c 	.word	0x08001e2c
 8001938:	20000008 	.word	0x20000008
 800193c:	20000000 	.word	0x20000000
 8001940:	007a1200 	.word	0x007a1200

08001944 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001944:	2800      	cmp	r0, #0
 8001946:	d048      	beq.n	80019da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001948:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 800194c:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800194e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001952:	4604      	mov	r4, r0
 8001954:	b39b      	cbz	r3, 80019be <HAL_TIM_Base_Init+0x7a>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001956:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001958:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800195a:	4e29      	ldr	r6, [pc, #164]	; (8001a00 <HAL_TIM_Base_Init+0xbc>)
  htim->State = HAL_TIM_STATE_BUSY;
 800195c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001960:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8001962:	6813      	ldr	r3, [r2, #0]
 8001964:	69a5      	ldr	r5, [r4, #24]
 8001966:	68e0      	ldr	r0, [r4, #12]
 8001968:	6861      	ldr	r1, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800196a:	d038      	beq.n	80019de <HAL_TIM_Base_Init+0x9a>
 800196c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8001970:	d02a      	beq.n	80019c8 <HAL_TIM_Base_Init+0x84>
 8001972:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8001976:	42b2      	cmp	r2, r6
 8001978:	d026      	beq.n	80019c8 <HAL_TIM_Base_Init+0x84>
 800197a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800197e:	42b2      	cmp	r2, r6
 8001980:	d022      	beq.n	80019c8 <HAL_TIM_Base_Init+0x84>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001982:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001986:	432b      	orrs	r3, r5

  TIMx->CR1 = tmpcr1;
 8001988:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800198a:	62d0      	str	r0, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800198c:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800198e:	2301      	movs	r3, #1
  return HAL_OK;
 8001990:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8001992:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001994:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001998:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800199c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80019a0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80019a4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80019ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80019b0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80019b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80019b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80019bc:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80019be:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80019c2:	f7ff fbc9 	bl	8001158 <HAL_TIM_Base_MspInit>
 80019c6:	e7c6      	b.n	8001956 <HAL_TIM_Base_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 80019c8:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80019ce:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019d0:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80019d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019d6:	4333      	orrs	r3, r6
 80019d8:	e7d3      	b.n	8001982 <HAL_TIM_Base_Init+0x3e>
    return HAL_ERROR;
 80019da:	2001      	movs	r0, #1
}
 80019dc:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80019de:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80019e4:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019e6:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80019e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019ec:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019f2:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80019f4:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019f6:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80019f8:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80019fa:	6963      	ldr	r3, [r4, #20]
 80019fc:	6313      	str	r3, [r2, #48]	; 0x30
 80019fe:	e7c6      	b.n	800198e <HAL_TIM_Base_Init+0x4a>
 8001a00:	40012c00 	.word	0x40012c00

08001a04 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8001a04:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d001      	beq.n	8001a10 <HAL_TIM_Base_Start+0xc>
    return HAL_ERROR;
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	4770      	bx	lr
  htim->State = HAL_TIM_STATE_BUSY;
 8001a10:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a12:	6803      	ldr	r3, [r0, #0]
 8001a14:	4a0e      	ldr	r2, [pc, #56]	; (8001a50 <HAL_TIM_Base_Start+0x4c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8001a16:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d010      	beq.n	8001a40 <HAL_TIM_Base_Start+0x3c>
 8001a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a22:	d00d      	beq.n	8001a40 <HAL_TIM_Base_Start+0x3c>
 8001a24:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d009      	beq.n	8001a40 <HAL_TIM_Base_Start+0x3c>
 8001a2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d005      	beq.n	8001a40 <HAL_TIM_Base_Start+0x3c>
    __HAL_TIM_ENABLE(htim);
 8001a34:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8001a36:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8001a38:	f042 0201 	orr.w	r2, r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a46:	2a06      	cmp	r2, #6
 8001a48:	d1f4      	bne.n	8001a34 <HAL_TIM_Base_Start+0x30>
  return HAL_OK;
 8001a4a:	2000      	movs	r0, #0
}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40012c00 	.word	0x40012c00

08001a54 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001a54:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d05a      	beq.n	8001b12 <HAL_TIM_ConfigClockSource+0xbe>
  htim->State = HAL_TIM_STATE_BUSY;
 8001a5c:	2202      	movs	r2, #2
{
 8001a5e:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8001a60:	2501      	movs	r5, #1
  tmpsmcr = htim->Instance->SMCR;
 8001a62:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001a64:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001a68:	689a      	ldr	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8001a6a:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a6c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001a70:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8001a74:	2c40      	cmp	r4, #64	; 0x40
  __HAL_LOCK(htim);
 8001a76:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 8001a7a:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8001a7c:	d074      	beq.n	8001b68 <HAL_TIM_ConfigClockSource+0x114>
 8001a7e:	d94a      	bls.n	8001b16 <HAL_TIM_ConfigClockSource+0xc2>
 8001a80:	2c60      	cmp	r4, #96	; 0x60
 8001a82:	d02d      	beq.n	8001ae0 <HAL_TIM_ConfigClockSource+0x8c>
 8001a84:	d956      	bls.n	8001b34 <HAL_TIM_ConfigClockSource+0xe0>
 8001a86:	2c70      	cmp	r4, #112	; 0x70
 8001a88:	d01a      	beq.n	8001ac0 <HAL_TIM_ConfigClockSource+0x6c>
 8001a8a:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8001a8e:	d10e      	bne.n	8001aae <HAL_TIM_ConfigClockSource+0x5a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001a90:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8001a94:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8001a96:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001a98:	432a      	orrs	r2, r5
 8001a9a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a9e:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001aa2:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001aa4:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001aac:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	bcf0      	pop	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_READY;
 8001ab2:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8001ab4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8001ab8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  return HAL_OK;
 8001abc:	4618      	mov	r0, r3
}
 8001abe:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001ac0:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8001ac4:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8001ac6:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001ac8:	432a      	orrs	r2, r5
 8001aca:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ace:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001ad2:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8001ad4:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001ad6:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ad8:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8001adc:	609a      	str	r2, [r3, #8]
      break;
 8001ade:	e7e6      	b.n	8001aae <HAL_TIM_ConfigClockSource+0x5a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ae0:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ae2:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ae4:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ae8:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001aea:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001aec:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001aee:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001af0:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001af4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001af8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001afc:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001b00:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001b02:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8001b04:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001b06:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001b0a:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	e7cd      	b.n	8001aae <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8001b12:	2002      	movs	r0, #2
}
 8001b14:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8001b16:	2c10      	cmp	r4, #16
 8001b18:	d004      	beq.n	8001b24 <HAL_TIM_ConfigClockSource+0xd0>
 8001b1a:	d93d      	bls.n	8001b98 <HAL_TIM_ConfigClockSource+0x144>
 8001b1c:	2c20      	cmp	r4, #32
 8001b1e:	d001      	beq.n	8001b24 <HAL_TIM_ConfigClockSource+0xd0>
 8001b20:	2c30      	cmp	r4, #48	; 0x30
 8001b22:	d1c4      	bne.n	8001aae <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr = TIMx->SMCR;
 8001b24:	689a      	ldr	r2, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001b26:	f044 0407 	orr.w	r4, r4, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8001b2a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001b2e:	4314      	orrs	r4, r2
  TIMx->SMCR = tmpsmcr;
 8001b30:	609c      	str	r4, [r3, #8]
 8001b32:	e7bc      	b.n	8001aae <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8001b34:	2c50      	cmp	r4, #80	; 0x50
 8001b36:	d1ba      	bne.n	8001aae <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8001b38:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b3a:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b3c:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b3e:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b42:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b44:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b46:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001b48:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001b4c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001b50:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001b54:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8001b56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001b58:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8001b5a:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001b5c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001b60:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8001b64:	609a      	str	r2, [r3, #8]
 8001b66:	e7a2      	b.n	8001aae <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8001b68:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b6a:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b6c:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b6e:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b72:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b74:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b76:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001b78:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001b7c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001b80:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001b84:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8001b86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001b88:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8001b8a:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001b8c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001b90:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8001b94:	609a      	str	r2, [r3, #8]
 8001b96:	e78a      	b.n	8001aae <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8001b98:	2c00      	cmp	r4, #0
 8001b9a:	d0c3      	beq.n	8001b24 <HAL_TIM_ConfigClockSource+0xd0>
 8001b9c:	e787      	b.n	8001aae <HAL_TIM_ConfigClockSource+0x5a>
 8001b9e:	bf00      	nop

08001ba0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001ba0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d029      	beq.n	8001bfc <HAL_TIMEx_MasterConfigSynchronization+0x5c>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ba8:	2202      	movs	r2, #2
{
 8001baa:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8001bac:	2601      	movs	r6, #1

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001bae:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001bb0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8001bb4:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001bb6:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bb8:	4d11      	ldr	r5, [pc, #68]	; (8001c00 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8001bba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001bbe:	4322      	orrs	r2, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bc0:	42ab      	cmp	r3, r5
  tmpsmcr = htim->Instance->SMCR;
 8001bc2:	689c      	ldr	r4, [r3, #8]
  __HAL_LOCK(htim);
 8001bc4:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
  htim->Instance->CR2 = tmpcr2;
 8001bc8:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bca:	d009      	beq.n	8001be0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8001bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bd0:	d006      	beq.n	8001be0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8001bd2:	4a0c      	ldr	r2, [pc, #48]	; (8001c04 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d003      	beq.n	8001be0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8001bd8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d104      	bne.n	8001bea <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001be0:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001be2:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001be6:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001be8:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8001bea:	2300      	movs	r3, #0

  return HAL_OK;
}
 8001bec:	bc70      	pop	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_READY;
 8001bee:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8001bf0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8001bf4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  return HAL_OK;
 8001bf8:	4618      	mov	r0, r3
}
 8001bfa:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001bfc:	2002      	movs	r0, #2
}
 8001bfe:	4770      	bx	lr
 8001c00:	40012c00 	.word	0x40012c00
 8001c04:	40000400 	.word	0x40000400

08001c08 <__errno>:
 8001c08:	4b01      	ldr	r3, [pc, #4]	; (8001c10 <__errno+0x8>)
 8001c0a:	6818      	ldr	r0, [r3, #0]
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	2000000c 	.word	0x2000000c

08001c14 <__libc_init_array>:
 8001c14:	b570      	push	{r4, r5, r6, lr}
 8001c16:	2500      	movs	r5, #0
 8001c18:	4e0c      	ldr	r6, [pc, #48]	; (8001c4c <__libc_init_array+0x38>)
 8001c1a:	4c0d      	ldr	r4, [pc, #52]	; (8001c50 <__libc_init_array+0x3c>)
 8001c1c:	1ba4      	subs	r4, r4, r6
 8001c1e:	10a4      	asrs	r4, r4, #2
 8001c20:	42a5      	cmp	r5, r4
 8001c22:	d109      	bne.n	8001c38 <__libc_init_array+0x24>
 8001c24:	f000 f8ee 	bl	8001e04 <_init>
 8001c28:	2500      	movs	r5, #0
 8001c2a:	4e0a      	ldr	r6, [pc, #40]	; (8001c54 <__libc_init_array+0x40>)
 8001c2c:	4c0a      	ldr	r4, [pc, #40]	; (8001c58 <__libc_init_array+0x44>)
 8001c2e:	1ba4      	subs	r4, r4, r6
 8001c30:	10a4      	asrs	r4, r4, #2
 8001c32:	42a5      	cmp	r5, r4
 8001c34:	d105      	bne.n	8001c42 <__libc_init_array+0x2e>
 8001c36:	bd70      	pop	{r4, r5, r6, pc}
 8001c38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c3c:	4798      	blx	r3
 8001c3e:	3501      	adds	r5, #1
 8001c40:	e7ee      	b.n	8001c20 <__libc_init_array+0xc>
 8001c42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c46:	4798      	blx	r3
 8001c48:	3501      	adds	r5, #1
 8001c4a:	e7f2      	b.n	8001c32 <__libc_init_array+0x1e>
 8001c4c:	08001e44 	.word	0x08001e44
 8001c50:	08001e44 	.word	0x08001e44
 8001c54:	08001e44 	.word	0x08001e44
 8001c58:	08001e48 	.word	0x08001e48

08001c5c <memset>:
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	4402      	add	r2, r0
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d100      	bne.n	8001c66 <memset+0xa>
 8001c64:	4770      	bx	lr
 8001c66:	f803 1b01 	strb.w	r1, [r3], #1
 8001c6a:	e7f9      	b.n	8001c60 <memset+0x4>

08001c6c <srand>:
 8001c6c:	b538      	push	{r3, r4, r5, lr}
 8001c6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ca4 <srand+0x38>)
 8001c70:	4605      	mov	r5, r0
 8001c72:	681c      	ldr	r4, [r3, #0]
 8001c74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c76:	b97b      	cbnz	r3, 8001c98 <srand+0x2c>
 8001c78:	2018      	movs	r0, #24
 8001c7a:	f000 f84f 	bl	8001d1c <malloc>
 8001c7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ca8 <srand+0x3c>)
 8001c80:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <srand+0x40>)
 8001c82:	63a0      	str	r0, [r4, #56]	; 0x38
 8001c84:	e9c0 2300 	strd	r2, r3, [r0]
 8001c88:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <srand+0x44>)
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	6083      	str	r3, [r0, #8]
 8001c8e:	230b      	movs	r3, #11
 8001c90:	8183      	strh	r3, [r0, #12]
 8001c92:	2300      	movs	r3, #0
 8001c94:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c9c:	611d      	str	r5, [r3, #16]
 8001c9e:	615a      	str	r2, [r3, #20]
 8001ca0:	bd38      	pop	{r3, r4, r5, pc}
 8001ca2:	bf00      	nop
 8001ca4:	2000000c 	.word	0x2000000c
 8001ca8:	abcd330e 	.word	0xabcd330e
 8001cac:	e66d1234 	.word	0xe66d1234
 8001cb0:	0005deec 	.word	0x0005deec

08001cb4 <rand>:
 8001cb4:	b538      	push	{r3, r4, r5, lr}
 8001cb6:	4b13      	ldr	r3, [pc, #76]	; (8001d04 <rand+0x50>)
 8001cb8:	681c      	ldr	r4, [r3, #0]
 8001cba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001cbc:	b97b      	cbnz	r3, 8001cde <rand+0x2a>
 8001cbe:	2018      	movs	r0, #24
 8001cc0:	f000 f82c 	bl	8001d1c <malloc>
 8001cc4:	4a10      	ldr	r2, [pc, #64]	; (8001d08 <rand+0x54>)
 8001cc6:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <rand+0x58>)
 8001cc8:	63a0      	str	r0, [r4, #56]	; 0x38
 8001cca:	e9c0 2300 	strd	r2, r3, [r0]
 8001cce:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <rand+0x5c>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	6083      	str	r3, [r0, #8]
 8001cd4:	230b      	movs	r3, #11
 8001cd6:	8183      	strh	r3, [r0, #12]
 8001cd8:	2300      	movs	r3, #0
 8001cda:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8001cde:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001ce0:	480c      	ldr	r0, [pc, #48]	; (8001d14 <rand+0x60>)
 8001ce2:	690a      	ldr	r2, [r1, #16]
 8001ce4:	694b      	ldr	r3, [r1, #20]
 8001ce6:	4350      	muls	r0, r2
 8001ce8:	4c0b      	ldr	r4, [pc, #44]	; (8001d18 <rand+0x64>)
 8001cea:	fb04 0003 	mla	r0, r4, r3, r0
 8001cee:	fba2 2304 	umull	r2, r3, r2, r4
 8001cf2:	4403      	add	r3, r0
 8001cf4:	1c54      	adds	r4, r2, #1
 8001cf6:	f143 0500 	adc.w	r5, r3, #0
 8001cfa:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8001cfe:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8001d02:	bd38      	pop	{r3, r4, r5, pc}
 8001d04:	2000000c 	.word	0x2000000c
 8001d08:	abcd330e 	.word	0xabcd330e
 8001d0c:	e66d1234 	.word	0xe66d1234
 8001d10:	0005deec 	.word	0x0005deec
 8001d14:	5851f42d 	.word	0x5851f42d
 8001d18:	4c957f2d 	.word	0x4c957f2d

08001d1c <malloc>:
 8001d1c:	4b02      	ldr	r3, [pc, #8]	; (8001d28 <malloc+0xc>)
 8001d1e:	4601      	mov	r1, r0
 8001d20:	6818      	ldr	r0, [r3, #0]
 8001d22:	f000 b803 	b.w	8001d2c <_malloc_r>
 8001d26:	bf00      	nop
 8001d28:	2000000c 	.word	0x2000000c

08001d2c <_malloc_r>:
 8001d2c:	b570      	push	{r4, r5, r6, lr}
 8001d2e:	1ccd      	adds	r5, r1, #3
 8001d30:	f025 0503 	bic.w	r5, r5, #3
 8001d34:	3508      	adds	r5, #8
 8001d36:	2d0c      	cmp	r5, #12
 8001d38:	bf38      	it	cc
 8001d3a:	250c      	movcc	r5, #12
 8001d3c:	2d00      	cmp	r5, #0
 8001d3e:	4606      	mov	r6, r0
 8001d40:	db01      	blt.n	8001d46 <_malloc_r+0x1a>
 8001d42:	42a9      	cmp	r1, r5
 8001d44:	d903      	bls.n	8001d4e <_malloc_r+0x22>
 8001d46:	230c      	movs	r3, #12
 8001d48:	6033      	str	r3, [r6, #0]
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	bd70      	pop	{r4, r5, r6, pc}
 8001d4e:	f000 f857 	bl	8001e00 <__malloc_lock>
 8001d52:	4a21      	ldr	r2, [pc, #132]	; (8001dd8 <_malloc_r+0xac>)
 8001d54:	6814      	ldr	r4, [r2, #0]
 8001d56:	4621      	mov	r1, r4
 8001d58:	b991      	cbnz	r1, 8001d80 <_malloc_r+0x54>
 8001d5a:	4c20      	ldr	r4, [pc, #128]	; (8001ddc <_malloc_r+0xb0>)
 8001d5c:	6823      	ldr	r3, [r4, #0]
 8001d5e:	b91b      	cbnz	r3, 8001d68 <_malloc_r+0x3c>
 8001d60:	4630      	mov	r0, r6
 8001d62:	f000 f83d 	bl	8001de0 <_sbrk_r>
 8001d66:	6020      	str	r0, [r4, #0]
 8001d68:	4629      	mov	r1, r5
 8001d6a:	4630      	mov	r0, r6
 8001d6c:	f000 f838 	bl	8001de0 <_sbrk_r>
 8001d70:	1c43      	adds	r3, r0, #1
 8001d72:	d124      	bne.n	8001dbe <_malloc_r+0x92>
 8001d74:	230c      	movs	r3, #12
 8001d76:	4630      	mov	r0, r6
 8001d78:	6033      	str	r3, [r6, #0]
 8001d7a:	f000 f842 	bl	8001e02 <__malloc_unlock>
 8001d7e:	e7e4      	b.n	8001d4a <_malloc_r+0x1e>
 8001d80:	680b      	ldr	r3, [r1, #0]
 8001d82:	1b5b      	subs	r3, r3, r5
 8001d84:	d418      	bmi.n	8001db8 <_malloc_r+0x8c>
 8001d86:	2b0b      	cmp	r3, #11
 8001d88:	d90f      	bls.n	8001daa <_malloc_r+0x7e>
 8001d8a:	600b      	str	r3, [r1, #0]
 8001d8c:	18cc      	adds	r4, r1, r3
 8001d8e:	50cd      	str	r5, [r1, r3]
 8001d90:	4630      	mov	r0, r6
 8001d92:	f000 f836 	bl	8001e02 <__malloc_unlock>
 8001d96:	f104 000b 	add.w	r0, r4, #11
 8001d9a:	1d23      	adds	r3, r4, #4
 8001d9c:	f020 0007 	bic.w	r0, r0, #7
 8001da0:	1ac3      	subs	r3, r0, r3
 8001da2:	d0d3      	beq.n	8001d4c <_malloc_r+0x20>
 8001da4:	425a      	negs	r2, r3
 8001da6:	50e2      	str	r2, [r4, r3]
 8001da8:	e7d0      	b.n	8001d4c <_malloc_r+0x20>
 8001daa:	684b      	ldr	r3, [r1, #4]
 8001dac:	428c      	cmp	r4, r1
 8001dae:	bf16      	itet	ne
 8001db0:	6063      	strne	r3, [r4, #4]
 8001db2:	6013      	streq	r3, [r2, #0]
 8001db4:	460c      	movne	r4, r1
 8001db6:	e7eb      	b.n	8001d90 <_malloc_r+0x64>
 8001db8:	460c      	mov	r4, r1
 8001dba:	6849      	ldr	r1, [r1, #4]
 8001dbc:	e7cc      	b.n	8001d58 <_malloc_r+0x2c>
 8001dbe:	1cc4      	adds	r4, r0, #3
 8001dc0:	f024 0403 	bic.w	r4, r4, #3
 8001dc4:	42a0      	cmp	r0, r4
 8001dc6:	d005      	beq.n	8001dd4 <_malloc_r+0xa8>
 8001dc8:	1a21      	subs	r1, r4, r0
 8001dca:	4630      	mov	r0, r6
 8001dcc:	f000 f808 	bl	8001de0 <_sbrk_r>
 8001dd0:	3001      	adds	r0, #1
 8001dd2:	d0cf      	beq.n	8001d74 <_malloc_r+0x48>
 8001dd4:	6025      	str	r5, [r4, #0]
 8001dd6:	e7db      	b.n	8001d90 <_malloc_r+0x64>
 8001dd8:	20000564 	.word	0x20000564
 8001ddc:	20000568 	.word	0x20000568

08001de0 <_sbrk_r>:
 8001de0:	b538      	push	{r3, r4, r5, lr}
 8001de2:	2300      	movs	r3, #0
 8001de4:	4c05      	ldr	r4, [pc, #20]	; (8001dfc <_sbrk_r+0x1c>)
 8001de6:	4605      	mov	r5, r0
 8001de8:	4608      	mov	r0, r1
 8001dea:	6023      	str	r3, [r4, #0]
 8001dec:	f7ff f9dc 	bl	80011a8 <_sbrk>
 8001df0:	1c43      	adds	r3, r0, #1
 8001df2:	d102      	bne.n	8001dfa <_sbrk_r+0x1a>
 8001df4:	6823      	ldr	r3, [r4, #0]
 8001df6:	b103      	cbz	r3, 8001dfa <_sbrk_r+0x1a>
 8001df8:	602b      	str	r3, [r5, #0]
 8001dfa:	bd38      	pop	{r3, r4, r5, pc}
 8001dfc:	200005dc 	.word	0x200005dc

08001e00 <__malloc_lock>:
 8001e00:	4770      	bx	lr

08001e02 <__malloc_unlock>:
 8001e02:	4770      	bx	lr

08001e04 <_init>:
 8001e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e06:	bf00      	nop
 8001e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e0a:	bc08      	pop	{r3}
 8001e0c:	469e      	mov	lr, r3
 8001e0e:	4770      	bx	lr

08001e10 <_fini>:
 8001e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e12:	bf00      	nop
 8001e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e16:	bc08      	pop	{r3}
 8001e18:	469e      	mov	lr, r3
 8001e1a:	4770      	bx	lr
