
LabProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005884  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  08005994  08005994  00015994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e24  08005e24  00020208  2**0
                  CONTENTS
  4 .ARM          00000000  08005e24  08005e24  00020208  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e24  08005e24  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e24  08005e24  00015e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e28  08005e28  00015e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  08005e2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001abc  20000208  08006034  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cc4  08006034  00021cc4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001812b  00000000  00000000  00020231  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003010  00000000  00000000  0003835c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001308  00000000  00000000  0003b370  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011a0  00000000  00000000  0003c678  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000193cb  00000000  00000000  0003d818  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000106ab  00000000  00000000  00056be3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009413b  00000000  00000000  0006728e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fb3c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005288  00000000  00000000  000fb444  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000208 	.word	0x20000208
 800012c:	00000000 	.word	0x00000000
 8000130:	0800597c 	.word	0x0800597c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000020c 	.word	0x2000020c
 800014c:	0800597c 	.word	0x0800597c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <isCompleteLine>:
 */

#include "CLI.h"

bool isCompleteLine(char recBuffer[10])
{
 8000164:	b480      	push	{r7}
 8000166:	b083      	sub	sp, #12
 8000168:	af00      	add	r7, sp, #0
 800016a:	6078      	str	r0, [r7, #4]
	//if enter was hit, then it is a complete line, else it isnt
	if(recBuffer[0] == '\r')
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	781b      	ldrb	r3, [r3, #0]
 8000170:	2b0d      	cmp	r3, #13
 8000172:	d101      	bne.n	8000178 <isCompleteLine+0x14>
	{
		return true;
 8000174:	2301      	movs	r3, #1
 8000176:	e000      	b.n	800017a <isCompleteLine+0x16>
	}
	else
	{
		return false;
 8000178:	2300      	movs	r3, #0
	}
}
 800017a:	4618      	mov	r0, r3
 800017c:	370c      	adds	r7, #12
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr

08000184 <copyCharTo>:

void copyCharTo(char recBuffer[10], char s[40], int coun)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b084      	sub	sp, #16
 8000188:	af00      	add	r7, sp, #0
 800018a:	60f8      	str	r0, [r7, #12]
 800018c:	60b9      	str	r1, [r7, #8]
 800018e:	607a      	str	r2, [r7, #4]

		  if(recBuffer[0] == '\b')
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	781b      	ldrb	r3, [r3, #0]
 8000194:	2b08      	cmp	r3, #8
 8000196:	d103      	bne.n	80001a0 <copyCharTo+0x1c>
		  {
			  printString("\b \b");
 8000198:	4808      	ldr	r0, [pc, #32]	; (80001bc <copyCharTo+0x38>)
 800019a:	f000 f811 	bl	80001c0 <printString>
		  {
			  s[coun] = recBuffer[0];
			  printString(recBuffer);

		  }
}
 800019e:	e008      	b.n	80001b2 <copyCharTo+0x2e>
			  s[coun] = recBuffer[0];
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	68ba      	ldr	r2, [r7, #8]
 80001a4:	4413      	add	r3, r2
 80001a6:	68fa      	ldr	r2, [r7, #12]
 80001a8:	7812      	ldrb	r2, [r2, #0]
 80001aa:	701a      	strb	r2, [r3, #0]
			  printString(recBuffer);
 80001ac:	68f8      	ldr	r0, [r7, #12]
 80001ae:	f000 f807 	bl	80001c0 <printString>
}
 80001b2:	bf00      	nop
 80001b4:	3710      	adds	r7, #16
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bd80      	pop	{r7, pc}
 80001ba:	bf00      	nop
 80001bc:	08005994 	.word	0x08005994

080001c0 <printString>:
//		  HAL_UART_Transmit(&huart3, (char *)recBuffer, strlen((char *)recBuffer), 1000);
//	  }
//}

void printString(const char* mess)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b086      	sub	sp, #24
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	6078      	str	r0, [r7, #4]
	int i = 0;
 80001c8:	2300      	movs	r3, #0
 80001ca:	617b      	str	r3, [r7, #20]
	HAL_StatusTypeDef  st;

	while(huart3.gState == HAL_UART_STATE_BUSY_TX){}
 80001cc:	bf00      	nop
 80001ce:	4b16      	ldr	r3, [pc, #88]	; (8000228 <printString+0x68>)
 80001d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80001d4:	b2db      	uxtb	r3, r3
 80001d6:	2b21      	cmp	r3, #33	; 0x21
 80001d8:	d0f9      	beq.n	80001ce <printString+0xe>

	for(const char* p = mess; *p; ++p)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	613b      	str	r3, [r7, #16]
 80001de:	e00c      	b.n	80001fa <printString+0x3a>
	{
		cliBufferTX[i] = *p;
 80001e0:	693b      	ldr	r3, [r7, #16]
 80001e2:	7819      	ldrb	r1, [r3, #0]
 80001e4:	4a11      	ldr	r2, [pc, #68]	; (800022c <printString+0x6c>)
 80001e6:	697b      	ldr	r3, [r7, #20]
 80001e8:	4413      	add	r3, r2
 80001ea:	460a      	mov	r2, r1
 80001ec:	701a      	strb	r2, [r3, #0]
		i++;
 80001ee:	697b      	ldr	r3, [r7, #20]
 80001f0:	3301      	adds	r3, #1
 80001f2:	617b      	str	r3, [r7, #20]
	for(const char* p = mess; *p; ++p)
 80001f4:	693b      	ldr	r3, [r7, #16]
 80001f6:	3301      	adds	r3, #1
 80001f8:	613b      	str	r3, [r7, #16]
 80001fa:	693b      	ldr	r3, [r7, #16]
 80001fc:	781b      	ldrb	r3, [r3, #0]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d1ee      	bne.n	80001e0 <printString+0x20>
	}

	st = HAL_UART_Transmit(&huart3, cliBufferTX, i, 1000);
 8000202:	697b      	ldr	r3, [r7, #20]
 8000204:	b29a      	uxth	r2, r3
 8000206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800020a:	4908      	ldr	r1, [pc, #32]	; (800022c <printString+0x6c>)
 800020c:	4806      	ldr	r0, [pc, #24]	; (8000228 <printString+0x68>)
 800020e:	f002 f928 	bl	8002462 <HAL_UART_Transmit>
 8000212:	4603      	mov	r3, r0
 8000214:	73fb      	strb	r3, [r7, #15]
	if(st != HAL_OK)
 8000216:	7bfb      	ldrb	r3, [r7, #15]
 8000218:	2b00      	cmp	r3, #0
 800021a:	d001      	beq.n	8000220 <printString+0x60>
	{
		Error_Handler();
 800021c:	f000 fe0c 	bl	8000e38 <Error_Handler>
	}

}
 8000220:	bf00      	nop
 8000222:	3718      	adds	r7, #24
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	20001b4c 	.word	0x20001b4c
 800022c:	20001b8c 	.word	0x20001b8c

08000230 <lightState>:

#include "TrafficLight.h"


char lightState(char st)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	4603      	mov	r3, r0
 8000238:	71fb      	strb	r3, [r7, #7]
	switch(st){
 800023a:	79fb      	ldrb	r3, [r7, #7]
 800023c:	3b61      	subs	r3, #97	; 0x61
 800023e:	2b18      	cmp	r3, #24
 8000240:	f200 81fc 	bhi.w	800063c <lightState+0x40c>
 8000244:	a201      	add	r2, pc, #4	; (adr r2, 800024c <lightState+0x1c>)
 8000246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800024a:	bf00      	nop
 800024c:	080002b1 	.word	0x080002b1
 8000250:	08000313 	.word	0x08000313
 8000254:	08000375 	.word	0x08000375
 8000258:	080003d7 	.word	0x080003d7
 800025c:	08000439 	.word	0x08000439
 8000260:	0800049b 	.word	0x0800049b
 8000264:	080004fd 	.word	0x080004fd
 8000268:	0800055f 	.word	0x0800055f
 800026c:	0800063d 	.word	0x0800063d
 8000270:	0800063d 	.word	0x0800063d
 8000274:	0800063d 	.word	0x0800063d
 8000278:	0800063d 	.word	0x0800063d
 800027c:	0800063d 	.word	0x0800063d
 8000280:	0800063d 	.word	0x0800063d
 8000284:	0800063d 	.word	0x0800063d
 8000288:	0800063d 	.word	0x0800063d
 800028c:	0800063d 	.word	0x0800063d
 8000290:	0800063d 	.word	0x0800063d
 8000294:	0800063d 	.word	0x0800063d
 8000298:	0800063d 	.word	0x0800063d
 800029c:	0800063d 	.word	0x0800063d
 80002a0:	0800063d 	.word	0x0800063d
 80002a4:	0800063d 	.word	0x0800063d
 80002a8:	080005c9 	.word	0x080005c9
 80002ac:	0800062b 	.word	0x0800062b

	case 'a':
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_RESET);
 80002b0:	2200      	movs	r2, #0
 80002b2:	2140      	movs	r1, #64	; 0x40
 80002b4:	48c2      	ldr	r0, [pc, #776]	; (80005c0 <lightState+0x390>)
 80002b6:	f001 f9bf 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Y1_Pin, GPIO_PIN_SET);
 80002ba:	2201      	movs	r2, #1
 80002bc:	2180      	movs	r1, #128	; 0x80
 80002be:	48c0      	ldr	r0, [pc, #768]	; (80005c0 <lightState+0x390>)
 80002c0:	f001 f9ba 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, G1_Pin, GPIO_PIN_SET);
 80002c4:	2201      	movs	r2, #1
 80002c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ca:	48bd      	ldr	r0, [pc, #756]	; (80005c0 <lightState+0x390>)
 80002cc:	f001 f9b4 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, B1_Pin, GPIO_PIN_SET);
 80002d0:	2201      	movs	r2, #1
 80002d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002d6:	48ba      	ldr	r0, [pc, #744]	; (80005c0 <lightState+0x390>)
 80002d8:	f001 f9ae 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, R2_Pin, GPIO_PIN_RESET);
 80002dc:	2200      	movs	r2, #0
 80002de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002e2:	48b8      	ldr	r0, [pc, #736]	; (80005c4 <lightState+0x394>)
 80002e4:	f001 f9a8 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_SET);
 80002e8:	2201      	movs	r2, #1
 80002ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002ee:	48b5      	ldr	r0, [pc, #724]	; (80005c4 <lightState+0x394>)
 80002f0:	f001 f9a2 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_SET);
 80002f4:	2201      	movs	r2, #1
 80002f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002fa:	48b2      	ldr	r0, [pc, #712]	; (80005c4 <lightState+0x394>)
 80002fc:	f001 f99c 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, B2_Pin, GPIO_PIN_SET);
 8000300:	2201      	movs	r2, #1
 8000302:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000306:	48af      	ldr	r0, [pc, #700]	; (80005c4 <lightState+0x394>)
 8000308:	f001 f996 	bl	8001638 <HAL_GPIO_WritePin>
		st = 'b';
 800030c:	2362      	movs	r3, #98	; 0x62
 800030e:	71fb      	strb	r3, [r7, #7]
		break;
 8000310:	e197      	b.n	8000642 <lightState+0x412>

	case 'b':
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_SET);
 8000312:	2201      	movs	r2, #1
 8000314:	2140      	movs	r1, #64	; 0x40
 8000316:	48aa      	ldr	r0, [pc, #680]	; (80005c0 <lightState+0x390>)
 8000318:	f001 f98e 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Y1_Pin, GPIO_PIN_SET);
 800031c:	2201      	movs	r2, #1
 800031e:	2180      	movs	r1, #128	; 0x80
 8000320:	48a7      	ldr	r0, [pc, #668]	; (80005c0 <lightState+0x390>)
 8000322:	f001 f989 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, G1_Pin, GPIO_PIN_RESET);
 8000326:	2200      	movs	r2, #0
 8000328:	f44f 7180 	mov.w	r1, #256	; 0x100
 800032c:	48a4      	ldr	r0, [pc, #656]	; (80005c0 <lightState+0x390>)
 800032e:	f001 f983 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, B1_Pin, GPIO_PIN_RESET);
 8000332:	2200      	movs	r2, #0
 8000334:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000338:	48a1      	ldr	r0, [pc, #644]	; (80005c0 <lightState+0x390>)
 800033a:	f001 f97d 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, R2_Pin, GPIO_PIN_RESET);
 800033e:	2200      	movs	r2, #0
 8000340:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000344:	489f      	ldr	r0, [pc, #636]	; (80005c4 <lightState+0x394>)
 8000346:	f001 f977 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_SET);
 800034a:	2201      	movs	r2, #1
 800034c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000350:	489c      	ldr	r0, [pc, #624]	; (80005c4 <lightState+0x394>)
 8000352:	f001 f971 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_SET);
 8000356:	2201      	movs	r2, #1
 8000358:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800035c:	4899      	ldr	r0, [pc, #612]	; (80005c4 <lightState+0x394>)
 800035e:	f001 f96b 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, B2_Pin, GPIO_PIN_SET);
 8000362:	2201      	movs	r2, #1
 8000364:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000368:	4896      	ldr	r0, [pc, #600]	; (80005c4 <lightState+0x394>)
 800036a:	f001 f965 	bl	8001638 <HAL_GPIO_WritePin>
		st = 'c';
 800036e:	2363      	movs	r3, #99	; 0x63
 8000370:	71fb      	strb	r3, [r7, #7]
		break;
 8000372:	e166      	b.n	8000642 <lightState+0x412>

	case 'c':
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_SET);
 8000374:	2201      	movs	r2, #1
 8000376:	2140      	movs	r1, #64	; 0x40
 8000378:	4891      	ldr	r0, [pc, #580]	; (80005c0 <lightState+0x390>)
 800037a:	f001 f95d 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Y1_Pin, GPIO_PIN_SET);
 800037e:	2201      	movs	r2, #1
 8000380:	2180      	movs	r1, #128	; 0x80
 8000382:	488f      	ldr	r0, [pc, #572]	; (80005c0 <lightState+0x390>)
 8000384:	f001 f958 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, G1_Pin, GPIO_PIN_RESET);
 8000388:	2200      	movs	r2, #0
 800038a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800038e:	488c      	ldr	r0, [pc, #560]	; (80005c0 <lightState+0x390>)
 8000390:	f001 f952 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, B1_Pin, GPIO_PIN_SET);
 8000394:	2201      	movs	r2, #1
 8000396:	f44f 7100 	mov.w	r1, #512	; 0x200
 800039a:	4889      	ldr	r0, [pc, #548]	; (80005c0 <lightState+0x390>)
 800039c:	f001 f94c 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, R2_Pin, GPIO_PIN_RESET);
 80003a0:	2200      	movs	r2, #0
 80003a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003a6:	4887      	ldr	r0, [pc, #540]	; (80005c4 <lightState+0x394>)
 80003a8:	f001 f946 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_SET);
 80003ac:	2201      	movs	r2, #1
 80003ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003b2:	4884      	ldr	r0, [pc, #528]	; (80005c4 <lightState+0x394>)
 80003b4:	f001 f940 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_SET);
 80003b8:	2201      	movs	r2, #1
 80003ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003be:	4881      	ldr	r0, [pc, #516]	; (80005c4 <lightState+0x394>)
 80003c0:	f001 f93a 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, B2_Pin, GPIO_PIN_SET);
 80003c4:	2201      	movs	r2, #1
 80003c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003ca:	487e      	ldr	r0, [pc, #504]	; (80005c4 <lightState+0x394>)
 80003cc:	f001 f934 	bl	8001638 <HAL_GPIO_WritePin>
		st = 'd';
 80003d0:	2364      	movs	r3, #100	; 0x64
 80003d2:	71fb      	strb	r3, [r7, #7]
		break;
 80003d4:	e135      	b.n	8000642 <lightState+0x412>

	case 'd':
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_SET);
 80003d6:	2201      	movs	r2, #1
 80003d8:	2140      	movs	r1, #64	; 0x40
 80003da:	4879      	ldr	r0, [pc, #484]	; (80005c0 <lightState+0x390>)
 80003dc:	f001 f92c 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Y1_Pin, GPIO_PIN_RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2180      	movs	r1, #128	; 0x80
 80003e4:	4876      	ldr	r0, [pc, #472]	; (80005c0 <lightState+0x390>)
 80003e6:	f001 f927 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, G1_Pin, GPIO_PIN_SET);
 80003ea:	2201      	movs	r2, #1
 80003ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003f0:	4873      	ldr	r0, [pc, #460]	; (80005c0 <lightState+0x390>)
 80003f2:	f001 f921 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, B1_Pin, GPIO_PIN_SET);
 80003f6:	2201      	movs	r2, #1
 80003f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003fc:	4870      	ldr	r0, [pc, #448]	; (80005c0 <lightState+0x390>)
 80003fe:	f001 f91b 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, R2_Pin, GPIO_PIN_RESET);
 8000402:	2200      	movs	r2, #0
 8000404:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000408:	486e      	ldr	r0, [pc, #440]	; (80005c4 <lightState+0x394>)
 800040a:	f001 f915 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_SET);
 800040e:	2201      	movs	r2, #1
 8000410:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000414:	486b      	ldr	r0, [pc, #428]	; (80005c4 <lightState+0x394>)
 8000416:	f001 f90f 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_SET);
 800041a:	2201      	movs	r2, #1
 800041c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000420:	4868      	ldr	r0, [pc, #416]	; (80005c4 <lightState+0x394>)
 8000422:	f001 f909 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, B2_Pin, GPIO_PIN_SET);
 8000426:	2201      	movs	r2, #1
 8000428:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800042c:	4865      	ldr	r0, [pc, #404]	; (80005c4 <lightState+0x394>)
 800042e:	f001 f903 	bl	8001638 <HAL_GPIO_WritePin>
		st = 'e';
 8000432:	2365      	movs	r3, #101	; 0x65
 8000434:	71fb      	strb	r3, [r7, #7]
		break;
 8000436:	e104      	b.n	8000642 <lightState+0x412>

	case 'e':
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_RESET);
 8000438:	2200      	movs	r2, #0
 800043a:	2140      	movs	r1, #64	; 0x40
 800043c:	4860      	ldr	r0, [pc, #384]	; (80005c0 <lightState+0x390>)
 800043e:	f001 f8fb 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Y1_Pin, GPIO_PIN_SET);
 8000442:	2201      	movs	r2, #1
 8000444:	2180      	movs	r1, #128	; 0x80
 8000446:	485e      	ldr	r0, [pc, #376]	; (80005c0 <lightState+0x390>)
 8000448:	f001 f8f6 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, G1_Pin, GPIO_PIN_SET);
 800044c:	2201      	movs	r2, #1
 800044e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000452:	485b      	ldr	r0, [pc, #364]	; (80005c0 <lightState+0x390>)
 8000454:	f001 f8f0 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, B1_Pin, GPIO_PIN_SET);
 8000458:	2201      	movs	r2, #1
 800045a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800045e:	4858      	ldr	r0, [pc, #352]	; (80005c0 <lightState+0x390>)
 8000460:	f001 f8ea 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, R2_Pin, GPIO_PIN_RESET);
 8000464:	2200      	movs	r2, #0
 8000466:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800046a:	4856      	ldr	r0, [pc, #344]	; (80005c4 <lightState+0x394>)
 800046c:	f001 f8e4 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_SET);
 8000470:	2201      	movs	r2, #1
 8000472:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000476:	4853      	ldr	r0, [pc, #332]	; (80005c4 <lightState+0x394>)
 8000478:	f001 f8de 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_SET);
 800047c:	2201      	movs	r2, #1
 800047e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000482:	4850      	ldr	r0, [pc, #320]	; (80005c4 <lightState+0x394>)
 8000484:	f001 f8d8 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, B2_Pin, GPIO_PIN_SET);
 8000488:	2201      	movs	r2, #1
 800048a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800048e:	484d      	ldr	r0, [pc, #308]	; (80005c4 <lightState+0x394>)
 8000490:	f001 f8d2 	bl	8001638 <HAL_GPIO_WritePin>
		st = 'f';
 8000494:	2366      	movs	r3, #102	; 0x66
 8000496:	71fb      	strb	r3, [r7, #7]
		break;
 8000498:	e0d3      	b.n	8000642 <lightState+0x412>

	case 'f':
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	2140      	movs	r1, #64	; 0x40
 800049e:	4848      	ldr	r0, [pc, #288]	; (80005c0 <lightState+0x390>)
 80004a0:	f001 f8ca 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Y1_Pin, GPIO_PIN_SET);
 80004a4:	2201      	movs	r2, #1
 80004a6:	2180      	movs	r1, #128	; 0x80
 80004a8:	4845      	ldr	r0, [pc, #276]	; (80005c0 <lightState+0x390>)
 80004aa:	f001 f8c5 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, G1_Pin, GPIO_PIN_SET);
 80004ae:	2201      	movs	r2, #1
 80004b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004b4:	4842      	ldr	r0, [pc, #264]	; (80005c0 <lightState+0x390>)
 80004b6:	f001 f8bf 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, B1_Pin, GPIO_PIN_SET);
 80004ba:	2201      	movs	r2, #1
 80004bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004c0:	483f      	ldr	r0, [pc, #252]	; (80005c0 <lightState+0x390>)
 80004c2:	f001 f8b9 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, R2_Pin, GPIO_PIN_SET);
 80004c6:	2201      	movs	r2, #1
 80004c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004cc:	483d      	ldr	r0, [pc, #244]	; (80005c4 <lightState+0x394>)
 80004ce:	f001 f8b3 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_SET);
 80004d2:	2201      	movs	r2, #1
 80004d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004d8:	483a      	ldr	r0, [pc, #232]	; (80005c4 <lightState+0x394>)
 80004da:	f001 f8ad 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_RESET);
 80004de:	2200      	movs	r2, #0
 80004e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004e4:	4837      	ldr	r0, [pc, #220]	; (80005c4 <lightState+0x394>)
 80004e6:	f001 f8a7 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, B2_Pin, GPIO_PIN_RESET);
 80004ea:	2200      	movs	r2, #0
 80004ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004f0:	4834      	ldr	r0, [pc, #208]	; (80005c4 <lightState+0x394>)
 80004f2:	f001 f8a1 	bl	8001638 <HAL_GPIO_WritePin>
		st = 'g';
 80004f6:	2367      	movs	r3, #103	; 0x67
 80004f8:	71fb      	strb	r3, [r7, #7]
		break;
 80004fa:	e0a2      	b.n	8000642 <lightState+0x412>

	case 'g':
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_RESET);
 80004fc:	2200      	movs	r2, #0
 80004fe:	2140      	movs	r1, #64	; 0x40
 8000500:	482f      	ldr	r0, [pc, #188]	; (80005c0 <lightState+0x390>)
 8000502:	f001 f899 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Y1_Pin, GPIO_PIN_SET);
 8000506:	2201      	movs	r2, #1
 8000508:	2180      	movs	r1, #128	; 0x80
 800050a:	482d      	ldr	r0, [pc, #180]	; (80005c0 <lightState+0x390>)
 800050c:	f001 f894 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, G1_Pin, GPIO_PIN_SET);
 8000510:	2201      	movs	r2, #1
 8000512:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000516:	482a      	ldr	r0, [pc, #168]	; (80005c0 <lightState+0x390>)
 8000518:	f001 f88e 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, B1_Pin, GPIO_PIN_SET);
 800051c:	2201      	movs	r2, #1
 800051e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000522:	4827      	ldr	r0, [pc, #156]	; (80005c0 <lightState+0x390>)
 8000524:	f001 f888 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, R2_Pin, GPIO_PIN_SET);
 8000528:	2201      	movs	r2, #1
 800052a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800052e:	4825      	ldr	r0, [pc, #148]	; (80005c4 <lightState+0x394>)
 8000530:	f001 f882 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_SET);
 8000534:	2201      	movs	r2, #1
 8000536:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800053a:	4822      	ldr	r0, [pc, #136]	; (80005c4 <lightState+0x394>)
 800053c:	f001 f87c 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000546:	481f      	ldr	r0, [pc, #124]	; (80005c4 <lightState+0x394>)
 8000548:	f001 f876 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, B2_Pin, GPIO_PIN_SET);
 800054c:	2201      	movs	r2, #1
 800054e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000552:	481c      	ldr	r0, [pc, #112]	; (80005c4 <lightState+0x394>)
 8000554:	f001 f870 	bl	8001638 <HAL_GPIO_WritePin>
		st = 'h';
 8000558:	2368      	movs	r3, #104	; 0x68
 800055a:	71fb      	strb	r3, [r7, #7]
		break;
 800055c:	e071      	b.n	8000642 <lightState+0x412>

	case 'h':
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	2140      	movs	r1, #64	; 0x40
 8000562:	4817      	ldr	r0, [pc, #92]	; (80005c0 <lightState+0x390>)
 8000564:	f001 f868 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Y1_Pin, GPIO_PIN_SET);
 8000568:	2201      	movs	r2, #1
 800056a:	2180      	movs	r1, #128	; 0x80
 800056c:	4814      	ldr	r0, [pc, #80]	; (80005c0 <lightState+0x390>)
 800056e:	f001 f863 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, G1_Pin, GPIO_PIN_SET);
 8000572:	2201      	movs	r2, #1
 8000574:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000578:	4811      	ldr	r0, [pc, #68]	; (80005c0 <lightState+0x390>)
 800057a:	f001 f85d 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, B1_Pin, GPIO_PIN_SET);
 800057e:	2201      	movs	r2, #1
 8000580:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000584:	480e      	ldr	r0, [pc, #56]	; (80005c0 <lightState+0x390>)
 8000586:	f001 f857 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, R2_Pin, GPIO_PIN_SET);
 800058a:	2201      	movs	r2, #1
 800058c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000590:	480c      	ldr	r0, [pc, #48]	; (80005c4 <lightState+0x394>)
 8000592:	f001 f851 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800059c:	4809      	ldr	r0, [pc, #36]	; (80005c4 <lightState+0x394>)
 800059e:	f001 f84b 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005a8:	4806      	ldr	r0, [pc, #24]	; (80005c4 <lightState+0x394>)
 80005aa:	f001 f845 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, B2_Pin, GPIO_PIN_SET);
 80005ae:	2201      	movs	r2, #1
 80005b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005b4:	4803      	ldr	r0, [pc, #12]	; (80005c4 <lightState+0x394>)
 80005b6:	f001 f83f 	bl	8001638 <HAL_GPIO_WritePin>
		st = 'a';
 80005ba:	2361      	movs	r3, #97	; 0x61
 80005bc:	71fb      	strb	r3, [r7, #7]
		break;
 80005be:	e040      	b.n	8000642 <lightState+0x412>
 80005c0:	40010800 	.word	0x40010800
 80005c4:	40010c00 	.word	0x40010c00

	case 'x':
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	2140      	movs	r1, #64	; 0x40
 80005cc:	481f      	ldr	r0, [pc, #124]	; (800064c <lightState+0x41c>)
 80005ce:	f001 f833 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Y1_Pin, GPIO_PIN_SET);
 80005d2:	2201      	movs	r2, #1
 80005d4:	2180      	movs	r1, #128	; 0x80
 80005d6:	481d      	ldr	r0, [pc, #116]	; (800064c <lightState+0x41c>)
 80005d8:	f001 f82e 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, G1_Pin, GPIO_PIN_SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e2:	481a      	ldr	r0, [pc, #104]	; (800064c <lightState+0x41c>)
 80005e4:	f001 f828 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, B1_Pin, GPIO_PIN_SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ee:	4817      	ldr	r0, [pc, #92]	; (800064c <lightState+0x41c>)
 80005f0:	f001 f822 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, R2_Pin, GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005fa:	4815      	ldr	r0, [pc, #84]	; (8000650 <lightState+0x420>)
 80005fc:	f001 f81c 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_SET);
 8000600:	2201      	movs	r2, #1
 8000602:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000606:	4812      	ldr	r0, [pc, #72]	; (8000650 <lightState+0x420>)
 8000608:	f001 f816 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000612:	480f      	ldr	r0, [pc, #60]	; (8000650 <lightState+0x420>)
 8000614:	f001 f810 	bl	8001638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, B2_Pin, GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800061e:	480c      	ldr	r0, [pc, #48]	; (8000650 <lightState+0x420>)
 8000620:	f001 f80a 	bl	8001638 <HAL_GPIO_WritePin>
		st = 'y';
 8000624:	2379      	movs	r3, #121	; 0x79
 8000626:	71fb      	strb	r3, [r7, #7]
		break;
 8000628:	e00b      	b.n	8000642 <lightState+0x412>

	case 'y':
		HAL_GPIO_TogglePin(GPIOA, R1_Pin);
 800062a:	2140      	movs	r1, #64	; 0x40
 800062c:	4807      	ldr	r0, [pc, #28]	; (800064c <lightState+0x41c>)
 800062e:	f001 f81b 	bl	8001668 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, R2_Pin);
 8000632:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000636:	4806      	ldr	r0, [pc, #24]	; (8000650 <lightState+0x420>)
 8000638:	f001 f816 	bl	8001668 <HAL_GPIO_TogglePin>

	default:
		st = 'x';
 800063c:	2378      	movs	r3, #120	; 0x78
 800063e:	71fb      	strb	r3, [r7, #7]
		break;
 8000640:	bf00      	nop
	}

	return st;
 8000642:	79fb      	ldrb	r3, [r7, #7]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40010800 	.word	0x40010800
 8000650:	40010c00 	.word	0x40010c00

08000654 <periodState>:

int periodState(char st, int x)
{
 8000654:	b480      	push	{r7}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	6039      	str	r1, [r7, #0]
 800065e:	71fb      	strb	r3, [r7, #7]
	int pd;

	switch(st){
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	3b61      	subs	r3, #97	; 0x61
 8000664:	2b18      	cmp	r3, #24
 8000666:	d85b      	bhi.n	8000720 <periodState+0xcc>
 8000668:	a201      	add	r2, pc, #4	; (adr r2, 8000670 <periodState+0x1c>)
 800066a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800066e:	bf00      	nop
 8000670:	080006d5 	.word	0x080006d5
 8000674:	080006dd 	.word	0x080006dd
 8000678:	080006e3 	.word	0x080006e3
 800067c:	080006eb 	.word	0x080006eb
 8000680:	080006f3 	.word	0x080006f3
 8000684:	080006fb 	.word	0x080006fb
 8000688:	08000703 	.word	0x08000703
 800068c:	0800070b 	.word	0x0800070b
 8000690:	08000721 	.word	0x08000721
 8000694:	08000721 	.word	0x08000721
 8000698:	08000721 	.word	0x08000721
 800069c:	08000721 	.word	0x08000721
 80006a0:	08000721 	.word	0x08000721
 80006a4:	08000721 	.word	0x08000721
 80006a8:	08000721 	.word	0x08000721
 80006ac:	08000721 	.word	0x08000721
 80006b0:	08000721 	.word	0x08000721
 80006b4:	08000721 	.word	0x08000721
 80006b8:	08000721 	.word	0x08000721
 80006bc:	08000721 	.word	0x08000721
 80006c0:	08000721 	.word	0x08000721
 80006c4:	08000721 	.word	0x08000721
 80006c8:	08000721 	.word	0x08000721
 80006cc:	08000713 	.word	0x08000713
 80006d0:	0800071b 	.word	0x0800071b

	case 'a':
		pd = 6000;
 80006d4:	f241 7370 	movw	r3, #6000	; 0x1770
 80006d8:	60fb      	str	r3, [r7, #12]
		break;
 80006da:	e022      	b.n	8000722 <periodState+0xce>

	case 'b':
		pd = 70500;
 80006dc:	4b15      	ldr	r3, [pc, #84]	; (8000734 <periodState+0xe0>)
 80006de:	60fb      	str	r3, [r7, #12]
		break;
 80006e0:	e01f      	b.n	8000722 <periodState+0xce>

	case 'c':
		pd = 13500;
 80006e2:	f243 43bc 	movw	r3, #13500	; 0x34bc
 80006e6:	60fb      	str	r3, [r7, #12]
		break;
 80006e8:	e01b      	b.n	8000722 <periodState+0xce>

	case 'd':
		pd = 3500;
 80006ea:	f640 53ac 	movw	r3, #3500	; 0xdac
 80006ee:	60fb      	str	r3, [r7, #12]
		break;
 80006f0:	e017      	b.n	8000722 <periodState+0xce>

	case 'e':
		pd = 6000;
 80006f2:	f241 7370 	movw	r3, #6000	; 0x1770
 80006f6:	60fb      	str	r3, [r7, #12]
		break;
 80006f8:	e013      	b.n	8000722 <periodState+0xce>

	case 'f':
		pd = 20000;
 80006fa:	f644 6320 	movw	r3, #20000	; 0x4e20
 80006fe:	60fb      	str	r3, [r7, #12]
		break;
 8000700:	e00f      	b.n	8000722 <periodState+0xce>

	case 'g':
		pd = 8000;
 8000702:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8000706:	60fb      	str	r3, [r7, #12]
		break;
 8000708:	e00b      	b.n	8000722 <periodState+0xce>

	case 'h':
		pd = 3500;
 800070a:	f640 53ac 	movw	r3, #3500	; 0xdac
 800070e:	60fb      	str	r3, [r7, #12]
		break;
 8000710:	e007      	b.n	8000722 <periodState+0xce>

	case 'x':
		pd = 1500;
 8000712:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000716:	60fb      	str	r3, [r7, #12]
		break;
 8000718:	e003      	b.n	8000722 <periodState+0xce>

	case 'y':
		pd = 500;
 800071a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800071e:	60fb      	str	r3, [r7, #12]

	default:

		break;
 8000720:	bf00      	nop
	}

	return pd / x;
 8000722:	68fa      	ldr	r2, [r7, #12]
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	fb92 f3f3 	sdiv	r3, r2, r3
}
 800072a:	4618      	mov	r0, r3
 800072c:	3714      	adds	r7, #20
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr
 8000734:	00011364 	.word	0x00011364

08000738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073c:	f000 fcee 	bl	800111c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000740:	f000 f89a 	bl	8000878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000744:	f000 f8fe 	bl	8000944 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000748:	f000 f8d2 	bl	80008f0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  printString(CLEAR_SCREEN);
 800074c:	4b32      	ldr	r3, [pc, #200]	; (8000818 <main+0xe0>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff fd35 	bl	80001c0 <printString>
  printString(GO_TO_TOP);
 8000756:	4b31      	ldr	r3, [pc, #196]	; (800081c <main+0xe4>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff fd30 	bl	80001c0 <printString>
  printString("Welcome to the CLI!\r\n");
 8000760:	482f      	ldr	r0, [pc, #188]	; (8000820 <main+0xe8>)
 8000762:	f7ff fd2d 	bl	80001c0 <printString>
  HAL_Delay(2000);
 8000766:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800076a:	f000 fd09 	bl	8001180 <HAL_Delay>

  //Formats the screen to show counter and create a scroll window
  printString(CLEAR_SCREEN);
 800076e:	4b2a      	ldr	r3, [pc, #168]	; (8000818 <main+0xe0>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff fd24 	bl	80001c0 <printString>
  printString(GO_TO_TOP);
 8000778:	4b28      	ldr	r3, [pc, #160]	; (800081c <main+0xe4>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff fd1f 	bl	80001c0 <printString>
  printString("Mode: ");
 8000782:	4828      	ldr	r0, [pc, #160]	; (8000824 <main+0xec>)
 8000784:	f7ff fd1c 	bl	80001c0 <printString>
  printString("Failsafe");
 8000788:	4827      	ldr	r0, [pc, #156]	; (8000828 <main+0xf0>)
 800078a:	f7ff fd19 	bl	80001c0 <printString>
  printString("\x1b[9;0H");
 800078e:	4827      	ldr	r0, [pc, #156]	; (800082c <main+0xf4>)
 8000790:	f7ff fd16 	bl	80001c0 <printString>
  printString("Enter \"help\" for a list of commands");
 8000794:	4826      	ldr	r0, [pc, #152]	; (8000830 <main+0xf8>)
 8000796:	f7ff fd13 	bl	80001c0 <printString>
  printString(SCROLL_WINDOW);
 800079a:	4b26      	ldr	r3, [pc, #152]	; (8000834 <main+0xfc>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff fd0e 	bl	80001c0 <printString>
  printString(GO_TO_SCROLL);
 80007a4:	4b24      	ldr	r3, [pc, #144]	; (8000838 <main+0x100>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff fd09 	bl	80001c0 <printString>

  printString("\n~>$ ");
 80007ae:	4823      	ldr	r0, [pc, #140]	; (800083c <main+0x104>)
 80007b0:	f7ff fd06 	bl	80001c0 <printString>
  printString(SAVE_CURS);
 80007b4:	4b22      	ldr	r3, [pc, #136]	; (8000840 <main+0x108>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff fd01 	bl	80001c0 <printString>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007be:	f002 f859 	bl	8002874 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Command_Queue */
  Command_QueueHandle = osMessageQueueNew (1, sizeof(uint16_t), &Command_Queue_attributes);
 80007c2:	4a20      	ldr	r2, [pc, #128]	; (8000844 <main+0x10c>)
 80007c4:	2102      	movs	r1, #2
 80007c6:	2001      	movs	r0, #1
 80007c8:	f002 f992 	bl	8002af0 <osMessageQueueNew>
 80007cc:	4602      	mov	r2, r0
 80007ce:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <main+0x110>)
 80007d0:	601a      	str	r2, [r3, #0]

  /* creation of Message_Queue */
  Message_QueueHandle = osMessageQueueNew (1, sizeof(uint16_t), &Message_Queue_attributes);
 80007d2:	4a1e      	ldr	r2, [pc, #120]	; (800084c <main+0x114>)
 80007d4:	2102      	movs	r1, #2
 80007d6:	2001      	movs	r0, #1
 80007d8:	f002 f98a 	bl	8002af0 <osMessageQueueNew>
 80007dc:	4602      	mov	r2, r0
 80007de:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <main+0x118>)
 80007e0:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of StateController */
  StateControllerHandle = osThreadNew(StartStateController, NULL, &StateController_attributes);
 80007e2:	4a1c      	ldr	r2, [pc, #112]	; (8000854 <main+0x11c>)
 80007e4:	2100      	movs	r1, #0
 80007e6:	481c      	ldr	r0, [pc, #112]	; (8000858 <main+0x120>)
 80007e8:	f002 f8aa 	bl	8002940 <osThreadNew>
 80007ec:	4602      	mov	r2, r0
 80007ee:	4b1b      	ldr	r3, [pc, #108]	; (800085c <main+0x124>)
 80007f0:	601a      	str	r2, [r3, #0]

  /* creation of RX_CLI */
  RX_CLIHandle = osThreadNew(StartRX_CLI, NULL, &RX_CLI_attributes);
 80007f2:	4a1b      	ldr	r2, [pc, #108]	; (8000860 <main+0x128>)
 80007f4:	2100      	movs	r1, #0
 80007f6:	481b      	ldr	r0, [pc, #108]	; (8000864 <main+0x12c>)
 80007f8:	f002 f8a2 	bl	8002940 <osThreadNew>
 80007fc:	4602      	mov	r2, r0
 80007fe:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <main+0x130>)
 8000800:	601a      	str	r2, [r3, #0]

  /* creation of StatusUpdate */
  StatusUpdateHandle = osThreadNew(StartStatusUpdate, NULL, &StatusUpdate_attributes);
 8000802:	4a1a      	ldr	r2, [pc, #104]	; (800086c <main+0x134>)
 8000804:	2100      	movs	r1, #0
 8000806:	481a      	ldr	r0, [pc, #104]	; (8000870 <main+0x138>)
 8000808:	f002 f89a 	bl	8002940 <osThreadNew>
 800080c:	4602      	mov	r2, r0
 800080e:	4b19      	ldr	r3, [pc, #100]	; (8000874 <main+0x13c>)
 8000810:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000812:	f002 f861 	bl	80028d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000816:	e7fe      	b.n	8000816 <main+0xde>
 8000818:	20000004 	.word	0x20000004
 800081c:	20000010 	.word	0x20000010
 8000820:	08005a20 	.word	0x08005a20
 8000824:	08005a38 	.word	0x08005a38
 8000828:	08005a40 	.word	0x08005a40
 800082c:	08005a4c 	.word	0x08005a4c
 8000830:	08005a54 	.word	0x08005a54
 8000834:	20000008 	.word	0x20000008
 8000838:	2000000c 	.word	0x2000000c
 800083c:	08005a78 	.word	0x08005a78
 8000840:	20000020 	.word	0x20000020
 8000844:	08005cd0 	.word	0x08005cd0
 8000848:	20001bf0 	.word	0x20001bf0
 800084c:	08005ce8 	.word	0x08005ce8
 8000850:	20001b3c 	.word	0x20001b3c
 8000854:	08005c64 	.word	0x08005c64
 8000858:	08000a09 	.word	0x08000a09
 800085c:	20001c30 	.word	0x20001c30
 8000860:	08005c88 	.word	0x08005c88
 8000864:	08000ac9 	.word	0x08000ac9
 8000868:	20001bf4 	.word	0x20001bf4
 800086c:	08005cac 	.word	0x08005cac
 8000870:	08000d89 	.word	0x08000d89
 8000874:	20001bf8 	.word	0x20001bf8

08000878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b090      	sub	sp, #64	; 0x40
 800087c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087e:	f107 0318 	add.w	r3, r7, #24
 8000882:	2228      	movs	r2, #40	; 0x28
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f004 fee9 	bl	800565e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800089a:	2302      	movs	r3, #2
 800089c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800089e:	2301      	movs	r3, #1
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a2:	2310      	movs	r3, #16
 80008a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008aa:	f107 0318 	add.w	r3, r7, #24
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 fef4 	bl	800169c <HAL_RCC_OscConfig>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <SystemClock_Config+0x46>
  {
    Error_Handler();
 80008ba:	f000 fabd 	bl	8000e38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008be:	230f      	movs	r3, #15
 80008c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ce:	2300      	movs	r3, #0
 80008d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f001 f960 	bl	8001b9c <HAL_RCC_ClockConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80008e2:	f000 faa9 	bl	8000e38 <Error_Handler>
  }
}
 80008e6:	bf00      	nop
 80008e8:	3740      	adds	r7, #64	; 0x40
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_USART3_UART_Init+0x4c>)
 80008f6:	4a12      	ldr	r2, [pc, #72]	; (8000940 <MX_USART3_UART_Init+0x50>)
 80008f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <MX_USART3_UART_Init+0x4c>)
 80008fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000900:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_USART3_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_USART3_UART_Init+0x4c>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <MX_USART3_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000914:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_USART3_UART_Init+0x4c>)
 8000916:	220c      	movs	r2, #12
 8000918:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <MX_USART3_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_USART3_UART_Init+0x4c>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_USART3_UART_Init+0x4c>)
 8000928:	f001 fd4e 	bl	80023c8 <HAL_UART_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000932:	f000 fa81 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20001b4c 	.word	0x20001b4c
 8000940:	40004800 	.word	0x40004800

08000944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094a:	f107 0310 	add.w	r3, r7, #16
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000958:	4b28      	ldr	r3, [pc, #160]	; (80009fc <MX_GPIO_Init+0xb8>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	4a27      	ldr	r2, [pc, #156]	; (80009fc <MX_GPIO_Init+0xb8>)
 800095e:	f043 0304 	orr.w	r3, r3, #4
 8000962:	6193      	str	r3, [r2, #24]
 8000964:	4b25      	ldr	r3, [pc, #148]	; (80009fc <MX_GPIO_Init+0xb8>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	f003 0304 	and.w	r3, r3, #4
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000970:	4b22      	ldr	r3, [pc, #136]	; (80009fc <MX_GPIO_Init+0xb8>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	4a21      	ldr	r2, [pc, #132]	; (80009fc <MX_GPIO_Init+0xb8>)
 8000976:	f043 0308 	orr.w	r3, r3, #8
 800097a:	6193      	str	r3, [r2, #24]
 800097c:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <MX_GPIO_Init+0xb8>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	f003 0308 	and.w	r3, r3, #8
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000988:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <MX_GPIO_Init+0xb8>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	4a1b      	ldr	r2, [pc, #108]	; (80009fc <MX_GPIO_Init+0xb8>)
 800098e:	f043 0310 	orr.w	r3, r3, #16
 8000992:	6193      	str	r3, [r2, #24]
 8000994:	4b19      	ldr	r3, [pc, #100]	; (80009fc <MX_GPIO_Init+0xb8>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	f003 0310 	and.w	r3, r3, #16
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R1_Pin|Y1_Pin|G1_Pin|B1_Pin, GPIO_PIN_SET);
 80009a0:	2201      	movs	r2, #1
 80009a2:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80009a6:	4816      	ldr	r0, [pc, #88]	; (8000a00 <MX_GPIO_Init+0xbc>)
 80009a8:	f000 fe46 	bl	8001638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R2_Pin|Y2_Pin|G2_Pin|B2_Pin, GPIO_PIN_SET);
 80009ac:	2201      	movs	r2, #1
 80009ae:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80009b2:	4814      	ldr	r0, [pc, #80]	; (8000a04 <MX_GPIO_Init+0xc0>)
 80009b4:	f000 fe40 	bl	8001638 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : R1_Pin Y1_Pin G1_Pin B1_Pin */
  GPIO_InitStruct.Pin = R1_Pin|Y1_Pin|G1_Pin|B1_Pin;
 80009b8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80009bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009be:	2301      	movs	r3, #1
 80009c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2302      	movs	r3, #2
 80009c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ca:	f107 0310 	add.w	r3, r7, #16
 80009ce:	4619      	mov	r1, r3
 80009d0:	480b      	ldr	r0, [pc, #44]	; (8000a00 <MX_GPIO_Init+0xbc>)
 80009d2:	f000 fcd7 	bl	8001384 <HAL_GPIO_Init>

  /*Configure GPIO pins : R2_Pin Y2_Pin G2_Pin B2_Pin */
  GPIO_InitStruct.Pin = R2_Pin|Y2_Pin|G2_Pin|B2_Pin;
 80009d6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80009da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009dc:	2301      	movs	r3, #1
 80009de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2302      	movs	r3, #2
 80009e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e8:	f107 0310 	add.w	r3, r7, #16
 80009ec:	4619      	mov	r1, r3
 80009ee:	4805      	ldr	r0, [pc, #20]	; (8000a04 <MX_GPIO_Init+0xc0>)
 80009f0:	f000 fcc8 	bl	8001384 <HAL_GPIO_Init>

}
 80009f4:	bf00      	nop
 80009f6:	3720      	adds	r7, #32
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40021000 	.word	0x40021000
 8000a00:	40010800 	.word	0x40010800
 8000a04:	40010c00 	.word	0x40010c00

08000a08 <StartStateController>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartStateController */
void StartStateController(void *argument)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint16_t cmd = 101;
 8000a10:	2365      	movs	r3, #101	; 0x65
 8000a12:	81fb      	strh	r3, [r7, #14]
	uint16_t msg = cmd;
 8000a14:	89fb      	ldrh	r3, [r7, #14]
 8000a16:	81bb      	strh	r3, [r7, #12]
	int period = 400;
 8000a18:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000a1c:	613b      	str	r3, [r7, #16]
	int speedFactor = 1;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	617b      	str	r3, [r7, #20]
	/* Infinite loop */
	for(;;)
	{

		if(osMessageQueueGet(Command_QueueHandle, &cmd, NULL, 0U) == osOK)
 8000a22:	4b26      	ldr	r3, [pc, #152]	; (8000abc <StartStateController+0xb4>)
 8000a24:	6818      	ldr	r0, [r3, #0]
 8000a26:	f107 010e 	add.w	r1, r7, #14
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f002 f959 	bl	8002ce4 <osMessageQueueGet>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d11f      	bne.n	8000a78 <StartStateController+0x70>
		{
			if(cmd != msg && cmd > 100)
 8000a38:	89fa      	ldrh	r2, [r7, #14]
 8000a3a:	89bb      	ldrh	r3, [r7, #12]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d012      	beq.n	8000a66 <StartStateController+0x5e>
 8000a40:	89fb      	ldrh	r3, [r7, #14]
 8000a42:	2b64      	cmp	r3, #100	; 0x64
 8000a44:	d90f      	bls.n	8000a66 <StartStateController+0x5e>
			{
				if(cmd == 101)
 8000a46:	89fb      	ldrh	r3, [r7, #14]
 8000a48:	2b65      	cmp	r3, #101	; 0x65
 8000a4a:	d103      	bne.n	8000a54 <StartStateController+0x4c>
				{
					state = 'x';
 8000a4c:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <StartStateController+0xb8>)
 8000a4e:	2278      	movs	r2, #120	; 0x78
 8000a50:	701a      	strb	r2, [r3, #0]
 8000a52:	e005      	b.n	8000a60 <StartStateController+0x58>
				}
				else if(cmd == 102)
 8000a54:	89fb      	ldrh	r3, [r7, #14]
 8000a56:	2b66      	cmp	r3, #102	; 0x66
 8000a58:	d102      	bne.n	8000a60 <StartStateController+0x58>
				{
					state = 'a';
 8000a5a:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <StartStateController+0xb8>)
 8000a5c:	2261      	movs	r2, #97	; 0x61
 8000a5e:	701a      	strb	r2, [r3, #0]
				}
				msg = cmd;
 8000a60:	89fb      	ldrh	r3, [r7, #14]
 8000a62:	81bb      	strh	r3, [r7, #12]
 8000a64:	e008      	b.n	8000a78 <StartStateController+0x70>
			}
			else if(cmd != msg && cmd > 0)
 8000a66:	89fa      	ldrh	r2, [r7, #14]
 8000a68:	89bb      	ldrh	r3, [r7, #12]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d004      	beq.n	8000a78 <StartStateController+0x70>
 8000a6e:	89fb      	ldrh	r3, [r7, #14]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <StartStateController+0x70>
			{
				speedFactor = cmd;
 8000a74:	89fb      	ldrh	r3, [r7, #14]
 8000a76:	617b      	str	r3, [r7, #20]
			}
		}

		if(osMessageQueuePut(Message_QueueHandle, &msg, 1U, 0U)!= osOK)
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <StartStateController+0xbc>)
 8000a7a:	6818      	ldr	r0, [r3, #0]
 8000a7c:	f107 010c 	add.w	r1, r7, #12
 8000a80:	2300      	movs	r3, #0
 8000a82:	2201      	movs	r2, #1
 8000a84:	f002 f8ba 	bl	8002bfc <osMessageQueuePut>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <StartStateController+0x8a>
		{
			Error_Handler();
 8000a8e:	f000 f9d3 	bl	8000e38 <Error_Handler>
		}
		period = periodState(state, speedFactor);
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <StartStateController+0xb8>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	6979      	ldr	r1, [r7, #20]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff fddb 	bl	8000654 <periodState>
 8000a9e:	6138      	str	r0, [r7, #16]
		state = lightState(state);
 8000aa0:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <StartStateController+0xb8>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fbc3 	bl	8000230 <lightState>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	461a      	mov	r2, r3
 8000aae:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <StartStateController+0xb8>)
 8000ab0:	701a      	strb	r2, [r3, #0]



		osDelay(period);
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f001 ffed 	bl	8002a94 <osDelay>
		if(osMessageQueueGet(Command_QueueHandle, &cmd, NULL, 0U) == osOK)
 8000aba:	e7b2      	b.n	8000a22 <StartStateController+0x1a>
 8000abc:	20001bf0 	.word	0x20001bf0
 8000ac0:	20000000 	.word	0x20000000
 8000ac4:	20001b3c 	.word	0x20001b3c

08000ac8 <StartRX_CLI>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRX_CLI */
void StartRX_CLI(void *argument)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b090      	sub	sp, #64	; 0x40
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRX_CLI */
	uint16_t cmd = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	867b      	strh	r3, [r7, #50]	; 0x32
	char* arg;
	uint8_t temp[40];
  /* Infinite loop */
	for(;;)
	{
		if(HAL_UART_Receive(&huart3, cliBufferRX, 1, 300) == HAL_OK)
 8000ad4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000ad8:	2201      	movs	r2, #1
 8000ada:	4994      	ldr	r1, [pc, #592]	; (8000d2c <StartRX_CLI+0x264>)
 8000adc:	4894      	ldr	r0, [pc, #592]	; (8000d30 <StartRX_CLI+0x268>)
 8000ade:	f001 fd52 	bl	8002586 <HAL_UART_Receive>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d1f5      	bne.n	8000ad4 <StartRX_CLI+0xc>
		{
			printString(RETURN_CURS);
 8000ae8:	4b92      	ldr	r3, [pc, #584]	; (8000d34 <StartRX_CLI+0x26c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fb67 	bl	80001c0 <printString>
			printString(SHOW_CURS);
 8000af2:	4b91      	ldr	r3, [pc, #580]	; (8000d38 <StartRX_CLI+0x270>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff fb62 	bl	80001c0 <printString>

			copyCharTo((char *)cliBufferRX, (char *)save, j);
 8000afc:	4b8f      	ldr	r3, [pc, #572]	; (8000d3c <StartRX_CLI+0x274>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	461a      	mov	r2, r3
 8000b02:	498f      	ldr	r1, [pc, #572]	; (8000d40 <StartRX_CLI+0x278>)
 8000b04:	4889      	ldr	r0, [pc, #548]	; (8000d2c <StartRX_CLI+0x264>)
 8000b06:	f7ff fb3d 	bl	8000184 <copyCharTo>
			printString(SAVE_CURS);
 8000b0a:	4b8e      	ldr	r3, [pc, #568]	; (8000d44 <StartRX_CLI+0x27c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff fb56 	bl	80001c0 <printString>
			//backspace incidence
			if(cliBufferRX[0] == '\b')
 8000b14:	4b85      	ldr	r3, [pc, #532]	; (8000d2c <StartRX_CLI+0x264>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b08      	cmp	r3, #8
 8000b1a:	d105      	bne.n	8000b28 <StartRX_CLI+0x60>
			{
				j--;
 8000b1c:	4b87      	ldr	r3, [pc, #540]	; (8000d3c <StartRX_CLI+0x274>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	3b01      	subs	r3, #1
 8000b22:	4a86      	ldr	r2, [pc, #536]	; (8000d3c <StartRX_CLI+0x274>)
 8000b24:	6013      	str	r3, [r2, #0]
 8000b26:	e004      	b.n	8000b32 <StartRX_CLI+0x6a>
			}
			else
			{
				j++;
 8000b28:	4b84      	ldr	r3, [pc, #528]	; (8000d3c <StartRX_CLI+0x274>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	4a83      	ldr	r2, [pc, #524]	; (8000d3c <StartRX_CLI+0x274>)
 8000b30:	6013      	str	r3, [r2, #0]
			}

			//when enter is hit execute the command
			if(isCompleteLine((char *)cliBufferRX))
 8000b32:	487e      	ldr	r0, [pc, #504]	; (8000d2c <StartRX_CLI+0x264>)
 8000b34:	f7ff fb16 	bl	8000164 <isCompleteLine>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d0ca      	beq.n	8000ad4 <StartRX_CLI+0xc>
			{
				printString("\r\n");
 8000b3e:	4882      	ldr	r0, [pc, #520]	; (8000d48 <StartRX_CLI+0x280>)
 8000b40:	f7ff fb3e 	bl	80001c0 <printString>
				save[j-1] = '\0';
 8000b44:	4b7d      	ldr	r3, [pc, #500]	; (8000d3c <StartRX_CLI+0x274>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	4a7d      	ldr	r2, [pc, #500]	; (8000d40 <StartRX_CLI+0x278>)
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	54d1      	strb	r1, [r2, r3]
				while(j < 20 && save[j] != '\0')
 8000b50:	e009      	b.n	8000b66 <StartRX_CLI+0x9e>
				{
					save[j] = '\0';
 8000b52:	4b7a      	ldr	r3, [pc, #488]	; (8000d3c <StartRX_CLI+0x274>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a7a      	ldr	r2, [pc, #488]	; (8000d40 <StartRX_CLI+0x278>)
 8000b58:	2100      	movs	r1, #0
 8000b5a:	54d1      	strb	r1, [r2, r3]
					j++;
 8000b5c:	4b77      	ldr	r3, [pc, #476]	; (8000d3c <StartRX_CLI+0x274>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	3301      	adds	r3, #1
 8000b62:	4a76      	ldr	r2, [pc, #472]	; (8000d3c <StartRX_CLI+0x274>)
 8000b64:	6013      	str	r3, [r2, #0]
				while(j < 20 && save[j] != '\0')
 8000b66:	4b75      	ldr	r3, [pc, #468]	; (8000d3c <StartRX_CLI+0x274>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2b13      	cmp	r3, #19
 8000b6c:	dc05      	bgt.n	8000b7a <StartRX_CLI+0xb2>
 8000b6e:	4b73      	ldr	r3, [pc, #460]	; (8000d3c <StartRX_CLI+0x274>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a73      	ldr	r2, [pc, #460]	; (8000d40 <StartRX_CLI+0x278>)
 8000b74:	5cd3      	ldrb	r3, [r2, r3]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d1eb      	bne.n	8000b52 <StartRX_CLI+0x8a>
				}

				strcpy((char *)temp, (const char *)save);
 8000b7a:	f107 0308 	add.w	r3, r7, #8
 8000b7e:	4970      	ldr	r1, [pc, #448]	; (8000d40 <StartRX_CLI+0x278>)
 8000b80:	4618      	mov	r0, r3
 8000b82:	f004 fd74 	bl	800566e <strcpy>
				arg = strtok((char *)save, " ");
 8000b86:	4971      	ldr	r1, [pc, #452]	; (8000d4c <StartRX_CLI+0x284>)
 8000b88:	486d      	ldr	r0, [pc, #436]	; (8000d40 <StartRX_CLI+0x278>)
 8000b8a:	f004 fd79 	bl	8005680 <strtok>
 8000b8e:	63b8      	str	r0, [r7, #56]	; 0x38
				cmdStr = arg;
 8000b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b92:	637b      	str	r3, [r7, #52]	; 0x34
				arg = strtok(NULL, " ");
 8000b94:	496d      	ldr	r1, [pc, #436]	; (8000d4c <StartRX_CLI+0x284>)
 8000b96:	2000      	movs	r0, #0
 8000b98:	f004 fd72 	bl	8005680 <strtok>
 8000b9c:	63b8      	str	r0, [r7, #56]	; 0x38

				if(arg == NULL && strcmp((char *)cmdStr, "help") == 0)
 8000b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d112      	bne.n	8000bca <StartRX_CLI+0x102>
 8000ba4:	496a      	ldr	r1, [pc, #424]	; (8000d50 <StartRX_CLI+0x288>)
 8000ba6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000ba8:	f7ff fad2 	bl	8000150 <strcmp>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d10b      	bne.n	8000bca <StartRX_CLI+0x102>
				{
					cmd = 102;
 8000bb2:	2366      	movs	r3, #102	; 0x66
 8000bb4:	867b      	strh	r3, [r7, #50]	; 0x32
//					printString("\nto Failsafe mode\r\n");
//					printString("\n2. \"mode scm\" switches controller\r");
//					printString("\nto Static Cycle mode\r\n");
//					printString("\n3. \"atm x\" enters accelerated test\r");
//					printString("\nmode with multiplication factor x\r\n");
					printString("1. \"mode fsm\" switches controller to Failsafe mode\r\n");
 8000bb6:	4867      	ldr	r0, [pc, #412]	; (8000d54 <StartRX_CLI+0x28c>)
 8000bb8:	f7ff fb02 	bl	80001c0 <printString>
					printString("\n2. \"mode scm\" switches controller to Static Cycle mode\r\n");
 8000bbc:	4866      	ldr	r0, [pc, #408]	; (8000d58 <StartRX_CLI+0x290>)
 8000bbe:	f7ff faff 	bl	80001c0 <printString>
					printString("\n3. \"atm x\" enters accelerated test mode with multiplication factor x, when 0 < x < 101\r\n");
 8000bc2:	4866      	ldr	r0, [pc, #408]	; (8000d5c <StartRX_CLI+0x294>)
 8000bc4:	f7ff fafc 	bl	80001c0 <printString>
 8000bc8:	e093      	b.n	8000cf2 <StartRX_CLI+0x22a>
				}
				else if(cmdStr == NULL)
 8000bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d102      	bne.n	8000bd6 <StartRX_CLI+0x10e>
				{
					cmd = 103;
 8000bd0:	2367      	movs	r3, #103	; 0x67
 8000bd2:	867b      	strh	r3, [r7, #50]	; 0x32
 8000bd4:	e08d      	b.n	8000cf2 <StartRX_CLI+0x22a>
				}
				else if(strtok(NULL, " ") == NULL)
 8000bd6:	495d      	ldr	r1, [pc, #372]	; (8000d4c <StartRX_CLI+0x284>)
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f004 fd51 	bl	8005680 <strtok>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d179      	bne.n	8000cd8 <StartRX_CLI+0x210>
				{
					if(atoi(arg) >= 1 && atoi(arg) <= 100 && strcmp((char *)cmdStr, "atm") == 0)
 8000be4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000be6:	f004 fd01 	bl	80055ec <atoi>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	dd23      	ble.n	8000c38 <StartRX_CLI+0x170>
 8000bf0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000bf2:	f004 fcfb 	bl	80055ec <atoi>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b64      	cmp	r3, #100	; 0x64
 8000bfa:	dc1d      	bgt.n	8000c38 <StartRX_CLI+0x170>
 8000bfc:	4958      	ldr	r1, [pc, #352]	; (8000d60 <StartRX_CLI+0x298>)
 8000bfe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000c00:	f7ff faa6 	bl	8000150 <strcmp>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d116      	bne.n	8000c38 <StartRX_CLI+0x170>
					{
						cmd = (uint16_t)atoi(arg);
 8000c0a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000c0c:	f004 fcee 	bl	80055ec <atoi>
 8000c10:	4603      	mov	r3, r0
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	867b      	strh	r3, [r7, #50]	; 0x32
						printString("Entering accelerated test mode.\r\n");
 8000c16:	4853      	ldr	r0, [pc, #332]	; (8000d64 <StartRX_CLI+0x29c>)
 8000c18:	f7ff fad2 	bl	80001c0 <printString>
						if(osMessageQueuePut(Command_QueueHandle, &cmd, 1U, 0U)!= osOK)
 8000c1c:	4b52      	ldr	r3, [pc, #328]	; (8000d68 <StartRX_CLI+0x2a0>)
 8000c1e:	6818      	ldr	r0, [r3, #0]
 8000c20:	f107 0132 	add.w	r1, r7, #50	; 0x32
 8000c24:	2300      	movs	r3, #0
 8000c26:	2201      	movs	r2, #1
 8000c28:	f001 ffe8 	bl	8002bfc <osMessageQueuePut>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d05f      	beq.n	8000cf2 <StartRX_CLI+0x22a>
						{
							Error_Handler();
 8000c32:	f000 f901 	bl	8000e38 <Error_Handler>
						if(osMessageQueuePut(Command_QueueHandle, &cmd, 1U, 0U)!= osOK)
 8000c36:	e05c      	b.n	8000cf2 <StartRX_CLI+0x22a>
						}
					}
					else if(strcmp((char *)cmdStr, "mode") == 0 && strcmp((char *)arg, "fsm") == 0)
 8000c38:	494c      	ldr	r1, [pc, #304]	; (8000d6c <StartRX_CLI+0x2a4>)
 8000c3a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000c3c:	f7ff fa88 	bl	8000150 <strcmp>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d119      	bne.n	8000c7a <StartRX_CLI+0x1b2>
 8000c46:	494a      	ldr	r1, [pc, #296]	; (8000d70 <StartRX_CLI+0x2a8>)
 8000c48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000c4a:	f7ff fa81 	bl	8000150 <strcmp>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d112      	bne.n	8000c7a <StartRX_CLI+0x1b2>
					{
						cmd = 101;
 8000c54:	2365      	movs	r3, #101	; 0x65
 8000c56:	867b      	strh	r3, [r7, #50]	; 0x32
						printString("Switching to Failsafe mode.\r\n");
 8000c58:	4846      	ldr	r0, [pc, #280]	; (8000d74 <StartRX_CLI+0x2ac>)
 8000c5a:	f7ff fab1 	bl	80001c0 <printString>
						if(osMessageQueuePut(Command_QueueHandle, &cmd, 1U, 0U)!= osOK)
 8000c5e:	4b42      	ldr	r3, [pc, #264]	; (8000d68 <StartRX_CLI+0x2a0>)
 8000c60:	6818      	ldr	r0, [r3, #0]
 8000c62:	f107 0132 	add.w	r1, r7, #50	; 0x32
 8000c66:	2300      	movs	r3, #0
 8000c68:	2201      	movs	r2, #1
 8000c6a:	f001 ffc7 	bl	8002bfc <osMessageQueuePut>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d03e      	beq.n	8000cf2 <StartRX_CLI+0x22a>
						{
							Error_Handler();
 8000c74:	f000 f8e0 	bl	8000e38 <Error_Handler>
						if(osMessageQueuePut(Command_QueueHandle, &cmd, 1U, 0U)!= osOK)
 8000c78:	e03b      	b.n	8000cf2 <StartRX_CLI+0x22a>
						}
					}
					else if(strcmp((char *)cmdStr, "mode") == 0 && strcmp((char *)arg, "scm") == 0)
 8000c7a:	493c      	ldr	r1, [pc, #240]	; (8000d6c <StartRX_CLI+0x2a4>)
 8000c7c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000c7e:	f7ff fa67 	bl	8000150 <strcmp>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d119      	bne.n	8000cbc <StartRX_CLI+0x1f4>
 8000c88:	493b      	ldr	r1, [pc, #236]	; (8000d78 <StartRX_CLI+0x2b0>)
 8000c8a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000c8c:	f7ff fa60 	bl	8000150 <strcmp>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d112      	bne.n	8000cbc <StartRX_CLI+0x1f4>
					{
						cmd = 102;
 8000c96:	2366      	movs	r3, #102	; 0x66
 8000c98:	867b      	strh	r3, [r7, #50]	; 0x32
						printString("Switching to Static Cycle mode.\r\n");
 8000c9a:	4838      	ldr	r0, [pc, #224]	; (8000d7c <StartRX_CLI+0x2b4>)
 8000c9c:	f7ff fa90 	bl	80001c0 <printString>
						if(osMessageQueuePut(Command_QueueHandle, &cmd, 1U, 0U)!= osOK)
 8000ca0:	4b31      	ldr	r3, [pc, #196]	; (8000d68 <StartRX_CLI+0x2a0>)
 8000ca2:	6818      	ldr	r0, [r3, #0]
 8000ca4:	f107 0132 	add.w	r1, r7, #50	; 0x32
 8000ca8:	2300      	movs	r3, #0
 8000caa:	2201      	movs	r2, #1
 8000cac:	f001 ffa6 	bl	8002bfc <osMessageQueuePut>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d01d      	beq.n	8000cf2 <StartRX_CLI+0x22a>
						{
							Error_Handler();
 8000cb6:	f000 f8bf 	bl	8000e38 <Error_Handler>
						if(osMessageQueuePut(Command_QueueHandle, &cmd, 1U, 0U)!= osOK)
 8000cba:	e01a      	b.n	8000cf2 <StartRX_CLI+0x22a>
						}
					}
					else
					{
						cmd = 103;
 8000cbc:	2367      	movs	r3, #103	; 0x67
 8000cbe:	867b      	strh	r3, [r7, #50]	; 0x32
						printString("Invalid command: ");
 8000cc0:	482f      	ldr	r0, [pc, #188]	; (8000d80 <StartRX_CLI+0x2b8>)
 8000cc2:	f7ff fa7d 	bl	80001c0 <printString>
						printString((char *)temp);
 8000cc6:	f107 0308 	add.w	r3, r7, #8
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fa78 	bl	80001c0 <printString>
						printString("\r\n");
 8000cd0:	481d      	ldr	r0, [pc, #116]	; (8000d48 <StartRX_CLI+0x280>)
 8000cd2:	f7ff fa75 	bl	80001c0 <printString>
 8000cd6:	e00c      	b.n	8000cf2 <StartRX_CLI+0x22a>
					}
				}
				else
				{
					cmd = 103;
 8000cd8:	2367      	movs	r3, #103	; 0x67
 8000cda:	867b      	strh	r3, [r7, #50]	; 0x32
					printString("Invalid command: ");
 8000cdc:	4828      	ldr	r0, [pc, #160]	; (8000d80 <StartRX_CLI+0x2b8>)
 8000cde:	f7ff fa6f 	bl	80001c0 <printString>
					printString((char *)temp);
 8000ce2:	f107 0308 	add.w	r3, r7, #8
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fa6a 	bl	80001c0 <printString>
					printString("\r\n");
 8000cec:	4816      	ldr	r0, [pc, #88]	; (8000d48 <StartRX_CLI+0x280>)
 8000cee:	f7ff fa67 	bl	80001c0 <printString>
//				if(osMessageQueuePut(Command_QueueHandle, &cmd, 1U, 0U)!= osOK)
//				{
//					Error_Handler();
//				}

				j = 0;
 8000cf2:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <StartRX_CLI+0x274>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < 20; i++)
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000cfc:	e007      	b.n	8000d0e <StartRX_CLI+0x246>
				{
					save[i] = '\0';
 8000cfe:	4a10      	ldr	r2, [pc, #64]	; (8000d40 <StartRX_CLI+0x278>)
 8000d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d02:	4413      	add	r3, r2
 8000d04:	2200      	movs	r2, #0
 8000d06:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 20; i++)
 8000d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d10:	2b13      	cmp	r3, #19
 8000d12:	ddf4      	ble.n	8000cfe <StartRX_CLI+0x236>
				}
				printString("\r\n~>$ ");
 8000d14:	481b      	ldr	r0, [pc, #108]	; (8000d84 <StartRX_CLI+0x2bc>)
 8000d16:	f7ff fa53 	bl	80001c0 <printString>

				printString(SAVE_CURS);
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <StartRX_CLI+0x27c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fa4e 	bl	80001c0 <printString>
				osDelay(10);
 8000d24:	200a      	movs	r0, #10
 8000d26:	f001 feb5 	bl	8002a94 <osDelay>
		if(HAL_UART_Receive(&huart3, cliBufferRX, 1, 300) == HAL_OK)
 8000d2a:	e6d3      	b.n	8000ad4 <StartRX_CLI+0xc>
 8000d2c:	20001c24 	.word	0x20001c24
 8000d30:	20001b4c 	.word	0x20001b4c
 8000d34:	20000024 	.word	0x20000024
 8000d38:	2000001c 	.word	0x2000001c
 8000d3c:	20000224 	.word	0x20000224
 8000d40:	20001bfc 	.word	0x20001bfc
 8000d44:	20000020 	.word	0x20000020
 8000d48:	08005a80 	.word	0x08005a80
 8000d4c:	08005a84 	.word	0x08005a84
 8000d50:	08005a88 	.word	0x08005a88
 8000d54:	08005a90 	.word	0x08005a90
 8000d58:	08005ac8 	.word	0x08005ac8
 8000d5c:	08005b04 	.word	0x08005b04
 8000d60:	08005b60 	.word	0x08005b60
 8000d64:	08005b64 	.word	0x08005b64
 8000d68:	20001bf0 	.word	0x20001bf0
 8000d6c:	08005b88 	.word	0x08005b88
 8000d70:	08005b90 	.word	0x08005b90
 8000d74:	08005b94 	.word	0x08005b94
 8000d78:	08005bb4 	.word	0x08005bb4
 8000d7c:	08005bb8 	.word	0x08005bb8
 8000d80:	08005bdc 	.word	0x08005bdc
 8000d84:	08005bf0 	.word	0x08005bf0

08000d88 <StartStatusUpdate>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStatusUpdate */
void StartStatusUpdate(void *argument)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStatusUpdate */
	uint16_t msg = 101;
 8000d90:	2365      	movs	r3, #101	; 0x65
 8000d92:	81bb      	strh	r3, [r7, #12]
	uint16_t mode = msg;
 8000d94:	89bb      	ldrh	r3, [r7, #12]
 8000d96:	81fb      	strh	r3, [r7, #14]
  /* Infinite loop */
	for(;;)
	{
		if(osMessageQueueGet(Message_QueueHandle, &msg, NULL, 0U) == osOK)
 8000d98:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <StartStatusUpdate+0x74>)
 8000d9a:	6818      	ldr	r0, [r3, #0]
 8000d9c:	f107 010c 	add.w	r1, r7, #12
 8000da0:	2300      	movs	r3, #0
 8000da2:	2200      	movs	r2, #0
 8000da4:	f001 ff9e 	bl	8002ce4 <osMessageQueueGet>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d121      	bne.n	8000df2 <StartStatusUpdate+0x6a>
		{
			if(msg != mode)
 8000dae:	89bb      	ldrh	r3, [r7, #12]
 8000db0:	89fa      	ldrh	r2, [r7, #14]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d01d      	beq.n	8000df2 <StartStatusUpdate+0x6a>
			{
				printString(HIDE_CURS);
 8000db6:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <StartStatusUpdate+0x78>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fa00 	bl	80001c0 <printString>
				printString(GO_TO_COUNT);
 8000dc0:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <StartStatusUpdate+0x7c>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff f9fb 	bl	80001c0 <printString>
				printString("                           ");
 8000dca:	480f      	ldr	r0, [pc, #60]	; (8000e08 <StartStatusUpdate+0x80>)
 8000dcc:	f7ff f9f8 	bl	80001c0 <printString>
				printString(GO_TO_COUNT);
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <StartStatusUpdate+0x7c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff f9f3 	bl	80001c0 <printString>
				if(msg == 102)
 8000dda:	89bb      	ldrh	r3, [r7, #12]
 8000ddc:	2b66      	cmp	r3, #102	; 0x66
 8000dde:	d103      	bne.n	8000de8 <StartStatusUpdate+0x60>
				{
					printString("Static cycle mode");
 8000de0:	480a      	ldr	r0, [pc, #40]	; (8000e0c <StartStatusUpdate+0x84>)
 8000de2:	f7ff f9ed 	bl	80001c0 <printString>
 8000de6:	e002      	b.n	8000dee <StartStatusUpdate+0x66>
				}
				else
				{
					printString("Failsafe mode");
 8000de8:	4809      	ldr	r0, [pc, #36]	; (8000e10 <StartStatusUpdate+0x88>)
 8000dea:	f7ff f9e9 	bl	80001c0 <printString>
				}
				mode = msg;
 8000dee:	89bb      	ldrh	r3, [r7, #12]
 8000df0:	81fb      	strh	r3, [r7, #14]
			}

		}

		osDelay(10);
 8000df2:	200a      	movs	r0, #10
 8000df4:	f001 fe4e 	bl	8002a94 <osDelay>
		if(osMessageQueueGet(Message_QueueHandle, &msg, NULL, 0U) == osOK)
 8000df8:	e7ce      	b.n	8000d98 <StartStatusUpdate+0x10>
 8000dfa:	bf00      	nop
 8000dfc:	20001b3c 	.word	0x20001b3c
 8000e00:	20000018 	.word	0x20000018
 8000e04:	20000014 	.word	0x20000014
 8000e08:	08005bf8 	.word	0x08005bf8
 8000e0c:	08005c14 	.word	0x08005c14
 8000e10:	08005c28 	.word	0x08005c28

08000e14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d101      	bne.n	8000e2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e26:	f000 f98f 	bl	8001148 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40000800 	.word	0x40000800

08000e38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr

08000e44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <HAL_MspInit+0x5c>)
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	4a14      	ldr	r2, [pc, #80]	; (8000ea0 <HAL_MspInit+0x5c>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6193      	str	r3, [r2, #24]
 8000e56:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <HAL_MspInit+0x5c>)
 8000e58:	699b      	ldr	r3, [r3, #24]
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e62:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <HAL_MspInit+0x5c>)
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	4a0e      	ldr	r2, [pc, #56]	; (8000ea0 <HAL_MspInit+0x5c>)
 8000e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e6c:	61d3      	str	r3, [r2, #28]
 8000e6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <HAL_MspInit+0x5c>)
 8000e70:	69db      	ldr	r3, [r3, #28]
 8000e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <HAL_MspInit+0x60>)
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <HAL_MspInit+0x60>)
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e96:	bf00      	nop
 8000e98:	3714      	adds	r7, #20
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	40010000 	.word	0x40010000

08000ea8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	; 0x28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a25      	ldr	r2, [pc, #148]	; (8000f58 <HAL_UART_MspInit+0xb0>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d143      	bne.n	8000f50 <HAL_UART_MspInit+0xa8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ec8:	4b24      	ldr	r3, [pc, #144]	; (8000f5c <HAL_UART_MspInit+0xb4>)
 8000eca:	69db      	ldr	r3, [r3, #28]
 8000ecc:	4a23      	ldr	r2, [pc, #140]	; (8000f5c <HAL_UART_MspInit+0xb4>)
 8000ece:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ed2:	61d3      	str	r3, [r2, #28]
 8000ed4:	4b21      	ldr	r3, [pc, #132]	; (8000f5c <HAL_UART_MspInit+0xb4>)
 8000ed6:	69db      	ldr	r3, [r3, #28]
 8000ed8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee0:	4b1e      	ldr	r3, [pc, #120]	; (8000f5c <HAL_UART_MspInit+0xb4>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	4a1d      	ldr	r2, [pc, #116]	; (8000f5c <HAL_UART_MspInit+0xb4>)
 8000ee6:	f043 0310 	orr.w	r3, r3, #16
 8000eea:	6193      	str	r3, [r2, #24]
 8000eec:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <HAL_UART_MspInit+0xb4>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	f003 0310 	and.w	r3, r3, #16
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ef8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	2302      	movs	r3, #2
 8000f00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f02:	2303      	movs	r3, #3
 8000f04:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4814      	ldr	r0, [pc, #80]	; (8000f60 <HAL_UART_MspInit+0xb8>)
 8000f0e:	f000 fa39 	bl	8001384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	4619      	mov	r1, r3
 8000f26:	480e      	ldr	r0, [pc, #56]	; (8000f60 <HAL_UART_MspInit+0xb8>)
 8000f28:	f000 fa2c 	bl	8001384 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <HAL_UART_MspInit+0xbc>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
 8000f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f34:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
 8000f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
 8000f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f44:	f043 0310 	orr.w	r3, r3, #16
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
 8000f4a:	4a06      	ldr	r2, [pc, #24]	; (8000f64 <HAL_UART_MspInit+0xbc>)
 8000f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f50:	bf00      	nop
 8000f52:	3728      	adds	r7, #40	; 0x28
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40004800 	.word	0x40004800
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	40011000 	.word	0x40011000
 8000f64:	40010000 	.word	0x40010000

08000f68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08c      	sub	sp, #48	; 0x30
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	6879      	ldr	r1, [r7, #4]
 8000f7c:	201e      	movs	r0, #30
 8000f7e:	f000 f9d6 	bl	800132e <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f82:	201e      	movs	r0, #30
 8000f84:	f000 f9ef 	bl	8001366 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000f88:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <HAL_InitTick+0x9c>)
 8000f8a:	69db      	ldr	r3, [r3, #28]
 8000f8c:	4a1d      	ldr	r2, [pc, #116]	; (8001004 <HAL_InitTick+0x9c>)
 8000f8e:	f043 0304 	orr.w	r3, r3, #4
 8000f92:	61d3      	str	r3, [r2, #28]
 8000f94:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <HAL_InitTick+0x9c>)
 8000f96:	69db      	ldr	r3, [r3, #28]
 8000f98:	f003 0304 	and.w	r3, r3, #4
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fa0:	f107 0210 	add.w	r2, r7, #16
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	4611      	mov	r1, r2
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 ff74 	bl	8001e98 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000fb0:	f000 ff4a 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
 8000fb4:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fb8:	4a13      	ldr	r2, [pc, #76]	; (8001008 <HAL_InitTick+0xa0>)
 8000fba:	fba2 2303 	umull	r2, r3, r2, r3
 8000fbe:	0c9b      	lsrs	r3, r3, #18
 8000fc0:	3b01      	subs	r3, #1
 8000fc2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <HAL_InitTick+0xa4>)
 8000fc6:	4a12      	ldr	r2, [pc, #72]	; (8001010 <HAL_InitTick+0xa8>)
 8000fc8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8000fca:	4b10      	ldr	r3, [pc, #64]	; (800100c <HAL_InitTick+0xa4>)
 8000fcc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fd0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000fd2:	4a0e      	ldr	r2, [pc, #56]	; (800100c <HAL_InitTick+0xa4>)
 8000fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fd6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <HAL_InitTick+0xa4>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fde:	4b0b      	ldr	r3, [pc, #44]	; (800100c <HAL_InitTick+0xa4>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000fe4:	4809      	ldr	r0, [pc, #36]	; (800100c <HAL_InitTick+0xa4>)
 8000fe6:	f000 ffa5 	bl	8001f34 <HAL_TIM_Base_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d104      	bne.n	8000ffa <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000ff0:	4806      	ldr	r0, [pc, #24]	; (800100c <HAL_InitTick+0xa4>)
 8000ff2:	f000 fff7 	bl	8001fe4 <HAL_TIM_Base_Start_IT>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	e000      	b.n	8000ffc <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3730      	adds	r7, #48	; 0x30
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40021000 	.word	0x40021000
 8001008:	431bde83 	.word	0x431bde83
 800100c:	20001c34 	.word	0x20001c34
 8001010:	40000800 	.word	0x40000800

08001014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr

08001020 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001024:	e7fe      	b.n	8001024 <HardFault_Handler+0x4>

08001026 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800102a:	e7fe      	b.n	800102a <MemManage_Handler+0x4>

0800102c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <BusFault_Handler+0x4>

08001032 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001036:	e7fe      	b.n	8001036 <UsageFault_Handler+0x4>

08001038 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr

08001044 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001048:	4802      	ldr	r0, [pc, #8]	; (8001054 <TIM4_IRQHandler+0x10>)
 800104a:	f001 f81d 	bl	8002088 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20001c34 	.word	0x20001c34

08001058 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001060:	4a14      	ldr	r2, [pc, #80]	; (80010b4 <_sbrk+0x5c>)
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <_sbrk+0x60>)
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800106c:	4b13      	ldr	r3, [pc, #76]	; (80010bc <_sbrk+0x64>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d102      	bne.n	800107a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <_sbrk+0x64>)
 8001076:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <_sbrk+0x68>)
 8001078:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800107a:	4b10      	ldr	r3, [pc, #64]	; (80010bc <_sbrk+0x64>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	429a      	cmp	r2, r3
 8001086:	d207      	bcs.n	8001098 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001088:	f004 fab4 	bl	80055f4 <__errno>
 800108c:	4602      	mov	r2, r0
 800108e:	230c      	movs	r3, #12
 8001090:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001092:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001096:	e009      	b.n	80010ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <_sbrk+0x64>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800109e:	4b07      	ldr	r3, [pc, #28]	; (80010bc <_sbrk+0x64>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	4a05      	ldr	r2, [pc, #20]	; (80010bc <_sbrk+0x64>)
 80010a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010aa:	68fb      	ldr	r3, [r7, #12]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20005000 	.word	0x20005000
 80010b8:	00000400 	.word	0x00000400
 80010bc:	20000228 	.word	0x20000228
 80010c0:	20001cc8 	.word	0x20001cc8

080010c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr

080010d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80010d0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80010d2:	e003      	b.n	80010dc <LoopCopyDataInit>

080010d4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80010d4:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80010d6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80010d8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80010da:	3104      	adds	r1, #4

080010dc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80010dc:	480a      	ldr	r0, [pc, #40]	; (8001108 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80010de:	4b0b      	ldr	r3, [pc, #44]	; (800110c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80010e0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80010e2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80010e4:	d3f6      	bcc.n	80010d4 <CopyDataInit>
  ldr r2, =_sbss
 80010e6:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80010e8:	e002      	b.n	80010f0 <LoopFillZerobss>

080010ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  str r3, [r2], #4
 80010ec:	f842 3b04 	str.w	r3, [r2], #4

080010f0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80010f2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80010f4:	d3f9      	bcc.n	80010ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010f6:	f7ff ffe5 	bl	80010c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010fa:	f004 fa81 	bl	8005600 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010fe:	f7ff fb1b 	bl	8000738 <main>
  bx lr
 8001102:	4770      	bx	lr
  ldr r3, =_sidata
 8001104:	08005e2c 	.word	0x08005e2c
  ldr r0, =_sdata
 8001108:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800110c:	20000208 	.word	0x20000208
  ldr r2, =_sbss
 8001110:	20000208 	.word	0x20000208
  ldr r3, = _ebss
 8001114:	20001cc4 	.word	0x20001cc4

08001118 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001118:	e7fe      	b.n	8001118 <ADC1_2_IRQHandler>
	...

0800111c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <HAL_Init+0x28>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a07      	ldr	r2, [pc, #28]	; (8001144 <HAL_Init+0x28>)
 8001126:	f043 0310 	orr.w	r3, r3, #16
 800112a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800112c:	2003      	movs	r0, #3
 800112e:	f000 f8f3 	bl	8001318 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001132:	2000      	movs	r0, #0
 8001134:	f7ff ff18 	bl	8000f68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001138:	f7ff fe84 	bl	8000e44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40022000 	.word	0x40022000

08001148 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <HAL_IncTick+0x1c>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	461a      	mov	r2, r3
 8001152:	4b05      	ldr	r3, [pc, #20]	; (8001168 <HAL_IncTick+0x20>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4413      	add	r3, r2
 8001158:	4a03      	ldr	r2, [pc, #12]	; (8001168 <HAL_IncTick+0x20>)
 800115a:	6013      	str	r3, [r2, #0]
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr
 8001164:	20000030 	.word	0x20000030
 8001168:	20001c7c 	.word	0x20001c7c

0800116c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return uwTick;
 8001170:	4b02      	ldr	r3, [pc, #8]	; (800117c <HAL_GetTick+0x10>)
 8001172:	681b      	ldr	r3, [r3, #0]
}
 8001174:	4618      	mov	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr
 800117c:	20001c7c 	.word	0x20001c7c

08001180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001188:	f7ff fff0 	bl	800116c <HAL_GetTick>
 800118c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001198:	d005      	beq.n	80011a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <HAL_Delay+0x40>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	461a      	mov	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4413      	add	r3, r2
 80011a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011a6:	bf00      	nop
 80011a8:	f7ff ffe0 	bl	800116c <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d8f7      	bhi.n	80011a8 <HAL_Delay+0x28>
  {
  }
}
 80011b8:	bf00      	nop
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000030 	.word	0x20000030

080011c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <__NVIC_SetPriorityGrouping+0x44>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011e0:	4013      	ands	r3, r2
 80011e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011f6:	4a04      	ldr	r2, [pc, #16]	; (8001208 <__NVIC_SetPriorityGrouping+0x44>)
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	60d3      	str	r3, [r2, #12]
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001210:	4b04      	ldr	r3, [pc, #16]	; (8001224 <__NVIC_GetPriorityGrouping+0x18>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	0a1b      	lsrs	r3, r3, #8
 8001216:	f003 0307 	and.w	r3, r3, #7
}
 800121a:	4618      	mov	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	bc80      	pop	{r7}
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	2b00      	cmp	r3, #0
 8001238:	db0b      	blt.n	8001252 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	f003 021f 	and.w	r2, r3, #31
 8001240:	4906      	ldr	r1, [pc, #24]	; (800125c <__NVIC_EnableIRQ+0x34>)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	095b      	lsrs	r3, r3, #5
 8001248:	2001      	movs	r0, #1
 800124a:	fa00 f202 	lsl.w	r2, r0, r2
 800124e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr
 800125c:	e000e100 	.word	0xe000e100

08001260 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	6039      	str	r1, [r7, #0]
 800126a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001270:	2b00      	cmp	r3, #0
 8001272:	db0a      	blt.n	800128a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	b2da      	uxtb	r2, r3
 8001278:	490c      	ldr	r1, [pc, #48]	; (80012ac <__NVIC_SetPriority+0x4c>)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	0112      	lsls	r2, r2, #4
 8001280:	b2d2      	uxtb	r2, r2
 8001282:	440b      	add	r3, r1
 8001284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001288:	e00a      	b.n	80012a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4908      	ldr	r1, [pc, #32]	; (80012b0 <__NVIC_SetPriority+0x50>)
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	f003 030f 	and.w	r3, r3, #15
 8001296:	3b04      	subs	r3, #4
 8001298:	0112      	lsls	r2, r2, #4
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	440b      	add	r3, r1
 800129e:	761a      	strb	r2, [r3, #24]
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000e100 	.word	0xe000e100
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b089      	sub	sp, #36	; 0x24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	f1c3 0307 	rsb	r3, r3, #7
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	bf28      	it	cs
 80012d2:	2304      	movcs	r3, #4
 80012d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3304      	adds	r3, #4
 80012da:	2b06      	cmp	r3, #6
 80012dc:	d902      	bls.n	80012e4 <NVIC_EncodePriority+0x30>
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3b03      	subs	r3, #3
 80012e2:	e000      	b.n	80012e6 <NVIC_EncodePriority+0x32>
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43da      	mvns	r2, r3
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	401a      	ands	r2, r3
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	fa01 f303 	lsl.w	r3, r1, r3
 8001306:	43d9      	mvns	r1, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	4313      	orrs	r3, r2
         );
}
 800130e:	4618      	mov	r0, r3
 8001310:	3724      	adds	r7, #36	; 0x24
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr

08001318 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff ff4f 	bl	80011c4 <__NVIC_SetPriorityGrouping>
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800132e:	b580      	push	{r7, lr}
 8001330:	b086      	sub	sp, #24
 8001332:	af00      	add	r7, sp, #0
 8001334:	4603      	mov	r3, r0
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	607a      	str	r2, [r7, #4]
 800133a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001340:	f7ff ff64 	bl	800120c <__NVIC_GetPriorityGrouping>
 8001344:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	68b9      	ldr	r1, [r7, #8]
 800134a:	6978      	ldr	r0, [r7, #20]
 800134c:	f7ff ffb2 	bl	80012b4 <NVIC_EncodePriority>
 8001350:	4602      	mov	r2, r0
 8001352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001356:	4611      	mov	r1, r2
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff81 	bl	8001260 <__NVIC_SetPriority>
}
 800135e:	bf00      	nop
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	4603      	mov	r3, r0
 800136e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff57 	bl	8001228 <__NVIC_EnableIRQ>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001384:	b480      	push	{r7}
 8001386:	b08b      	sub	sp, #44	; 0x2c
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800138e:	2300      	movs	r3, #0
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001392:	2300      	movs	r3, #0
 8001394:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001396:	e127      	b.n	80015e8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001398:	2201      	movs	r2, #1
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	69fa      	ldr	r2, [r7, #28]
 80013a8:	4013      	ands	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	f040 8116 	bne.w	80015e2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b12      	cmp	r3, #18
 80013bc:	d034      	beq.n	8001428 <HAL_GPIO_Init+0xa4>
 80013be:	2b12      	cmp	r3, #18
 80013c0:	d80d      	bhi.n	80013de <HAL_GPIO_Init+0x5a>
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d02b      	beq.n	800141e <HAL_GPIO_Init+0x9a>
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d804      	bhi.n	80013d4 <HAL_GPIO_Init+0x50>
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d031      	beq.n	8001432 <HAL_GPIO_Init+0xae>
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d01c      	beq.n	800140c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013d2:	e048      	b.n	8001466 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d043      	beq.n	8001460 <HAL_GPIO_Init+0xdc>
 80013d8:	2b11      	cmp	r3, #17
 80013da:	d01b      	beq.n	8001414 <HAL_GPIO_Init+0x90>
          break;
 80013dc:	e043      	b.n	8001466 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80013de:	4a89      	ldr	r2, [pc, #548]	; (8001604 <HAL_GPIO_Init+0x280>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d026      	beq.n	8001432 <HAL_GPIO_Init+0xae>
 80013e4:	4a87      	ldr	r2, [pc, #540]	; (8001604 <HAL_GPIO_Init+0x280>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d806      	bhi.n	80013f8 <HAL_GPIO_Init+0x74>
 80013ea:	4a87      	ldr	r2, [pc, #540]	; (8001608 <HAL_GPIO_Init+0x284>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d020      	beq.n	8001432 <HAL_GPIO_Init+0xae>
 80013f0:	4a86      	ldr	r2, [pc, #536]	; (800160c <HAL_GPIO_Init+0x288>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d01d      	beq.n	8001432 <HAL_GPIO_Init+0xae>
          break;
 80013f6:	e036      	b.n	8001466 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80013f8:	4a85      	ldr	r2, [pc, #532]	; (8001610 <HAL_GPIO_Init+0x28c>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d019      	beq.n	8001432 <HAL_GPIO_Init+0xae>
 80013fe:	4a85      	ldr	r2, [pc, #532]	; (8001614 <HAL_GPIO_Init+0x290>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d016      	beq.n	8001432 <HAL_GPIO_Init+0xae>
 8001404:	4a84      	ldr	r2, [pc, #528]	; (8001618 <HAL_GPIO_Init+0x294>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d013      	beq.n	8001432 <HAL_GPIO_Init+0xae>
          break;
 800140a:	e02c      	b.n	8001466 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	623b      	str	r3, [r7, #32]
          break;
 8001412:	e028      	b.n	8001466 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	3304      	adds	r3, #4
 800141a:	623b      	str	r3, [r7, #32]
          break;
 800141c:	e023      	b.n	8001466 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	3308      	adds	r3, #8
 8001424:	623b      	str	r3, [r7, #32]
          break;
 8001426:	e01e      	b.n	8001466 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	330c      	adds	r3, #12
 800142e:	623b      	str	r3, [r7, #32]
          break;
 8001430:	e019      	b.n	8001466 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d102      	bne.n	8001440 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800143a:	2304      	movs	r3, #4
 800143c:	623b      	str	r3, [r7, #32]
          break;
 800143e:	e012      	b.n	8001466 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d105      	bne.n	8001454 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001448:	2308      	movs	r3, #8
 800144a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	69fa      	ldr	r2, [r7, #28]
 8001450:	611a      	str	r2, [r3, #16]
          break;
 8001452:	e008      	b.n	8001466 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001454:	2308      	movs	r3, #8
 8001456:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	69fa      	ldr	r2, [r7, #28]
 800145c:	615a      	str	r2, [r3, #20]
          break;
 800145e:	e002      	b.n	8001466 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001460:	2300      	movs	r3, #0
 8001462:	623b      	str	r3, [r7, #32]
          break;
 8001464:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	2bff      	cmp	r3, #255	; 0xff
 800146a:	d801      	bhi.n	8001470 <HAL_GPIO_Init+0xec>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	e001      	b.n	8001474 <HAL_GPIO_Init+0xf0>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3304      	adds	r3, #4
 8001474:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	2bff      	cmp	r3, #255	; 0xff
 800147a:	d802      	bhi.n	8001482 <HAL_GPIO_Init+0xfe>
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	e002      	b.n	8001488 <HAL_GPIO_Init+0x104>
 8001482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001484:	3b08      	subs	r3, #8
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	210f      	movs	r1, #15
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	fa01 f303 	lsl.w	r3, r1, r3
 8001496:	43db      	mvns	r3, r3
 8001498:	401a      	ands	r2, r3
 800149a:	6a39      	ldr	r1, [r7, #32]
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	fa01 f303 	lsl.w	r3, r1, r3
 80014a2:	431a      	orrs	r2, r3
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f000 8096 	beq.w	80015e2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014b6:	4b59      	ldr	r3, [pc, #356]	; (800161c <HAL_GPIO_Init+0x298>)
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	4a58      	ldr	r2, [pc, #352]	; (800161c <HAL_GPIO_Init+0x298>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6193      	str	r3, [r2, #24]
 80014c2:	4b56      	ldr	r3, [pc, #344]	; (800161c <HAL_GPIO_Init+0x298>)
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014ce:	4a54      	ldr	r2, [pc, #336]	; (8001620 <HAL_GPIO_Init+0x29c>)
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	089b      	lsrs	r3, r3, #2
 80014d4:	3302      	adds	r3, #2
 80014d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014da:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014de:	f003 0303 	and.w	r3, r3, #3
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	220f      	movs	r2, #15
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43db      	mvns	r3, r3
 80014ec:	68fa      	ldr	r2, [r7, #12]
 80014ee:	4013      	ands	r3, r2
 80014f0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a4b      	ldr	r2, [pc, #300]	; (8001624 <HAL_GPIO_Init+0x2a0>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d013      	beq.n	8001522 <HAL_GPIO_Init+0x19e>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a4a      	ldr	r2, [pc, #296]	; (8001628 <HAL_GPIO_Init+0x2a4>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d00d      	beq.n	800151e <HAL_GPIO_Init+0x19a>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a49      	ldr	r2, [pc, #292]	; (800162c <HAL_GPIO_Init+0x2a8>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d007      	beq.n	800151a <HAL_GPIO_Init+0x196>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a48      	ldr	r2, [pc, #288]	; (8001630 <HAL_GPIO_Init+0x2ac>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d101      	bne.n	8001516 <HAL_GPIO_Init+0x192>
 8001512:	2303      	movs	r3, #3
 8001514:	e006      	b.n	8001524 <HAL_GPIO_Init+0x1a0>
 8001516:	2304      	movs	r3, #4
 8001518:	e004      	b.n	8001524 <HAL_GPIO_Init+0x1a0>
 800151a:	2302      	movs	r3, #2
 800151c:	e002      	b.n	8001524 <HAL_GPIO_Init+0x1a0>
 800151e:	2301      	movs	r3, #1
 8001520:	e000      	b.n	8001524 <HAL_GPIO_Init+0x1a0>
 8001522:	2300      	movs	r3, #0
 8001524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001526:	f002 0203 	and.w	r2, r2, #3
 800152a:	0092      	lsls	r2, r2, #2
 800152c:	4093      	lsls	r3, r2
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	4313      	orrs	r3, r2
 8001532:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001534:	493a      	ldr	r1, [pc, #232]	; (8001620 <HAL_GPIO_Init+0x29c>)
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	089b      	lsrs	r3, r3, #2
 800153a:	3302      	adds	r3, #2
 800153c:	68fa      	ldr	r2, [r7, #12]
 800153e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d006      	beq.n	800155c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800154e:	4b39      	ldr	r3, [pc, #228]	; (8001634 <HAL_GPIO_Init+0x2b0>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	4938      	ldr	r1, [pc, #224]	; (8001634 <HAL_GPIO_Init+0x2b0>)
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	4313      	orrs	r3, r2
 8001558:	600b      	str	r3, [r1, #0]
 800155a:	e006      	b.n	800156a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800155c:	4b35      	ldr	r3, [pc, #212]	; (8001634 <HAL_GPIO_Init+0x2b0>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	43db      	mvns	r3, r3
 8001564:	4933      	ldr	r1, [pc, #204]	; (8001634 <HAL_GPIO_Init+0x2b0>)
 8001566:	4013      	ands	r3, r2
 8001568:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d006      	beq.n	8001584 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001576:	4b2f      	ldr	r3, [pc, #188]	; (8001634 <HAL_GPIO_Init+0x2b0>)
 8001578:	685a      	ldr	r2, [r3, #4]
 800157a:	492e      	ldr	r1, [pc, #184]	; (8001634 <HAL_GPIO_Init+0x2b0>)
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	4313      	orrs	r3, r2
 8001580:	604b      	str	r3, [r1, #4]
 8001582:	e006      	b.n	8001592 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001584:	4b2b      	ldr	r3, [pc, #172]	; (8001634 <HAL_GPIO_Init+0x2b0>)
 8001586:	685a      	ldr	r2, [r3, #4]
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	43db      	mvns	r3, r3
 800158c:	4929      	ldr	r1, [pc, #164]	; (8001634 <HAL_GPIO_Init+0x2b0>)
 800158e:	4013      	ands	r3, r2
 8001590:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d006      	beq.n	80015ac <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800159e:	4b25      	ldr	r3, [pc, #148]	; (8001634 <HAL_GPIO_Init+0x2b0>)
 80015a0:	689a      	ldr	r2, [r3, #8]
 80015a2:	4924      	ldr	r1, [pc, #144]	; (8001634 <HAL_GPIO_Init+0x2b0>)
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	608b      	str	r3, [r1, #8]
 80015aa:	e006      	b.n	80015ba <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015ac:	4b21      	ldr	r3, [pc, #132]	; (8001634 <HAL_GPIO_Init+0x2b0>)
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	43db      	mvns	r3, r3
 80015b4:	491f      	ldr	r1, [pc, #124]	; (8001634 <HAL_GPIO_Init+0x2b0>)
 80015b6:	4013      	ands	r3, r2
 80015b8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d006      	beq.n	80015d4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015c6:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <HAL_GPIO_Init+0x2b0>)
 80015c8:	68da      	ldr	r2, [r3, #12]
 80015ca:	491a      	ldr	r1, [pc, #104]	; (8001634 <HAL_GPIO_Init+0x2b0>)
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	60cb      	str	r3, [r1, #12]
 80015d2:	e006      	b.n	80015e2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015d4:	4b17      	ldr	r3, [pc, #92]	; (8001634 <HAL_GPIO_Init+0x2b0>)
 80015d6:	68da      	ldr	r2, [r3, #12]
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	43db      	mvns	r3, r3
 80015dc:	4915      	ldr	r1, [pc, #84]	; (8001634 <HAL_GPIO_Init+0x2b0>)
 80015de:	4013      	ands	r3, r2
 80015e0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	3301      	adds	r3, #1
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ee:	fa22 f303 	lsr.w	r3, r2, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f47f aed0 	bne.w	8001398 <HAL_GPIO_Init+0x14>
  }
}
 80015f8:	bf00      	nop
 80015fa:	372c      	adds	r7, #44	; 0x2c
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	10210000 	.word	0x10210000
 8001608:	10110000 	.word	0x10110000
 800160c:	10120000 	.word	0x10120000
 8001610:	10310000 	.word	0x10310000
 8001614:	10320000 	.word	0x10320000
 8001618:	10220000 	.word	0x10220000
 800161c:	40021000 	.word	0x40021000
 8001620:	40010000 	.word	0x40010000
 8001624:	40010800 	.word	0x40010800
 8001628:	40010c00 	.word	0x40010c00
 800162c:	40011000 	.word	0x40011000
 8001630:	40011400 	.word	0x40011400
 8001634:	40010400 	.word	0x40010400

08001638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	460b      	mov	r3, r1
 8001642:	807b      	strh	r3, [r7, #2]
 8001644:	4613      	mov	r3, r2
 8001646:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001648:	787b      	ldrb	r3, [r7, #1]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800164e:	887a      	ldrh	r2, [r7, #2]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001654:	e003      	b.n	800165e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001656:	887b      	ldrh	r3, [r7, #2]
 8001658:	041a      	lsls	r2, r3, #16
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	611a      	str	r2, [r3, #16]
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr

08001668 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800167a:	887a      	ldrh	r2, [r7, #2]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4013      	ands	r3, r2
 8001680:	041a      	lsls	r2, r3, #16
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	43d9      	mvns	r1, r3
 8001686:	887b      	ldrh	r3, [r7, #2]
 8001688:	400b      	ands	r3, r1
 800168a:	431a      	orrs	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	611a      	str	r2, [r3, #16]
}
 8001690:	bf00      	nop
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr
	...

0800169c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d101      	bne.n	80016ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e26c      	b.n	8001b88 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f000 8087 	beq.w	80017ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016bc:	4b92      	ldr	r3, [pc, #584]	; (8001908 <HAL_RCC_OscConfig+0x26c>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 030c 	and.w	r3, r3, #12
 80016c4:	2b04      	cmp	r3, #4
 80016c6:	d00c      	beq.n	80016e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016c8:	4b8f      	ldr	r3, [pc, #572]	; (8001908 <HAL_RCC_OscConfig+0x26c>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 030c 	and.w	r3, r3, #12
 80016d0:	2b08      	cmp	r3, #8
 80016d2:	d112      	bne.n	80016fa <HAL_RCC_OscConfig+0x5e>
 80016d4:	4b8c      	ldr	r3, [pc, #560]	; (8001908 <HAL_RCC_OscConfig+0x26c>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016e0:	d10b      	bne.n	80016fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e2:	4b89      	ldr	r3, [pc, #548]	; (8001908 <HAL_RCC_OscConfig+0x26c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d06c      	beq.n	80017c8 <HAL_RCC_OscConfig+0x12c>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d168      	bne.n	80017c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e246      	b.n	8001b88 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001702:	d106      	bne.n	8001712 <HAL_RCC_OscConfig+0x76>
 8001704:	4b80      	ldr	r3, [pc, #512]	; (8001908 <HAL_RCC_OscConfig+0x26c>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a7f      	ldr	r2, [pc, #508]	; (8001908 <HAL_RCC_OscConfig+0x26c>)
 800170a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800170e:	6013      	str	r3, [r2, #0]
 8001710:	e02e      	b.n	8001770 <HAL_RCC_OscConfig+0xd4>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d10c      	bne.n	8001734 <HAL_RCC_OscConfig+0x98>
 800171a:	4b7b      	ldr	r3, [pc, #492]	; (8001908 <HAL_RCC_OscConfig+0x26c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a7a      	ldr	r2, [pc, #488]	; (8001908 <HAL_RCC_OscConfig+0x26c>)
 8001720:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	4b78      	ldr	r3, [pc, #480]	; (8001908 <HAL_RCC_OscConfig+0x26c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a77      	ldr	r2, [pc, #476]	; (8001908 <HAL_RCC_OscConfig+0x26c>)
 800172c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	e01d      	b.n	8001770 <HAL_RCC_OscConfig+0xd4>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800173c:	d10c      	bne.n	8001758 <HAL_RCC_OscConfig+0xbc>
 800173e:	4b72      	ldr	r3, [pc, #456]	; (8001908 <HAL_RCC_OscConfig+0x26c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a71      	ldr	r2, [pc, #452]	; (8001908 <HAL_RCC_OscConfig+0x26c>)
 8001744:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	4b6f      	ldr	r3, [pc, #444]	; (8001908 <HAL_RCC_OscConfig+0x26c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a6e      	ldr	r2, [pc, #440]	; (8001908 <HAL_RCC_OscConfig+0x26c>)
 8001750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	e00b      	b.n	8001770 <HAL_RCC_OscConfig+0xd4>
 8001758:	4b6b      	ldr	r3, [pc, #428]	; (8001908 <HAL_RCC_OscConfig+0x26c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a6a      	ldr	r2, [pc, #424]	; (8001908 <HAL_RCC_OscConfig+0x26c>)
 800175e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	4b68      	ldr	r3, [pc, #416]	; (8001908 <HAL_RCC_OscConfig+0x26c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a67      	ldr	r2, [pc, #412]	; (8001908 <HAL_RCC_OscConfig+0x26c>)
 800176a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800176e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d013      	beq.n	80017a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001778:	f7ff fcf8 	bl	800116c <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001780:	f7ff fcf4 	bl	800116c <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b64      	cmp	r3, #100	; 0x64
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e1fa      	b.n	8001b88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001792:	4b5d      	ldr	r3, [pc, #372]	; (8001908 <HAL_RCC_OscConfig+0x26c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d0f0      	beq.n	8001780 <HAL_RCC_OscConfig+0xe4>
 800179e:	e014      	b.n	80017ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a0:	f7ff fce4 	bl	800116c <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017a8:	f7ff fce0 	bl	800116c <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b64      	cmp	r3, #100	; 0x64
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e1e6      	b.n	8001b88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ba:	4b53      	ldr	r3, [pc, #332]	; (8001908 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1f0      	bne.n	80017a8 <HAL_RCC_OscConfig+0x10c>
 80017c6:	e000      	b.n	80017ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d063      	beq.n	800189e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017d6:	4b4c      	ldr	r3, [pc, #304]	; (8001908 <HAL_RCC_OscConfig+0x26c>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f003 030c 	and.w	r3, r3, #12
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d00b      	beq.n	80017fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017e2:	4b49      	ldr	r3, [pc, #292]	; (8001908 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f003 030c 	and.w	r3, r3, #12
 80017ea:	2b08      	cmp	r3, #8
 80017ec:	d11c      	bne.n	8001828 <HAL_RCC_OscConfig+0x18c>
 80017ee:	4b46      	ldr	r3, [pc, #280]	; (8001908 <HAL_RCC_OscConfig+0x26c>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d116      	bne.n	8001828 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fa:	4b43      	ldr	r3, [pc, #268]	; (8001908 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d005      	beq.n	8001812 <HAL_RCC_OscConfig+0x176>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d001      	beq.n	8001812 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e1ba      	b.n	8001b88 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001812:	4b3d      	ldr	r3, [pc, #244]	; (8001908 <HAL_RCC_OscConfig+0x26c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	4939      	ldr	r1, [pc, #228]	; (8001908 <HAL_RCC_OscConfig+0x26c>)
 8001822:	4313      	orrs	r3, r2
 8001824:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001826:	e03a      	b.n	800189e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d020      	beq.n	8001872 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001830:	4b36      	ldr	r3, [pc, #216]	; (800190c <HAL_RCC_OscConfig+0x270>)
 8001832:	2201      	movs	r2, #1
 8001834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001836:	f7ff fc99 	bl	800116c <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800183e:	f7ff fc95 	bl	800116c <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e19b      	b.n	8001b88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001850:	4b2d      	ldr	r3, [pc, #180]	; (8001908 <HAL_RCC_OscConfig+0x26c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0f0      	beq.n	800183e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800185c:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <HAL_RCC_OscConfig+0x26c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	695b      	ldr	r3, [r3, #20]
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	4927      	ldr	r1, [pc, #156]	; (8001908 <HAL_RCC_OscConfig+0x26c>)
 800186c:	4313      	orrs	r3, r2
 800186e:	600b      	str	r3, [r1, #0]
 8001870:	e015      	b.n	800189e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001872:	4b26      	ldr	r3, [pc, #152]	; (800190c <HAL_RCC_OscConfig+0x270>)
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001878:	f7ff fc78 	bl	800116c <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001880:	f7ff fc74 	bl	800116c <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e17a      	b.n	8001b88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001892:	4b1d      	ldr	r3, [pc, #116]	; (8001908 <HAL_RCC_OscConfig+0x26c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f0      	bne.n	8001880 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0308 	and.w	r3, r3, #8
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d03a      	beq.n	8001920 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d019      	beq.n	80018e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018b2:	4b17      	ldr	r3, [pc, #92]	; (8001910 <HAL_RCC_OscConfig+0x274>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b8:	f7ff fc58 	bl	800116c <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018c0:	f7ff fc54 	bl	800116c <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e15a      	b.n	8001b88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018d2:	4b0d      	ldr	r3, [pc, #52]	; (8001908 <HAL_RCC_OscConfig+0x26c>)
 80018d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0f0      	beq.n	80018c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018de:	2001      	movs	r0, #1
 80018e0:	f000 fb0a 	bl	8001ef8 <RCC_Delay>
 80018e4:	e01c      	b.n	8001920 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018e6:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <HAL_RCC_OscConfig+0x274>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ec:	f7ff fc3e 	bl	800116c <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f2:	e00f      	b.n	8001914 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018f4:	f7ff fc3a 	bl	800116c <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d908      	bls.n	8001914 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e140      	b.n	8001b88 <HAL_RCC_OscConfig+0x4ec>
 8001906:	bf00      	nop
 8001908:	40021000 	.word	0x40021000
 800190c:	42420000 	.word	0x42420000
 8001910:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001914:	4b9e      	ldr	r3, [pc, #632]	; (8001b90 <HAL_RCC_OscConfig+0x4f4>)
 8001916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1e9      	bne.n	80018f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	2b00      	cmp	r3, #0
 800192a:	f000 80a6 	beq.w	8001a7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800192e:	2300      	movs	r3, #0
 8001930:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001932:	4b97      	ldr	r3, [pc, #604]	; (8001b90 <HAL_RCC_OscConfig+0x4f4>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d10d      	bne.n	800195a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800193e:	4b94      	ldr	r3, [pc, #592]	; (8001b90 <HAL_RCC_OscConfig+0x4f4>)
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	4a93      	ldr	r2, [pc, #588]	; (8001b90 <HAL_RCC_OscConfig+0x4f4>)
 8001944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001948:	61d3      	str	r3, [r2, #28]
 800194a:	4b91      	ldr	r3, [pc, #580]	; (8001b90 <HAL_RCC_OscConfig+0x4f4>)
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001952:	60bb      	str	r3, [r7, #8]
 8001954:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001956:	2301      	movs	r3, #1
 8001958:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800195a:	4b8e      	ldr	r3, [pc, #568]	; (8001b94 <HAL_RCC_OscConfig+0x4f8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001962:	2b00      	cmp	r3, #0
 8001964:	d118      	bne.n	8001998 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001966:	4b8b      	ldr	r3, [pc, #556]	; (8001b94 <HAL_RCC_OscConfig+0x4f8>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a8a      	ldr	r2, [pc, #552]	; (8001b94 <HAL_RCC_OscConfig+0x4f8>)
 800196c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001970:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001972:	f7ff fbfb 	bl	800116c <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800197a:	f7ff fbf7 	bl	800116c <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b64      	cmp	r3, #100	; 0x64
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e0fd      	b.n	8001b88 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198c:	4b81      	ldr	r3, [pc, #516]	; (8001b94 <HAL_RCC_OscConfig+0x4f8>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0f0      	beq.n	800197a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d106      	bne.n	80019ae <HAL_RCC_OscConfig+0x312>
 80019a0:	4b7b      	ldr	r3, [pc, #492]	; (8001b90 <HAL_RCC_OscConfig+0x4f4>)
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	4a7a      	ldr	r2, [pc, #488]	; (8001b90 <HAL_RCC_OscConfig+0x4f4>)
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	6213      	str	r3, [r2, #32]
 80019ac:	e02d      	b.n	8001a0a <HAL_RCC_OscConfig+0x36e>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10c      	bne.n	80019d0 <HAL_RCC_OscConfig+0x334>
 80019b6:	4b76      	ldr	r3, [pc, #472]	; (8001b90 <HAL_RCC_OscConfig+0x4f4>)
 80019b8:	6a1b      	ldr	r3, [r3, #32]
 80019ba:	4a75      	ldr	r2, [pc, #468]	; (8001b90 <HAL_RCC_OscConfig+0x4f4>)
 80019bc:	f023 0301 	bic.w	r3, r3, #1
 80019c0:	6213      	str	r3, [r2, #32]
 80019c2:	4b73      	ldr	r3, [pc, #460]	; (8001b90 <HAL_RCC_OscConfig+0x4f4>)
 80019c4:	6a1b      	ldr	r3, [r3, #32]
 80019c6:	4a72      	ldr	r2, [pc, #456]	; (8001b90 <HAL_RCC_OscConfig+0x4f4>)
 80019c8:	f023 0304 	bic.w	r3, r3, #4
 80019cc:	6213      	str	r3, [r2, #32]
 80019ce:	e01c      	b.n	8001a0a <HAL_RCC_OscConfig+0x36e>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	2b05      	cmp	r3, #5
 80019d6:	d10c      	bne.n	80019f2 <HAL_RCC_OscConfig+0x356>
 80019d8:	4b6d      	ldr	r3, [pc, #436]	; (8001b90 <HAL_RCC_OscConfig+0x4f4>)
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	4a6c      	ldr	r2, [pc, #432]	; (8001b90 <HAL_RCC_OscConfig+0x4f4>)
 80019de:	f043 0304 	orr.w	r3, r3, #4
 80019e2:	6213      	str	r3, [r2, #32]
 80019e4:	4b6a      	ldr	r3, [pc, #424]	; (8001b90 <HAL_RCC_OscConfig+0x4f4>)
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	4a69      	ldr	r2, [pc, #420]	; (8001b90 <HAL_RCC_OscConfig+0x4f4>)
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	6213      	str	r3, [r2, #32]
 80019f0:	e00b      	b.n	8001a0a <HAL_RCC_OscConfig+0x36e>
 80019f2:	4b67      	ldr	r3, [pc, #412]	; (8001b90 <HAL_RCC_OscConfig+0x4f4>)
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	4a66      	ldr	r2, [pc, #408]	; (8001b90 <HAL_RCC_OscConfig+0x4f4>)
 80019f8:	f023 0301 	bic.w	r3, r3, #1
 80019fc:	6213      	str	r3, [r2, #32]
 80019fe:	4b64      	ldr	r3, [pc, #400]	; (8001b90 <HAL_RCC_OscConfig+0x4f4>)
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	4a63      	ldr	r2, [pc, #396]	; (8001b90 <HAL_RCC_OscConfig+0x4f4>)
 8001a04:	f023 0304 	bic.w	r3, r3, #4
 8001a08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d015      	beq.n	8001a3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a12:	f7ff fbab 	bl	800116c <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a18:	e00a      	b.n	8001a30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a1a:	f7ff fba7 	bl	800116c <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e0ab      	b.n	8001b88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a30:	4b57      	ldr	r3, [pc, #348]	; (8001b90 <HAL_RCC_OscConfig+0x4f4>)
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0ee      	beq.n	8001a1a <HAL_RCC_OscConfig+0x37e>
 8001a3c:	e014      	b.n	8001a68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a3e:	f7ff fb95 	bl	800116c <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a44:	e00a      	b.n	8001a5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a46:	f7ff fb91 	bl	800116c <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e095      	b.n	8001b88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a5c:	4b4c      	ldr	r3, [pc, #304]	; (8001b90 <HAL_RCC_OscConfig+0x4f4>)
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1ee      	bne.n	8001a46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a68:	7dfb      	ldrb	r3, [r7, #23]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d105      	bne.n	8001a7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a6e:	4b48      	ldr	r3, [pc, #288]	; (8001b90 <HAL_RCC_OscConfig+0x4f4>)
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	4a47      	ldr	r2, [pc, #284]	; (8001b90 <HAL_RCC_OscConfig+0x4f4>)
 8001a74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 8081 	beq.w	8001b86 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a84:	4b42      	ldr	r3, [pc, #264]	; (8001b90 <HAL_RCC_OscConfig+0x4f4>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 030c 	and.w	r3, r3, #12
 8001a8c:	2b08      	cmp	r3, #8
 8001a8e:	d061      	beq.n	8001b54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	69db      	ldr	r3, [r3, #28]
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d146      	bne.n	8001b26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a98:	4b3f      	ldr	r3, [pc, #252]	; (8001b98 <HAL_RCC_OscConfig+0x4fc>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9e:	f7ff fb65 	bl	800116c <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa6:	f7ff fb61 	bl	800116c <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e067      	b.n	8001b88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab8:	4b35      	ldr	r3, [pc, #212]	; (8001b90 <HAL_RCC_OscConfig+0x4f4>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1f0      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001acc:	d108      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ace:	4b30      	ldr	r3, [pc, #192]	; (8001b90 <HAL_RCC_OscConfig+0x4f4>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	492d      	ldr	r1, [pc, #180]	; (8001b90 <HAL_RCC_OscConfig+0x4f4>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ae0:	4b2b      	ldr	r3, [pc, #172]	; (8001b90 <HAL_RCC_OscConfig+0x4f4>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a19      	ldr	r1, [r3, #32]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af0:	430b      	orrs	r3, r1
 8001af2:	4927      	ldr	r1, [pc, #156]	; (8001b90 <HAL_RCC_OscConfig+0x4f4>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001af8:	4b27      	ldr	r3, [pc, #156]	; (8001b98 <HAL_RCC_OscConfig+0x4fc>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afe:	f7ff fb35 	bl	800116c <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b06:	f7ff fb31 	bl	800116c <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e037      	b.n	8001b88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b18:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <HAL_RCC_OscConfig+0x4f4>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0f0      	beq.n	8001b06 <HAL_RCC_OscConfig+0x46a>
 8001b24:	e02f      	b.n	8001b86 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b26:	4b1c      	ldr	r3, [pc, #112]	; (8001b98 <HAL_RCC_OscConfig+0x4fc>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2c:	f7ff fb1e 	bl	800116c <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b34:	f7ff fb1a 	bl	800116c <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e020      	b.n	8001b88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b46:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_RCC_OscConfig+0x4f4>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1f0      	bne.n	8001b34 <HAL_RCC_OscConfig+0x498>
 8001b52:	e018      	b.n	8001b86 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69db      	ldr	r3, [r3, #28]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d101      	bne.n	8001b60 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e013      	b.n	8001b88 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b60:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <HAL_RCC_OscConfig+0x4f4>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d106      	bne.n	8001b82 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d001      	beq.n	8001b86 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e000      	b.n	8001b88 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40021000 	.word	0x40021000
 8001b94:	40007000 	.word	0x40007000
 8001b98:	42420060 	.word	0x42420060

08001b9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e0d0      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bb0:	4b6a      	ldr	r3, [pc, #424]	; (8001d5c <HAL_RCC_ClockConfig+0x1c0>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d910      	bls.n	8001be0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bbe:	4b67      	ldr	r3, [pc, #412]	; (8001d5c <HAL_RCC_ClockConfig+0x1c0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f023 0207 	bic.w	r2, r3, #7
 8001bc6:	4965      	ldr	r1, [pc, #404]	; (8001d5c <HAL_RCC_ClockConfig+0x1c0>)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bce:	4b63      	ldr	r3, [pc, #396]	; (8001d5c <HAL_RCC_ClockConfig+0x1c0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d001      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e0b8      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d020      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d005      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bf8:	4b59      	ldr	r3, [pc, #356]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	4a58      	ldr	r2, [pc, #352]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0308 	and.w	r3, r3, #8
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d005      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c10:	4b53      	ldr	r3, [pc, #332]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	4a52      	ldr	r2, [pc, #328]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c16:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c1c:	4b50      	ldr	r3, [pc, #320]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	494d      	ldr	r1, [pc, #308]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d040      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d107      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c42:	4b47      	ldr	r3, [pc, #284]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d115      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e07f      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d107      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c5a:	4b41      	ldr	r3, [pc, #260]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d109      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e073      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c6a:	4b3d      	ldr	r3, [pc, #244]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e06b      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c7a:	4b39      	ldr	r3, [pc, #228]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f023 0203 	bic.w	r2, r3, #3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	4936      	ldr	r1, [pc, #216]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c8c:	f7ff fa6e 	bl	800116c <HAL_GetTick>
 8001c90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c92:	e00a      	b.n	8001caa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c94:	f7ff fa6a 	bl	800116c <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e053      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001caa:	4b2d      	ldr	r3, [pc, #180]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 020c 	and.w	r2, r3, #12
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d1eb      	bne.n	8001c94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cbc:	4b27      	ldr	r3, [pc, #156]	; (8001d5c <HAL_RCC_ClockConfig+0x1c0>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d210      	bcs.n	8001cec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cca:	4b24      	ldr	r3, [pc, #144]	; (8001d5c <HAL_RCC_ClockConfig+0x1c0>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f023 0207 	bic.w	r2, r3, #7
 8001cd2:	4922      	ldr	r1, [pc, #136]	; (8001d5c <HAL_RCC_ClockConfig+0x1c0>)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cda:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <HAL_RCC_ClockConfig+0x1c0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d001      	beq.n	8001cec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e032      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d008      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cf8:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	4916      	ldr	r1, [pc, #88]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d009      	beq.n	8001d2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d16:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	490e      	ldr	r1, [pc, #56]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d2a:	f000 f821 	bl	8001d70 <HAL_RCC_GetSysClockFreq>
 8001d2e:	4601      	mov	r1, r0
 8001d30:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	091b      	lsrs	r3, r3, #4
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <HAL_RCC_ClockConfig+0x1c8>)
 8001d3c:	5cd3      	ldrb	r3, [r2, r3]
 8001d3e:	fa21 f303 	lsr.w	r3, r1, r3
 8001d42:	4a09      	ldr	r2, [pc, #36]	; (8001d68 <HAL_RCC_ClockConfig+0x1cc>)
 8001d44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d46:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <HAL_RCC_ClockConfig+0x1d0>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff f90c 	bl	8000f68 <HAL_InitTick>

  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40022000 	.word	0x40022000
 8001d60:	40021000 	.word	0x40021000
 8001d64:	08005d00 	.word	0x08005d00
 8001d68:	20000028 	.word	0x20000028
 8001d6c:	2000002c 	.word	0x2000002c

08001d70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d70:	b490      	push	{r4, r7}
 8001d72:	b08a      	sub	sp, #40	; 0x28
 8001d74:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d76:	4b2a      	ldr	r3, [pc, #168]	; (8001e20 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d78:	1d3c      	adds	r4, r7, #4
 8001d7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d80:	4b28      	ldr	r3, [pc, #160]	; (8001e24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61fb      	str	r3, [r7, #28]
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61bb      	str	r3, [r7, #24]
 8001d8e:	2300      	movs	r3, #0
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
 8001d92:	2300      	movs	r3, #0
 8001d94:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d9a:	4b23      	ldr	r3, [pc, #140]	; (8001e28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f003 030c 	and.w	r3, r3, #12
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	d002      	beq.n	8001db0 <HAL_RCC_GetSysClockFreq+0x40>
 8001daa:	2b08      	cmp	r3, #8
 8001dac:	d003      	beq.n	8001db6 <HAL_RCC_GetSysClockFreq+0x46>
 8001dae:	e02d      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001db0:	4b1e      	ldr	r3, [pc, #120]	; (8001e2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001db2:	623b      	str	r3, [r7, #32]
      break;
 8001db4:	e02d      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	0c9b      	lsrs	r3, r3, #18
 8001dba:	f003 030f 	and.w	r3, r3, #15
 8001dbe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001dc2:	4413      	add	r3, r2
 8001dc4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001dc8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d013      	beq.n	8001dfc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dd4:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	0c5b      	lsrs	r3, r3, #17
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001de2:	4413      	add	r3, r2
 8001de4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001de8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	4a0f      	ldr	r2, [pc, #60]	; (8001e2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001dee:	fb02 f203 	mul.w	r2, r2, r3
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df8:	627b      	str	r3, [r7, #36]	; 0x24
 8001dfa:	e004      	b.n	8001e06 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	4a0c      	ldr	r2, [pc, #48]	; (8001e30 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e00:	fb02 f303 	mul.w	r3, r2, r3
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	623b      	str	r3, [r7, #32]
      break;
 8001e0a:	e002      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e0c:	4b07      	ldr	r3, [pc, #28]	; (8001e2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e0e:	623b      	str	r3, [r7, #32]
      break;
 8001e10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e12:	6a3b      	ldr	r3, [r7, #32]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3728      	adds	r7, #40	; 0x28
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc90      	pop	{r4, r7}
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	08005c38 	.word	0x08005c38
 8001e24:	08005c48 	.word	0x08005c48
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	007a1200 	.word	0x007a1200
 8001e30:	003d0900 	.word	0x003d0900

08001e34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e38:	4b02      	ldr	r3, [pc, #8]	; (8001e44 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr
 8001e44:	20000028 	.word	0x20000028

08001e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e4c:	f7ff fff2 	bl	8001e34 <HAL_RCC_GetHCLKFreq>
 8001e50:	4601      	mov	r1, r0
 8001e52:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	0a1b      	lsrs	r3, r3, #8
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	4a03      	ldr	r2, [pc, #12]	; (8001e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e5e:	5cd3      	ldrb	r3, [r2, r3]
 8001e60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	08005d10 	.word	0x08005d10

08001e70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e74:	f7ff ffde 	bl	8001e34 <HAL_RCC_GetHCLKFreq>
 8001e78:	4601      	mov	r1, r0
 8001e7a:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	0adb      	lsrs	r3, r3, #11
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	4a03      	ldr	r2, [pc, #12]	; (8001e94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e86:	5cd3      	ldrb	r3, [r2, r3]
 8001e88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40021000 	.word	0x40021000
 8001e94:	08005d10 	.word	0x08005d10

08001e98 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	220f      	movs	r2, #15
 8001ea6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ea8:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <HAL_RCC_GetClockConfig+0x58>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0203 	and.w	r2, r3, #3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001eb4:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <HAL_RCC_GetClockConfig+0x58>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ec0:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <HAL_RCC_GetClockConfig+0x58>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001ecc:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <HAL_RCC_GetClockConfig+0x58>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	08db      	lsrs	r3, r3, #3
 8001ed2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001eda:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <HAL_RCC_GetClockConfig+0x5c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0207 	and.w	r2, r3, #7
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40022000 	.word	0x40022000

08001ef8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f00:	4b0a      	ldr	r3, [pc, #40]	; (8001f2c <RCC_Delay+0x34>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a0a      	ldr	r2, [pc, #40]	; (8001f30 <RCC_Delay+0x38>)
 8001f06:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0a:	0a5b      	lsrs	r3, r3, #9
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	fb02 f303 	mul.w	r3, r2, r3
 8001f12:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f14:	bf00      	nop
  }
  while (Delay --);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	1e5a      	subs	r2, r3, #1
 8001f1a:	60fa      	str	r2, [r7, #12]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1f9      	bne.n	8001f14 <RCC_Delay+0x1c>
}
 8001f20:	bf00      	nop
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc80      	pop	{r7}
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	20000028 	.word	0x20000028
 8001f30:	10624dd3 	.word	0x10624dd3

08001f34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e041      	b.n	8001fca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d106      	bne.n	8001f60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f839 	bl	8001fd2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2202      	movs	r2, #2
 8001f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3304      	adds	r3, #4
 8001f70:	4619      	mov	r1, r3
 8001f72:	4610      	mov	r0, r2
 8001f74:	f000 f9b4 	bl	80022e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b083      	sub	sp, #12
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d001      	beq.n	8001ffc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e03a      	b.n	8002072 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2202      	movs	r2, #2
 8002000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f042 0201 	orr.w	r2, r2, #1
 8002012:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a18      	ldr	r2, [pc, #96]	; (800207c <HAL_TIM_Base_Start_IT+0x98>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d00e      	beq.n	800203c <HAL_TIM_Base_Start_IT+0x58>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002026:	d009      	beq.n	800203c <HAL_TIM_Base_Start_IT+0x58>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a14      	ldr	r2, [pc, #80]	; (8002080 <HAL_TIM_Base_Start_IT+0x9c>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d004      	beq.n	800203c <HAL_TIM_Base_Start_IT+0x58>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a13      	ldr	r2, [pc, #76]	; (8002084 <HAL_TIM_Base_Start_IT+0xa0>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d111      	bne.n	8002060 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2b06      	cmp	r3, #6
 800204c:	d010      	beq.n	8002070 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f042 0201 	orr.w	r2, r2, #1
 800205c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800205e:	e007      	b.n	8002070 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f042 0201 	orr.w	r2, r2, #1
 800206e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3714      	adds	r7, #20
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr
 800207c:	40012c00 	.word	0x40012c00
 8002080:	40000400 	.word	0x40000400
 8002084:	40000800 	.word	0x40000800

08002088 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b02      	cmp	r3, #2
 800209c:	d122      	bne.n	80020e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d11b      	bne.n	80020e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f06f 0202 	mvn.w	r2, #2
 80020b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	f003 0303 	and.w	r3, r3, #3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f8ed 	bl	80022aa <HAL_TIM_IC_CaptureCallback>
 80020d0:	e005      	b.n	80020de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f8e0 	bl	8002298 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 f8ef 	bl	80022bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	f003 0304 	and.w	r3, r3, #4
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	d122      	bne.n	8002138 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b04      	cmp	r3, #4
 80020fe:	d11b      	bne.n	8002138 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f06f 0204 	mvn.w	r2, #4
 8002108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2202      	movs	r2, #2
 800210e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 f8c3 	bl	80022aa <HAL_TIM_IC_CaptureCallback>
 8002124:	e005      	b.n	8002132 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f8b6 	bl	8002298 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 f8c5 	bl	80022bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	2b08      	cmp	r3, #8
 8002144:	d122      	bne.n	800218c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f003 0308 	and.w	r3, r3, #8
 8002150:	2b08      	cmp	r3, #8
 8002152:	d11b      	bne.n	800218c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f06f 0208 	mvn.w	r2, #8
 800215c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2204      	movs	r2, #4
 8002162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f899 	bl	80022aa <HAL_TIM_IC_CaptureCallback>
 8002178:	e005      	b.n	8002186 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f88c 	bl	8002298 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f89b 	bl	80022bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	f003 0310 	and.w	r3, r3, #16
 8002196:	2b10      	cmp	r3, #16
 8002198:	d122      	bne.n	80021e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	2b10      	cmp	r3, #16
 80021a6:	d11b      	bne.n	80021e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f06f 0210 	mvn.w	r2, #16
 80021b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2208      	movs	r2, #8
 80021b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f86f 	bl	80022aa <HAL_TIM_IC_CaptureCallback>
 80021cc:	e005      	b.n	80021da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f862 	bl	8002298 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 f871 	bl	80022bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d10e      	bne.n	800220c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d107      	bne.n	800220c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f06f 0201 	mvn.w	r2, #1
 8002204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7fe fe04 	bl	8000e14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002216:	2b80      	cmp	r3, #128	; 0x80
 8002218:	d10e      	bne.n	8002238 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002224:	2b80      	cmp	r3, #128	; 0x80
 8002226:	d107      	bne.n	8002238 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f8bf 	bl	80023b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002242:	2b40      	cmp	r3, #64	; 0x40
 8002244:	d10e      	bne.n	8002264 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002250:	2b40      	cmp	r3, #64	; 0x40
 8002252:	d107      	bne.n	8002264 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800225c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f835 	bl	80022ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	f003 0320 	and.w	r3, r3, #32
 800226e:	2b20      	cmp	r3, #32
 8002270:	d10e      	bne.n	8002290 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	f003 0320 	and.w	r3, r3, #32
 800227c:	2b20      	cmp	r3, #32
 800227e:	d107      	bne.n	8002290 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f06f 0220 	mvn.w	r2, #32
 8002288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f88a 	bl	80023a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002290:	bf00      	nop
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr

080022aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr

080022bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bc80      	pop	{r7}
 80022cc:	4770      	bx	lr

080022ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr

080022e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a29      	ldr	r2, [pc, #164]	; (8002398 <TIM_Base_SetConfig+0xb8>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d00b      	beq.n	8002310 <TIM_Base_SetConfig+0x30>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022fe:	d007      	beq.n	8002310 <TIM_Base_SetConfig+0x30>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a26      	ldr	r2, [pc, #152]	; (800239c <TIM_Base_SetConfig+0xbc>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d003      	beq.n	8002310 <TIM_Base_SetConfig+0x30>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a25      	ldr	r2, [pc, #148]	; (80023a0 <TIM_Base_SetConfig+0xc0>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d108      	bne.n	8002322 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002316:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	4313      	orrs	r3, r2
 8002320:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a1c      	ldr	r2, [pc, #112]	; (8002398 <TIM_Base_SetConfig+0xb8>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d00b      	beq.n	8002342 <TIM_Base_SetConfig+0x62>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002330:	d007      	beq.n	8002342 <TIM_Base_SetConfig+0x62>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a19      	ldr	r2, [pc, #100]	; (800239c <TIM_Base_SetConfig+0xbc>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d003      	beq.n	8002342 <TIM_Base_SetConfig+0x62>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a18      	ldr	r2, [pc, #96]	; (80023a0 <TIM_Base_SetConfig+0xc0>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d108      	bne.n	8002354 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002348:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	4313      	orrs	r3, r2
 8002352:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	4313      	orrs	r3, r2
 8002360:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a07      	ldr	r2, [pc, #28]	; (8002398 <TIM_Base_SetConfig+0xb8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d103      	bne.n	8002388 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	691a      	ldr	r2, [r3, #16]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	615a      	str	r2, [r3, #20]
}
 800238e:	bf00      	nop
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr
 8002398:	40012c00 	.word	0x40012c00
 800239c:	40000400 	.word	0x40000400
 80023a0:	40000800 	.word	0x40000800

080023a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr

080023b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr

080023c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e03f      	b.n	800245a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d106      	bne.n	80023f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7fe fd5a 	bl	8000ea8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2224      	movs	r2, #36	; 0x24
 80023f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68da      	ldr	r2, [r3, #12]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800240a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 f9a3 	bl	8002758 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	691a      	ldr	r2, [r3, #16]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002420:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	695a      	ldr	r2, [r3, #20]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002430:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68da      	ldr	r2, [r3, #12]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002440:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2220      	movs	r2, #32
 800244c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2220      	movs	r2, #32
 8002454:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b08a      	sub	sp, #40	; 0x28
 8002466:	af02      	add	r7, sp, #8
 8002468:	60f8      	str	r0, [r7, #12]
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	603b      	str	r3, [r7, #0]
 800246e:	4613      	mov	r3, r2
 8002470:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b20      	cmp	r3, #32
 8002480:	d17c      	bne.n	800257c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d002      	beq.n	800248e <HAL_UART_Transmit+0x2c>
 8002488:	88fb      	ldrh	r3, [r7, #6]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e075      	b.n	800257e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002498:	2b01      	cmp	r3, #1
 800249a:	d101      	bne.n	80024a0 <HAL_UART_Transmit+0x3e>
 800249c:	2302      	movs	r3, #2
 800249e:	e06e      	b.n	800257e <HAL_UART_Transmit+0x11c>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2221      	movs	r2, #33	; 0x21
 80024b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80024b6:	f7fe fe59 	bl	800116c <HAL_GetTick>
 80024ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	88fa      	ldrh	r2, [r7, #6]
 80024c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	88fa      	ldrh	r2, [r7, #6]
 80024c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024d0:	d108      	bne.n	80024e4 <HAL_UART_Transmit+0x82>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d104      	bne.n	80024e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	61bb      	str	r3, [r7, #24]
 80024e2:	e003      	b.n	80024ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80024f4:	e02a      	b.n	800254c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	2200      	movs	r2, #0
 80024fe:	2180      	movs	r1, #128	; 0x80
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f000 f8df 	bl	80026c4 <UART_WaitOnFlagUntilTimeout>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e036      	b.n	800257e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10b      	bne.n	800252e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	461a      	mov	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002524:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	3302      	adds	r3, #2
 800252a:	61bb      	str	r3, [r7, #24]
 800252c:	e007      	b.n	800253e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	781a      	ldrb	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	3301      	adds	r3, #1
 800253c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002542:	b29b      	uxth	r3, r3
 8002544:	3b01      	subs	r3, #1
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002550:	b29b      	uxth	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1cf      	bne.n	80024f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	2200      	movs	r2, #0
 800255e:	2140      	movs	r1, #64	; 0x40
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 f8af 	bl	80026c4 <UART_WaitOnFlagUntilTimeout>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e006      	b.n	800257e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2220      	movs	r2, #32
 8002574:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002578:	2300      	movs	r3, #0
 800257a:	e000      	b.n	800257e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800257c:	2302      	movs	r3, #2
  }
}
 800257e:	4618      	mov	r0, r3
 8002580:	3720      	adds	r7, #32
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b08a      	sub	sp, #40	; 0x28
 800258a:	af02      	add	r7, sp, #8
 800258c:	60f8      	str	r0, [r7, #12]
 800258e:	60b9      	str	r1, [r7, #8]
 8002590:	603b      	str	r3, [r7, #0]
 8002592:	4613      	mov	r3, r2
 8002594:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b20      	cmp	r3, #32
 80025a4:	f040 8089 	bne.w	80026ba <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d002      	beq.n	80025b4 <HAL_UART_Receive+0x2e>
 80025ae:	88fb      	ldrh	r3, [r7, #6]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e081      	b.n	80026bc <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d101      	bne.n	80025c6 <HAL_UART_Receive+0x40>
 80025c2:	2302      	movs	r3, #2
 80025c4:	e07a      	b.n	80026bc <HAL_UART_Receive+0x136>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2222      	movs	r2, #34	; 0x22
 80025d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80025dc:	f7fe fdc6 	bl	800116c <HAL_GetTick>
 80025e0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	88fa      	ldrh	r2, [r7, #6]
 80025e6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	88fa      	ldrh	r2, [r7, #6]
 80025ec:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025f6:	d108      	bne.n	800260a <HAL_UART_Receive+0x84>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d104      	bne.n	800260a <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8002600:	2300      	movs	r3, #0
 8002602:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	61bb      	str	r3, [r7, #24]
 8002608:	e003      	b.n	8002612 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800260e:	2300      	movs	r3, #0
 8002610:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800261a:	e043      	b.n	80026a4 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	2200      	movs	r2, #0
 8002624:	2120      	movs	r1, #32
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f000 f84c 	bl	80026c4 <UART_WaitOnFlagUntilTimeout>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e042      	b.n	80026bc <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d10c      	bne.n	8002656 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	b29b      	uxth	r3, r3
 8002644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002648:	b29a      	uxth	r2, r3
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	3302      	adds	r3, #2
 8002652:	61bb      	str	r3, [r7, #24]
 8002654:	e01f      	b.n	8002696 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800265e:	d007      	beq.n	8002670 <HAL_UART_Receive+0xea>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10a      	bne.n	800267e <HAL_UART_Receive+0xf8>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d106      	bne.n	800267e <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	b2da      	uxtb	r2, r3
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	701a      	strb	r2, [r3, #0]
 800267c:	e008      	b.n	8002690 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	b2db      	uxtb	r3, r3
 8002686:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800268a:	b2da      	uxtb	r2, r3
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	3301      	adds	r3, #1
 8002694:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800269a:	b29b      	uxth	r3, r3
 800269c:	3b01      	subs	r3, #1
 800269e:	b29a      	uxth	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1b6      	bne.n	800261c <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2220      	movs	r2, #32
 80026b2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80026b6:	2300      	movs	r3, #0
 80026b8:	e000      	b.n	80026bc <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 80026ba:	2302      	movs	r3, #2
  }
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3720      	adds	r7, #32
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	603b      	str	r3, [r7, #0]
 80026d0:	4613      	mov	r3, r2
 80026d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026d4:	e02c      	b.n	8002730 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026dc:	d028      	beq.n	8002730 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d007      	beq.n	80026f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80026e4:	f7fe fd42 	bl	800116c <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d21d      	bcs.n	8002730 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68da      	ldr	r2, [r3, #12]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002702:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	695a      	ldr	r2, [r3, #20]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 0201 	bic.w	r2, r2, #1
 8002712:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2220      	movs	r2, #32
 8002718:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2220      	movs	r2, #32
 8002720:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e00f      	b.n	8002750 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	4013      	ands	r3, r2
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	429a      	cmp	r2, r3
 800273e:	bf0c      	ite	eq
 8002740:	2301      	moveq	r3, #1
 8002742:	2300      	movne	r3, #0
 8002744:	b2db      	uxtb	r3, r3
 8002746:	461a      	mov	r2, r3
 8002748:	79fb      	ldrb	r3, [r7, #7]
 800274a:	429a      	cmp	r2, r3
 800274c:	d0c3      	beq.n	80026d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	430a      	orrs	r2, r1
 8002774:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689a      	ldr	r2, [r3, #8]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	431a      	orrs	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	4313      	orrs	r3, r2
 8002786:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002792:	f023 030c 	bic.w	r3, r3, #12
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6812      	ldr	r2, [r2, #0]
 800279a:	68b9      	ldr	r1, [r7, #8]
 800279c:	430b      	orrs	r3, r1
 800279e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699a      	ldr	r2, [r3, #24]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a2c      	ldr	r2, [pc, #176]	; (800286c <UART_SetConfig+0x114>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d103      	bne.n	80027c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80027c0:	f7ff fb56 	bl	8001e70 <HAL_RCC_GetPCLK2Freq>
 80027c4:	60f8      	str	r0, [r7, #12]
 80027c6:	e002      	b.n	80027ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80027c8:	f7ff fb3e 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
 80027cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	4613      	mov	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	009a      	lsls	r2, r3, #2
 80027d8:	441a      	add	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e4:	4a22      	ldr	r2, [pc, #136]	; (8002870 <UART_SetConfig+0x118>)
 80027e6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ea:	095b      	lsrs	r3, r3, #5
 80027ec:	0119      	lsls	r1, r3, #4
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	4613      	mov	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	009a      	lsls	r2, r3, #2
 80027f8:	441a      	add	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	fbb2 f2f3 	udiv	r2, r2, r3
 8002804:	4b1a      	ldr	r3, [pc, #104]	; (8002870 <UART_SetConfig+0x118>)
 8002806:	fba3 0302 	umull	r0, r3, r3, r2
 800280a:	095b      	lsrs	r3, r3, #5
 800280c:	2064      	movs	r0, #100	; 0x64
 800280e:	fb00 f303 	mul.w	r3, r0, r3
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	011b      	lsls	r3, r3, #4
 8002816:	3332      	adds	r3, #50	; 0x32
 8002818:	4a15      	ldr	r2, [pc, #84]	; (8002870 <UART_SetConfig+0x118>)
 800281a:	fba2 2303 	umull	r2, r3, r2, r3
 800281e:	095b      	lsrs	r3, r3, #5
 8002820:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002824:	4419      	add	r1, r3
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	4613      	mov	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	009a      	lsls	r2, r3, #2
 8002830:	441a      	add	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	fbb2 f2f3 	udiv	r2, r2, r3
 800283c:	4b0c      	ldr	r3, [pc, #48]	; (8002870 <UART_SetConfig+0x118>)
 800283e:	fba3 0302 	umull	r0, r3, r3, r2
 8002842:	095b      	lsrs	r3, r3, #5
 8002844:	2064      	movs	r0, #100	; 0x64
 8002846:	fb00 f303 	mul.w	r3, r0, r3
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	011b      	lsls	r3, r3, #4
 800284e:	3332      	adds	r3, #50	; 0x32
 8002850:	4a07      	ldr	r2, [pc, #28]	; (8002870 <UART_SetConfig+0x118>)
 8002852:	fba2 2303 	umull	r2, r3, r2, r3
 8002856:	095b      	lsrs	r3, r3, #5
 8002858:	f003 020f 	and.w	r2, r3, #15
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	440a      	add	r2, r1
 8002862:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002864:	bf00      	nop
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40013800 	.word	0x40013800
 8002870:	51eb851f 	.word	0x51eb851f

08002874 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800287a:	f3ef 8305 	mrs	r3, IPSR
 800287e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002880:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10f      	bne.n	80028a6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002886:	f3ef 8310 	mrs	r3, PRIMASK
 800288a:	607b      	str	r3, [r7, #4]
  return(result);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d109      	bne.n	80028a6 <osKernelInitialize+0x32>
 8002892:	4b10      	ldr	r3, [pc, #64]	; (80028d4 <osKernelInitialize+0x60>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d109      	bne.n	80028ae <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800289a:	f3ef 8311 	mrs	r3, BASEPRI
 800289e:	603b      	str	r3, [r7, #0]
  return(result);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80028a6:	f06f 0305 	mvn.w	r3, #5
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	e00c      	b.n	80028c8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80028ae:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <osKernelInitialize+0x60>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d105      	bne.n	80028c2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80028b6:	4b07      	ldr	r3, [pc, #28]	; (80028d4 <osKernelInitialize+0x60>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80028bc:	2300      	movs	r3, #0
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	e002      	b.n	80028c8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80028c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028c6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80028c8:	68fb      	ldr	r3, [r7, #12]
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr
 80028d4:	2000022c 	.word	0x2000022c

080028d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028de:	f3ef 8305 	mrs	r3, IPSR
 80028e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80028e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10f      	bne.n	800290a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028ea:	f3ef 8310 	mrs	r3, PRIMASK
 80028ee:	607b      	str	r3, [r7, #4]
  return(result);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d109      	bne.n	800290a <osKernelStart+0x32>
 80028f6:	4b11      	ldr	r3, [pc, #68]	; (800293c <osKernelStart+0x64>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d109      	bne.n	8002912 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80028fe:	f3ef 8311 	mrs	r3, BASEPRI
 8002902:	603b      	str	r3, [r7, #0]
  return(result);
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <osKernelStart+0x3a>
    stat = osErrorISR;
 800290a:	f06f 0305 	mvn.w	r3, #5
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	e00e      	b.n	8002930 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002912:	4b0a      	ldr	r3, [pc, #40]	; (800293c <osKernelStart+0x64>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d107      	bne.n	800292a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800291a:	4b08      	ldr	r3, [pc, #32]	; (800293c <osKernelStart+0x64>)
 800291c:	2202      	movs	r2, #2
 800291e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002920:	f001 fa8a 	bl	8003e38 <vTaskStartScheduler>
      stat = osOK;
 8002924:	2300      	movs	r3, #0
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	e002      	b.n	8002930 <osKernelStart+0x58>
    } else {
      stat = osError;
 800292a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800292e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002930:	68fb      	ldr	r3, [r7, #12]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	2000022c 	.word	0x2000022c

08002940 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002940:	b580      	push	{r7, lr}
 8002942:	b092      	sub	sp, #72	; 0x48
 8002944:	af04      	add	r7, sp, #16
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800294c:	2300      	movs	r3, #0
 800294e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002950:	f3ef 8305 	mrs	r3, IPSR
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002958:	2b00      	cmp	r3, #0
 800295a:	f040 8094 	bne.w	8002a86 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800295e:	f3ef 8310 	mrs	r3, PRIMASK
 8002962:	623b      	str	r3, [r7, #32]
  return(result);
 8002964:	6a3b      	ldr	r3, [r7, #32]
 8002966:	2b00      	cmp	r3, #0
 8002968:	f040 808d 	bne.w	8002a86 <osThreadNew+0x146>
 800296c:	4b48      	ldr	r3, [pc, #288]	; (8002a90 <osThreadNew+0x150>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b02      	cmp	r3, #2
 8002972:	d106      	bne.n	8002982 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002974:	f3ef 8311 	mrs	r3, BASEPRI
 8002978:	61fb      	str	r3, [r7, #28]
  return(result);
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	2b00      	cmp	r3, #0
 800297e:	f040 8082 	bne.w	8002a86 <osThreadNew+0x146>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d07e      	beq.n	8002a86 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002988:	2380      	movs	r3, #128	; 0x80
 800298a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800298c:	2318      	movs	r3, #24
 800298e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002990:	2300      	movs	r3, #0
 8002992:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002994:	f107 031b 	add.w	r3, r7, #27
 8002998:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800299a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800299e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d045      	beq.n	8002a32 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d002      	beq.n	80029b4 <osThreadNew+0x74>
        name = attr->name;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d002      	beq.n	80029c2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80029c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d008      	beq.n	80029da <osThreadNew+0x9a>
 80029c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ca:	2b38      	cmp	r3, #56	; 0x38
 80029cc:	d805      	bhi.n	80029da <osThreadNew+0x9a>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <osThreadNew+0x9e>
        return (NULL);
 80029da:	2300      	movs	r3, #0
 80029dc:	e054      	b.n	8002a88 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	089b      	lsrs	r3, r3, #2
 80029ec:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00e      	beq.n	8002a14 <osThreadNew+0xd4>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	2b5b      	cmp	r3, #91	; 0x5b
 80029fc:	d90a      	bls.n	8002a14 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d006      	beq.n	8002a14 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d002      	beq.n	8002a14 <osThreadNew+0xd4>
        mem = 1;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a12:	e010      	b.n	8002a36 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10c      	bne.n	8002a36 <osThreadNew+0xf6>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d108      	bne.n	8002a36 <osThreadNew+0xf6>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d104      	bne.n	8002a36 <osThreadNew+0xf6>
          mem = 0;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a30:	e001      	b.n	8002a36 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002a32:	2300      	movs	r3, #0
 8002a34:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d110      	bne.n	8002a5e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002a44:	9202      	str	r2, [sp, #8]
 8002a46:	9301      	str	r3, [sp, #4]
 8002a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a50:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f001 f828 	bl	8003aa8 <xTaskCreateStatic>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	e013      	b.n	8002a86 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d110      	bne.n	8002a86 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	f107 0314 	add.w	r3, r7, #20
 8002a6c:	9301      	str	r3, [sp, #4]
 8002a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f001 f86f 	bl	8003b5a <xTaskCreate>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d001      	beq.n	8002a86 <osThreadNew+0x146>
          hTask = NULL;
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002a86:	697b      	ldr	r3, [r7, #20]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3738      	adds	r7, #56	; 0x38
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	2000022c 	.word	0x2000022c

08002a94 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a9c:	f3ef 8305 	mrs	r3, IPSR
 8002aa0:	613b      	str	r3, [r7, #16]
  return(result);
 8002aa2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10f      	bne.n	8002ac8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aa8:	f3ef 8310 	mrs	r3, PRIMASK
 8002aac:	60fb      	str	r3, [r7, #12]
  return(result);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d109      	bne.n	8002ac8 <osDelay+0x34>
 8002ab4:	4b0d      	ldr	r3, [pc, #52]	; (8002aec <osDelay+0x58>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d109      	bne.n	8002ad0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002abc:	f3ef 8311 	mrs	r3, BASEPRI
 8002ac0:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d003      	beq.n	8002ad0 <osDelay+0x3c>
    stat = osErrorISR;
 8002ac8:	f06f 0305 	mvn.w	r3, #5
 8002acc:	617b      	str	r3, [r7, #20]
 8002ace:	e007      	b.n	8002ae0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d002      	beq.n	8002ae0 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f001 f978 	bl	8003dd0 <vTaskDelay>
    }
  }

  return (stat);
 8002ae0:	697b      	ldr	r3, [r7, #20]
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3718      	adds	r7, #24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	2000022c 	.word	0x2000022c

08002af0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b08c      	sub	sp, #48	; 0x30
 8002af4:	af02      	add	r7, sp, #8
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002afc:	2300      	movs	r3, #0
 8002afe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b00:	f3ef 8305 	mrs	r3, IPSR
 8002b04:	61bb      	str	r3, [r7, #24]
  return(result);
 8002b06:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d170      	bne.n	8002bee <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b0c:	f3ef 8310 	mrs	r3, PRIMASK
 8002b10:	617b      	str	r3, [r7, #20]
  return(result);
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d16a      	bne.n	8002bee <osMessageQueueNew+0xfe>
 8002b18:	4b37      	ldr	r3, [pc, #220]	; (8002bf8 <osMessageQueueNew+0x108>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d105      	bne.n	8002b2c <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002b20:	f3ef 8311 	mrs	r3, BASEPRI
 8002b24:	613b      	str	r3, [r7, #16]
  return(result);
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d160      	bne.n	8002bee <osMessageQueueNew+0xfe>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d05d      	beq.n	8002bee <osMessageQueueNew+0xfe>
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d05a      	beq.n	8002bee <osMessageQueueNew+0xfe>
    mem = -1;
 8002b38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b3c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d029      	beq.n	8002b98 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d012      	beq.n	8002b72 <osMessageQueueNew+0x82>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	2b4f      	cmp	r3, #79	; 0x4f
 8002b52:	d90e      	bls.n	8002b72 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00a      	beq.n	8002b72 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	695a      	ldr	r2, [r3, #20]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	68b9      	ldr	r1, [r7, #8]
 8002b64:	fb01 f303 	mul.w	r3, r1, r3
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d302      	bcc.n	8002b72 <osMessageQueueNew+0x82>
        mem = 1;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	623b      	str	r3, [r7, #32]
 8002b70:	e014      	b.n	8002b9c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d110      	bne.n	8002b9c <osMessageQueueNew+0xac>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10c      	bne.n	8002b9c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d108      	bne.n	8002b9c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d104      	bne.n	8002b9c <osMessageQueueNew+0xac>
          mem = 0;
 8002b92:	2300      	movs	r3, #0
 8002b94:	623b      	str	r3, [r7, #32]
 8002b96:	e001      	b.n	8002b9c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d10c      	bne.n	8002bbc <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	691a      	ldr	r2, [r3, #16]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6899      	ldr	r1, [r3, #8]
 8002baa:	2300      	movs	r3, #0
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	460b      	mov	r3, r1
 8002bb0:	68b9      	ldr	r1, [r7, #8]
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 fa52 	bl	800305c <xQueueGenericCreateStatic>
 8002bb8:	6278      	str	r0, [r7, #36]	; 0x24
 8002bba:	e008      	b.n	8002bce <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d105      	bne.n	8002bce <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	68b9      	ldr	r1, [r7, #8]
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 faba 	bl	8003140 <xQueueGenericCreate>
 8002bcc:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00c      	beq.n	8002bee <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <osMessageQueueNew+0xf2>
        name = attr->name;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	61fb      	str	r3, [r7, #28]
 8002be0:	e001      	b.n	8002be6 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8002be2:	2300      	movs	r3, #0
 8002be4:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8002be6:	69f9      	ldr	r1, [r7, #28]
 8002be8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bea:	f000 ff01 	bl	80039f0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3728      	adds	r7, #40	; 0x28
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	2000022c 	.word	0x2000022c

08002bfc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08a      	sub	sp, #40	; 0x28
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	603b      	str	r3, [r7, #0]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002c10:	2300      	movs	r3, #0
 8002c12:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c14:	f3ef 8305 	mrs	r3, IPSR
 8002c18:	61fb      	str	r3, [r7, #28]
  return(result);
 8002c1a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d10f      	bne.n	8002c40 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c20:	f3ef 8310 	mrs	r3, PRIMASK
 8002c24:	61bb      	str	r3, [r7, #24]
  return(result);
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d109      	bne.n	8002c40 <osMessageQueuePut+0x44>
 8002c2c:	4b2b      	ldr	r3, [pc, #172]	; (8002cdc <osMessageQueuePut+0xe0>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d12e      	bne.n	8002c92 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002c34:	f3ef 8311 	mrs	r3, BASEPRI
 8002c38:	617b      	str	r3, [r7, #20]
  return(result);
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d028      	beq.n	8002c92 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002c40:	6a3b      	ldr	r3, [r7, #32]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d005      	beq.n	8002c52 <osMessageQueuePut+0x56>
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d002      	beq.n	8002c52 <osMessageQueuePut+0x56>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8002c52:	f06f 0303 	mvn.w	r3, #3
 8002c56:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002c58:	e039      	b.n	8002cce <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8002c5e:	f107 0210 	add.w	r2, r7, #16
 8002c62:	2300      	movs	r3, #0
 8002c64:	68b9      	ldr	r1, [r7, #8]
 8002c66:	6a38      	ldr	r0, [r7, #32]
 8002c68:	f000 fbc4 	bl	80033f4 <xQueueGenericSendFromISR>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d003      	beq.n	8002c7a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8002c72:	f06f 0302 	mvn.w	r3, #2
 8002c76:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002c78:	e029      	b.n	8002cce <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d026      	beq.n	8002cce <osMessageQueuePut+0xd2>
 8002c80:	4b17      	ldr	r3, [pc, #92]	; (8002ce0 <osMessageQueuePut+0xe4>)
 8002c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	f3bf 8f4f 	dsb	sy
 8002c8c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002c90:	e01d      	b.n	8002cce <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002c92:	6a3b      	ldr	r3, [r7, #32]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d002      	beq.n	8002c9e <osMessageQueuePut+0xa2>
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d103      	bne.n	8002ca6 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8002c9e:	f06f 0303 	mvn.w	r3, #3
 8002ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ca4:	e014      	b.n	8002cd0 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	68b9      	ldr	r1, [r7, #8]
 8002cac:	6a38      	ldr	r0, [r7, #32]
 8002cae:	f000 faa7 	bl	8003200 <xQueueGenericSend>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d00b      	beq.n	8002cd0 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8002cbe:	f06f 0301 	mvn.w	r3, #1
 8002cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8002cc4:	e004      	b.n	8002cd0 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8002cc6:	f06f 0302 	mvn.w	r3, #2
 8002cca:	627b      	str	r3, [r7, #36]	; 0x24
 8002ccc:	e000      	b.n	8002cd0 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002cce:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3728      	adds	r7, #40	; 0x28
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	2000022c 	.word	0x2000022c
 8002ce0:	e000ed04 	.word	0xe000ed04

08002ce4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b08a      	sub	sp, #40	; 0x28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
 8002cf0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002cfa:	f3ef 8305 	mrs	r3, IPSR
 8002cfe:	61fb      	str	r3, [r7, #28]
  return(result);
 8002d00:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10f      	bne.n	8002d26 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d06:	f3ef 8310 	mrs	r3, PRIMASK
 8002d0a:	61bb      	str	r3, [r7, #24]
  return(result);
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d109      	bne.n	8002d26 <osMessageQueueGet+0x42>
 8002d12:	4b2b      	ldr	r3, [pc, #172]	; (8002dc0 <osMessageQueueGet+0xdc>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d12e      	bne.n	8002d78 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002d1a:	f3ef 8311 	mrs	r3, BASEPRI
 8002d1e:	617b      	str	r3, [r7, #20]
  return(result);
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d028      	beq.n	8002d78 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d005      	beq.n	8002d38 <osMessageQueueGet+0x54>
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d002      	beq.n	8002d38 <osMessageQueueGet+0x54>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8002d38:	f06f 0303 	mvn.w	r3, #3
 8002d3c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002d3e:	e038      	b.n	8002db2 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8002d40:	2300      	movs	r3, #0
 8002d42:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8002d44:	f107 0310 	add.w	r3, r7, #16
 8002d48:	461a      	mov	r2, r3
 8002d4a:	68b9      	ldr	r1, [r7, #8]
 8002d4c:	6a38      	ldr	r0, [r7, #32]
 8002d4e:	f000 fcc1 	bl	80036d4 <xQueueReceiveFromISR>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d003      	beq.n	8002d60 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8002d58:	f06f 0302 	mvn.w	r3, #2
 8002d5c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002d5e:	e028      	b.n	8002db2 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d025      	beq.n	8002db2 <osMessageQueueGet+0xce>
 8002d66:	4b17      	ldr	r3, [pc, #92]	; (8002dc4 <osMessageQueueGet+0xe0>)
 8002d68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	f3bf 8f4f 	dsb	sy
 8002d72:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002d76:	e01c      	b.n	8002db2 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d002      	beq.n	8002d84 <osMessageQueueGet+0xa0>
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d103      	bne.n	8002d8c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8002d84:	f06f 0303 	mvn.w	r3, #3
 8002d88:	627b      	str	r3, [r7, #36]	; 0x24
 8002d8a:	e013      	b.n	8002db4 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	68b9      	ldr	r1, [r7, #8]
 8002d90:	6a38      	ldr	r0, [r7, #32]
 8002d92:	f000 fbc3 	bl	800351c <xQueueReceive>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d00b      	beq.n	8002db4 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8002da2:	f06f 0301 	mvn.w	r3, #1
 8002da6:	627b      	str	r3, [r7, #36]	; 0x24
 8002da8:	e004      	b.n	8002db4 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8002daa:	f06f 0302 	mvn.w	r3, #2
 8002dae:	627b      	str	r3, [r7, #36]	; 0x24
 8002db0:	e000      	b.n	8002db4 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002db2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3728      	adds	r7, #40	; 0x28
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	2000022c 	.word	0x2000022c
 8002dc4:	e000ed04 	.word	0xe000ed04

08002dc8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4a06      	ldr	r2, [pc, #24]	; (8002df0 <vApplicationGetIdleTaskMemory+0x28>)
 8002dd8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	4a05      	ldr	r2, [pc, #20]	; (8002df4 <vApplicationGetIdleTaskMemory+0x2c>)
 8002dde:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2280      	movs	r2, #128	; 0x80
 8002de4:	601a      	str	r2, [r3, #0]
}
 8002de6:	bf00      	nop
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr
 8002df0:	20000230 	.word	0x20000230
 8002df4:	2000028c 	.word	0x2000028c

08002df8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4a07      	ldr	r2, [pc, #28]	; (8002e24 <vApplicationGetTimerTaskMemory+0x2c>)
 8002e08:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	4a06      	ldr	r2, [pc, #24]	; (8002e28 <vApplicationGetTimerTaskMemory+0x30>)
 8002e0e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e16:	601a      	str	r2, [r3, #0]
}
 8002e18:	bf00      	nop
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc80      	pop	{r7}
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	2000048c 	.word	0x2000048c
 8002e28:	200004e8 	.word	0x200004e8

08002e2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f103 0208 	add.w	r2, r3, #8
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f103 0208 	add.w	r2, r3, #8
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f103 0208 	add.w	r2, r3, #8
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bc80      	pop	{r7}
 8002e68:	4770      	bx	lr

08002e6a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr

08002e82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e82:	b480      	push	{r7}
 8002e84:	b085      	sub	sp, #20
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	1c5a      	adds	r2, r3, #1
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	601a      	str	r2, [r3, #0]
}
 8002ebe:	bf00      	nop
 8002ec0:	3714      	adds	r7, #20
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr

08002ec8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ede:	d103      	bne.n	8002ee8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	60fb      	str	r3, [r7, #12]
 8002ee6:	e00c      	b.n	8002f02 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3308      	adds	r3, #8
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	e002      	b.n	8002ef6 <vListInsert+0x2e>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d2f6      	bcs.n	8002ef0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	1c5a      	adds	r2, r3, #1
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	601a      	str	r2, [r3, #0]
}
 8002f2e:	bf00      	nop
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bc80      	pop	{r7}
 8002f36:	4770      	bx	lr

08002f38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	6892      	ldr	r2, [r2, #8]
 8002f4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	6852      	ldr	r2, [r2, #4]
 8002f58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d103      	bne.n	8002f6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	1e5a      	subs	r2, r3, #1
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bc80      	pop	{r7}
 8002f88:	4770      	bx	lr
	...

08002f8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d109      	bne.n	8002fb4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa4:	f383 8811 	msr	BASEPRI, r3
 8002fa8:	f3bf 8f6f 	isb	sy
 8002fac:	f3bf 8f4f 	dsb	sy
 8002fb0:	60bb      	str	r3, [r7, #8]
 8002fb2:	e7fe      	b.n	8002fb2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002fb4:	f002 f850 	bl	8005058 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc0:	68f9      	ldr	r1, [r7, #12]
 8002fc2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002fc4:	fb01 f303 	mul.w	r3, r1, r3
 8002fc8:	441a      	add	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	68f9      	ldr	r1, [r7, #12]
 8002fe8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002fea:	fb01 f303 	mul.w	r3, r1, r3
 8002fee:	441a      	add	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	22ff      	movs	r2, #255	; 0xff
 8002ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	22ff      	movs	r2, #255	; 0xff
 8003000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d114      	bne.n	8003034 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d01a      	beq.n	8003048 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	3310      	adds	r3, #16
 8003016:	4618      	mov	r0, r3
 8003018:	f001 f992 	bl	8004340 <xTaskRemoveFromEventList>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d012      	beq.n	8003048 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003022:	4b0d      	ldr	r3, [pc, #52]	; (8003058 <xQueueGenericReset+0xcc>)
 8003024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	f3bf 8f4f 	dsb	sy
 800302e:	f3bf 8f6f 	isb	sy
 8003032:	e009      	b.n	8003048 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	3310      	adds	r3, #16
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff fef7 	bl	8002e2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	3324      	adds	r3, #36	; 0x24
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff fef2 	bl	8002e2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003048:	f002 f834 	bl	80050b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800304c:	2301      	movs	r3, #1
}
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	e000ed04 	.word	0xe000ed04

0800305c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08e      	sub	sp, #56	; 0x38
 8003060:	af02      	add	r7, sp, #8
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
 8003068:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d109      	bne.n	8003084 <xQueueGenericCreateStatic+0x28>
 8003070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003074:	f383 8811 	msr	BASEPRI, r3
 8003078:	f3bf 8f6f 	isb	sy
 800307c:	f3bf 8f4f 	dsb	sy
 8003080:	62bb      	str	r3, [r7, #40]	; 0x28
 8003082:	e7fe      	b.n	8003082 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d109      	bne.n	800309e <xQueueGenericCreateStatic+0x42>
 800308a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308e:	f383 8811 	msr	BASEPRI, r3
 8003092:	f3bf 8f6f 	isb	sy
 8003096:	f3bf 8f4f 	dsb	sy
 800309a:	627b      	str	r3, [r7, #36]	; 0x24
 800309c:	e7fe      	b.n	800309c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d002      	beq.n	80030aa <xQueueGenericCreateStatic+0x4e>
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <xQueueGenericCreateStatic+0x52>
 80030aa:	2301      	movs	r3, #1
 80030ac:	e000      	b.n	80030b0 <xQueueGenericCreateStatic+0x54>
 80030ae:	2300      	movs	r3, #0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d109      	bne.n	80030c8 <xQueueGenericCreateStatic+0x6c>
 80030b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b8:	f383 8811 	msr	BASEPRI, r3
 80030bc:	f3bf 8f6f 	isb	sy
 80030c0:	f3bf 8f4f 	dsb	sy
 80030c4:	623b      	str	r3, [r7, #32]
 80030c6:	e7fe      	b.n	80030c6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d102      	bne.n	80030d4 <xQueueGenericCreateStatic+0x78>
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <xQueueGenericCreateStatic+0x7c>
 80030d4:	2301      	movs	r3, #1
 80030d6:	e000      	b.n	80030da <xQueueGenericCreateStatic+0x7e>
 80030d8:	2300      	movs	r3, #0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d109      	bne.n	80030f2 <xQueueGenericCreateStatic+0x96>
 80030de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e2:	f383 8811 	msr	BASEPRI, r3
 80030e6:	f3bf 8f6f 	isb	sy
 80030ea:	f3bf 8f4f 	dsb	sy
 80030ee:	61fb      	str	r3, [r7, #28]
 80030f0:	e7fe      	b.n	80030f0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80030f2:	2350      	movs	r3, #80	; 0x50
 80030f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2b50      	cmp	r3, #80	; 0x50
 80030fa:	d009      	beq.n	8003110 <xQueueGenericCreateStatic+0xb4>
 80030fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003100:	f383 8811 	msr	BASEPRI, r3
 8003104:	f3bf 8f6f 	isb	sy
 8003108:	f3bf 8f4f 	dsb	sy
 800310c:	61bb      	str	r3, [r7, #24]
 800310e:	e7fe      	b.n	800310e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00d      	beq.n	8003136 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800311a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003122:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	4613      	mov	r3, r2
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	68b9      	ldr	r1, [r7, #8]
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f000 f842 	bl	80031ba <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003138:	4618      	mov	r0, r3
 800313a:	3730      	adds	r7, #48	; 0x30
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003140:	b580      	push	{r7, lr}
 8003142:	b08a      	sub	sp, #40	; 0x28
 8003144:	af02      	add	r7, sp, #8
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	4613      	mov	r3, r2
 800314c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d109      	bne.n	8003168 <xQueueGenericCreate+0x28>
 8003154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003158:	f383 8811 	msr	BASEPRI, r3
 800315c:	f3bf 8f6f 	isb	sy
 8003160:	f3bf 8f4f 	dsb	sy
 8003164:	613b      	str	r3, [r7, #16]
 8003166:	e7fe      	b.n	8003166 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d102      	bne.n	8003174 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800316e:	2300      	movs	r3, #0
 8003170:	61fb      	str	r3, [r7, #28]
 8003172:	e004      	b.n	800317e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	fb02 f303 	mul.w	r3, r2, r3
 800317c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	3350      	adds	r3, #80	; 0x50
 8003182:	4618      	mov	r0, r3
 8003184:	f002 f85e 	bl	8005244 <pvPortMalloc>
 8003188:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00f      	beq.n	80031b0 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	3350      	adds	r3, #80	; 0x50
 8003194:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800319e:	79fa      	ldrb	r2, [r7, #7]
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	4613      	mov	r3, r2
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	68b9      	ldr	r1, [r7, #8]
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 f805 	bl	80031ba <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80031b0:	69bb      	ldr	r3, [r7, #24]
	}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3720      	adds	r7, #32
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b084      	sub	sp, #16
 80031be:	af00      	add	r7, sp, #0
 80031c0:	60f8      	str	r0, [r7, #12]
 80031c2:	60b9      	str	r1, [r7, #8]
 80031c4:	607a      	str	r2, [r7, #4]
 80031c6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d103      	bne.n	80031d6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	e002      	b.n	80031dc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80031e8:	2101      	movs	r1, #1
 80031ea:	69b8      	ldr	r0, [r7, #24]
 80031ec:	f7ff fece 	bl	8002f8c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	78fa      	ldrb	r2, [r7, #3]
 80031f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80031f8:	bf00      	nop
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b08e      	sub	sp, #56	; 0x38
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
 800320c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800320e:	2300      	movs	r3, #0
 8003210:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003218:	2b00      	cmp	r3, #0
 800321a:	d109      	bne.n	8003230 <xQueueGenericSend+0x30>
 800321c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003220:	f383 8811 	msr	BASEPRI, r3
 8003224:	f3bf 8f6f 	isb	sy
 8003228:	f3bf 8f4f 	dsb	sy
 800322c:	62bb      	str	r3, [r7, #40]	; 0x28
 800322e:	e7fe      	b.n	800322e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d103      	bne.n	800323e <xQueueGenericSend+0x3e>
 8003236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <xQueueGenericSend+0x42>
 800323e:	2301      	movs	r3, #1
 8003240:	e000      	b.n	8003244 <xQueueGenericSend+0x44>
 8003242:	2300      	movs	r3, #0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d109      	bne.n	800325c <xQueueGenericSend+0x5c>
 8003248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324c:	f383 8811 	msr	BASEPRI, r3
 8003250:	f3bf 8f6f 	isb	sy
 8003254:	f3bf 8f4f 	dsb	sy
 8003258:	627b      	str	r3, [r7, #36]	; 0x24
 800325a:	e7fe      	b.n	800325a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	2b02      	cmp	r3, #2
 8003260:	d103      	bne.n	800326a <xQueueGenericSend+0x6a>
 8003262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003266:	2b01      	cmp	r3, #1
 8003268:	d101      	bne.n	800326e <xQueueGenericSend+0x6e>
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <xQueueGenericSend+0x70>
 800326e:	2300      	movs	r3, #0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d109      	bne.n	8003288 <xQueueGenericSend+0x88>
 8003274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003278:	f383 8811 	msr	BASEPRI, r3
 800327c:	f3bf 8f6f 	isb	sy
 8003280:	f3bf 8f4f 	dsb	sy
 8003284:	623b      	str	r3, [r7, #32]
 8003286:	e7fe      	b.n	8003286 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003288:	f001 fa14 	bl	80046b4 <xTaskGetSchedulerState>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d102      	bne.n	8003298 <xQueueGenericSend+0x98>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <xQueueGenericSend+0x9c>
 8003298:	2301      	movs	r3, #1
 800329a:	e000      	b.n	800329e <xQueueGenericSend+0x9e>
 800329c:	2300      	movs	r3, #0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d109      	bne.n	80032b6 <xQueueGenericSend+0xb6>
 80032a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a6:	f383 8811 	msr	BASEPRI, r3
 80032aa:	f3bf 8f6f 	isb	sy
 80032ae:	f3bf 8f4f 	dsb	sy
 80032b2:	61fb      	str	r3, [r7, #28]
 80032b4:	e7fe      	b.n	80032b4 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80032b6:	f001 fecf 	bl	8005058 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80032ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d302      	bcc.n	80032cc <xQueueGenericSend+0xcc>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d129      	bne.n	8003320 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	68b9      	ldr	r1, [r7, #8]
 80032d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032d2:	f000 fa7c 	bl	80037ce <prvCopyDataToQueue>
 80032d6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d010      	beq.n	8003302 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e2:	3324      	adds	r3, #36	; 0x24
 80032e4:	4618      	mov	r0, r3
 80032e6:	f001 f82b 	bl	8004340 <xTaskRemoveFromEventList>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d013      	beq.n	8003318 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80032f0:	4b3f      	ldr	r3, [pc, #252]	; (80033f0 <xQueueGenericSend+0x1f0>)
 80032f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	f3bf 8f4f 	dsb	sy
 80032fc:	f3bf 8f6f 	isb	sy
 8003300:	e00a      	b.n	8003318 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003304:	2b00      	cmp	r3, #0
 8003306:	d007      	beq.n	8003318 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003308:	4b39      	ldr	r3, [pc, #228]	; (80033f0 <xQueueGenericSend+0x1f0>)
 800330a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	f3bf 8f4f 	dsb	sy
 8003314:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003318:	f001 fecc 	bl	80050b4 <vPortExitCritical>
				return pdPASS;
 800331c:	2301      	movs	r3, #1
 800331e:	e063      	b.n	80033e8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d103      	bne.n	800332e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003326:	f001 fec5 	bl	80050b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800332a:	2300      	movs	r3, #0
 800332c:	e05c      	b.n	80033e8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800332e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003330:	2b00      	cmp	r3, #0
 8003332:	d106      	bne.n	8003342 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003334:	f107 0314 	add.w	r3, r7, #20
 8003338:	4618      	mov	r0, r3
 800333a:	f001 f863 	bl	8004404 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800333e:	2301      	movs	r3, #1
 8003340:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003342:	f001 feb7 	bl	80050b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003346:	f000 fddb 	bl	8003f00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800334a:	f001 fe85 	bl	8005058 <vPortEnterCritical>
 800334e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003350:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003354:	b25b      	sxtb	r3, r3
 8003356:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800335a:	d103      	bne.n	8003364 <xQueueGenericSend+0x164>
 800335c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335e:	2200      	movs	r2, #0
 8003360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003366:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800336a:	b25b      	sxtb	r3, r3
 800336c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003370:	d103      	bne.n	800337a <xQueueGenericSend+0x17a>
 8003372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800337a:	f001 fe9b 	bl	80050b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800337e:	1d3a      	adds	r2, r7, #4
 8003380:	f107 0314 	add.w	r3, r7, #20
 8003384:	4611      	mov	r1, r2
 8003386:	4618      	mov	r0, r3
 8003388:	f001 f852 	bl	8004430 <xTaskCheckForTimeOut>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d124      	bne.n	80033dc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003392:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003394:	f000 fb13 	bl	80039be <prvIsQueueFull>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d018      	beq.n	80033d0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800339e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a0:	3310      	adds	r3, #16
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	4611      	mov	r1, r2
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 ff7c 	bl	80042a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80033ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033ae:	f000 fa9e 	bl	80038ee <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80033b2:	f000 fdb3 	bl	8003f1c <xTaskResumeAll>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f47f af7c 	bne.w	80032b6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80033be:	4b0c      	ldr	r3, [pc, #48]	; (80033f0 <xQueueGenericSend+0x1f0>)
 80033c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	f3bf 8f4f 	dsb	sy
 80033ca:	f3bf 8f6f 	isb	sy
 80033ce:	e772      	b.n	80032b6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80033d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033d2:	f000 fa8c 	bl	80038ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80033d6:	f000 fda1 	bl	8003f1c <xTaskResumeAll>
 80033da:	e76c      	b.n	80032b6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80033dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033de:	f000 fa86 	bl	80038ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80033e2:	f000 fd9b 	bl	8003f1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80033e6:	2300      	movs	r3, #0
		}
	}
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3738      	adds	r7, #56	; 0x38
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	e000ed04 	.word	0xe000ed04

080033f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08e      	sub	sp, #56	; 0x38
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
 8003400:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003408:	2b00      	cmp	r3, #0
 800340a:	d109      	bne.n	8003420 <xQueueGenericSendFromISR+0x2c>
 800340c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003410:	f383 8811 	msr	BASEPRI, r3
 8003414:	f3bf 8f6f 	isb	sy
 8003418:	f3bf 8f4f 	dsb	sy
 800341c:	627b      	str	r3, [r7, #36]	; 0x24
 800341e:	e7fe      	b.n	800341e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d103      	bne.n	800342e <xQueueGenericSendFromISR+0x3a>
 8003426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <xQueueGenericSendFromISR+0x3e>
 800342e:	2301      	movs	r3, #1
 8003430:	e000      	b.n	8003434 <xQueueGenericSendFromISR+0x40>
 8003432:	2300      	movs	r3, #0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d109      	bne.n	800344c <xQueueGenericSendFromISR+0x58>
 8003438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800343c:	f383 8811 	msr	BASEPRI, r3
 8003440:	f3bf 8f6f 	isb	sy
 8003444:	f3bf 8f4f 	dsb	sy
 8003448:	623b      	str	r3, [r7, #32]
 800344a:	e7fe      	b.n	800344a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	2b02      	cmp	r3, #2
 8003450:	d103      	bne.n	800345a <xQueueGenericSendFromISR+0x66>
 8003452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003456:	2b01      	cmp	r3, #1
 8003458:	d101      	bne.n	800345e <xQueueGenericSendFromISR+0x6a>
 800345a:	2301      	movs	r3, #1
 800345c:	e000      	b.n	8003460 <xQueueGenericSendFromISR+0x6c>
 800345e:	2300      	movs	r3, #0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d109      	bne.n	8003478 <xQueueGenericSendFromISR+0x84>
 8003464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003468:	f383 8811 	msr	BASEPRI, r3
 800346c:	f3bf 8f6f 	isb	sy
 8003470:	f3bf 8f4f 	dsb	sy
 8003474:	61fb      	str	r3, [r7, #28]
 8003476:	e7fe      	b.n	8003476 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003478:	f001 fea8 	bl	80051cc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800347c:	f3ef 8211 	mrs	r2, BASEPRI
 8003480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003484:	f383 8811 	msr	BASEPRI, r3
 8003488:	f3bf 8f6f 	isb	sy
 800348c:	f3bf 8f4f 	dsb	sy
 8003490:	61ba      	str	r2, [r7, #24]
 8003492:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003494:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003496:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800349c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d302      	bcc.n	80034aa <xQueueGenericSendFromISR+0xb6>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d12c      	bne.n	8003504 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80034aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	68b9      	ldr	r1, [r7, #8]
 80034b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034ba:	f000 f988 	bl	80037ce <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80034be:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80034c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034c6:	d112      	bne.n	80034ee <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d016      	beq.n	80034fe <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d2:	3324      	adds	r3, #36	; 0x24
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 ff33 	bl	8004340 <xTaskRemoveFromEventList>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00e      	beq.n	80034fe <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00b      	beq.n	80034fe <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	e007      	b.n	80034fe <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80034ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80034f2:	3301      	adds	r3, #1
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	b25a      	sxtb	r2, r3
 80034f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80034fe:	2301      	movs	r3, #1
 8003500:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003502:	e001      	b.n	8003508 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003504:	2300      	movs	r3, #0
 8003506:	637b      	str	r3, [r7, #52]	; 0x34
 8003508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003514:	4618      	mov	r0, r3
 8003516:	3738      	adds	r7, #56	; 0x38
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b08c      	sub	sp, #48	; 0x30
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003528:	2300      	movs	r3, #0
 800352a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003532:	2b00      	cmp	r3, #0
 8003534:	d109      	bne.n	800354a <xQueueReceive+0x2e>
	__asm volatile
 8003536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353a:	f383 8811 	msr	BASEPRI, r3
 800353e:	f3bf 8f6f 	isb	sy
 8003542:	f3bf 8f4f 	dsb	sy
 8003546:	623b      	str	r3, [r7, #32]
 8003548:	e7fe      	b.n	8003548 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d103      	bne.n	8003558 <xQueueReceive+0x3c>
 8003550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <xQueueReceive+0x40>
 8003558:	2301      	movs	r3, #1
 800355a:	e000      	b.n	800355e <xQueueReceive+0x42>
 800355c:	2300      	movs	r3, #0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d109      	bne.n	8003576 <xQueueReceive+0x5a>
 8003562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003566:	f383 8811 	msr	BASEPRI, r3
 800356a:	f3bf 8f6f 	isb	sy
 800356e:	f3bf 8f4f 	dsb	sy
 8003572:	61fb      	str	r3, [r7, #28]
 8003574:	e7fe      	b.n	8003574 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003576:	f001 f89d 	bl	80046b4 <xTaskGetSchedulerState>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d102      	bne.n	8003586 <xQueueReceive+0x6a>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <xQueueReceive+0x6e>
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <xQueueReceive+0x70>
 800358a:	2300      	movs	r3, #0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d109      	bne.n	80035a4 <xQueueReceive+0x88>
 8003590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003594:	f383 8811 	msr	BASEPRI, r3
 8003598:	f3bf 8f6f 	isb	sy
 800359c:	f3bf 8f4f 	dsb	sy
 80035a0:	61bb      	str	r3, [r7, #24]
 80035a2:	e7fe      	b.n	80035a2 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80035a4:	f001 fd58 	bl	8005058 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d01f      	beq.n	80035f4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80035b4:	68b9      	ldr	r1, [r7, #8]
 80035b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035b8:	f000 f973 	bl	80038a2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	1e5a      	subs	r2, r3, #1
 80035c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00f      	beq.n	80035ec <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ce:	3310      	adds	r3, #16
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 feb5 	bl	8004340 <xTaskRemoveFromEventList>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d007      	beq.n	80035ec <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80035dc:	4b3c      	ldr	r3, [pc, #240]	; (80036d0 <xQueueReceive+0x1b4>)
 80035de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	f3bf 8f4f 	dsb	sy
 80035e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80035ec:	f001 fd62 	bl	80050b4 <vPortExitCritical>
				return pdPASS;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e069      	b.n	80036c8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d103      	bne.n	8003602 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80035fa:	f001 fd5b 	bl	80050b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80035fe:	2300      	movs	r3, #0
 8003600:	e062      	b.n	80036c8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003604:	2b00      	cmp	r3, #0
 8003606:	d106      	bne.n	8003616 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003608:	f107 0310 	add.w	r3, r7, #16
 800360c:	4618      	mov	r0, r3
 800360e:	f000 fef9 	bl	8004404 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003612:	2301      	movs	r3, #1
 8003614:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003616:	f001 fd4d 	bl	80050b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800361a:	f000 fc71 	bl	8003f00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800361e:	f001 fd1b 	bl	8005058 <vPortEnterCritical>
 8003622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003624:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003628:	b25b      	sxtb	r3, r3
 800362a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800362e:	d103      	bne.n	8003638 <xQueueReceive+0x11c>
 8003630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800363e:	b25b      	sxtb	r3, r3
 8003640:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003644:	d103      	bne.n	800364e <xQueueReceive+0x132>
 8003646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800364e:	f001 fd31 	bl	80050b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003652:	1d3a      	adds	r2, r7, #4
 8003654:	f107 0310 	add.w	r3, r7, #16
 8003658:	4611      	mov	r1, r2
 800365a:	4618      	mov	r0, r3
 800365c:	f000 fee8 	bl	8004430 <xTaskCheckForTimeOut>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d123      	bne.n	80036ae <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003666:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003668:	f000 f993 	bl	8003992 <prvIsQueueEmpty>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d017      	beq.n	80036a2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003674:	3324      	adds	r3, #36	; 0x24
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	4611      	mov	r1, r2
 800367a:	4618      	mov	r0, r3
 800367c:	f000 fe12 	bl	80042a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003680:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003682:	f000 f934 	bl	80038ee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003686:	f000 fc49 	bl	8003f1c <xTaskResumeAll>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d189      	bne.n	80035a4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003690:	4b0f      	ldr	r3, [pc, #60]	; (80036d0 <xQueueReceive+0x1b4>)
 8003692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	f3bf 8f4f 	dsb	sy
 800369c:	f3bf 8f6f 	isb	sy
 80036a0:	e780      	b.n	80035a4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80036a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036a4:	f000 f923 	bl	80038ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80036a8:	f000 fc38 	bl	8003f1c <xTaskResumeAll>
 80036ac:	e77a      	b.n	80035a4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80036ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036b0:	f000 f91d 	bl	80038ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80036b4:	f000 fc32 	bl	8003f1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036ba:	f000 f96a 	bl	8003992 <prvIsQueueEmpty>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f43f af6f 	beq.w	80035a4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80036c6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3730      	adds	r7, #48	; 0x30
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	e000ed04 	.word	0xe000ed04

080036d4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b08e      	sub	sp, #56	; 0x38
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80036e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d109      	bne.n	80036fe <xQueueReceiveFromISR+0x2a>
 80036ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ee:	f383 8811 	msr	BASEPRI, r3
 80036f2:	f3bf 8f6f 	isb	sy
 80036f6:	f3bf 8f4f 	dsb	sy
 80036fa:	623b      	str	r3, [r7, #32]
 80036fc:	e7fe      	b.n	80036fc <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d103      	bne.n	800370c <xQueueReceiveFromISR+0x38>
 8003704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <xQueueReceiveFromISR+0x3c>
 800370c:	2301      	movs	r3, #1
 800370e:	e000      	b.n	8003712 <xQueueReceiveFromISR+0x3e>
 8003710:	2300      	movs	r3, #0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d109      	bne.n	800372a <xQueueReceiveFromISR+0x56>
 8003716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371a:	f383 8811 	msr	BASEPRI, r3
 800371e:	f3bf 8f6f 	isb	sy
 8003722:	f3bf 8f4f 	dsb	sy
 8003726:	61fb      	str	r3, [r7, #28]
 8003728:	e7fe      	b.n	8003728 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800372a:	f001 fd4f 	bl	80051cc <vPortValidateInterruptPriority>
	__asm volatile
 800372e:	f3ef 8211 	mrs	r2, BASEPRI
 8003732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003736:	f383 8811 	msr	BASEPRI, r3
 800373a:	f3bf 8f6f 	isb	sy
 800373e:	f3bf 8f4f 	dsb	sy
 8003742:	61ba      	str	r2, [r7, #24]
 8003744:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003746:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003748:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800374a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003752:	2b00      	cmp	r3, #0
 8003754:	d02f      	beq.n	80037b6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003758:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800375c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003760:	68b9      	ldr	r1, [r7, #8]
 8003762:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003764:	f000 f89d 	bl	80038a2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376a:	1e5a      	subs	r2, r3, #1
 800376c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003770:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003774:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003778:	d112      	bne.n	80037a0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800377a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d016      	beq.n	80037b0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003784:	3310      	adds	r3, #16
 8003786:	4618      	mov	r0, r3
 8003788:	f000 fdda 	bl	8004340 <xTaskRemoveFromEventList>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00e      	beq.n	80037b0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00b      	beq.n	80037b0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	e007      	b.n	80037b0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80037a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037a4:	3301      	adds	r3, #1
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	b25a      	sxtb	r2, r3
 80037aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80037b0:	2301      	movs	r3, #1
 80037b2:	637b      	str	r3, [r7, #52]	; 0x34
 80037b4:	e001      	b.n	80037ba <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80037b6:	2300      	movs	r3, #0
 80037b8:	637b      	str	r3, [r7, #52]	; 0x34
 80037ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80037c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3738      	adds	r7, #56	; 0x38
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b086      	sub	sp, #24
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	60f8      	str	r0, [r7, #12]
 80037d6:	60b9      	str	r1, [r7, #8]
 80037d8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80037da:	2300      	movs	r3, #0
 80037dc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10d      	bne.n	8003808 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d14d      	bne.n	8003890 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f000 ff79 	bl	80046f0 <xTaskPriorityDisinherit>
 80037fe:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	605a      	str	r2, [r3, #4]
 8003806:	e043      	b.n	8003890 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d119      	bne.n	8003842 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6898      	ldr	r0, [r3, #8]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	461a      	mov	r2, r3
 8003818:	68b9      	ldr	r1, [r7, #8]
 800381a:	f001 ff15 	bl	8005648 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	689a      	ldr	r2, [r3, #8]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	441a      	add	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	429a      	cmp	r2, r3
 8003836:	d32b      	bcc.n	8003890 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	609a      	str	r2, [r3, #8]
 8003840:	e026      	b.n	8003890 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	68d8      	ldr	r0, [r3, #12]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	461a      	mov	r2, r3
 800384c:	68b9      	ldr	r1, [r7, #8]
 800384e:	f001 fefb 	bl	8005648 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	425b      	negs	r3, r3
 800385c:	441a      	add	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	429a      	cmp	r2, r3
 800386c:	d207      	bcs.n	800387e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	425b      	negs	r3, r3
 8003878:	441a      	add	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b02      	cmp	r3, #2
 8003882:	d105      	bne.n	8003890 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d002      	beq.n	8003890 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	3b01      	subs	r3, #1
 800388e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1c5a      	adds	r2, r3, #1
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003898:	697b      	ldr	r3, [r7, #20]
}
 800389a:	4618      	mov	r0, r3
 800389c:	3718      	adds	r7, #24
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b082      	sub	sp, #8
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
 80038aa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d018      	beq.n	80038e6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68da      	ldr	r2, [r3, #12]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	441a      	add	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d303      	bcc.n	80038d6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68d9      	ldr	r1, [r3, #12]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	461a      	mov	r2, r3
 80038e0:	6838      	ldr	r0, [r7, #0]
 80038e2:	f001 feb1 	bl	8005648 <memcpy>
	}
}
 80038e6:	bf00      	nop
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b084      	sub	sp, #16
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80038f6:	f001 fbaf 	bl	8005058 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003900:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003902:	e011      	b.n	8003928 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	2b00      	cmp	r3, #0
 800390a:	d012      	beq.n	8003932 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3324      	adds	r3, #36	; 0x24
 8003910:	4618      	mov	r0, r3
 8003912:	f000 fd15 	bl	8004340 <xTaskRemoveFromEventList>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800391c:	f000 fde8 	bl	80044f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003920:	7bfb      	ldrb	r3, [r7, #15]
 8003922:	3b01      	subs	r3, #1
 8003924:	b2db      	uxtb	r3, r3
 8003926:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003928:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800392c:	2b00      	cmp	r3, #0
 800392e:	dce9      	bgt.n	8003904 <prvUnlockQueue+0x16>
 8003930:	e000      	b.n	8003934 <prvUnlockQueue+0x46>
					break;
 8003932:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	22ff      	movs	r2, #255	; 0xff
 8003938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800393c:	f001 fbba 	bl	80050b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003940:	f001 fb8a 	bl	8005058 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800394a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800394c:	e011      	b.n	8003972 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d012      	beq.n	800397c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	3310      	adds	r3, #16
 800395a:	4618      	mov	r0, r3
 800395c:	f000 fcf0 	bl	8004340 <xTaskRemoveFromEventList>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003966:	f000 fdc3 	bl	80044f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800396a:	7bbb      	ldrb	r3, [r7, #14]
 800396c:	3b01      	subs	r3, #1
 800396e:	b2db      	uxtb	r3, r3
 8003970:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003972:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003976:	2b00      	cmp	r3, #0
 8003978:	dce9      	bgt.n	800394e <prvUnlockQueue+0x60>
 800397a:	e000      	b.n	800397e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800397c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	22ff      	movs	r2, #255	; 0xff
 8003982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003986:	f001 fb95 	bl	80050b4 <vPortExitCritical>
}
 800398a:	bf00      	nop
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b084      	sub	sp, #16
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800399a:	f001 fb5d 	bl	8005058 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d102      	bne.n	80039ac <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80039a6:	2301      	movs	r3, #1
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	e001      	b.n	80039b0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80039ac:	2300      	movs	r3, #0
 80039ae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80039b0:	f001 fb80 	bl	80050b4 <vPortExitCritical>

	return xReturn;
 80039b4:	68fb      	ldr	r3, [r7, #12]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b084      	sub	sp, #16
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80039c6:	f001 fb47 	bl	8005058 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d102      	bne.n	80039dc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80039d6:	2301      	movs	r3, #1
 80039d8:	60fb      	str	r3, [r7, #12]
 80039da:	e001      	b.n	80039e0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80039dc:	2300      	movs	r3, #0
 80039de:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80039e0:	f001 fb68 	bl	80050b4 <vPortExitCritical>

	return xReturn;
 80039e4:	68fb      	ldr	r3, [r7, #12]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
	...

080039f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80039fa:	2300      	movs	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]
 80039fe:	e014      	b.n	8003a2a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003a00:	4a0e      	ldr	r2, [pc, #56]	; (8003a3c <vQueueAddToRegistry+0x4c>)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10b      	bne.n	8003a24 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003a0c:	490b      	ldr	r1, [pc, #44]	; (8003a3c <vQueueAddToRegistry+0x4c>)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003a16:	4a09      	ldr	r2, [pc, #36]	; (8003a3c <vQueueAddToRegistry+0x4c>)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	4413      	add	r3, r2
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003a22:	e005      	b.n	8003a30 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	3301      	adds	r3, #1
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2b07      	cmp	r3, #7
 8003a2e:	d9e7      	bls.n	8003a00 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003a30:	bf00      	nop
 8003a32:	3714      	adds	r7, #20
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bc80      	pop	{r7}
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	20001c80 	.word	0x20001c80

08003a40 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003a50:	f001 fb02 	bl	8005058 <vPortEnterCritical>
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a5a:	b25b      	sxtb	r3, r3
 8003a5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a60:	d103      	bne.n	8003a6a <vQueueWaitForMessageRestricted+0x2a>
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a70:	b25b      	sxtb	r3, r3
 8003a72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a76:	d103      	bne.n	8003a80 <vQueueWaitForMessageRestricted+0x40>
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a80:	f001 fb18 	bl	80050b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d106      	bne.n	8003a9a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	3324      	adds	r3, #36	; 0x24
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	68b9      	ldr	r1, [r7, #8]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 fc29 	bl	80042ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003a9a:	6978      	ldr	r0, [r7, #20]
 8003a9c:	f7ff ff27 	bl	80038ee <prvUnlockQueue>
	}
 8003aa0:	bf00      	nop
 8003aa2:	3718      	adds	r7, #24
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b08e      	sub	sp, #56	; 0x38
 8003aac:	af04      	add	r7, sp, #16
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
 8003ab4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d109      	bne.n	8003ad0 <xTaskCreateStatic+0x28>
	__asm volatile
 8003abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac0:	f383 8811 	msr	BASEPRI, r3
 8003ac4:	f3bf 8f6f 	isb	sy
 8003ac8:	f3bf 8f4f 	dsb	sy
 8003acc:	623b      	str	r3, [r7, #32]
 8003ace:	e7fe      	b.n	8003ace <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d109      	bne.n	8003aea <xTaskCreateStatic+0x42>
 8003ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ada:	f383 8811 	msr	BASEPRI, r3
 8003ade:	f3bf 8f6f 	isb	sy
 8003ae2:	f3bf 8f4f 	dsb	sy
 8003ae6:	61fb      	str	r3, [r7, #28]
 8003ae8:	e7fe      	b.n	8003ae8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003aea:	235c      	movs	r3, #92	; 0x5c
 8003aec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	2b5c      	cmp	r3, #92	; 0x5c
 8003af2:	d009      	beq.n	8003b08 <xTaskCreateStatic+0x60>
 8003af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	61bb      	str	r3, [r7, #24]
 8003b06:	e7fe      	b.n	8003b06 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d01e      	beq.n	8003b4c <xTaskCreateStatic+0xa4>
 8003b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d01b      	beq.n	8003b4c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b16:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b1c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	2202      	movs	r2, #2
 8003b22:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003b26:	2300      	movs	r3, #0
 8003b28:	9303      	str	r3, [sp, #12]
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2c:	9302      	str	r3, [sp, #8]
 8003b2e:	f107 0314 	add.w	r3, r7, #20
 8003b32:	9301      	str	r3, [sp, #4]
 8003b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b36:	9300      	str	r3, [sp, #0]
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	68b9      	ldr	r1, [r7, #8]
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 f850 	bl	8003be4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b46:	f000 f8d3 	bl	8003cf0 <prvAddNewTaskToReadyList>
 8003b4a:	e001      	b.n	8003b50 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003b50:	697b      	ldr	r3, [r7, #20]
	}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3728      	adds	r7, #40	; 0x28
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b08c      	sub	sp, #48	; 0x30
 8003b5e:	af04      	add	r7, sp, #16
 8003b60:	60f8      	str	r0, [r7, #12]
 8003b62:	60b9      	str	r1, [r7, #8]
 8003b64:	603b      	str	r3, [r7, #0]
 8003b66:	4613      	mov	r3, r2
 8003b68:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b6a:	88fb      	ldrh	r3, [r7, #6]
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f001 fb68 	bl	8005244 <pvPortMalloc>
 8003b74:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00e      	beq.n	8003b9a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003b7c:	205c      	movs	r0, #92	; 0x5c
 8003b7e:	f001 fb61 	bl	8005244 <pvPortMalloc>
 8003b82:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	631a      	str	r2, [r3, #48]	; 0x30
 8003b90:	e005      	b.n	8003b9e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b92:	6978      	ldr	r0, [r7, #20]
 8003b94:	f001 fc18 	bl	80053c8 <vPortFree>
 8003b98:	e001      	b.n	8003b9e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d017      	beq.n	8003bd4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003bac:	88fa      	ldrh	r2, [r7, #6]
 8003bae:	2300      	movs	r3, #0
 8003bb0:	9303      	str	r3, [sp, #12]
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	9302      	str	r3, [sp, #8]
 8003bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb8:	9301      	str	r3, [sp, #4]
 8003bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	68b9      	ldr	r1, [r7, #8]
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 f80e 	bl	8003be4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003bc8:	69f8      	ldr	r0, [r7, #28]
 8003bca:	f000 f891 	bl	8003cf0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	61bb      	str	r3, [r7, #24]
 8003bd2:	e002      	b.n	8003bda <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003bd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bd8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003bda:	69bb      	ldr	r3, [r7, #24]
	}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3720      	adds	r7, #32
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b088      	sub	sp, #32
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
 8003bf0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	21a5      	movs	r1, #165	; 0xa5
 8003bfe:	f001 fd2e 	bl	800565e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	f023 0307 	bic.w	r3, r3, #7
 8003c1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	f003 0307 	and.w	r3, r3, #7
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d009      	beq.n	8003c3a <prvInitialiseNewTask+0x56>
 8003c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2a:	f383 8811 	msr	BASEPRI, r3
 8003c2e:	f3bf 8f6f 	isb	sy
 8003c32:	f3bf 8f4f 	dsb	sy
 8003c36:	617b      	str	r3, [r7, #20]
 8003c38:	e7fe      	b.n	8003c38 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61fb      	str	r3, [r7, #28]
 8003c3e:	e012      	b.n	8003c66 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	4413      	add	r3, r2
 8003c46:	7819      	ldrb	r1, [r3, #0]
 8003c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	3334      	adds	r3, #52	; 0x34
 8003c50:	460a      	mov	r2, r1
 8003c52:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	4413      	add	r3, r2
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d006      	beq.n	8003c6e <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	3301      	adds	r3, #1
 8003c64:	61fb      	str	r3, [r7, #28]
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	2b0f      	cmp	r3, #15
 8003c6a:	d9e9      	bls.n	8003c40 <prvInitialiseNewTask+0x5c>
 8003c6c:	e000      	b.n	8003c70 <prvInitialiseNewTask+0x8c>
		{
			break;
 8003c6e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7a:	2b37      	cmp	r3, #55	; 0x37
 8003c7c:	d901      	bls.n	8003c82 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c7e:	2337      	movs	r3, #55	; 0x37
 8003c80:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c86:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c8c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c90:	2200      	movs	r2, #0
 8003c92:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c96:	3304      	adds	r3, #4
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7ff f8e6 	bl	8002e6a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca0:	3318      	adds	r3, #24
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7ff f8e1 	bl	8002e6a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003caa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cbc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	68f9      	ldr	r1, [r7, #12]
 8003cd0:	69b8      	ldr	r0, [r7, #24]
 8003cd2:	f001 f8d7 	bl	8004e84 <pxPortInitialiseStack>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cda:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d002      	beq.n	8003ce8 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ce6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ce8:	bf00      	nop
 8003cea:	3720      	adds	r7, #32
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003cf8:	f001 f9ae 	bl	8005058 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003cfc:	4b2d      	ldr	r3, [pc, #180]	; (8003db4 <prvAddNewTaskToReadyList+0xc4>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	3301      	adds	r3, #1
 8003d02:	4a2c      	ldr	r2, [pc, #176]	; (8003db4 <prvAddNewTaskToReadyList+0xc4>)
 8003d04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003d06:	4b2c      	ldr	r3, [pc, #176]	; (8003db8 <prvAddNewTaskToReadyList+0xc8>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d109      	bne.n	8003d22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003d0e:	4a2a      	ldr	r2, [pc, #168]	; (8003db8 <prvAddNewTaskToReadyList+0xc8>)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003d14:	4b27      	ldr	r3, [pc, #156]	; (8003db4 <prvAddNewTaskToReadyList+0xc4>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d110      	bne.n	8003d3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003d1c:	f000 fc0c 	bl	8004538 <prvInitialiseTaskLists>
 8003d20:	e00d      	b.n	8003d3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003d22:	4b26      	ldr	r3, [pc, #152]	; (8003dbc <prvAddNewTaskToReadyList+0xcc>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d109      	bne.n	8003d3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d2a:	4b23      	ldr	r3, [pc, #140]	; (8003db8 <prvAddNewTaskToReadyList+0xc8>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d802      	bhi.n	8003d3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003d38:	4a1f      	ldr	r2, [pc, #124]	; (8003db8 <prvAddNewTaskToReadyList+0xc8>)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003d3e:	4b20      	ldr	r3, [pc, #128]	; (8003dc0 <prvAddNewTaskToReadyList+0xd0>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	3301      	adds	r3, #1
 8003d44:	4a1e      	ldr	r2, [pc, #120]	; (8003dc0 <prvAddNewTaskToReadyList+0xd0>)
 8003d46:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003d48:	4b1d      	ldr	r3, [pc, #116]	; (8003dc0 <prvAddNewTaskToReadyList+0xd0>)
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d54:	4b1b      	ldr	r3, [pc, #108]	; (8003dc4 <prvAddNewTaskToReadyList+0xd4>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d903      	bls.n	8003d64 <prvAddNewTaskToReadyList+0x74>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d60:	4a18      	ldr	r2, [pc, #96]	; (8003dc4 <prvAddNewTaskToReadyList+0xd4>)
 8003d62:	6013      	str	r3, [r2, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d68:	4613      	mov	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4a15      	ldr	r2, [pc, #84]	; (8003dc8 <prvAddNewTaskToReadyList+0xd8>)
 8003d72:	441a      	add	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3304      	adds	r3, #4
 8003d78:	4619      	mov	r1, r3
 8003d7a:	4610      	mov	r0, r2
 8003d7c:	f7ff f881 	bl	8002e82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d80:	f001 f998 	bl	80050b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d84:	4b0d      	ldr	r3, [pc, #52]	; (8003dbc <prvAddNewTaskToReadyList+0xcc>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00e      	beq.n	8003daa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d8c:	4b0a      	ldr	r3, [pc, #40]	; (8003db8 <prvAddNewTaskToReadyList+0xc8>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d207      	bcs.n	8003daa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d9a:	4b0c      	ldr	r3, [pc, #48]	; (8003dcc <prvAddNewTaskToReadyList+0xdc>)
 8003d9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	f3bf 8f4f 	dsb	sy
 8003da6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003daa:	bf00      	nop
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	20000dbc 	.word	0x20000dbc
 8003db8:	200008e8 	.word	0x200008e8
 8003dbc:	20000dc8 	.word	0x20000dc8
 8003dc0:	20000dd8 	.word	0x20000dd8
 8003dc4:	20000dc4 	.word	0x20000dc4
 8003dc8:	200008ec 	.word	0x200008ec
 8003dcc:	e000ed04 	.word	0xe000ed04

08003dd0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d016      	beq.n	8003e10 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003de2:	4b13      	ldr	r3, [pc, #76]	; (8003e30 <vTaskDelay+0x60>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d009      	beq.n	8003dfe <vTaskDelay+0x2e>
 8003dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dee:	f383 8811 	msr	BASEPRI, r3
 8003df2:	f3bf 8f6f 	isb	sy
 8003df6:	f3bf 8f4f 	dsb	sy
 8003dfa:	60bb      	str	r3, [r7, #8]
 8003dfc:	e7fe      	b.n	8003dfc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003dfe:	f000 f87f 	bl	8003f00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003e02:	2100      	movs	r1, #0
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 fcdf 	bl	80047c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003e0a:	f000 f887 	bl	8003f1c <xTaskResumeAll>
 8003e0e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d107      	bne.n	8003e26 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003e16:	4b07      	ldr	r3, [pc, #28]	; (8003e34 <vTaskDelay+0x64>)
 8003e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e1c:	601a      	str	r2, [r3, #0]
 8003e1e:	f3bf 8f4f 	dsb	sy
 8003e22:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003e26:	bf00      	nop
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	20000de4 	.word	0x20000de4
 8003e34:	e000ed04 	.word	0xe000ed04

08003e38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b08a      	sub	sp, #40	; 0x28
 8003e3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003e42:	2300      	movs	r3, #0
 8003e44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003e46:	463a      	mov	r2, r7
 8003e48:	1d39      	adds	r1, r7, #4
 8003e4a:	f107 0308 	add.w	r3, r7, #8
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7fe ffba 	bl	8002dc8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003e54:	6839      	ldr	r1, [r7, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	9202      	str	r2, [sp, #8]
 8003e5c:	9301      	str	r3, [sp, #4]
 8003e5e:	2300      	movs	r3, #0
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	2300      	movs	r3, #0
 8003e64:	460a      	mov	r2, r1
 8003e66:	4920      	ldr	r1, [pc, #128]	; (8003ee8 <vTaskStartScheduler+0xb0>)
 8003e68:	4820      	ldr	r0, [pc, #128]	; (8003eec <vTaskStartScheduler+0xb4>)
 8003e6a:	f7ff fe1d 	bl	8003aa8 <xTaskCreateStatic>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	4b1f      	ldr	r3, [pc, #124]	; (8003ef0 <vTaskStartScheduler+0xb8>)
 8003e72:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003e74:	4b1e      	ldr	r3, [pc, #120]	; (8003ef0 <vTaskStartScheduler+0xb8>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d002      	beq.n	8003e82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	617b      	str	r3, [r7, #20]
 8003e80:	e001      	b.n	8003e86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003e82:	2300      	movs	r3, #0
 8003e84:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d102      	bne.n	8003e92 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003e8c:	f000 fcf0 	bl	8004870 <xTimerCreateTimerTask>
 8003e90:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d115      	bne.n	8003ec4 <vTaskStartScheduler+0x8c>
 8003e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9c:	f383 8811 	msr	BASEPRI, r3
 8003ea0:	f3bf 8f6f 	isb	sy
 8003ea4:	f3bf 8f4f 	dsb	sy
 8003ea8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003eaa:	4b12      	ldr	r3, [pc, #72]	; (8003ef4 <vTaskStartScheduler+0xbc>)
 8003eac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003eb0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003eb2:	4b11      	ldr	r3, [pc, #68]	; (8003ef8 <vTaskStartScheduler+0xc0>)
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003eb8:	4b10      	ldr	r3, [pc, #64]	; (8003efc <vTaskStartScheduler+0xc4>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003ebe:	f001 f85b 	bl	8004f78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003ec2:	e00d      	b.n	8003ee0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003eca:	d109      	bne.n	8003ee0 <vTaskStartScheduler+0xa8>
 8003ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed0:	f383 8811 	msr	BASEPRI, r3
 8003ed4:	f3bf 8f6f 	isb	sy
 8003ed8:	f3bf 8f4f 	dsb	sy
 8003edc:	60fb      	str	r3, [r7, #12]
 8003ede:	e7fe      	b.n	8003ede <vTaskStartScheduler+0xa6>
}
 8003ee0:	bf00      	nop
 8003ee2:	3718      	adds	r7, #24
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	08005c4c 	.word	0x08005c4c
 8003eec:	08004509 	.word	0x08004509
 8003ef0:	20000de0 	.word	0x20000de0
 8003ef4:	20000ddc 	.word	0x20000ddc
 8003ef8:	20000dc8 	.word	0x20000dc8
 8003efc:	20000dc0 	.word	0x20000dc0

08003f00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003f04:	4b04      	ldr	r3, [pc, #16]	; (8003f18 <vTaskSuspendAll+0x18>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	4a03      	ldr	r2, [pc, #12]	; (8003f18 <vTaskSuspendAll+0x18>)
 8003f0c:	6013      	str	r3, [r2, #0]
}
 8003f0e:	bf00      	nop
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bc80      	pop	{r7}
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	20000de4 	.word	0x20000de4

08003f1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003f22:	2300      	movs	r3, #0
 8003f24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003f26:	2300      	movs	r3, #0
 8003f28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003f2a:	4b41      	ldr	r3, [pc, #260]	; (8004030 <xTaskResumeAll+0x114>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d109      	bne.n	8003f46 <xTaskResumeAll+0x2a>
 8003f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f36:	f383 8811 	msr	BASEPRI, r3
 8003f3a:	f3bf 8f6f 	isb	sy
 8003f3e:	f3bf 8f4f 	dsb	sy
 8003f42:	603b      	str	r3, [r7, #0]
 8003f44:	e7fe      	b.n	8003f44 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003f46:	f001 f887 	bl	8005058 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003f4a:	4b39      	ldr	r3, [pc, #228]	; (8004030 <xTaskResumeAll+0x114>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	4a37      	ldr	r2, [pc, #220]	; (8004030 <xTaskResumeAll+0x114>)
 8003f52:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f54:	4b36      	ldr	r3, [pc, #216]	; (8004030 <xTaskResumeAll+0x114>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d162      	bne.n	8004022 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f5c:	4b35      	ldr	r3, [pc, #212]	; (8004034 <xTaskResumeAll+0x118>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d05e      	beq.n	8004022 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f64:	e02f      	b.n	8003fc6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003f66:	4b34      	ldr	r3, [pc, #208]	; (8004038 <xTaskResumeAll+0x11c>)
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	3318      	adds	r3, #24
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7fe ffe0 	bl	8002f38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	3304      	adds	r3, #4
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7fe ffdb 	bl	8002f38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f86:	4b2d      	ldr	r3, [pc, #180]	; (800403c <xTaskResumeAll+0x120>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d903      	bls.n	8003f96 <xTaskResumeAll+0x7a>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f92:	4a2a      	ldr	r2, [pc, #168]	; (800403c <xTaskResumeAll+0x120>)
 8003f94:	6013      	str	r3, [r2, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4413      	add	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4a27      	ldr	r2, [pc, #156]	; (8004040 <xTaskResumeAll+0x124>)
 8003fa4:	441a      	add	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	3304      	adds	r3, #4
 8003faa:	4619      	mov	r1, r3
 8003fac:	4610      	mov	r0, r2
 8003fae:	f7fe ff68 	bl	8002e82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb6:	4b23      	ldr	r3, [pc, #140]	; (8004044 <xTaskResumeAll+0x128>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d302      	bcc.n	8003fc6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003fc0:	4b21      	ldr	r3, [pc, #132]	; (8004048 <xTaskResumeAll+0x12c>)
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003fc6:	4b1c      	ldr	r3, [pc, #112]	; (8004038 <xTaskResumeAll+0x11c>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1cb      	bne.n	8003f66 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003fd4:	f000 fb4a 	bl	800466c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003fd8:	4b1c      	ldr	r3, [pc, #112]	; (800404c <xTaskResumeAll+0x130>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d010      	beq.n	8004006 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003fe4:	f000 f844 	bl	8004070 <xTaskIncrementTick>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d002      	beq.n	8003ff4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003fee:	4b16      	ldr	r3, [pc, #88]	; (8004048 <xTaskResumeAll+0x12c>)
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1f1      	bne.n	8003fe4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004000:	4b12      	ldr	r3, [pc, #72]	; (800404c <xTaskResumeAll+0x130>)
 8004002:	2200      	movs	r2, #0
 8004004:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004006:	4b10      	ldr	r3, [pc, #64]	; (8004048 <xTaskResumeAll+0x12c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d009      	beq.n	8004022 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800400e:	2301      	movs	r3, #1
 8004010:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004012:	4b0f      	ldr	r3, [pc, #60]	; (8004050 <xTaskResumeAll+0x134>)
 8004014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	f3bf 8f4f 	dsb	sy
 800401e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004022:	f001 f847 	bl	80050b4 <vPortExitCritical>

	return xAlreadyYielded;
 8004026:	68bb      	ldr	r3, [r7, #8]
}
 8004028:	4618      	mov	r0, r3
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	20000de4 	.word	0x20000de4
 8004034:	20000dbc 	.word	0x20000dbc
 8004038:	20000d7c 	.word	0x20000d7c
 800403c:	20000dc4 	.word	0x20000dc4
 8004040:	200008ec 	.word	0x200008ec
 8004044:	200008e8 	.word	0x200008e8
 8004048:	20000dd0 	.word	0x20000dd0
 800404c:	20000dcc 	.word	0x20000dcc
 8004050:	e000ed04 	.word	0xe000ed04

08004054 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800405a:	4b04      	ldr	r3, [pc, #16]	; (800406c <xTaskGetTickCount+0x18>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004060:	687b      	ldr	r3, [r7, #4]
}
 8004062:	4618      	mov	r0, r3
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	bc80      	pop	{r7}
 800406a:	4770      	bx	lr
 800406c:	20000dc0 	.word	0x20000dc0

08004070 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004076:	2300      	movs	r3, #0
 8004078:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800407a:	4b51      	ldr	r3, [pc, #324]	; (80041c0 <xTaskIncrementTick+0x150>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	f040 808d 	bne.w	800419e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004084:	4b4f      	ldr	r3, [pc, #316]	; (80041c4 <xTaskIncrementTick+0x154>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	3301      	adds	r3, #1
 800408a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800408c:	4a4d      	ldr	r2, [pc, #308]	; (80041c4 <xTaskIncrementTick+0x154>)
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d11f      	bne.n	80040d8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004098:	4b4b      	ldr	r3, [pc, #300]	; (80041c8 <xTaskIncrementTick+0x158>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d009      	beq.n	80040b6 <xTaskIncrementTick+0x46>
 80040a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a6:	f383 8811 	msr	BASEPRI, r3
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	603b      	str	r3, [r7, #0]
 80040b4:	e7fe      	b.n	80040b4 <xTaskIncrementTick+0x44>
 80040b6:	4b44      	ldr	r3, [pc, #272]	; (80041c8 <xTaskIncrementTick+0x158>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	60fb      	str	r3, [r7, #12]
 80040bc:	4b43      	ldr	r3, [pc, #268]	; (80041cc <xTaskIncrementTick+0x15c>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a41      	ldr	r2, [pc, #260]	; (80041c8 <xTaskIncrementTick+0x158>)
 80040c2:	6013      	str	r3, [r2, #0]
 80040c4:	4a41      	ldr	r2, [pc, #260]	; (80041cc <xTaskIncrementTick+0x15c>)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6013      	str	r3, [r2, #0]
 80040ca:	4b41      	ldr	r3, [pc, #260]	; (80041d0 <xTaskIncrementTick+0x160>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	3301      	adds	r3, #1
 80040d0:	4a3f      	ldr	r2, [pc, #252]	; (80041d0 <xTaskIncrementTick+0x160>)
 80040d2:	6013      	str	r3, [r2, #0]
 80040d4:	f000 faca 	bl	800466c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80040d8:	4b3e      	ldr	r3, [pc, #248]	; (80041d4 <xTaskIncrementTick+0x164>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d34e      	bcc.n	8004180 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040e2:	4b39      	ldr	r3, [pc, #228]	; (80041c8 <xTaskIncrementTick+0x158>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <xTaskIncrementTick+0x80>
 80040ec:	2301      	movs	r3, #1
 80040ee:	e000      	b.n	80040f2 <xTaskIncrementTick+0x82>
 80040f0:	2300      	movs	r3, #0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d004      	beq.n	8004100 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040f6:	4b37      	ldr	r3, [pc, #220]	; (80041d4 <xTaskIncrementTick+0x164>)
 80040f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040fc:	601a      	str	r2, [r3, #0]
					break;
 80040fe:	e03f      	b.n	8004180 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004100:	4b31      	ldr	r3, [pc, #196]	; (80041c8 <xTaskIncrementTick+0x158>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	429a      	cmp	r2, r3
 8004116:	d203      	bcs.n	8004120 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004118:	4a2e      	ldr	r2, [pc, #184]	; (80041d4 <xTaskIncrementTick+0x164>)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6013      	str	r3, [r2, #0]
						break;
 800411e:	e02f      	b.n	8004180 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	3304      	adds	r3, #4
 8004124:	4618      	mov	r0, r3
 8004126:	f7fe ff07 	bl	8002f38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412e:	2b00      	cmp	r3, #0
 8004130:	d004      	beq.n	800413c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	3318      	adds	r3, #24
 8004136:	4618      	mov	r0, r3
 8004138:	f7fe fefe 	bl	8002f38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004140:	4b25      	ldr	r3, [pc, #148]	; (80041d8 <xTaskIncrementTick+0x168>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	429a      	cmp	r2, r3
 8004146:	d903      	bls.n	8004150 <xTaskIncrementTick+0xe0>
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414c:	4a22      	ldr	r2, [pc, #136]	; (80041d8 <xTaskIncrementTick+0x168>)
 800414e:	6013      	str	r3, [r2, #0]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004154:	4613      	mov	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4a1f      	ldr	r2, [pc, #124]	; (80041dc <xTaskIncrementTick+0x16c>)
 800415e:	441a      	add	r2, r3
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	3304      	adds	r3, #4
 8004164:	4619      	mov	r1, r3
 8004166:	4610      	mov	r0, r2
 8004168:	f7fe fe8b 	bl	8002e82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004170:	4b1b      	ldr	r3, [pc, #108]	; (80041e0 <xTaskIncrementTick+0x170>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004176:	429a      	cmp	r2, r3
 8004178:	d3b3      	bcc.n	80040e2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800417a:	2301      	movs	r3, #1
 800417c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800417e:	e7b0      	b.n	80040e2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004180:	4b17      	ldr	r3, [pc, #92]	; (80041e0 <xTaskIncrementTick+0x170>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004186:	4915      	ldr	r1, [pc, #84]	; (80041dc <xTaskIncrementTick+0x16c>)
 8004188:	4613      	mov	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4413      	add	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	440b      	add	r3, r1
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d907      	bls.n	80041a8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004198:	2301      	movs	r3, #1
 800419a:	617b      	str	r3, [r7, #20]
 800419c:	e004      	b.n	80041a8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800419e:	4b11      	ldr	r3, [pc, #68]	; (80041e4 <xTaskIncrementTick+0x174>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	3301      	adds	r3, #1
 80041a4:	4a0f      	ldr	r2, [pc, #60]	; (80041e4 <xTaskIncrementTick+0x174>)
 80041a6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80041a8:	4b0f      	ldr	r3, [pc, #60]	; (80041e8 <xTaskIncrementTick+0x178>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80041b0:	2301      	movs	r3, #1
 80041b2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80041b4:	697b      	ldr	r3, [r7, #20]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	20000de4 	.word	0x20000de4
 80041c4:	20000dc0 	.word	0x20000dc0
 80041c8:	20000d74 	.word	0x20000d74
 80041cc:	20000d78 	.word	0x20000d78
 80041d0:	20000dd4 	.word	0x20000dd4
 80041d4:	20000ddc 	.word	0x20000ddc
 80041d8:	20000dc4 	.word	0x20000dc4
 80041dc:	200008ec 	.word	0x200008ec
 80041e0:	200008e8 	.word	0x200008e8
 80041e4:	20000dcc 	.word	0x20000dcc
 80041e8:	20000dd0 	.word	0x20000dd0

080041ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80041f2:	4b27      	ldr	r3, [pc, #156]	; (8004290 <vTaskSwitchContext+0xa4>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80041fa:	4b26      	ldr	r3, [pc, #152]	; (8004294 <vTaskSwitchContext+0xa8>)
 80041fc:	2201      	movs	r2, #1
 80041fe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004200:	e040      	b.n	8004284 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004202:	4b24      	ldr	r3, [pc, #144]	; (8004294 <vTaskSwitchContext+0xa8>)
 8004204:	2200      	movs	r2, #0
 8004206:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004208:	4b23      	ldr	r3, [pc, #140]	; (8004298 <vTaskSwitchContext+0xac>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	60fb      	str	r3, [r7, #12]
 800420e:	e00f      	b.n	8004230 <vTaskSwitchContext+0x44>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d109      	bne.n	800422a <vTaskSwitchContext+0x3e>
 8004216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421a:	f383 8811 	msr	BASEPRI, r3
 800421e:	f3bf 8f6f 	isb	sy
 8004222:	f3bf 8f4f 	dsb	sy
 8004226:	607b      	str	r3, [r7, #4]
 8004228:	e7fe      	b.n	8004228 <vTaskSwitchContext+0x3c>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	3b01      	subs	r3, #1
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	491a      	ldr	r1, [pc, #104]	; (800429c <vTaskSwitchContext+0xb0>)
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	4613      	mov	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	440b      	add	r3, r1
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d0e5      	beq.n	8004210 <vTaskSwitchContext+0x24>
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	4613      	mov	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	4a13      	ldr	r2, [pc, #76]	; (800429c <vTaskSwitchContext+0xb0>)
 8004250:	4413      	add	r3, r2
 8004252:	60bb      	str	r3, [r7, #8]
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	605a      	str	r2, [r3, #4]
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	3308      	adds	r3, #8
 8004266:	429a      	cmp	r2, r3
 8004268:	d104      	bne.n	8004274 <vTaskSwitchContext+0x88>
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	605a      	str	r2, [r3, #4]
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	4a09      	ldr	r2, [pc, #36]	; (80042a0 <vTaskSwitchContext+0xb4>)
 800427c:	6013      	str	r3, [r2, #0]
 800427e:	4a06      	ldr	r2, [pc, #24]	; (8004298 <vTaskSwitchContext+0xac>)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6013      	str	r3, [r2, #0]
}
 8004284:	bf00      	nop
 8004286:	3714      	adds	r7, #20
 8004288:	46bd      	mov	sp, r7
 800428a:	bc80      	pop	{r7}
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	20000de4 	.word	0x20000de4
 8004294:	20000dd0 	.word	0x20000dd0
 8004298:	20000dc4 	.word	0x20000dc4
 800429c:	200008ec 	.word	0x200008ec
 80042a0:	200008e8 	.word	0x200008e8

080042a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d109      	bne.n	80042c8 <vTaskPlaceOnEventList+0x24>
 80042b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b8:	f383 8811 	msr	BASEPRI, r3
 80042bc:	f3bf 8f6f 	isb	sy
 80042c0:	f3bf 8f4f 	dsb	sy
 80042c4:	60fb      	str	r3, [r7, #12]
 80042c6:	e7fe      	b.n	80042c6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80042c8:	4b07      	ldr	r3, [pc, #28]	; (80042e8 <vTaskPlaceOnEventList+0x44>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	3318      	adds	r3, #24
 80042ce:	4619      	mov	r1, r3
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f7fe fdf9 	bl	8002ec8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80042d6:	2101      	movs	r1, #1
 80042d8:	6838      	ldr	r0, [r7, #0]
 80042da:	f000 fa75 	bl	80047c8 <prvAddCurrentTaskToDelayedList>
}
 80042de:	bf00      	nop
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	200008e8 	.word	0x200008e8

080042ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d109      	bne.n	8004312 <vTaskPlaceOnEventListRestricted+0x26>
 80042fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004302:	f383 8811 	msr	BASEPRI, r3
 8004306:	f3bf 8f6f 	isb	sy
 800430a:	f3bf 8f4f 	dsb	sy
 800430e:	617b      	str	r3, [r7, #20]
 8004310:	e7fe      	b.n	8004310 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004312:	4b0a      	ldr	r3, [pc, #40]	; (800433c <vTaskPlaceOnEventListRestricted+0x50>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	3318      	adds	r3, #24
 8004318:	4619      	mov	r1, r3
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f7fe fdb1 	bl	8002e82 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d002      	beq.n	800432c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004326:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800432a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800432c:	6879      	ldr	r1, [r7, #4]
 800432e:	68b8      	ldr	r0, [r7, #8]
 8004330:	f000 fa4a 	bl	80047c8 <prvAddCurrentTaskToDelayedList>
	}
 8004334:	bf00      	nop
 8004336:	3718      	adds	r7, #24
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	200008e8 	.word	0x200008e8

08004340 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d109      	bne.n	800436a <xTaskRemoveFromEventList+0x2a>
 8004356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435a:	f383 8811 	msr	BASEPRI, r3
 800435e:	f3bf 8f6f 	isb	sy
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	60fb      	str	r3, [r7, #12]
 8004368:	e7fe      	b.n	8004368 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	3318      	adds	r3, #24
 800436e:	4618      	mov	r0, r3
 8004370:	f7fe fde2 	bl	8002f38 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004374:	4b1d      	ldr	r3, [pc, #116]	; (80043ec <xTaskRemoveFromEventList+0xac>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d11d      	bne.n	80043b8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	3304      	adds	r3, #4
 8004380:	4618      	mov	r0, r3
 8004382:	f7fe fdd9 	bl	8002f38 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800438a:	4b19      	ldr	r3, [pc, #100]	; (80043f0 <xTaskRemoveFromEventList+0xb0>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	429a      	cmp	r2, r3
 8004390:	d903      	bls.n	800439a <xTaskRemoveFromEventList+0x5a>
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004396:	4a16      	ldr	r2, [pc, #88]	; (80043f0 <xTaskRemoveFromEventList+0xb0>)
 8004398:	6013      	str	r3, [r2, #0]
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800439e:	4613      	mov	r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	4413      	add	r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	4a13      	ldr	r2, [pc, #76]	; (80043f4 <xTaskRemoveFromEventList+0xb4>)
 80043a8:	441a      	add	r2, r3
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	3304      	adds	r3, #4
 80043ae:	4619      	mov	r1, r3
 80043b0:	4610      	mov	r0, r2
 80043b2:	f7fe fd66 	bl	8002e82 <vListInsertEnd>
 80043b6:	e005      	b.n	80043c4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	3318      	adds	r3, #24
 80043bc:	4619      	mov	r1, r3
 80043be:	480e      	ldr	r0, [pc, #56]	; (80043f8 <xTaskRemoveFromEventList+0xb8>)
 80043c0:	f7fe fd5f 	bl	8002e82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c8:	4b0c      	ldr	r3, [pc, #48]	; (80043fc <xTaskRemoveFromEventList+0xbc>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d905      	bls.n	80043de <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80043d2:	2301      	movs	r3, #1
 80043d4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80043d6:	4b0a      	ldr	r3, [pc, #40]	; (8004400 <xTaskRemoveFromEventList+0xc0>)
 80043d8:	2201      	movs	r2, #1
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	e001      	b.n	80043e2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80043de:	2300      	movs	r3, #0
 80043e0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80043e2:	697b      	ldr	r3, [r7, #20]
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3718      	adds	r7, #24
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	20000de4 	.word	0x20000de4
 80043f0:	20000dc4 	.word	0x20000dc4
 80043f4:	200008ec 	.word	0x200008ec
 80043f8:	20000d7c 	.word	0x20000d7c
 80043fc:	200008e8 	.word	0x200008e8
 8004400:	20000dd0 	.word	0x20000dd0

08004404 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800440c:	4b06      	ldr	r3, [pc, #24]	; (8004428 <vTaskInternalSetTimeOutState+0x24>)
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004414:	4b05      	ldr	r3, [pc, #20]	; (800442c <vTaskInternalSetTimeOutState+0x28>)
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	605a      	str	r2, [r3, #4]
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	bc80      	pop	{r7}
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	20000dd4 	.word	0x20000dd4
 800442c:	20000dc0 	.word	0x20000dc0

08004430 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b088      	sub	sp, #32
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d109      	bne.n	8004454 <xTaskCheckForTimeOut+0x24>
 8004440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004444:	f383 8811 	msr	BASEPRI, r3
 8004448:	f3bf 8f6f 	isb	sy
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	613b      	str	r3, [r7, #16]
 8004452:	e7fe      	b.n	8004452 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d109      	bne.n	800446e <xTaskCheckForTimeOut+0x3e>
 800445a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445e:	f383 8811 	msr	BASEPRI, r3
 8004462:	f3bf 8f6f 	isb	sy
 8004466:	f3bf 8f4f 	dsb	sy
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	e7fe      	b.n	800446c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800446e:	f000 fdf3 	bl	8005058 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004472:	4b1d      	ldr	r3, [pc, #116]	; (80044e8 <xTaskCheckForTimeOut+0xb8>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800448a:	d102      	bne.n	8004492 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800448c:	2300      	movs	r3, #0
 800448e:	61fb      	str	r3, [r7, #28]
 8004490:	e023      	b.n	80044da <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	4b15      	ldr	r3, [pc, #84]	; (80044ec <xTaskCheckForTimeOut+0xbc>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	429a      	cmp	r2, r3
 800449c:	d007      	beq.n	80044ae <xTaskCheckForTimeOut+0x7e>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d302      	bcc.n	80044ae <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80044a8:	2301      	movs	r3, #1
 80044aa:	61fb      	str	r3, [r7, #28]
 80044ac:	e015      	b.n	80044da <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d20b      	bcs.n	80044d0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	1ad2      	subs	r2, r2, r3
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f7ff ff9d 	bl	8004404 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80044ca:	2300      	movs	r3, #0
 80044cc:	61fb      	str	r3, [r7, #28]
 80044ce:	e004      	b.n	80044da <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80044d6:	2301      	movs	r3, #1
 80044d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80044da:	f000 fdeb 	bl	80050b4 <vPortExitCritical>

	return xReturn;
 80044de:	69fb      	ldr	r3, [r7, #28]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3720      	adds	r7, #32
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	20000dc0 	.word	0x20000dc0
 80044ec:	20000dd4 	.word	0x20000dd4

080044f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80044f4:	4b03      	ldr	r3, [pc, #12]	; (8004504 <vTaskMissedYield+0x14>)
 80044f6:	2201      	movs	r2, #1
 80044f8:	601a      	str	r2, [r3, #0]
}
 80044fa:	bf00      	nop
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bc80      	pop	{r7}
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	20000dd0 	.word	0x20000dd0

08004508 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004510:	f000 f852 	bl	80045b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004514:	4b06      	ldr	r3, [pc, #24]	; (8004530 <prvIdleTask+0x28>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d9f9      	bls.n	8004510 <prvIdleTask+0x8>
			{
				taskYIELD();
 800451c:	4b05      	ldr	r3, [pc, #20]	; (8004534 <prvIdleTask+0x2c>)
 800451e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	f3bf 8f4f 	dsb	sy
 8004528:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800452c:	e7f0      	b.n	8004510 <prvIdleTask+0x8>
 800452e:	bf00      	nop
 8004530:	200008ec 	.word	0x200008ec
 8004534:	e000ed04 	.word	0xe000ed04

08004538 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800453e:	2300      	movs	r3, #0
 8004540:	607b      	str	r3, [r7, #4]
 8004542:	e00c      	b.n	800455e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	4613      	mov	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4413      	add	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4a12      	ldr	r2, [pc, #72]	; (8004598 <prvInitialiseTaskLists+0x60>)
 8004550:	4413      	add	r3, r2
 8004552:	4618      	mov	r0, r3
 8004554:	f7fe fc6a 	bl	8002e2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3301      	adds	r3, #1
 800455c:	607b      	str	r3, [r7, #4]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b37      	cmp	r3, #55	; 0x37
 8004562:	d9ef      	bls.n	8004544 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004564:	480d      	ldr	r0, [pc, #52]	; (800459c <prvInitialiseTaskLists+0x64>)
 8004566:	f7fe fc61 	bl	8002e2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800456a:	480d      	ldr	r0, [pc, #52]	; (80045a0 <prvInitialiseTaskLists+0x68>)
 800456c:	f7fe fc5e 	bl	8002e2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004570:	480c      	ldr	r0, [pc, #48]	; (80045a4 <prvInitialiseTaskLists+0x6c>)
 8004572:	f7fe fc5b 	bl	8002e2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004576:	480c      	ldr	r0, [pc, #48]	; (80045a8 <prvInitialiseTaskLists+0x70>)
 8004578:	f7fe fc58 	bl	8002e2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800457c:	480b      	ldr	r0, [pc, #44]	; (80045ac <prvInitialiseTaskLists+0x74>)
 800457e:	f7fe fc55 	bl	8002e2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004582:	4b0b      	ldr	r3, [pc, #44]	; (80045b0 <prvInitialiseTaskLists+0x78>)
 8004584:	4a05      	ldr	r2, [pc, #20]	; (800459c <prvInitialiseTaskLists+0x64>)
 8004586:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004588:	4b0a      	ldr	r3, [pc, #40]	; (80045b4 <prvInitialiseTaskLists+0x7c>)
 800458a:	4a05      	ldr	r2, [pc, #20]	; (80045a0 <prvInitialiseTaskLists+0x68>)
 800458c:	601a      	str	r2, [r3, #0]
}
 800458e:	bf00      	nop
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	200008ec 	.word	0x200008ec
 800459c:	20000d4c 	.word	0x20000d4c
 80045a0:	20000d60 	.word	0x20000d60
 80045a4:	20000d7c 	.word	0x20000d7c
 80045a8:	20000d90 	.word	0x20000d90
 80045ac:	20000da8 	.word	0x20000da8
 80045b0:	20000d74 	.word	0x20000d74
 80045b4:	20000d78 	.word	0x20000d78

080045b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045be:	e019      	b.n	80045f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80045c0:	f000 fd4a 	bl	8005058 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80045c4:	4b0f      	ldr	r3, [pc, #60]	; (8004604 <prvCheckTasksWaitingTermination+0x4c>)
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3304      	adds	r3, #4
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7fe fcb1 	bl	8002f38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80045d6:	4b0c      	ldr	r3, [pc, #48]	; (8004608 <prvCheckTasksWaitingTermination+0x50>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	3b01      	subs	r3, #1
 80045dc:	4a0a      	ldr	r2, [pc, #40]	; (8004608 <prvCheckTasksWaitingTermination+0x50>)
 80045de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80045e0:	4b0a      	ldr	r3, [pc, #40]	; (800460c <prvCheckTasksWaitingTermination+0x54>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3b01      	subs	r3, #1
 80045e6:	4a09      	ldr	r2, [pc, #36]	; (800460c <prvCheckTasksWaitingTermination+0x54>)
 80045e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80045ea:	f000 fd63 	bl	80050b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f80e 	bl	8004610 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045f4:	4b05      	ldr	r3, [pc, #20]	; (800460c <prvCheckTasksWaitingTermination+0x54>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1e1      	bne.n	80045c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80045fc:	bf00      	nop
 80045fe:	3708      	adds	r7, #8
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	20000d90 	.word	0x20000d90
 8004608:	20000dbc 	.word	0x20000dbc
 800460c:	20000da4 	.word	0x20000da4

08004610 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800461e:	2b00      	cmp	r3, #0
 8004620:	d108      	bne.n	8004634 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004626:	4618      	mov	r0, r3
 8004628:	f000 fece 	bl	80053c8 <vPortFree>
				vPortFree( pxTCB );
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 fecb 	bl	80053c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004632:	e017      	b.n	8004664 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800463a:	2b01      	cmp	r3, #1
 800463c:	d103      	bne.n	8004646 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 fec2 	bl	80053c8 <vPortFree>
	}
 8004644:	e00e      	b.n	8004664 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800464c:	2b02      	cmp	r3, #2
 800464e:	d009      	beq.n	8004664 <prvDeleteTCB+0x54>
 8004650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004654:	f383 8811 	msr	BASEPRI, r3
 8004658:	f3bf 8f6f 	isb	sy
 800465c:	f3bf 8f4f 	dsb	sy
 8004660:	60fb      	str	r3, [r7, #12]
 8004662:	e7fe      	b.n	8004662 <prvDeleteTCB+0x52>
	}
 8004664:	bf00      	nop
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004672:	4b0e      	ldr	r3, [pc, #56]	; (80046ac <prvResetNextTaskUnblockTime+0x40>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d101      	bne.n	8004680 <prvResetNextTaskUnblockTime+0x14>
 800467c:	2301      	movs	r3, #1
 800467e:	e000      	b.n	8004682 <prvResetNextTaskUnblockTime+0x16>
 8004680:	2300      	movs	r3, #0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d004      	beq.n	8004690 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004686:	4b0a      	ldr	r3, [pc, #40]	; (80046b0 <prvResetNextTaskUnblockTime+0x44>)
 8004688:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800468c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800468e:	e008      	b.n	80046a2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004690:	4b06      	ldr	r3, [pc, #24]	; (80046ac <prvResetNextTaskUnblockTime+0x40>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	4a04      	ldr	r2, [pc, #16]	; (80046b0 <prvResetNextTaskUnblockTime+0x44>)
 80046a0:	6013      	str	r3, [r2, #0]
}
 80046a2:	bf00      	nop
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bc80      	pop	{r7}
 80046aa:	4770      	bx	lr
 80046ac:	20000d74 	.word	0x20000d74
 80046b0:	20000ddc 	.word	0x20000ddc

080046b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80046ba:	4b0b      	ldr	r3, [pc, #44]	; (80046e8 <xTaskGetSchedulerState+0x34>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d102      	bne.n	80046c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80046c2:	2301      	movs	r3, #1
 80046c4:	607b      	str	r3, [r7, #4]
 80046c6:	e008      	b.n	80046da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046c8:	4b08      	ldr	r3, [pc, #32]	; (80046ec <xTaskGetSchedulerState+0x38>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d102      	bne.n	80046d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80046d0:	2302      	movs	r3, #2
 80046d2:	607b      	str	r3, [r7, #4]
 80046d4:	e001      	b.n	80046da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80046d6:	2300      	movs	r3, #0
 80046d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80046da:	687b      	ldr	r3, [r7, #4]
	}
 80046dc:	4618      	mov	r0, r3
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bc80      	pop	{r7}
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	20000dc8 	.word	0x20000dc8
 80046ec:	20000de4 	.word	0x20000de4

080046f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80046fc:	2300      	movs	r3, #0
 80046fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d054      	beq.n	80047b0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004706:	4b2d      	ldr	r3, [pc, #180]	; (80047bc <xTaskPriorityDisinherit+0xcc>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	429a      	cmp	r2, r3
 800470e:	d009      	beq.n	8004724 <xTaskPriorityDisinherit+0x34>
 8004710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004714:	f383 8811 	msr	BASEPRI, r3
 8004718:	f3bf 8f6f 	isb	sy
 800471c:	f3bf 8f4f 	dsb	sy
 8004720:	60fb      	str	r3, [r7, #12]
 8004722:	e7fe      	b.n	8004722 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004728:	2b00      	cmp	r3, #0
 800472a:	d109      	bne.n	8004740 <xTaskPriorityDisinherit+0x50>
 800472c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004730:	f383 8811 	msr	BASEPRI, r3
 8004734:	f3bf 8f6f 	isb	sy
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	60bb      	str	r3, [r7, #8]
 800473e:	e7fe      	b.n	800473e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004744:	1e5a      	subs	r2, r3, #1
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004752:	429a      	cmp	r2, r3
 8004754:	d02c      	beq.n	80047b0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800475a:	2b00      	cmp	r3, #0
 800475c:	d128      	bne.n	80047b0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	3304      	adds	r3, #4
 8004762:	4618      	mov	r0, r3
 8004764:	f7fe fbe8 	bl	8002f38 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004774:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004780:	4b0f      	ldr	r3, [pc, #60]	; (80047c0 <xTaskPriorityDisinherit+0xd0>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	429a      	cmp	r2, r3
 8004786:	d903      	bls.n	8004790 <xTaskPriorityDisinherit+0xa0>
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478c:	4a0c      	ldr	r2, [pc, #48]	; (80047c0 <xTaskPriorityDisinherit+0xd0>)
 800478e:	6013      	str	r3, [r2, #0]
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004794:	4613      	mov	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4413      	add	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4a09      	ldr	r2, [pc, #36]	; (80047c4 <xTaskPriorityDisinherit+0xd4>)
 800479e:	441a      	add	r2, r3
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	3304      	adds	r3, #4
 80047a4:	4619      	mov	r1, r3
 80047a6:	4610      	mov	r0, r2
 80047a8:	f7fe fb6b 	bl	8002e82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80047ac:	2301      	movs	r3, #1
 80047ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80047b0:	697b      	ldr	r3, [r7, #20]
	}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3718      	adds	r7, #24
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	200008e8 	.word	0x200008e8
 80047c0:	20000dc4 	.word	0x20000dc4
 80047c4:	200008ec 	.word	0x200008ec

080047c8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80047d2:	4b21      	ldr	r3, [pc, #132]	; (8004858 <prvAddCurrentTaskToDelayedList+0x90>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047d8:	4b20      	ldr	r3, [pc, #128]	; (800485c <prvAddCurrentTaskToDelayedList+0x94>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	3304      	adds	r3, #4
 80047de:	4618      	mov	r0, r3
 80047e0:	f7fe fbaa 	bl	8002f38 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047ea:	d10a      	bne.n	8004802 <prvAddCurrentTaskToDelayedList+0x3a>
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d007      	beq.n	8004802 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047f2:	4b1a      	ldr	r3, [pc, #104]	; (800485c <prvAddCurrentTaskToDelayedList+0x94>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	3304      	adds	r3, #4
 80047f8:	4619      	mov	r1, r3
 80047fa:	4819      	ldr	r0, [pc, #100]	; (8004860 <prvAddCurrentTaskToDelayedList+0x98>)
 80047fc:	f7fe fb41 	bl	8002e82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004800:	e026      	b.n	8004850 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4413      	add	r3, r2
 8004808:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800480a:	4b14      	ldr	r3, [pc, #80]	; (800485c <prvAddCurrentTaskToDelayedList+0x94>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	429a      	cmp	r2, r3
 8004818:	d209      	bcs.n	800482e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800481a:	4b12      	ldr	r3, [pc, #72]	; (8004864 <prvAddCurrentTaskToDelayedList+0x9c>)
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	4b0f      	ldr	r3, [pc, #60]	; (800485c <prvAddCurrentTaskToDelayedList+0x94>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	3304      	adds	r3, #4
 8004824:	4619      	mov	r1, r3
 8004826:	4610      	mov	r0, r2
 8004828:	f7fe fb4e 	bl	8002ec8 <vListInsert>
}
 800482c:	e010      	b.n	8004850 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800482e:	4b0e      	ldr	r3, [pc, #56]	; (8004868 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	4b0a      	ldr	r3, [pc, #40]	; (800485c <prvAddCurrentTaskToDelayedList+0x94>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	3304      	adds	r3, #4
 8004838:	4619      	mov	r1, r3
 800483a:	4610      	mov	r0, r2
 800483c:	f7fe fb44 	bl	8002ec8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004840:	4b0a      	ldr	r3, [pc, #40]	; (800486c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	429a      	cmp	r2, r3
 8004848:	d202      	bcs.n	8004850 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800484a:	4a08      	ldr	r2, [pc, #32]	; (800486c <prvAddCurrentTaskToDelayedList+0xa4>)
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	6013      	str	r3, [r2, #0]
}
 8004850:	bf00      	nop
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	20000dc0 	.word	0x20000dc0
 800485c:	200008e8 	.word	0x200008e8
 8004860:	20000da8 	.word	0x20000da8
 8004864:	20000d78 	.word	0x20000d78
 8004868:	20000d74 	.word	0x20000d74
 800486c:	20000ddc 	.word	0x20000ddc

08004870 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b08a      	sub	sp, #40	; 0x28
 8004874:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004876:	2300      	movs	r3, #0
 8004878:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800487a:	f000 fac3 	bl	8004e04 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800487e:	4b1c      	ldr	r3, [pc, #112]	; (80048f0 <xTimerCreateTimerTask+0x80>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d021      	beq.n	80048ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004886:	2300      	movs	r3, #0
 8004888:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800488a:	2300      	movs	r3, #0
 800488c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800488e:	1d3a      	adds	r2, r7, #4
 8004890:	f107 0108 	add.w	r1, r7, #8
 8004894:	f107 030c 	add.w	r3, r7, #12
 8004898:	4618      	mov	r0, r3
 800489a:	f7fe faad 	bl	8002df8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800489e:	6879      	ldr	r1, [r7, #4]
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	9202      	str	r2, [sp, #8]
 80048a6:	9301      	str	r3, [sp, #4]
 80048a8:	2302      	movs	r3, #2
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	2300      	movs	r3, #0
 80048ae:	460a      	mov	r2, r1
 80048b0:	4910      	ldr	r1, [pc, #64]	; (80048f4 <xTimerCreateTimerTask+0x84>)
 80048b2:	4811      	ldr	r0, [pc, #68]	; (80048f8 <xTimerCreateTimerTask+0x88>)
 80048b4:	f7ff f8f8 	bl	8003aa8 <xTaskCreateStatic>
 80048b8:	4602      	mov	r2, r0
 80048ba:	4b10      	ldr	r3, [pc, #64]	; (80048fc <xTimerCreateTimerTask+0x8c>)
 80048bc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80048be:	4b0f      	ldr	r3, [pc, #60]	; (80048fc <xTimerCreateTimerTask+0x8c>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80048c6:	2301      	movs	r3, #1
 80048c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d109      	bne.n	80048e4 <xTimerCreateTimerTask+0x74>
 80048d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d4:	f383 8811 	msr	BASEPRI, r3
 80048d8:	f3bf 8f6f 	isb	sy
 80048dc:	f3bf 8f4f 	dsb	sy
 80048e0:	613b      	str	r3, [r7, #16]
 80048e2:	e7fe      	b.n	80048e2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80048e4:	697b      	ldr	r3, [r7, #20]
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3718      	adds	r7, #24
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	20000e18 	.word	0x20000e18
 80048f4:	08005c54 	.word	0x08005c54
 80048f8:	08004a19 	.word	0x08004a19
 80048fc:	20000e1c 	.word	0x20000e1c

08004900 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b08a      	sub	sp, #40	; 0x28
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
 800490c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800490e:	2300      	movs	r3, #0
 8004910:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d109      	bne.n	800492c <xTimerGenericCommand+0x2c>
 8004918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491c:	f383 8811 	msr	BASEPRI, r3
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	623b      	str	r3, [r7, #32]
 800492a:	e7fe      	b.n	800492a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800492c:	4b19      	ldr	r3, [pc, #100]	; (8004994 <xTimerGenericCommand+0x94>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d02a      	beq.n	800498a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	2b05      	cmp	r3, #5
 8004944:	dc18      	bgt.n	8004978 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004946:	f7ff feb5 	bl	80046b4 <xTaskGetSchedulerState>
 800494a:	4603      	mov	r3, r0
 800494c:	2b02      	cmp	r3, #2
 800494e:	d109      	bne.n	8004964 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004950:	4b10      	ldr	r3, [pc, #64]	; (8004994 <xTimerGenericCommand+0x94>)
 8004952:	6818      	ldr	r0, [r3, #0]
 8004954:	f107 0110 	add.w	r1, r7, #16
 8004958:	2300      	movs	r3, #0
 800495a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800495c:	f7fe fc50 	bl	8003200 <xQueueGenericSend>
 8004960:	6278      	str	r0, [r7, #36]	; 0x24
 8004962:	e012      	b.n	800498a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004964:	4b0b      	ldr	r3, [pc, #44]	; (8004994 <xTimerGenericCommand+0x94>)
 8004966:	6818      	ldr	r0, [r3, #0]
 8004968:	f107 0110 	add.w	r1, r7, #16
 800496c:	2300      	movs	r3, #0
 800496e:	2200      	movs	r2, #0
 8004970:	f7fe fc46 	bl	8003200 <xQueueGenericSend>
 8004974:	6278      	str	r0, [r7, #36]	; 0x24
 8004976:	e008      	b.n	800498a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004978:	4b06      	ldr	r3, [pc, #24]	; (8004994 <xTimerGenericCommand+0x94>)
 800497a:	6818      	ldr	r0, [r3, #0]
 800497c:	f107 0110 	add.w	r1, r7, #16
 8004980:	2300      	movs	r3, #0
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	f7fe fd36 	bl	80033f4 <xQueueGenericSendFromISR>
 8004988:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800498c:	4618      	mov	r0, r3
 800498e:	3728      	adds	r7, #40	; 0x28
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	20000e18 	.word	0x20000e18

08004998 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b088      	sub	sp, #32
 800499c:	af02      	add	r7, sp, #8
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049a2:	4b1c      	ldr	r3, [pc, #112]	; (8004a14 <prvProcessExpiredTimer+0x7c>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	3304      	adds	r3, #4
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7fe fac1 	bl	8002f38 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d121      	bne.n	8004a02 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	699a      	ldr	r2, [r3, #24]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	18d1      	adds	r1, r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	6978      	ldr	r0, [r7, #20]
 80049cc:	f000 f8c8 	bl	8004b60 <prvInsertTimerInActiveList>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d015      	beq.n	8004a02 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049d6:	2300      	movs	r3, #0
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	2300      	movs	r3, #0
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	2100      	movs	r1, #0
 80049e0:	6978      	ldr	r0, [r7, #20]
 80049e2:	f7ff ff8d 	bl	8004900 <xTimerGenericCommand>
 80049e6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d109      	bne.n	8004a02 <prvProcessExpiredTimer+0x6a>
 80049ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f2:	f383 8811 	msr	BASEPRI, r3
 80049f6:	f3bf 8f6f 	isb	sy
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	e7fe      	b.n	8004a00 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a06:	6978      	ldr	r0, [r7, #20]
 8004a08:	4798      	blx	r3
}
 8004a0a:	bf00      	nop
 8004a0c:	3718      	adds	r7, #24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	20000e10 	.word	0x20000e10

08004a18 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a20:	f107 0308 	add.w	r3, r7, #8
 8004a24:	4618      	mov	r0, r3
 8004a26:	f000 f857 	bl	8004ad8 <prvGetNextExpireTime>
 8004a2a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	4619      	mov	r1, r3
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f000 f803 	bl	8004a3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004a36:	f000 f8d5 	bl	8004be4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a3a:	e7f1      	b.n	8004a20 <prvTimerTask+0x8>

08004a3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004a46:	f7ff fa5b 	bl	8003f00 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a4a:	f107 0308 	add.w	r3, r7, #8
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 f866 	bl	8004b20 <prvSampleTimeNow>
 8004a54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d130      	bne.n	8004abe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10a      	bne.n	8004a78 <prvProcessTimerOrBlockTask+0x3c>
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d806      	bhi.n	8004a78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004a6a:	f7ff fa57 	bl	8003f1c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004a6e:	68f9      	ldr	r1, [r7, #12]
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7ff ff91 	bl	8004998 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004a76:	e024      	b.n	8004ac2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d008      	beq.n	8004a90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004a7e:	4b13      	ldr	r3, [pc, #76]	; (8004acc <prvProcessTimerOrBlockTask+0x90>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	bf0c      	ite	eq
 8004a88:	2301      	moveq	r3, #1
 8004a8a:	2300      	movne	r3, #0
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004a90:	4b0f      	ldr	r3, [pc, #60]	; (8004ad0 <prvProcessTimerOrBlockTask+0x94>)
 8004a92:	6818      	ldr	r0, [r3, #0]
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	f7fe ffcf 	bl	8003a40 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004aa2:	f7ff fa3b 	bl	8003f1c <xTaskResumeAll>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10a      	bne.n	8004ac2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004aac:	4b09      	ldr	r3, [pc, #36]	; (8004ad4 <prvProcessTimerOrBlockTask+0x98>)
 8004aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	f3bf 8f6f 	isb	sy
}
 8004abc:	e001      	b.n	8004ac2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004abe:	f7ff fa2d 	bl	8003f1c <xTaskResumeAll>
}
 8004ac2:	bf00      	nop
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	20000e14 	.word	0x20000e14
 8004ad0:	20000e18 	.word	0x20000e18
 8004ad4:	e000ed04 	.word	0xe000ed04

08004ad8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004ae0:	4b0e      	ldr	r3, [pc, #56]	; (8004b1c <prvGetNextExpireTime+0x44>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	bf0c      	ite	eq
 8004aea:	2301      	moveq	r3, #1
 8004aec:	2300      	movne	r3, #0
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	461a      	mov	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d105      	bne.n	8004b0a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004afe:	4b07      	ldr	r3, [pc, #28]	; (8004b1c <prvGetNextExpireTime+0x44>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	e001      	b.n	8004b0e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bc80      	pop	{r7}
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	20000e10 	.word	0x20000e10

08004b20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004b28:	f7ff fa94 	bl	8004054 <xTaskGetTickCount>
 8004b2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004b2e:	4b0b      	ldr	r3, [pc, #44]	; (8004b5c <prvSampleTimeNow+0x3c>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d205      	bcs.n	8004b44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004b38:	f000 f904 	bl	8004d44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	601a      	str	r2, [r3, #0]
 8004b42:	e002      	b.n	8004b4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004b4a:	4a04      	ldr	r2, [pc, #16]	; (8004b5c <prvSampleTimeNow+0x3c>)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004b50:	68fb      	ldr	r3, [r7, #12]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	20000e20 	.word	0x20000e20

08004b60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
 8004b6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d812      	bhi.n	8004bac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	1ad2      	subs	r2, r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d302      	bcc.n	8004b9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004b94:	2301      	movs	r3, #1
 8004b96:	617b      	str	r3, [r7, #20]
 8004b98:	e01b      	b.n	8004bd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004b9a:	4b10      	ldr	r3, [pc, #64]	; (8004bdc <prvInsertTimerInActiveList+0x7c>)
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	3304      	adds	r3, #4
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	4610      	mov	r0, r2
 8004ba6:	f7fe f98f 	bl	8002ec8 <vListInsert>
 8004baa:	e012      	b.n	8004bd2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d206      	bcs.n	8004bc2 <prvInsertTimerInActiveList+0x62>
 8004bb4:	68ba      	ldr	r2, [r7, #8]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d302      	bcc.n	8004bc2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	617b      	str	r3, [r7, #20]
 8004bc0:	e007      	b.n	8004bd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004bc2:	4b07      	ldr	r3, [pc, #28]	; (8004be0 <prvInsertTimerInActiveList+0x80>)
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	3304      	adds	r3, #4
 8004bca:	4619      	mov	r1, r3
 8004bcc:	4610      	mov	r0, r2
 8004bce:	f7fe f97b 	bl	8002ec8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004bd2:	697b      	ldr	r3, [r7, #20]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3718      	adds	r7, #24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	20000e14 	.word	0x20000e14
 8004be0:	20000e10 	.word	0x20000e10

08004be4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b08e      	sub	sp, #56	; 0x38
 8004be8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004bea:	e099      	b.n	8004d20 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	da17      	bge.n	8004c22 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004bf2:	1d3b      	adds	r3, r7, #4
 8004bf4:	3304      	adds	r3, #4
 8004bf6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d109      	bne.n	8004c12 <prvProcessReceivedCommands+0x2e>
 8004bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c02:	f383 8811 	msr	BASEPRI, r3
 8004c06:	f3bf 8f6f 	isb	sy
 8004c0a:	f3bf 8f4f 	dsb	sy
 8004c0e:	61fb      	str	r3, [r7, #28]
 8004c10:	e7fe      	b.n	8004c10 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c18:	6850      	ldr	r0, [r2, #4]
 8004c1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c1c:	6892      	ldr	r2, [r2, #8]
 8004c1e:	4611      	mov	r1, r2
 8004c20:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	db7a      	blt.n	8004d1e <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2e:	695b      	ldr	r3, [r3, #20]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d004      	beq.n	8004c3e <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c36:	3304      	adds	r3, #4
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7fe f97d 	bl	8002f38 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c3e:	463b      	mov	r3, r7
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7ff ff6d 	bl	8004b20 <prvSampleTimeNow>
 8004c46:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2b09      	cmp	r3, #9
 8004c4c:	d868      	bhi.n	8004d20 <prvProcessReceivedCommands+0x13c>
 8004c4e:	a201      	add	r2, pc, #4	; (adr r2, 8004c54 <prvProcessReceivedCommands+0x70>)
 8004c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c54:	08004c7d 	.word	0x08004c7d
 8004c58:	08004c7d 	.word	0x08004c7d
 8004c5c:	08004c7d 	.word	0x08004c7d
 8004c60:	08004d21 	.word	0x08004d21
 8004c64:	08004cd7 	.word	0x08004cd7
 8004c68:	08004d0d 	.word	0x08004d0d
 8004c6c:	08004c7d 	.word	0x08004c7d
 8004c70:	08004c7d 	.word	0x08004c7d
 8004c74:	08004d21 	.word	0x08004d21
 8004c78:	08004cd7 	.word	0x08004cd7
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004c7c:	68ba      	ldr	r2, [r7, #8]
 8004c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	18d1      	adds	r1, r2, r3
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c8a:	f7ff ff69 	bl	8004b60 <prvInsertTimerInActiveList>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d045      	beq.n	8004d20 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c9a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9e:	69db      	ldr	r3, [r3, #28]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d13d      	bne.n	8004d20 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	441a      	add	r2, r3
 8004cac:	2300      	movs	r3, #0
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	2100      	movs	r1, #0
 8004cb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cb6:	f7ff fe23 	bl	8004900 <xTimerGenericCommand>
 8004cba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004cbc:	6a3b      	ldr	r3, [r7, #32]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d12e      	bne.n	8004d20 <prvProcessReceivedCommands+0x13c>
 8004cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc6:	f383 8811 	msr	BASEPRI, r3
 8004cca:	f3bf 8f6f 	isb	sy
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	61bb      	str	r3, [r7, #24]
 8004cd4:	e7fe      	b.n	8004cd4 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cda:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d109      	bne.n	8004cf8 <prvProcessReceivedCommands+0x114>
 8004ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce8:	f383 8811 	msr	BASEPRI, r3
 8004cec:	f3bf 8f6f 	isb	sy
 8004cf0:	f3bf 8f4f 	dsb	sy
 8004cf4:	617b      	str	r3, [r7, #20]
 8004cf6:	e7fe      	b.n	8004cf6 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfa:	699a      	ldr	r2, [r3, #24]
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfe:	18d1      	adds	r1, r2, r3
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d06:	f7ff ff2b 	bl	8004b60 <prvInsertTimerInActiveList>
					break;
 8004d0a:	e009      	b.n	8004d20 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d104      	bne.n	8004d20 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8004d16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d18:	f000 fb56 	bl	80053c8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004d1c:	e000      	b.n	8004d20 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004d1e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d20:	4b07      	ldr	r3, [pc, #28]	; (8004d40 <prvProcessReceivedCommands+0x15c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	1d39      	adds	r1, r7, #4
 8004d26:	2200      	movs	r2, #0
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7fe fbf7 	bl	800351c <xQueueReceive>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f47f af5b 	bne.w	8004bec <prvProcessReceivedCommands+0x8>
	}
}
 8004d36:	bf00      	nop
 8004d38:	3730      	adds	r7, #48	; 0x30
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	20000e18 	.word	0x20000e18

08004d44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b088      	sub	sp, #32
 8004d48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d4a:	e044      	b.n	8004dd6 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d4c:	4b2b      	ldr	r3, [pc, #172]	; (8004dfc <prvSwitchTimerLists+0xb8>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d56:	4b29      	ldr	r3, [pc, #164]	; (8004dfc <prvSwitchTimerLists+0xb8>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	3304      	adds	r3, #4
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7fe f8e7 	bl	8002f38 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d12d      	bne.n	8004dd6 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	4413      	add	r3, r2
 8004d82:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d90e      	bls.n	8004daa <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d98:	4b18      	ldr	r3, [pc, #96]	; (8004dfc <prvSwitchTimerLists+0xb8>)
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	3304      	adds	r3, #4
 8004da0:	4619      	mov	r1, r3
 8004da2:	4610      	mov	r0, r2
 8004da4:	f7fe f890 	bl	8002ec8 <vListInsert>
 8004da8:	e015      	b.n	8004dd6 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004daa:	2300      	movs	r3, #0
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	2300      	movs	r3, #0
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	2100      	movs	r1, #0
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f7ff fda3 	bl	8004900 <xTimerGenericCommand>
 8004dba:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d109      	bne.n	8004dd6 <prvSwitchTimerLists+0x92>
 8004dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc6:	f383 8811 	msr	BASEPRI, r3
 8004dca:	f3bf 8f6f 	isb	sy
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	603b      	str	r3, [r7, #0]
 8004dd4:	e7fe      	b.n	8004dd4 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004dd6:	4b09      	ldr	r3, [pc, #36]	; (8004dfc <prvSwitchTimerLists+0xb8>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1b5      	bne.n	8004d4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004de0:	4b06      	ldr	r3, [pc, #24]	; (8004dfc <prvSwitchTimerLists+0xb8>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004de6:	4b06      	ldr	r3, [pc, #24]	; (8004e00 <prvSwitchTimerLists+0xbc>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a04      	ldr	r2, [pc, #16]	; (8004dfc <prvSwitchTimerLists+0xb8>)
 8004dec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004dee:	4a04      	ldr	r2, [pc, #16]	; (8004e00 <prvSwitchTimerLists+0xbc>)
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	6013      	str	r3, [r2, #0]
}
 8004df4:	bf00      	nop
 8004df6:	3718      	adds	r7, #24
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	20000e10 	.word	0x20000e10
 8004e00:	20000e14 	.word	0x20000e14

08004e04 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004e0a:	f000 f925 	bl	8005058 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004e0e:	4b15      	ldr	r3, [pc, #84]	; (8004e64 <prvCheckForValidListAndQueue+0x60>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d120      	bne.n	8004e58 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004e16:	4814      	ldr	r0, [pc, #80]	; (8004e68 <prvCheckForValidListAndQueue+0x64>)
 8004e18:	f7fe f808 	bl	8002e2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004e1c:	4813      	ldr	r0, [pc, #76]	; (8004e6c <prvCheckForValidListAndQueue+0x68>)
 8004e1e:	f7fe f805 	bl	8002e2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004e22:	4b13      	ldr	r3, [pc, #76]	; (8004e70 <prvCheckForValidListAndQueue+0x6c>)
 8004e24:	4a10      	ldr	r2, [pc, #64]	; (8004e68 <prvCheckForValidListAndQueue+0x64>)
 8004e26:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004e28:	4b12      	ldr	r3, [pc, #72]	; (8004e74 <prvCheckForValidListAndQueue+0x70>)
 8004e2a:	4a10      	ldr	r2, [pc, #64]	; (8004e6c <prvCheckForValidListAndQueue+0x68>)
 8004e2c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004e2e:	2300      	movs	r3, #0
 8004e30:	9300      	str	r3, [sp, #0]
 8004e32:	4b11      	ldr	r3, [pc, #68]	; (8004e78 <prvCheckForValidListAndQueue+0x74>)
 8004e34:	4a11      	ldr	r2, [pc, #68]	; (8004e7c <prvCheckForValidListAndQueue+0x78>)
 8004e36:	2110      	movs	r1, #16
 8004e38:	200a      	movs	r0, #10
 8004e3a:	f7fe f90f 	bl	800305c <xQueueGenericCreateStatic>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	4b08      	ldr	r3, [pc, #32]	; (8004e64 <prvCheckForValidListAndQueue+0x60>)
 8004e42:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004e44:	4b07      	ldr	r3, [pc, #28]	; (8004e64 <prvCheckForValidListAndQueue+0x60>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d005      	beq.n	8004e58 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004e4c:	4b05      	ldr	r3, [pc, #20]	; (8004e64 <prvCheckForValidListAndQueue+0x60>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	490b      	ldr	r1, [pc, #44]	; (8004e80 <prvCheckForValidListAndQueue+0x7c>)
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7fe fdcc 	bl	80039f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e58:	f000 f92c 	bl	80050b4 <vPortExitCritical>
}
 8004e5c:	bf00      	nop
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	20000e18 	.word	0x20000e18
 8004e68:	20000de8 	.word	0x20000de8
 8004e6c:	20000dfc 	.word	0x20000dfc
 8004e70:	20000e10 	.word	0x20000e10
 8004e74:	20000e14 	.word	0x20000e14
 8004e78:	20000ec4 	.word	0x20000ec4
 8004e7c:	20000e24 	.word	0x20000e24
 8004e80:	08005c5c 	.word	0x08005c5c

08004e84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	3b04      	subs	r3, #4
 8004e94:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	3b04      	subs	r3, #4
 8004ea2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	f023 0201 	bic.w	r2, r3, #1
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	3b04      	subs	r3, #4
 8004eb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004eb4:	4a08      	ldr	r2, [pc, #32]	; (8004ed8 <pxPortInitialiseStack+0x54>)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	3b14      	subs	r3, #20
 8004ebe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	3b20      	subs	r3, #32
 8004eca:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bc80      	pop	{r7}
 8004ed6:	4770      	bx	lr
 8004ed8:	08004edd 	.word	0x08004edd

08004edc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004ee6:	4b10      	ldr	r3, [pc, #64]	; (8004f28 <prvTaskExitError+0x4c>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004eee:	d009      	beq.n	8004f04 <prvTaskExitError+0x28>
 8004ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef4:	f383 8811 	msr	BASEPRI, r3
 8004ef8:	f3bf 8f6f 	isb	sy
 8004efc:	f3bf 8f4f 	dsb	sy
 8004f00:	60fb      	str	r3, [r7, #12]
 8004f02:	e7fe      	b.n	8004f02 <prvTaskExitError+0x26>
 8004f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f08:	f383 8811 	msr	BASEPRI, r3
 8004f0c:	f3bf 8f6f 	isb	sy
 8004f10:	f3bf 8f4f 	dsb	sy
 8004f14:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004f16:	bf00      	nop
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d0fc      	beq.n	8004f18 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f1e:	bf00      	nop
 8004f20:	3714      	adds	r7, #20
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bc80      	pop	{r7}
 8004f26:	4770      	bx	lr
 8004f28:	20000034 	.word	0x20000034
 8004f2c:	00000000 	.word	0x00000000

08004f30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004f30:	4b07      	ldr	r3, [pc, #28]	; (8004f50 <pxCurrentTCBConst2>)
 8004f32:	6819      	ldr	r1, [r3, #0]
 8004f34:	6808      	ldr	r0, [r1, #0]
 8004f36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004f3a:	f380 8809 	msr	PSP, r0
 8004f3e:	f3bf 8f6f 	isb	sy
 8004f42:	f04f 0000 	mov.w	r0, #0
 8004f46:	f380 8811 	msr	BASEPRI, r0
 8004f4a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004f4e:	4770      	bx	lr

08004f50 <pxCurrentTCBConst2>:
 8004f50:	200008e8 	.word	0x200008e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004f54:	bf00      	nop
 8004f56:	bf00      	nop

08004f58 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004f58:	4806      	ldr	r0, [pc, #24]	; (8004f74 <prvPortStartFirstTask+0x1c>)
 8004f5a:	6800      	ldr	r0, [r0, #0]
 8004f5c:	6800      	ldr	r0, [r0, #0]
 8004f5e:	f380 8808 	msr	MSP, r0
 8004f62:	b662      	cpsie	i
 8004f64:	b661      	cpsie	f
 8004f66:	f3bf 8f4f 	dsb	sy
 8004f6a:	f3bf 8f6f 	isb	sy
 8004f6e:	df00      	svc	0
 8004f70:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004f72:	bf00      	nop
 8004f74:	e000ed08 	.word	0xe000ed08

08004f78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f7e:	4b31      	ldr	r3, [pc, #196]	; (8005044 <xPortStartScheduler+0xcc>)
 8004f80:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	22ff      	movs	r2, #255	; 0xff
 8004f8e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f98:	78fb      	ldrb	r3, [r7, #3]
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004fa0:	b2da      	uxtb	r2, r3
 8004fa2:	4b29      	ldr	r3, [pc, #164]	; (8005048 <xPortStartScheduler+0xd0>)
 8004fa4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004fa6:	4b29      	ldr	r3, [pc, #164]	; (800504c <xPortStartScheduler+0xd4>)
 8004fa8:	2207      	movs	r2, #7
 8004faa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fac:	e009      	b.n	8004fc2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004fae:	4b27      	ldr	r3, [pc, #156]	; (800504c <xPortStartScheduler+0xd4>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	4a25      	ldr	r2, [pc, #148]	; (800504c <xPortStartScheduler+0xd4>)
 8004fb6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004fb8:	78fb      	ldrb	r3, [r7, #3]
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	005b      	lsls	r3, r3, #1
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fc2:	78fb      	ldrb	r3, [r7, #3]
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fca:	2b80      	cmp	r3, #128	; 0x80
 8004fcc:	d0ef      	beq.n	8004fae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004fce:	4b1f      	ldr	r3, [pc, #124]	; (800504c <xPortStartScheduler+0xd4>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f1c3 0307 	rsb	r3, r3, #7
 8004fd6:	2b04      	cmp	r3, #4
 8004fd8:	d009      	beq.n	8004fee <xPortStartScheduler+0x76>
 8004fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fde:	f383 8811 	msr	BASEPRI, r3
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	f3bf 8f4f 	dsb	sy
 8004fea:	60bb      	str	r3, [r7, #8]
 8004fec:	e7fe      	b.n	8004fec <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004fee:	4b17      	ldr	r3, [pc, #92]	; (800504c <xPortStartScheduler+0xd4>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	021b      	lsls	r3, r3, #8
 8004ff4:	4a15      	ldr	r2, [pc, #84]	; (800504c <xPortStartScheduler+0xd4>)
 8004ff6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ff8:	4b14      	ldr	r3, [pc, #80]	; (800504c <xPortStartScheduler+0xd4>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005000:	4a12      	ldr	r2, [pc, #72]	; (800504c <xPortStartScheduler+0xd4>)
 8005002:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	b2da      	uxtb	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800500c:	4b10      	ldr	r3, [pc, #64]	; (8005050 <xPortStartScheduler+0xd8>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a0f      	ldr	r2, [pc, #60]	; (8005050 <xPortStartScheduler+0xd8>)
 8005012:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005016:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005018:	4b0d      	ldr	r3, [pc, #52]	; (8005050 <xPortStartScheduler+0xd8>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a0c      	ldr	r2, [pc, #48]	; (8005050 <xPortStartScheduler+0xd8>)
 800501e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005022:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005024:	f000 f8b0 	bl	8005188 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005028:	4b0a      	ldr	r3, [pc, #40]	; (8005054 <xPortStartScheduler+0xdc>)
 800502a:	2200      	movs	r2, #0
 800502c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800502e:	f7ff ff93 	bl	8004f58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005032:	f7ff f8db 	bl	80041ec <vTaskSwitchContext>
	prvTaskExitError();
 8005036:	f7ff ff51 	bl	8004edc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	e000e400 	.word	0xe000e400
 8005048:	20000f14 	.word	0x20000f14
 800504c:	20000f18 	.word	0x20000f18
 8005050:	e000ed20 	.word	0xe000ed20
 8005054:	20000034 	.word	0x20000034

08005058 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005062:	f383 8811 	msr	BASEPRI, r3
 8005066:	f3bf 8f6f 	isb	sy
 800506a:	f3bf 8f4f 	dsb	sy
 800506e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005070:	4b0e      	ldr	r3, [pc, #56]	; (80050ac <vPortEnterCritical+0x54>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	3301      	adds	r3, #1
 8005076:	4a0d      	ldr	r2, [pc, #52]	; (80050ac <vPortEnterCritical+0x54>)
 8005078:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800507a:	4b0c      	ldr	r3, [pc, #48]	; (80050ac <vPortEnterCritical+0x54>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d10e      	bne.n	80050a0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005082:	4b0b      	ldr	r3, [pc, #44]	; (80050b0 <vPortEnterCritical+0x58>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b00      	cmp	r3, #0
 800508a:	d009      	beq.n	80050a0 <vPortEnterCritical+0x48>
 800508c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005090:	f383 8811 	msr	BASEPRI, r3
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	f3bf 8f4f 	dsb	sy
 800509c:	603b      	str	r3, [r7, #0]
 800509e:	e7fe      	b.n	800509e <vPortEnterCritical+0x46>
	}
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bc80      	pop	{r7}
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	20000034 	.word	0x20000034
 80050b0:	e000ed04 	.word	0xe000ed04

080050b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80050ba:	4b10      	ldr	r3, [pc, #64]	; (80050fc <vPortExitCritical+0x48>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d109      	bne.n	80050d6 <vPortExitCritical+0x22>
 80050c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c6:	f383 8811 	msr	BASEPRI, r3
 80050ca:	f3bf 8f6f 	isb	sy
 80050ce:	f3bf 8f4f 	dsb	sy
 80050d2:	607b      	str	r3, [r7, #4]
 80050d4:	e7fe      	b.n	80050d4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80050d6:	4b09      	ldr	r3, [pc, #36]	; (80050fc <vPortExitCritical+0x48>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	3b01      	subs	r3, #1
 80050dc:	4a07      	ldr	r2, [pc, #28]	; (80050fc <vPortExitCritical+0x48>)
 80050de:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80050e0:	4b06      	ldr	r3, [pc, #24]	; (80050fc <vPortExitCritical+0x48>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d104      	bne.n	80050f2 <vPortExitCritical+0x3e>
 80050e8:	2300      	movs	r3, #0
 80050ea:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80050f2:	bf00      	nop
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bc80      	pop	{r7}
 80050fa:	4770      	bx	lr
 80050fc:	20000034 	.word	0x20000034

08005100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005100:	f3ef 8009 	mrs	r0, PSP
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	4b0d      	ldr	r3, [pc, #52]	; (8005140 <pxCurrentTCBConst>)
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005110:	6010      	str	r0, [r2, #0]
 8005112:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005116:	f04f 0050 	mov.w	r0, #80	; 0x50
 800511a:	f380 8811 	msr	BASEPRI, r0
 800511e:	f7ff f865 	bl	80041ec <vTaskSwitchContext>
 8005122:	f04f 0000 	mov.w	r0, #0
 8005126:	f380 8811 	msr	BASEPRI, r0
 800512a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800512e:	6819      	ldr	r1, [r3, #0]
 8005130:	6808      	ldr	r0, [r1, #0]
 8005132:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005136:	f380 8809 	msr	PSP, r0
 800513a:	f3bf 8f6f 	isb	sy
 800513e:	4770      	bx	lr

08005140 <pxCurrentTCBConst>:
 8005140:	200008e8 	.word	0x200008e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005144:	bf00      	nop
 8005146:	bf00      	nop

08005148 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
	__asm volatile
 800514e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005152:	f383 8811 	msr	BASEPRI, r3
 8005156:	f3bf 8f6f 	isb	sy
 800515a:	f3bf 8f4f 	dsb	sy
 800515e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005160:	f7fe ff86 	bl	8004070 <xTaskIncrementTick>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d003      	beq.n	8005172 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800516a:	4b06      	ldr	r3, [pc, #24]	; (8005184 <SysTick_Handler+0x3c>)
 800516c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005170:	601a      	str	r2, [r3, #0]
 8005172:	2300      	movs	r3, #0
 8005174:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800517c:	bf00      	nop
 800517e:	3708      	adds	r7, #8
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	e000ed04 	.word	0xe000ed04

08005188 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005188:	b480      	push	{r7}
 800518a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800518c:	4b0a      	ldr	r3, [pc, #40]	; (80051b8 <vPortSetupTimerInterrupt+0x30>)
 800518e:	2200      	movs	r2, #0
 8005190:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005192:	4b0a      	ldr	r3, [pc, #40]	; (80051bc <vPortSetupTimerInterrupt+0x34>)
 8005194:	2200      	movs	r2, #0
 8005196:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005198:	4b09      	ldr	r3, [pc, #36]	; (80051c0 <vPortSetupTimerInterrupt+0x38>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a09      	ldr	r2, [pc, #36]	; (80051c4 <vPortSetupTimerInterrupt+0x3c>)
 800519e:	fba2 2303 	umull	r2, r3, r2, r3
 80051a2:	099b      	lsrs	r3, r3, #6
 80051a4:	4a08      	ldr	r2, [pc, #32]	; (80051c8 <vPortSetupTimerInterrupt+0x40>)
 80051a6:	3b01      	subs	r3, #1
 80051a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80051aa:	4b03      	ldr	r3, [pc, #12]	; (80051b8 <vPortSetupTimerInterrupt+0x30>)
 80051ac:	2207      	movs	r2, #7
 80051ae:	601a      	str	r2, [r3, #0]
}
 80051b0:	bf00      	nop
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bc80      	pop	{r7}
 80051b6:	4770      	bx	lr
 80051b8:	e000e010 	.word	0xe000e010
 80051bc:	e000e018 	.word	0xe000e018
 80051c0:	20000028 	.word	0x20000028
 80051c4:	10624dd3 	.word	0x10624dd3
 80051c8:	e000e014 	.word	0xe000e014

080051cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80051d2:	f3ef 8305 	mrs	r3, IPSR
 80051d6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2b0f      	cmp	r3, #15
 80051dc:	d913      	bls.n	8005206 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80051de:	4a15      	ldr	r2, [pc, #84]	; (8005234 <vPortValidateInterruptPriority+0x68>)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	4413      	add	r3, r2
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80051e8:	4b13      	ldr	r3, [pc, #76]	; (8005238 <vPortValidateInterruptPriority+0x6c>)
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	7afa      	ldrb	r2, [r7, #11]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d209      	bcs.n	8005206 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80051f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f6:	f383 8811 	msr	BASEPRI, r3
 80051fa:	f3bf 8f6f 	isb	sy
 80051fe:	f3bf 8f4f 	dsb	sy
 8005202:	607b      	str	r3, [r7, #4]
 8005204:	e7fe      	b.n	8005204 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005206:	4b0d      	ldr	r3, [pc, #52]	; (800523c <vPortValidateInterruptPriority+0x70>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800520e:	4b0c      	ldr	r3, [pc, #48]	; (8005240 <vPortValidateInterruptPriority+0x74>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	429a      	cmp	r2, r3
 8005214:	d909      	bls.n	800522a <vPortValidateInterruptPriority+0x5e>
 8005216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521a:	f383 8811 	msr	BASEPRI, r3
 800521e:	f3bf 8f6f 	isb	sy
 8005222:	f3bf 8f4f 	dsb	sy
 8005226:	603b      	str	r3, [r7, #0]
 8005228:	e7fe      	b.n	8005228 <vPortValidateInterruptPriority+0x5c>
	}
 800522a:	bf00      	nop
 800522c:	3714      	adds	r7, #20
 800522e:	46bd      	mov	sp, r7
 8005230:	bc80      	pop	{r7}
 8005232:	4770      	bx	lr
 8005234:	e000e3f0 	.word	0xe000e3f0
 8005238:	20000f14 	.word	0x20000f14
 800523c:	e000ed0c 	.word	0xe000ed0c
 8005240:	20000f18 	.word	0x20000f18

08005244 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b08a      	sub	sp, #40	; 0x28
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800524c:	2300      	movs	r3, #0
 800524e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005250:	f7fe fe56 	bl	8003f00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005254:	4b57      	ldr	r3, [pc, #348]	; (80053b4 <pvPortMalloc+0x170>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800525c:	f000 f90c 	bl	8005478 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005260:	4b55      	ldr	r3, [pc, #340]	; (80053b8 <pvPortMalloc+0x174>)
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4013      	ands	r3, r2
 8005268:	2b00      	cmp	r3, #0
 800526a:	f040 808c 	bne.w	8005386 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d01c      	beq.n	80052ae <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005274:	2208      	movs	r2, #8
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4413      	add	r3, r2
 800527a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f003 0307 	and.w	r3, r3, #7
 8005282:	2b00      	cmp	r3, #0
 8005284:	d013      	beq.n	80052ae <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f023 0307 	bic.w	r3, r3, #7
 800528c:	3308      	adds	r3, #8
 800528e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f003 0307 	and.w	r3, r3, #7
 8005296:	2b00      	cmp	r3, #0
 8005298:	d009      	beq.n	80052ae <pvPortMalloc+0x6a>
 800529a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529e:	f383 8811 	msr	BASEPRI, r3
 80052a2:	f3bf 8f6f 	isb	sy
 80052a6:	f3bf 8f4f 	dsb	sy
 80052aa:	617b      	str	r3, [r7, #20]
 80052ac:	e7fe      	b.n	80052ac <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d068      	beq.n	8005386 <pvPortMalloc+0x142>
 80052b4:	4b41      	ldr	r3, [pc, #260]	; (80053bc <pvPortMalloc+0x178>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d863      	bhi.n	8005386 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80052be:	4b40      	ldr	r3, [pc, #256]	; (80053c0 <pvPortMalloc+0x17c>)
 80052c0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80052c2:	4b3f      	ldr	r3, [pc, #252]	; (80053c0 <pvPortMalloc+0x17c>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052c8:	e004      	b.n	80052d4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052cc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d903      	bls.n	80052e6 <pvPortMalloc+0xa2>
 80052de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1f1      	bne.n	80052ca <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80052e6:	4b33      	ldr	r3, [pc, #204]	; (80053b4 <pvPortMalloc+0x170>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d04a      	beq.n	8005386 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80052f0:	6a3b      	ldr	r3, [r7, #32]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2208      	movs	r2, #8
 80052f6:	4413      	add	r3, r2
 80052f8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	6a3b      	ldr	r3, [r7, #32]
 8005300:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	1ad2      	subs	r2, r2, r3
 800530a:	2308      	movs	r3, #8
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	429a      	cmp	r2, r3
 8005310:	d91e      	bls.n	8005350 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4413      	add	r3, r2
 8005318:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	f003 0307 	and.w	r3, r3, #7
 8005320:	2b00      	cmp	r3, #0
 8005322:	d009      	beq.n	8005338 <pvPortMalloc+0xf4>
 8005324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005328:	f383 8811 	msr	BASEPRI, r3
 800532c:	f3bf 8f6f 	isb	sy
 8005330:	f3bf 8f4f 	dsb	sy
 8005334:	613b      	str	r3, [r7, #16]
 8005336:	e7fe      	b.n	8005336 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533a:	685a      	ldr	r2, [r3, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	1ad2      	subs	r2, r2, r3
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800534a:	69b8      	ldr	r0, [r7, #24]
 800534c:	f000 f8f6 	bl	800553c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005350:	4b1a      	ldr	r3, [pc, #104]	; (80053bc <pvPortMalloc+0x178>)
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	4a18      	ldr	r2, [pc, #96]	; (80053bc <pvPortMalloc+0x178>)
 800535c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800535e:	4b17      	ldr	r3, [pc, #92]	; (80053bc <pvPortMalloc+0x178>)
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	4b18      	ldr	r3, [pc, #96]	; (80053c4 <pvPortMalloc+0x180>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	429a      	cmp	r2, r3
 8005368:	d203      	bcs.n	8005372 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800536a:	4b14      	ldr	r3, [pc, #80]	; (80053bc <pvPortMalloc+0x178>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a15      	ldr	r2, [pc, #84]	; (80053c4 <pvPortMalloc+0x180>)
 8005370:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	4b10      	ldr	r3, [pc, #64]	; (80053b8 <pvPortMalloc+0x174>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	431a      	orrs	r2, r3
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005382:	2200      	movs	r2, #0
 8005384:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005386:	f7fe fdc9 	bl	8003f1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	f003 0307 	and.w	r3, r3, #7
 8005390:	2b00      	cmp	r3, #0
 8005392:	d009      	beq.n	80053a8 <pvPortMalloc+0x164>
 8005394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005398:	f383 8811 	msr	BASEPRI, r3
 800539c:	f3bf 8f6f 	isb	sy
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	60fb      	str	r3, [r7, #12]
 80053a6:	e7fe      	b.n	80053a6 <pvPortMalloc+0x162>
	return pvReturn;
 80053a8:	69fb      	ldr	r3, [r7, #28]
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3728      	adds	r7, #40	; 0x28
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	20001b24 	.word	0x20001b24
 80053b8:	20001b30 	.word	0x20001b30
 80053bc:	20001b28 	.word	0x20001b28
 80053c0:	20001b1c 	.word	0x20001b1c
 80053c4:	20001b2c 	.word	0x20001b2c

080053c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b086      	sub	sp, #24
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d046      	beq.n	8005468 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80053da:	2308      	movs	r3, #8
 80053dc:	425b      	negs	r3, r3
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	4413      	add	r3, r2
 80053e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	4b20      	ldr	r3, [pc, #128]	; (8005470 <vPortFree+0xa8>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4013      	ands	r3, r2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d109      	bne.n	800540a <vPortFree+0x42>
 80053f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fa:	f383 8811 	msr	BASEPRI, r3
 80053fe:	f3bf 8f6f 	isb	sy
 8005402:	f3bf 8f4f 	dsb	sy
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	e7fe      	b.n	8005408 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d009      	beq.n	8005426 <vPortFree+0x5e>
 8005412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005416:	f383 8811 	msr	BASEPRI, r3
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	60bb      	str	r3, [r7, #8]
 8005424:	e7fe      	b.n	8005424 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	685a      	ldr	r2, [r3, #4]
 800542a:	4b11      	ldr	r3, [pc, #68]	; (8005470 <vPortFree+0xa8>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4013      	ands	r3, r2
 8005430:	2b00      	cmp	r3, #0
 8005432:	d019      	beq.n	8005468 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d115      	bne.n	8005468 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	4b0b      	ldr	r3, [pc, #44]	; (8005470 <vPortFree+0xa8>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	43db      	mvns	r3, r3
 8005446:	401a      	ands	r2, r3
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800544c:	f7fe fd58 	bl	8003f00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	685a      	ldr	r2, [r3, #4]
 8005454:	4b07      	ldr	r3, [pc, #28]	; (8005474 <vPortFree+0xac>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4413      	add	r3, r2
 800545a:	4a06      	ldr	r2, [pc, #24]	; (8005474 <vPortFree+0xac>)
 800545c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800545e:	6938      	ldr	r0, [r7, #16]
 8005460:	f000 f86c 	bl	800553c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005464:	f7fe fd5a 	bl	8003f1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005468:	bf00      	nop
 800546a:	3718      	adds	r7, #24
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	20001b30 	.word	0x20001b30
 8005474:	20001b28 	.word	0x20001b28

08005478 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800547e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005482:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005484:	4b27      	ldr	r3, [pc, #156]	; (8005524 <prvHeapInit+0xac>)
 8005486:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f003 0307 	and.w	r3, r3, #7
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00c      	beq.n	80054ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	3307      	adds	r3, #7
 8005496:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f023 0307 	bic.w	r3, r3, #7
 800549e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	4a1f      	ldr	r2, [pc, #124]	; (8005524 <prvHeapInit+0xac>)
 80054a8:	4413      	add	r3, r2
 80054aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80054b0:	4a1d      	ldr	r2, [pc, #116]	; (8005528 <prvHeapInit+0xb0>)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80054b6:	4b1c      	ldr	r3, [pc, #112]	; (8005528 <prvHeapInit+0xb0>)
 80054b8:	2200      	movs	r2, #0
 80054ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	4413      	add	r3, r2
 80054c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80054c4:	2208      	movs	r2, #8
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	1a9b      	subs	r3, r3, r2
 80054ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f023 0307 	bic.w	r3, r3, #7
 80054d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	4a15      	ldr	r2, [pc, #84]	; (800552c <prvHeapInit+0xb4>)
 80054d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80054da:	4b14      	ldr	r3, [pc, #80]	; (800552c <prvHeapInit+0xb4>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2200      	movs	r2, #0
 80054e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80054e2:	4b12      	ldr	r3, [pc, #72]	; (800552c <prvHeapInit+0xb4>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2200      	movs	r2, #0
 80054e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	1ad2      	subs	r2, r2, r3
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80054f8:	4b0c      	ldr	r3, [pc, #48]	; (800552c <prvHeapInit+0xb4>)
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	4a0a      	ldr	r2, [pc, #40]	; (8005530 <prvHeapInit+0xb8>)
 8005506:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	4a09      	ldr	r2, [pc, #36]	; (8005534 <prvHeapInit+0xbc>)
 800550e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005510:	4b09      	ldr	r3, [pc, #36]	; (8005538 <prvHeapInit+0xc0>)
 8005512:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005516:	601a      	str	r2, [r3, #0]
}
 8005518:	bf00      	nop
 800551a:	3714      	adds	r7, #20
 800551c:	46bd      	mov	sp, r7
 800551e:	bc80      	pop	{r7}
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	20000f1c 	.word	0x20000f1c
 8005528:	20001b1c 	.word	0x20001b1c
 800552c:	20001b24 	.word	0x20001b24
 8005530:	20001b2c 	.word	0x20001b2c
 8005534:	20001b28 	.word	0x20001b28
 8005538:	20001b30 	.word	0x20001b30

0800553c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005544:	4b27      	ldr	r3, [pc, #156]	; (80055e4 <prvInsertBlockIntoFreeList+0xa8>)
 8005546:	60fb      	str	r3, [r7, #12]
 8005548:	e002      	b.n	8005550 <prvInsertBlockIntoFreeList+0x14>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	60fb      	str	r3, [r7, #12]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	429a      	cmp	r2, r3
 8005558:	d8f7      	bhi.n	800554a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	68ba      	ldr	r2, [r7, #8]
 8005564:	4413      	add	r3, r2
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	429a      	cmp	r2, r3
 800556a:	d108      	bne.n	800557e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	685a      	ldr	r2, [r3, #4]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	441a      	add	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	68ba      	ldr	r2, [r7, #8]
 8005588:	441a      	add	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	429a      	cmp	r2, r3
 8005590:	d118      	bne.n	80055c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	4b14      	ldr	r3, [pc, #80]	; (80055e8 <prvInsertBlockIntoFreeList+0xac>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	429a      	cmp	r2, r3
 800559c:	d00d      	beq.n	80055ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	441a      	add	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	601a      	str	r2, [r3, #0]
 80055b8:	e008      	b.n	80055cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80055ba:	4b0b      	ldr	r3, [pc, #44]	; (80055e8 <prvInsertBlockIntoFreeList+0xac>)
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	601a      	str	r2, [r3, #0]
 80055c2:	e003      	b.n	80055cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d002      	beq.n	80055da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055da:	bf00      	nop
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	bc80      	pop	{r7}
 80055e2:	4770      	bx	lr
 80055e4:	20001b1c 	.word	0x20001b1c
 80055e8:	20001b24 	.word	0x20001b24

080055ec <atoi>:
 80055ec:	220a      	movs	r2, #10
 80055ee:	2100      	movs	r1, #0
 80055f0:	f000 b916 	b.w	8005820 <strtol>

080055f4 <__errno>:
 80055f4:	4b01      	ldr	r3, [pc, #4]	; (80055fc <__errno+0x8>)
 80055f6:	6818      	ldr	r0, [r3, #0]
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	20000038 	.word	0x20000038

08005600 <__libc_init_array>:
 8005600:	b570      	push	{r4, r5, r6, lr}
 8005602:	2500      	movs	r5, #0
 8005604:	4e0c      	ldr	r6, [pc, #48]	; (8005638 <__libc_init_array+0x38>)
 8005606:	4c0d      	ldr	r4, [pc, #52]	; (800563c <__libc_init_array+0x3c>)
 8005608:	1ba4      	subs	r4, r4, r6
 800560a:	10a4      	asrs	r4, r4, #2
 800560c:	42a5      	cmp	r5, r4
 800560e:	d109      	bne.n	8005624 <__libc_init_array+0x24>
 8005610:	f000 f9b4 	bl	800597c <_init>
 8005614:	2500      	movs	r5, #0
 8005616:	4e0a      	ldr	r6, [pc, #40]	; (8005640 <__libc_init_array+0x40>)
 8005618:	4c0a      	ldr	r4, [pc, #40]	; (8005644 <__libc_init_array+0x44>)
 800561a:	1ba4      	subs	r4, r4, r6
 800561c:	10a4      	asrs	r4, r4, #2
 800561e:	42a5      	cmp	r5, r4
 8005620:	d105      	bne.n	800562e <__libc_init_array+0x2e>
 8005622:	bd70      	pop	{r4, r5, r6, pc}
 8005624:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005628:	4798      	blx	r3
 800562a:	3501      	adds	r5, #1
 800562c:	e7ee      	b.n	800560c <__libc_init_array+0xc>
 800562e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005632:	4798      	blx	r3
 8005634:	3501      	adds	r5, #1
 8005636:	e7f2      	b.n	800561e <__libc_init_array+0x1e>
 8005638:	08005e24 	.word	0x08005e24
 800563c:	08005e24 	.word	0x08005e24
 8005640:	08005e24 	.word	0x08005e24
 8005644:	08005e28 	.word	0x08005e28

08005648 <memcpy>:
 8005648:	b510      	push	{r4, lr}
 800564a:	1e43      	subs	r3, r0, #1
 800564c:	440a      	add	r2, r1
 800564e:	4291      	cmp	r1, r2
 8005650:	d100      	bne.n	8005654 <memcpy+0xc>
 8005652:	bd10      	pop	{r4, pc}
 8005654:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005658:	f803 4f01 	strb.w	r4, [r3, #1]!
 800565c:	e7f7      	b.n	800564e <memcpy+0x6>

0800565e <memset>:
 800565e:	4603      	mov	r3, r0
 8005660:	4402      	add	r2, r0
 8005662:	4293      	cmp	r3, r2
 8005664:	d100      	bne.n	8005668 <memset+0xa>
 8005666:	4770      	bx	lr
 8005668:	f803 1b01 	strb.w	r1, [r3], #1
 800566c:	e7f9      	b.n	8005662 <memset+0x4>

0800566e <strcpy>:
 800566e:	4603      	mov	r3, r0
 8005670:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005674:	f803 2b01 	strb.w	r2, [r3], #1
 8005678:	2a00      	cmp	r2, #0
 800567a:	d1f9      	bne.n	8005670 <strcpy+0x2>
 800567c:	4770      	bx	lr
	...

08005680 <strtok>:
 8005680:	4b13      	ldr	r3, [pc, #76]	; (80056d0 <strtok+0x50>)
 8005682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005686:	681d      	ldr	r5, [r3, #0]
 8005688:	4606      	mov	r6, r0
 800568a:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800568c:	460f      	mov	r7, r1
 800568e:	b9b4      	cbnz	r4, 80056be <strtok+0x3e>
 8005690:	2050      	movs	r0, #80	; 0x50
 8005692:	f000 f8df 	bl	8005854 <malloc>
 8005696:	65a8      	str	r0, [r5, #88]	; 0x58
 8005698:	e9c0 4400 	strd	r4, r4, [r0]
 800569c:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80056a0:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80056a4:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80056a8:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80056ac:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80056b0:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80056b4:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80056b8:	6184      	str	r4, [r0, #24]
 80056ba:	7704      	strb	r4, [r0, #28]
 80056bc:	6244      	str	r4, [r0, #36]	; 0x24
 80056be:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80056c0:	4639      	mov	r1, r7
 80056c2:	4630      	mov	r0, r6
 80056c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056c8:	2301      	movs	r3, #1
 80056ca:	f000 b803 	b.w	80056d4 <__strtok_r>
 80056ce:	bf00      	nop
 80056d0:	20000038 	.word	0x20000038

080056d4 <__strtok_r>:
 80056d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056d6:	b918      	cbnz	r0, 80056e0 <__strtok_r+0xc>
 80056d8:	6810      	ldr	r0, [r2, #0]
 80056da:	b908      	cbnz	r0, 80056e0 <__strtok_r+0xc>
 80056dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056de:	4620      	mov	r0, r4
 80056e0:	4604      	mov	r4, r0
 80056e2:	460f      	mov	r7, r1
 80056e4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80056e8:	f817 6b01 	ldrb.w	r6, [r7], #1
 80056ec:	b91e      	cbnz	r6, 80056f6 <__strtok_r+0x22>
 80056ee:	b96d      	cbnz	r5, 800570c <__strtok_r+0x38>
 80056f0:	6015      	str	r5, [r2, #0]
 80056f2:	4628      	mov	r0, r5
 80056f4:	e7f2      	b.n	80056dc <__strtok_r+0x8>
 80056f6:	42b5      	cmp	r5, r6
 80056f8:	d1f6      	bne.n	80056e8 <__strtok_r+0x14>
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1ef      	bne.n	80056de <__strtok_r+0xa>
 80056fe:	6014      	str	r4, [r2, #0]
 8005700:	7003      	strb	r3, [r0, #0]
 8005702:	e7eb      	b.n	80056dc <__strtok_r+0x8>
 8005704:	462b      	mov	r3, r5
 8005706:	e00d      	b.n	8005724 <__strtok_r+0x50>
 8005708:	b926      	cbnz	r6, 8005714 <__strtok_r+0x40>
 800570a:	461c      	mov	r4, r3
 800570c:	4623      	mov	r3, r4
 800570e:	460f      	mov	r7, r1
 8005710:	f813 5b01 	ldrb.w	r5, [r3], #1
 8005714:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005718:	42b5      	cmp	r5, r6
 800571a:	d1f5      	bne.n	8005708 <__strtok_r+0x34>
 800571c:	2d00      	cmp	r5, #0
 800571e:	d0f1      	beq.n	8005704 <__strtok_r+0x30>
 8005720:	2100      	movs	r1, #0
 8005722:	7021      	strb	r1, [r4, #0]
 8005724:	6013      	str	r3, [r2, #0]
 8005726:	e7d9      	b.n	80056dc <__strtok_r+0x8>

08005728 <_strtol_l.isra.0>:
 8005728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800572c:	4680      	mov	r8, r0
 800572e:	4689      	mov	r9, r1
 8005730:	4692      	mov	sl, r2
 8005732:	461e      	mov	r6, r3
 8005734:	460f      	mov	r7, r1
 8005736:	463d      	mov	r5, r7
 8005738:	9808      	ldr	r0, [sp, #32]
 800573a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800573e:	f000 f885 	bl	800584c <__locale_ctype_ptr_l>
 8005742:	4420      	add	r0, r4
 8005744:	7843      	ldrb	r3, [r0, #1]
 8005746:	f013 0308 	ands.w	r3, r3, #8
 800574a:	d132      	bne.n	80057b2 <_strtol_l.isra.0+0x8a>
 800574c:	2c2d      	cmp	r4, #45	; 0x2d
 800574e:	d132      	bne.n	80057b6 <_strtol_l.isra.0+0x8e>
 8005750:	2201      	movs	r2, #1
 8005752:	787c      	ldrb	r4, [r7, #1]
 8005754:	1cbd      	adds	r5, r7, #2
 8005756:	2e00      	cmp	r6, #0
 8005758:	d05d      	beq.n	8005816 <_strtol_l.isra.0+0xee>
 800575a:	2e10      	cmp	r6, #16
 800575c:	d109      	bne.n	8005772 <_strtol_l.isra.0+0x4a>
 800575e:	2c30      	cmp	r4, #48	; 0x30
 8005760:	d107      	bne.n	8005772 <_strtol_l.isra.0+0x4a>
 8005762:	782b      	ldrb	r3, [r5, #0]
 8005764:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005768:	2b58      	cmp	r3, #88	; 0x58
 800576a:	d14f      	bne.n	800580c <_strtol_l.isra.0+0xe4>
 800576c:	2610      	movs	r6, #16
 800576e:	786c      	ldrb	r4, [r5, #1]
 8005770:	3502      	adds	r5, #2
 8005772:	2a00      	cmp	r2, #0
 8005774:	bf14      	ite	ne
 8005776:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800577a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800577e:	2700      	movs	r7, #0
 8005780:	fbb1 fcf6 	udiv	ip, r1, r6
 8005784:	4638      	mov	r0, r7
 8005786:	fb06 1e1c 	mls	lr, r6, ip, r1
 800578a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800578e:	2b09      	cmp	r3, #9
 8005790:	d817      	bhi.n	80057c2 <_strtol_l.isra.0+0x9a>
 8005792:	461c      	mov	r4, r3
 8005794:	42a6      	cmp	r6, r4
 8005796:	dd23      	ble.n	80057e0 <_strtol_l.isra.0+0xb8>
 8005798:	1c7b      	adds	r3, r7, #1
 800579a:	d007      	beq.n	80057ac <_strtol_l.isra.0+0x84>
 800579c:	4584      	cmp	ip, r0
 800579e:	d31c      	bcc.n	80057da <_strtol_l.isra.0+0xb2>
 80057a0:	d101      	bne.n	80057a6 <_strtol_l.isra.0+0x7e>
 80057a2:	45a6      	cmp	lr, r4
 80057a4:	db19      	blt.n	80057da <_strtol_l.isra.0+0xb2>
 80057a6:	2701      	movs	r7, #1
 80057a8:	fb00 4006 	mla	r0, r0, r6, r4
 80057ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80057b0:	e7eb      	b.n	800578a <_strtol_l.isra.0+0x62>
 80057b2:	462f      	mov	r7, r5
 80057b4:	e7bf      	b.n	8005736 <_strtol_l.isra.0+0xe>
 80057b6:	2c2b      	cmp	r4, #43	; 0x2b
 80057b8:	bf04      	itt	eq
 80057ba:	1cbd      	addeq	r5, r7, #2
 80057bc:	787c      	ldrbeq	r4, [r7, #1]
 80057be:	461a      	mov	r2, r3
 80057c0:	e7c9      	b.n	8005756 <_strtol_l.isra.0+0x2e>
 80057c2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80057c6:	2b19      	cmp	r3, #25
 80057c8:	d801      	bhi.n	80057ce <_strtol_l.isra.0+0xa6>
 80057ca:	3c37      	subs	r4, #55	; 0x37
 80057cc:	e7e2      	b.n	8005794 <_strtol_l.isra.0+0x6c>
 80057ce:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80057d2:	2b19      	cmp	r3, #25
 80057d4:	d804      	bhi.n	80057e0 <_strtol_l.isra.0+0xb8>
 80057d6:	3c57      	subs	r4, #87	; 0x57
 80057d8:	e7dc      	b.n	8005794 <_strtol_l.isra.0+0x6c>
 80057da:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80057de:	e7e5      	b.n	80057ac <_strtol_l.isra.0+0x84>
 80057e0:	1c7b      	adds	r3, r7, #1
 80057e2:	d108      	bne.n	80057f6 <_strtol_l.isra.0+0xce>
 80057e4:	2322      	movs	r3, #34	; 0x22
 80057e6:	4608      	mov	r0, r1
 80057e8:	f8c8 3000 	str.w	r3, [r8]
 80057ec:	f1ba 0f00 	cmp.w	sl, #0
 80057f0:	d107      	bne.n	8005802 <_strtol_l.isra.0+0xda>
 80057f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057f6:	b102      	cbz	r2, 80057fa <_strtol_l.isra.0+0xd2>
 80057f8:	4240      	negs	r0, r0
 80057fa:	f1ba 0f00 	cmp.w	sl, #0
 80057fe:	d0f8      	beq.n	80057f2 <_strtol_l.isra.0+0xca>
 8005800:	b10f      	cbz	r7, 8005806 <_strtol_l.isra.0+0xde>
 8005802:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8005806:	f8ca 9000 	str.w	r9, [sl]
 800580a:	e7f2      	b.n	80057f2 <_strtol_l.isra.0+0xca>
 800580c:	2430      	movs	r4, #48	; 0x30
 800580e:	2e00      	cmp	r6, #0
 8005810:	d1af      	bne.n	8005772 <_strtol_l.isra.0+0x4a>
 8005812:	2608      	movs	r6, #8
 8005814:	e7ad      	b.n	8005772 <_strtol_l.isra.0+0x4a>
 8005816:	2c30      	cmp	r4, #48	; 0x30
 8005818:	d0a3      	beq.n	8005762 <_strtol_l.isra.0+0x3a>
 800581a:	260a      	movs	r6, #10
 800581c:	e7a9      	b.n	8005772 <_strtol_l.isra.0+0x4a>
	...

08005820 <strtol>:
 8005820:	4b08      	ldr	r3, [pc, #32]	; (8005844 <strtol+0x24>)
 8005822:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005824:	681c      	ldr	r4, [r3, #0]
 8005826:	4d08      	ldr	r5, [pc, #32]	; (8005848 <strtol+0x28>)
 8005828:	6a23      	ldr	r3, [r4, #32]
 800582a:	2b00      	cmp	r3, #0
 800582c:	bf08      	it	eq
 800582e:	462b      	moveq	r3, r5
 8005830:	9300      	str	r3, [sp, #0]
 8005832:	4613      	mov	r3, r2
 8005834:	460a      	mov	r2, r1
 8005836:	4601      	mov	r1, r0
 8005838:	4620      	mov	r0, r4
 800583a:	f7ff ff75 	bl	8005728 <_strtol_l.isra.0>
 800583e:	b003      	add	sp, #12
 8005840:	bd30      	pop	{r4, r5, pc}
 8005842:	bf00      	nop
 8005844:	20000038 	.word	0x20000038
 8005848:	2000009c 	.word	0x2000009c

0800584c <__locale_ctype_ptr_l>:
 800584c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005850:	4770      	bx	lr
	...

08005854 <malloc>:
 8005854:	4b02      	ldr	r3, [pc, #8]	; (8005860 <malloc+0xc>)
 8005856:	4601      	mov	r1, r0
 8005858:	6818      	ldr	r0, [r3, #0]
 800585a:	f000 b815 	b.w	8005888 <_malloc_r>
 800585e:	bf00      	nop
 8005860:	20000038 	.word	0x20000038

08005864 <__ascii_mbtowc>:
 8005864:	b082      	sub	sp, #8
 8005866:	b901      	cbnz	r1, 800586a <__ascii_mbtowc+0x6>
 8005868:	a901      	add	r1, sp, #4
 800586a:	b142      	cbz	r2, 800587e <__ascii_mbtowc+0x1a>
 800586c:	b14b      	cbz	r3, 8005882 <__ascii_mbtowc+0x1e>
 800586e:	7813      	ldrb	r3, [r2, #0]
 8005870:	600b      	str	r3, [r1, #0]
 8005872:	7812      	ldrb	r2, [r2, #0]
 8005874:	1c10      	adds	r0, r2, #0
 8005876:	bf18      	it	ne
 8005878:	2001      	movne	r0, #1
 800587a:	b002      	add	sp, #8
 800587c:	4770      	bx	lr
 800587e:	4610      	mov	r0, r2
 8005880:	e7fb      	b.n	800587a <__ascii_mbtowc+0x16>
 8005882:	f06f 0001 	mvn.w	r0, #1
 8005886:	e7f8      	b.n	800587a <__ascii_mbtowc+0x16>

08005888 <_malloc_r>:
 8005888:	b570      	push	{r4, r5, r6, lr}
 800588a:	1ccd      	adds	r5, r1, #3
 800588c:	f025 0503 	bic.w	r5, r5, #3
 8005890:	3508      	adds	r5, #8
 8005892:	2d0c      	cmp	r5, #12
 8005894:	bf38      	it	cc
 8005896:	250c      	movcc	r5, #12
 8005898:	2d00      	cmp	r5, #0
 800589a:	4606      	mov	r6, r0
 800589c:	db01      	blt.n	80058a2 <_malloc_r+0x1a>
 800589e:	42a9      	cmp	r1, r5
 80058a0:	d903      	bls.n	80058aa <_malloc_r+0x22>
 80058a2:	230c      	movs	r3, #12
 80058a4:	6033      	str	r3, [r6, #0]
 80058a6:	2000      	movs	r0, #0
 80058a8:	bd70      	pop	{r4, r5, r6, pc}
 80058aa:	f000 f864 	bl	8005976 <__malloc_lock>
 80058ae:	4a21      	ldr	r2, [pc, #132]	; (8005934 <_malloc_r+0xac>)
 80058b0:	6814      	ldr	r4, [r2, #0]
 80058b2:	4621      	mov	r1, r4
 80058b4:	b991      	cbnz	r1, 80058dc <_malloc_r+0x54>
 80058b6:	4c20      	ldr	r4, [pc, #128]	; (8005938 <_malloc_r+0xb0>)
 80058b8:	6823      	ldr	r3, [r4, #0]
 80058ba:	b91b      	cbnz	r3, 80058c4 <_malloc_r+0x3c>
 80058bc:	4630      	mov	r0, r6
 80058be:	f000 f83d 	bl	800593c <_sbrk_r>
 80058c2:	6020      	str	r0, [r4, #0]
 80058c4:	4629      	mov	r1, r5
 80058c6:	4630      	mov	r0, r6
 80058c8:	f000 f838 	bl	800593c <_sbrk_r>
 80058cc:	1c43      	adds	r3, r0, #1
 80058ce:	d124      	bne.n	800591a <_malloc_r+0x92>
 80058d0:	230c      	movs	r3, #12
 80058d2:	4630      	mov	r0, r6
 80058d4:	6033      	str	r3, [r6, #0]
 80058d6:	f000 f84f 	bl	8005978 <__malloc_unlock>
 80058da:	e7e4      	b.n	80058a6 <_malloc_r+0x1e>
 80058dc:	680b      	ldr	r3, [r1, #0]
 80058de:	1b5b      	subs	r3, r3, r5
 80058e0:	d418      	bmi.n	8005914 <_malloc_r+0x8c>
 80058e2:	2b0b      	cmp	r3, #11
 80058e4:	d90f      	bls.n	8005906 <_malloc_r+0x7e>
 80058e6:	600b      	str	r3, [r1, #0]
 80058e8:	18cc      	adds	r4, r1, r3
 80058ea:	50cd      	str	r5, [r1, r3]
 80058ec:	4630      	mov	r0, r6
 80058ee:	f000 f843 	bl	8005978 <__malloc_unlock>
 80058f2:	f104 000b 	add.w	r0, r4, #11
 80058f6:	1d23      	adds	r3, r4, #4
 80058f8:	f020 0007 	bic.w	r0, r0, #7
 80058fc:	1ac3      	subs	r3, r0, r3
 80058fe:	d0d3      	beq.n	80058a8 <_malloc_r+0x20>
 8005900:	425a      	negs	r2, r3
 8005902:	50e2      	str	r2, [r4, r3]
 8005904:	e7d0      	b.n	80058a8 <_malloc_r+0x20>
 8005906:	684b      	ldr	r3, [r1, #4]
 8005908:	428c      	cmp	r4, r1
 800590a:	bf16      	itet	ne
 800590c:	6063      	strne	r3, [r4, #4]
 800590e:	6013      	streq	r3, [r2, #0]
 8005910:	460c      	movne	r4, r1
 8005912:	e7eb      	b.n	80058ec <_malloc_r+0x64>
 8005914:	460c      	mov	r4, r1
 8005916:	6849      	ldr	r1, [r1, #4]
 8005918:	e7cc      	b.n	80058b4 <_malloc_r+0x2c>
 800591a:	1cc4      	adds	r4, r0, #3
 800591c:	f024 0403 	bic.w	r4, r4, #3
 8005920:	42a0      	cmp	r0, r4
 8005922:	d005      	beq.n	8005930 <_malloc_r+0xa8>
 8005924:	1a21      	subs	r1, r4, r0
 8005926:	4630      	mov	r0, r6
 8005928:	f000 f808 	bl	800593c <_sbrk_r>
 800592c:	3001      	adds	r0, #1
 800592e:	d0cf      	beq.n	80058d0 <_malloc_r+0x48>
 8005930:	6025      	str	r5, [r4, #0]
 8005932:	e7db      	b.n	80058ec <_malloc_r+0x64>
 8005934:	20001b34 	.word	0x20001b34
 8005938:	20001b38 	.word	0x20001b38

0800593c <_sbrk_r>:
 800593c:	b538      	push	{r3, r4, r5, lr}
 800593e:	2300      	movs	r3, #0
 8005940:	4c05      	ldr	r4, [pc, #20]	; (8005958 <_sbrk_r+0x1c>)
 8005942:	4605      	mov	r5, r0
 8005944:	4608      	mov	r0, r1
 8005946:	6023      	str	r3, [r4, #0]
 8005948:	f7fb fb86 	bl	8001058 <_sbrk>
 800594c:	1c43      	adds	r3, r0, #1
 800594e:	d102      	bne.n	8005956 <_sbrk_r+0x1a>
 8005950:	6823      	ldr	r3, [r4, #0]
 8005952:	b103      	cbz	r3, 8005956 <_sbrk_r+0x1a>
 8005954:	602b      	str	r3, [r5, #0]
 8005956:	bd38      	pop	{r3, r4, r5, pc}
 8005958:	20001cc0 	.word	0x20001cc0

0800595c <__ascii_wctomb>:
 800595c:	b149      	cbz	r1, 8005972 <__ascii_wctomb+0x16>
 800595e:	2aff      	cmp	r2, #255	; 0xff
 8005960:	bf8b      	itete	hi
 8005962:	238a      	movhi	r3, #138	; 0x8a
 8005964:	700a      	strbls	r2, [r1, #0]
 8005966:	6003      	strhi	r3, [r0, #0]
 8005968:	2001      	movls	r0, #1
 800596a:	bf88      	it	hi
 800596c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005970:	4770      	bx	lr
 8005972:	4608      	mov	r0, r1
 8005974:	4770      	bx	lr

08005976 <__malloc_lock>:
 8005976:	4770      	bx	lr

08005978 <__malloc_unlock>:
 8005978:	4770      	bx	lr
	...

0800597c <_init>:
 800597c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800597e:	bf00      	nop
 8005980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005982:	bc08      	pop	{r3}
 8005984:	469e      	mov	lr, r3
 8005986:	4770      	bx	lr

08005988 <_fini>:
 8005988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800598a:	bf00      	nop
 800598c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800598e:	bc08      	pop	{r3}
 8005990:	469e      	mov	lr, r3
 8005992:	4770      	bx	lr
