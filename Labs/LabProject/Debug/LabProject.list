
LabProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f38  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  08006048  08006048  00016048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006418  08006418  00020208  2**0
                  CONTENTS
  4 .ARM          00000000  08006418  08006418  00020208  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006418  08006418  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006418  08006418  00016418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800641c  0800641c  0001641c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  08006420  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a90  20000208  08006628  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c98  08006628  00021c98  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001810c  00000000  00000000  00020231  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003010  00000000  00000000  0003833d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001308  00000000  00000000  0003b350  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011a0  00000000  00000000  0003c658  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000193cb  00000000  00000000  0003d7f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001069c  00000000  00000000  00056bc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00094136  00000000  00000000  0006725f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fb395  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054a8  00000000  00000000  000fb410  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000208 	.word	0x20000208
 800012c:	00000000 	.word	0x00000000
 8000130:	08006030 	.word	0x08006030

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000020c 	.word	0x2000020c
 800014c:	08006030 	.word	0x08006030

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <isCompleteLine>:
 */

#include "CLI.h"

bool isCompleteLine(char recBuffer[10])
{
 8000164:	b480      	push	{r7}
 8000166:	b083      	sub	sp, #12
 8000168:	af00      	add	r7, sp, #0
 800016a:	6078      	str	r0, [r7, #4]
	//if enter was hit, then it is a complete line, else it isnt
	if(recBuffer[0] == '\r')
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	781b      	ldrb	r3, [r3, #0]
 8000170:	2b0d      	cmp	r3, #13
 8000172:	d101      	bne.n	8000178 <isCompleteLine+0x14>
	{
		return true;
 8000174:	2301      	movs	r3, #1
 8000176:	e000      	b.n	800017a <isCompleteLine+0x16>
	}
	else
	{
		return false;
 8000178:	2300      	movs	r3, #0
	}
}
 800017a:	4618      	mov	r0, r3
 800017c:	370c      	adds	r7, #12
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr

08000184 <copyCharTo>:

void copyCharTo(char recBuffer[10], char s[40], int coun)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b084      	sub	sp, #16
 8000188:	af00      	add	r7, sp, #0
 800018a:	60f8      	str	r0, [r7, #12]
 800018c:	60b9      	str	r1, [r7, #8]
 800018e:	607a      	str	r2, [r7, #4]

		  if(recBuffer[0] == '\b')
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	781b      	ldrb	r3, [r3, #0]
 8000194:	2b08      	cmp	r3, #8
 8000196:	d103      	bne.n	80001a0 <copyCharTo+0x1c>
		  {
			  printString("\b \b");
 8000198:	4808      	ldr	r0, [pc, #32]	; (80001bc <copyCharTo+0x38>)
 800019a:	f000 f811 	bl	80001c0 <printString>
		  {
			  s[coun] = recBuffer[0];
			  printString(recBuffer);

		  }
}
 800019e:	e008      	b.n	80001b2 <copyCharTo+0x2e>
			  s[coun] = recBuffer[0];
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	68ba      	ldr	r2, [r7, #8]
 80001a4:	4413      	add	r3, r2
 80001a6:	68fa      	ldr	r2, [r7, #12]
 80001a8:	7812      	ldrb	r2, [r2, #0]
 80001aa:	701a      	strb	r2, [r3, #0]
			  printString(recBuffer);
 80001ac:	68f8      	ldr	r0, [r7, #12]
 80001ae:	f000 f807 	bl	80001c0 <printString>
}
 80001b2:	bf00      	nop
 80001b4:	3710      	adds	r7, #16
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bd80      	pop	{r7, pc}
 80001ba:	bf00      	nop
 80001bc:	08006048 	.word	0x08006048

080001c0 <printString>:
//		  HAL_UART_Transmit(&huart3, (char *)recBuffer, strlen((char *)recBuffer), 1000);
//	  }
//}

void printString(const char* mess)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b086      	sub	sp, #24
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	6078      	str	r0, [r7, #4]
	int i = 0;
 80001c8:	2300      	movs	r3, #0
 80001ca:	617b      	str	r3, [r7, #20]
	HAL_StatusTypeDef  st;

	while(huart3.gState == HAL_UART_STATE_BUSY_TX){}
 80001cc:	bf00      	nop
 80001ce:	4b16      	ldr	r3, [pc, #88]	; (8000228 <printString+0x68>)
 80001d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80001d4:	b2db      	uxtb	r3, r3
 80001d6:	2b21      	cmp	r3, #33	; 0x21
 80001d8:	d0f9      	beq.n	80001ce <printString+0xe>

	for(const char* p = mess; *p; ++p)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	613b      	str	r3, [r7, #16]
 80001de:	e00c      	b.n	80001fa <printString+0x3a>
	{
		cliBufferTX[i] = *p;
 80001e0:	693b      	ldr	r3, [r7, #16]
 80001e2:	7819      	ldrb	r1, [r3, #0]
 80001e4:	4a11      	ldr	r2, [pc, #68]	; (800022c <printString+0x6c>)
 80001e6:	697b      	ldr	r3, [r7, #20]
 80001e8:	4413      	add	r3, r2
 80001ea:	460a      	mov	r2, r1
 80001ec:	701a      	strb	r2, [r3, #0]
		i++;
 80001ee:	697b      	ldr	r3, [r7, #20]
 80001f0:	3301      	adds	r3, #1
 80001f2:	617b      	str	r3, [r7, #20]
	for(const char* p = mess; *p; ++p)
 80001f4:	693b      	ldr	r3, [r7, #16]
 80001f6:	3301      	adds	r3, #1
 80001f8:	613b      	str	r3, [r7, #16]
 80001fa:	693b      	ldr	r3, [r7, #16]
 80001fc:	781b      	ldrb	r3, [r3, #0]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d1ee      	bne.n	80001e0 <printString+0x20>
	}

	st = HAL_UART_Transmit(&huart3, cliBufferTX, i, 1000);
 8000202:	697b      	ldr	r3, [r7, #20]
 8000204:	b29a      	uxth	r2, r3
 8000206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800020a:	4908      	ldr	r1, [pc, #32]	; (800022c <printString+0x6c>)
 800020c:	4806      	ldr	r0, [pc, #24]	; (8000228 <printString+0x68>)
 800020e:	f002 f8ee 	bl	80023ee <HAL_UART_Transmit>
 8000212:	4603      	mov	r3, r0
 8000214:	73fb      	strb	r3, [r7, #15]
	if(st != HAL_OK)
 8000216:	7bfb      	ldrb	r3, [r7, #15]
 8000218:	2b00      	cmp	r3, #0
 800021a:	d001      	beq.n	8000220 <printString+0x60>
	{
		Error_Handler();
 800021c:	f000 fdd2 	bl	8000dc4 <Error_Handler>
	}

}
 8000220:	bf00      	nop
 8000222:	3718      	adds	r7, #24
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	20001b4c 	.word	0x20001b4c
 800022c:	20001b8c 	.word	0x20001b8c

08000230 <lightState>:

#include "TrafficLight.h"


char lightState(char st)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	4603      	mov	r3, r0
 8000238:	71fb      	strb	r3, [r7, #7]
	switch(st){
 800023a:	79fb      	ldrb	r3, [r7, #7]
 800023c:	3b61      	subs	r3, #97	; 0x61
 800023e:	2b18      	cmp	r3, #24
 8000240:	f200 81fc 	bhi.w	800063c <lightState+0x40c>
 8000244:	a201      	add	r2, pc, #4	; (adr r2, 800024c <lightState+0x1c>)
 8000246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800024a:	bf00      	nop
 800024c:	080002b1 	.word	0x080002b1
 8000250:	08000313 	.word	0x08000313
 8000254:	08000375 	.word	0x08000375
 8000258:	080003d7 	.word	0x080003d7
 800025c:	08000439 	.word	0x08000439
 8000260:	0800049b 	.word	0x0800049b
 8000264:	080004fd 	.word	0x080004fd
 8000268:	0800055f 	.word	0x0800055f
 800026c:	0800063d 	.word	0x0800063d
 8000270:	0800063d 	.word	0x0800063d
 8000274:	0800063d 	.word	0x0800063d
 8000278:	0800063d 	.word	0x0800063d
 800027c:	0800063d 	.word	0x0800063d
 8000280:	0800063d 	.word	0x0800063d
 8000284:	0800063d 	.word	0x0800063d
 8000288:	0800063d 	.word	0x0800063d
 800028c:	0800063d 	.word	0x0800063d
 8000290:	0800063d 	.word	0x0800063d
 8000294:	0800063d 	.word	0x0800063d
 8000298:	0800063d 	.word	0x0800063d
 800029c:	0800063d 	.word	0x0800063d
 80002a0:	0800063d 	.word	0x0800063d
 80002a4:	0800063d 	.word	0x0800063d
 80002a8:	080005c9 	.word	0x080005c9
 80002ac:	0800062b 	.word	0x0800062b

	case 'a':
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_RESET);
 80002b0:	2200      	movs	r2, #0
 80002b2:	2140      	movs	r1, #64	; 0x40
 80002b4:	48c2      	ldr	r0, [pc, #776]	; (80005c0 <lightState+0x390>)
 80002b6:	f001 f985 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Y1_Pin, GPIO_PIN_SET);
 80002ba:	2201      	movs	r2, #1
 80002bc:	2180      	movs	r1, #128	; 0x80
 80002be:	48c0      	ldr	r0, [pc, #768]	; (80005c0 <lightState+0x390>)
 80002c0:	f001 f980 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, G1_Pin, GPIO_PIN_SET);
 80002c4:	2201      	movs	r2, #1
 80002c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ca:	48bd      	ldr	r0, [pc, #756]	; (80005c0 <lightState+0x390>)
 80002cc:	f001 f97a 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, B1_Pin, GPIO_PIN_SET);
 80002d0:	2201      	movs	r2, #1
 80002d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002d6:	48ba      	ldr	r0, [pc, #744]	; (80005c0 <lightState+0x390>)
 80002d8:	f001 f974 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, R2_Pin, GPIO_PIN_RESET);
 80002dc:	2200      	movs	r2, #0
 80002de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002e2:	48b8      	ldr	r0, [pc, #736]	; (80005c4 <lightState+0x394>)
 80002e4:	f001 f96e 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_SET);
 80002e8:	2201      	movs	r2, #1
 80002ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002ee:	48b5      	ldr	r0, [pc, #724]	; (80005c4 <lightState+0x394>)
 80002f0:	f001 f968 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_SET);
 80002f4:	2201      	movs	r2, #1
 80002f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002fa:	48b2      	ldr	r0, [pc, #712]	; (80005c4 <lightState+0x394>)
 80002fc:	f001 f962 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, B2_Pin, GPIO_PIN_SET);
 8000300:	2201      	movs	r2, #1
 8000302:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000306:	48af      	ldr	r0, [pc, #700]	; (80005c4 <lightState+0x394>)
 8000308:	f001 f95c 	bl	80015c4 <HAL_GPIO_WritePin>
		st = 'b';
 800030c:	2362      	movs	r3, #98	; 0x62
 800030e:	71fb      	strb	r3, [r7, #7]
		break;
 8000310:	e197      	b.n	8000642 <lightState+0x412>

	case 'b':
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_SET);
 8000312:	2201      	movs	r2, #1
 8000314:	2140      	movs	r1, #64	; 0x40
 8000316:	48aa      	ldr	r0, [pc, #680]	; (80005c0 <lightState+0x390>)
 8000318:	f001 f954 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Y1_Pin, GPIO_PIN_SET);
 800031c:	2201      	movs	r2, #1
 800031e:	2180      	movs	r1, #128	; 0x80
 8000320:	48a7      	ldr	r0, [pc, #668]	; (80005c0 <lightState+0x390>)
 8000322:	f001 f94f 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, G1_Pin, GPIO_PIN_RESET);
 8000326:	2200      	movs	r2, #0
 8000328:	f44f 7180 	mov.w	r1, #256	; 0x100
 800032c:	48a4      	ldr	r0, [pc, #656]	; (80005c0 <lightState+0x390>)
 800032e:	f001 f949 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, B1_Pin, GPIO_PIN_RESET);
 8000332:	2200      	movs	r2, #0
 8000334:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000338:	48a1      	ldr	r0, [pc, #644]	; (80005c0 <lightState+0x390>)
 800033a:	f001 f943 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, R2_Pin, GPIO_PIN_RESET);
 800033e:	2200      	movs	r2, #0
 8000340:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000344:	489f      	ldr	r0, [pc, #636]	; (80005c4 <lightState+0x394>)
 8000346:	f001 f93d 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_SET);
 800034a:	2201      	movs	r2, #1
 800034c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000350:	489c      	ldr	r0, [pc, #624]	; (80005c4 <lightState+0x394>)
 8000352:	f001 f937 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_SET);
 8000356:	2201      	movs	r2, #1
 8000358:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800035c:	4899      	ldr	r0, [pc, #612]	; (80005c4 <lightState+0x394>)
 800035e:	f001 f931 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, B2_Pin, GPIO_PIN_SET);
 8000362:	2201      	movs	r2, #1
 8000364:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000368:	4896      	ldr	r0, [pc, #600]	; (80005c4 <lightState+0x394>)
 800036a:	f001 f92b 	bl	80015c4 <HAL_GPIO_WritePin>
		st = 'c';
 800036e:	2363      	movs	r3, #99	; 0x63
 8000370:	71fb      	strb	r3, [r7, #7]
		break;
 8000372:	e166      	b.n	8000642 <lightState+0x412>

	case 'c':
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_SET);
 8000374:	2201      	movs	r2, #1
 8000376:	2140      	movs	r1, #64	; 0x40
 8000378:	4891      	ldr	r0, [pc, #580]	; (80005c0 <lightState+0x390>)
 800037a:	f001 f923 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Y1_Pin, GPIO_PIN_SET);
 800037e:	2201      	movs	r2, #1
 8000380:	2180      	movs	r1, #128	; 0x80
 8000382:	488f      	ldr	r0, [pc, #572]	; (80005c0 <lightState+0x390>)
 8000384:	f001 f91e 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, G1_Pin, GPIO_PIN_RESET);
 8000388:	2200      	movs	r2, #0
 800038a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800038e:	488c      	ldr	r0, [pc, #560]	; (80005c0 <lightState+0x390>)
 8000390:	f001 f918 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, B1_Pin, GPIO_PIN_SET);
 8000394:	2201      	movs	r2, #1
 8000396:	f44f 7100 	mov.w	r1, #512	; 0x200
 800039a:	4889      	ldr	r0, [pc, #548]	; (80005c0 <lightState+0x390>)
 800039c:	f001 f912 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, R2_Pin, GPIO_PIN_RESET);
 80003a0:	2200      	movs	r2, #0
 80003a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003a6:	4887      	ldr	r0, [pc, #540]	; (80005c4 <lightState+0x394>)
 80003a8:	f001 f90c 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_SET);
 80003ac:	2201      	movs	r2, #1
 80003ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003b2:	4884      	ldr	r0, [pc, #528]	; (80005c4 <lightState+0x394>)
 80003b4:	f001 f906 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_SET);
 80003b8:	2201      	movs	r2, #1
 80003ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003be:	4881      	ldr	r0, [pc, #516]	; (80005c4 <lightState+0x394>)
 80003c0:	f001 f900 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, B2_Pin, GPIO_PIN_SET);
 80003c4:	2201      	movs	r2, #1
 80003c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003ca:	487e      	ldr	r0, [pc, #504]	; (80005c4 <lightState+0x394>)
 80003cc:	f001 f8fa 	bl	80015c4 <HAL_GPIO_WritePin>
		st = 'd';
 80003d0:	2364      	movs	r3, #100	; 0x64
 80003d2:	71fb      	strb	r3, [r7, #7]
		break;
 80003d4:	e135      	b.n	8000642 <lightState+0x412>

	case 'd':
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_SET);
 80003d6:	2201      	movs	r2, #1
 80003d8:	2140      	movs	r1, #64	; 0x40
 80003da:	4879      	ldr	r0, [pc, #484]	; (80005c0 <lightState+0x390>)
 80003dc:	f001 f8f2 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Y1_Pin, GPIO_PIN_RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2180      	movs	r1, #128	; 0x80
 80003e4:	4876      	ldr	r0, [pc, #472]	; (80005c0 <lightState+0x390>)
 80003e6:	f001 f8ed 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, G1_Pin, GPIO_PIN_SET);
 80003ea:	2201      	movs	r2, #1
 80003ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003f0:	4873      	ldr	r0, [pc, #460]	; (80005c0 <lightState+0x390>)
 80003f2:	f001 f8e7 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, B1_Pin, GPIO_PIN_SET);
 80003f6:	2201      	movs	r2, #1
 80003f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003fc:	4870      	ldr	r0, [pc, #448]	; (80005c0 <lightState+0x390>)
 80003fe:	f001 f8e1 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, R2_Pin, GPIO_PIN_RESET);
 8000402:	2200      	movs	r2, #0
 8000404:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000408:	486e      	ldr	r0, [pc, #440]	; (80005c4 <lightState+0x394>)
 800040a:	f001 f8db 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_SET);
 800040e:	2201      	movs	r2, #1
 8000410:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000414:	486b      	ldr	r0, [pc, #428]	; (80005c4 <lightState+0x394>)
 8000416:	f001 f8d5 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_SET);
 800041a:	2201      	movs	r2, #1
 800041c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000420:	4868      	ldr	r0, [pc, #416]	; (80005c4 <lightState+0x394>)
 8000422:	f001 f8cf 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, B2_Pin, GPIO_PIN_SET);
 8000426:	2201      	movs	r2, #1
 8000428:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800042c:	4865      	ldr	r0, [pc, #404]	; (80005c4 <lightState+0x394>)
 800042e:	f001 f8c9 	bl	80015c4 <HAL_GPIO_WritePin>
		st = 'e';
 8000432:	2365      	movs	r3, #101	; 0x65
 8000434:	71fb      	strb	r3, [r7, #7]
		break;
 8000436:	e104      	b.n	8000642 <lightState+0x412>

	case 'e':
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_RESET);
 8000438:	2200      	movs	r2, #0
 800043a:	2140      	movs	r1, #64	; 0x40
 800043c:	4860      	ldr	r0, [pc, #384]	; (80005c0 <lightState+0x390>)
 800043e:	f001 f8c1 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Y1_Pin, GPIO_PIN_SET);
 8000442:	2201      	movs	r2, #1
 8000444:	2180      	movs	r1, #128	; 0x80
 8000446:	485e      	ldr	r0, [pc, #376]	; (80005c0 <lightState+0x390>)
 8000448:	f001 f8bc 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, G1_Pin, GPIO_PIN_SET);
 800044c:	2201      	movs	r2, #1
 800044e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000452:	485b      	ldr	r0, [pc, #364]	; (80005c0 <lightState+0x390>)
 8000454:	f001 f8b6 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, B1_Pin, GPIO_PIN_SET);
 8000458:	2201      	movs	r2, #1
 800045a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800045e:	4858      	ldr	r0, [pc, #352]	; (80005c0 <lightState+0x390>)
 8000460:	f001 f8b0 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, R2_Pin, GPIO_PIN_RESET);
 8000464:	2200      	movs	r2, #0
 8000466:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800046a:	4856      	ldr	r0, [pc, #344]	; (80005c4 <lightState+0x394>)
 800046c:	f001 f8aa 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_SET);
 8000470:	2201      	movs	r2, #1
 8000472:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000476:	4853      	ldr	r0, [pc, #332]	; (80005c4 <lightState+0x394>)
 8000478:	f001 f8a4 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_SET);
 800047c:	2201      	movs	r2, #1
 800047e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000482:	4850      	ldr	r0, [pc, #320]	; (80005c4 <lightState+0x394>)
 8000484:	f001 f89e 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, B2_Pin, GPIO_PIN_SET);
 8000488:	2201      	movs	r2, #1
 800048a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800048e:	484d      	ldr	r0, [pc, #308]	; (80005c4 <lightState+0x394>)
 8000490:	f001 f898 	bl	80015c4 <HAL_GPIO_WritePin>
		st = 'f';
 8000494:	2366      	movs	r3, #102	; 0x66
 8000496:	71fb      	strb	r3, [r7, #7]
		break;
 8000498:	e0d3      	b.n	8000642 <lightState+0x412>

	case 'f':
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	2140      	movs	r1, #64	; 0x40
 800049e:	4848      	ldr	r0, [pc, #288]	; (80005c0 <lightState+0x390>)
 80004a0:	f001 f890 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Y1_Pin, GPIO_PIN_SET);
 80004a4:	2201      	movs	r2, #1
 80004a6:	2180      	movs	r1, #128	; 0x80
 80004a8:	4845      	ldr	r0, [pc, #276]	; (80005c0 <lightState+0x390>)
 80004aa:	f001 f88b 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, G1_Pin, GPIO_PIN_SET);
 80004ae:	2201      	movs	r2, #1
 80004b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004b4:	4842      	ldr	r0, [pc, #264]	; (80005c0 <lightState+0x390>)
 80004b6:	f001 f885 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, B1_Pin, GPIO_PIN_SET);
 80004ba:	2201      	movs	r2, #1
 80004bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004c0:	483f      	ldr	r0, [pc, #252]	; (80005c0 <lightState+0x390>)
 80004c2:	f001 f87f 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, R2_Pin, GPIO_PIN_SET);
 80004c6:	2201      	movs	r2, #1
 80004c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004cc:	483d      	ldr	r0, [pc, #244]	; (80005c4 <lightState+0x394>)
 80004ce:	f001 f879 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_SET);
 80004d2:	2201      	movs	r2, #1
 80004d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004d8:	483a      	ldr	r0, [pc, #232]	; (80005c4 <lightState+0x394>)
 80004da:	f001 f873 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_RESET);
 80004de:	2200      	movs	r2, #0
 80004e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004e4:	4837      	ldr	r0, [pc, #220]	; (80005c4 <lightState+0x394>)
 80004e6:	f001 f86d 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, B2_Pin, GPIO_PIN_RESET);
 80004ea:	2200      	movs	r2, #0
 80004ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004f0:	4834      	ldr	r0, [pc, #208]	; (80005c4 <lightState+0x394>)
 80004f2:	f001 f867 	bl	80015c4 <HAL_GPIO_WritePin>
		st = 'g';
 80004f6:	2367      	movs	r3, #103	; 0x67
 80004f8:	71fb      	strb	r3, [r7, #7]
		break;
 80004fa:	e0a2      	b.n	8000642 <lightState+0x412>

	case 'g':
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_RESET);
 80004fc:	2200      	movs	r2, #0
 80004fe:	2140      	movs	r1, #64	; 0x40
 8000500:	482f      	ldr	r0, [pc, #188]	; (80005c0 <lightState+0x390>)
 8000502:	f001 f85f 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Y1_Pin, GPIO_PIN_SET);
 8000506:	2201      	movs	r2, #1
 8000508:	2180      	movs	r1, #128	; 0x80
 800050a:	482d      	ldr	r0, [pc, #180]	; (80005c0 <lightState+0x390>)
 800050c:	f001 f85a 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, G1_Pin, GPIO_PIN_SET);
 8000510:	2201      	movs	r2, #1
 8000512:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000516:	482a      	ldr	r0, [pc, #168]	; (80005c0 <lightState+0x390>)
 8000518:	f001 f854 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, B1_Pin, GPIO_PIN_SET);
 800051c:	2201      	movs	r2, #1
 800051e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000522:	4827      	ldr	r0, [pc, #156]	; (80005c0 <lightState+0x390>)
 8000524:	f001 f84e 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, R2_Pin, GPIO_PIN_SET);
 8000528:	2201      	movs	r2, #1
 800052a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800052e:	4825      	ldr	r0, [pc, #148]	; (80005c4 <lightState+0x394>)
 8000530:	f001 f848 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_SET);
 8000534:	2201      	movs	r2, #1
 8000536:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800053a:	4822      	ldr	r0, [pc, #136]	; (80005c4 <lightState+0x394>)
 800053c:	f001 f842 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000546:	481f      	ldr	r0, [pc, #124]	; (80005c4 <lightState+0x394>)
 8000548:	f001 f83c 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, B2_Pin, GPIO_PIN_SET);
 800054c:	2201      	movs	r2, #1
 800054e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000552:	481c      	ldr	r0, [pc, #112]	; (80005c4 <lightState+0x394>)
 8000554:	f001 f836 	bl	80015c4 <HAL_GPIO_WritePin>
		st = 'h';
 8000558:	2368      	movs	r3, #104	; 0x68
 800055a:	71fb      	strb	r3, [r7, #7]
		break;
 800055c:	e071      	b.n	8000642 <lightState+0x412>

	case 'h':
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	2140      	movs	r1, #64	; 0x40
 8000562:	4817      	ldr	r0, [pc, #92]	; (80005c0 <lightState+0x390>)
 8000564:	f001 f82e 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Y1_Pin, GPIO_PIN_SET);
 8000568:	2201      	movs	r2, #1
 800056a:	2180      	movs	r1, #128	; 0x80
 800056c:	4814      	ldr	r0, [pc, #80]	; (80005c0 <lightState+0x390>)
 800056e:	f001 f829 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, G1_Pin, GPIO_PIN_SET);
 8000572:	2201      	movs	r2, #1
 8000574:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000578:	4811      	ldr	r0, [pc, #68]	; (80005c0 <lightState+0x390>)
 800057a:	f001 f823 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, B1_Pin, GPIO_PIN_SET);
 800057e:	2201      	movs	r2, #1
 8000580:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000584:	480e      	ldr	r0, [pc, #56]	; (80005c0 <lightState+0x390>)
 8000586:	f001 f81d 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, R2_Pin, GPIO_PIN_SET);
 800058a:	2201      	movs	r2, #1
 800058c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000590:	480c      	ldr	r0, [pc, #48]	; (80005c4 <lightState+0x394>)
 8000592:	f001 f817 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800059c:	4809      	ldr	r0, [pc, #36]	; (80005c4 <lightState+0x394>)
 800059e:	f001 f811 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005a8:	4806      	ldr	r0, [pc, #24]	; (80005c4 <lightState+0x394>)
 80005aa:	f001 f80b 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, B2_Pin, GPIO_PIN_SET);
 80005ae:	2201      	movs	r2, #1
 80005b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005b4:	4803      	ldr	r0, [pc, #12]	; (80005c4 <lightState+0x394>)
 80005b6:	f001 f805 	bl	80015c4 <HAL_GPIO_WritePin>
		st = 'a';
 80005ba:	2361      	movs	r3, #97	; 0x61
 80005bc:	71fb      	strb	r3, [r7, #7]
		break;
 80005be:	e040      	b.n	8000642 <lightState+0x412>
 80005c0:	40010800 	.word	0x40010800
 80005c4:	40010c00 	.word	0x40010c00

	case 'x':
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	2140      	movs	r1, #64	; 0x40
 80005cc:	481f      	ldr	r0, [pc, #124]	; (800064c <lightState+0x41c>)
 80005ce:	f000 fff9 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Y1_Pin, GPIO_PIN_SET);
 80005d2:	2201      	movs	r2, #1
 80005d4:	2180      	movs	r1, #128	; 0x80
 80005d6:	481d      	ldr	r0, [pc, #116]	; (800064c <lightState+0x41c>)
 80005d8:	f000 fff4 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, G1_Pin, GPIO_PIN_SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e2:	481a      	ldr	r0, [pc, #104]	; (800064c <lightState+0x41c>)
 80005e4:	f000 ffee 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, B1_Pin, GPIO_PIN_SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ee:	4817      	ldr	r0, [pc, #92]	; (800064c <lightState+0x41c>)
 80005f0:	f000 ffe8 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, R2_Pin, GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005fa:	4815      	ldr	r0, [pc, #84]	; (8000650 <lightState+0x420>)
 80005fc:	f000 ffe2 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_SET);
 8000600:	2201      	movs	r2, #1
 8000602:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000606:	4812      	ldr	r0, [pc, #72]	; (8000650 <lightState+0x420>)
 8000608:	f000 ffdc 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000612:	480f      	ldr	r0, [pc, #60]	; (8000650 <lightState+0x420>)
 8000614:	f000 ffd6 	bl	80015c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, B2_Pin, GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800061e:	480c      	ldr	r0, [pc, #48]	; (8000650 <lightState+0x420>)
 8000620:	f000 ffd0 	bl	80015c4 <HAL_GPIO_WritePin>
		st = 'y';
 8000624:	2379      	movs	r3, #121	; 0x79
 8000626:	71fb      	strb	r3, [r7, #7]
		break;
 8000628:	e00b      	b.n	8000642 <lightState+0x412>

	case 'y':
		HAL_GPIO_TogglePin(GPIOA, R1_Pin);
 800062a:	2140      	movs	r1, #64	; 0x40
 800062c:	4807      	ldr	r0, [pc, #28]	; (800064c <lightState+0x41c>)
 800062e:	f000 ffe1 	bl	80015f4 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, R2_Pin);
 8000632:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000636:	4806      	ldr	r0, [pc, #24]	; (8000650 <lightState+0x420>)
 8000638:	f000 ffdc 	bl	80015f4 <HAL_GPIO_TogglePin>

	default:
		st = 'x';
 800063c:	2378      	movs	r3, #120	; 0x78
 800063e:	71fb      	strb	r3, [r7, #7]
		break;
 8000640:	bf00      	nop
	}

	return st;
 8000642:	79fb      	ldrb	r3, [r7, #7]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40010800 	.word	0x40010800
 8000650:	40010c00 	.word	0x40010c00

08000654 <periodState>:

int periodState(char st, int x)
{
 8000654:	b480      	push	{r7}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	6039      	str	r1, [r7, #0]
 800065e:	71fb      	strb	r3, [r7, #7]
	int pd;

	switch(st){
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	3b61      	subs	r3, #97	; 0x61
 8000664:	2b18      	cmp	r3, #24
 8000666:	d85b      	bhi.n	8000720 <periodState+0xcc>
 8000668:	a201      	add	r2, pc, #4	; (adr r2, 8000670 <periodState+0x1c>)
 800066a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800066e:	bf00      	nop
 8000670:	080006d5 	.word	0x080006d5
 8000674:	080006dd 	.word	0x080006dd
 8000678:	080006e3 	.word	0x080006e3
 800067c:	080006eb 	.word	0x080006eb
 8000680:	080006f3 	.word	0x080006f3
 8000684:	080006fb 	.word	0x080006fb
 8000688:	08000703 	.word	0x08000703
 800068c:	0800070b 	.word	0x0800070b
 8000690:	08000721 	.word	0x08000721
 8000694:	08000721 	.word	0x08000721
 8000698:	08000721 	.word	0x08000721
 800069c:	08000721 	.word	0x08000721
 80006a0:	08000721 	.word	0x08000721
 80006a4:	08000721 	.word	0x08000721
 80006a8:	08000721 	.word	0x08000721
 80006ac:	08000721 	.word	0x08000721
 80006b0:	08000721 	.word	0x08000721
 80006b4:	08000721 	.word	0x08000721
 80006b8:	08000721 	.word	0x08000721
 80006bc:	08000721 	.word	0x08000721
 80006c0:	08000721 	.word	0x08000721
 80006c4:	08000721 	.word	0x08000721
 80006c8:	08000721 	.word	0x08000721
 80006cc:	08000713 	.word	0x08000713
 80006d0:	0800071b 	.word	0x0800071b

	case 'a':
		pd = 6000;
 80006d4:	f241 7370 	movw	r3, #6000	; 0x1770
 80006d8:	60fb      	str	r3, [r7, #12]
		break;
 80006da:	e022      	b.n	8000722 <periodState+0xce>

	case 'b':
		pd = 70500;
 80006dc:	4b15      	ldr	r3, [pc, #84]	; (8000734 <periodState+0xe0>)
 80006de:	60fb      	str	r3, [r7, #12]
		break;
 80006e0:	e01f      	b.n	8000722 <periodState+0xce>

	case 'c':
		pd = 13500;
 80006e2:	f243 43bc 	movw	r3, #13500	; 0x34bc
 80006e6:	60fb      	str	r3, [r7, #12]
		break;
 80006e8:	e01b      	b.n	8000722 <periodState+0xce>

	case 'd':
		pd = 3500;
 80006ea:	f640 53ac 	movw	r3, #3500	; 0xdac
 80006ee:	60fb      	str	r3, [r7, #12]
		break;
 80006f0:	e017      	b.n	8000722 <periodState+0xce>

	case 'e':
		pd = 6000;
 80006f2:	f241 7370 	movw	r3, #6000	; 0x1770
 80006f6:	60fb      	str	r3, [r7, #12]
		break;
 80006f8:	e013      	b.n	8000722 <periodState+0xce>

	case 'f':
		pd = 20000;
 80006fa:	f644 6320 	movw	r3, #20000	; 0x4e20
 80006fe:	60fb      	str	r3, [r7, #12]
		break;
 8000700:	e00f      	b.n	8000722 <periodState+0xce>

	case 'g':
		pd = 8000;
 8000702:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8000706:	60fb      	str	r3, [r7, #12]
		break;
 8000708:	e00b      	b.n	8000722 <periodState+0xce>

	case 'h':
		pd = 3500;
 800070a:	f640 53ac 	movw	r3, #3500	; 0xdac
 800070e:	60fb      	str	r3, [r7, #12]
		break;
 8000710:	e007      	b.n	8000722 <periodState+0xce>

	case 'x':
		pd = 1500;
 8000712:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000716:	60fb      	str	r3, [r7, #12]
		break;
 8000718:	e003      	b.n	8000722 <periodState+0xce>

	case 'y':
		pd = 500;
 800071a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800071e:	60fb      	str	r3, [r7, #12]

	default:

		break;
 8000720:	bf00      	nop
	}

	return pd / x;
 8000722:	68fa      	ldr	r2, [r7, #12]
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	fb92 f3f3 	sdiv	r3, r2, r3
}
 800072a:	4618      	mov	r0, r3
 800072c:	3714      	adds	r7, #20
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr
 8000734:	00011364 	.word	0x00011364

08000738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073c:	f000 fcb4 	bl	80010a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000740:	f000 f89a 	bl	8000878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000744:	f000 f8fe 	bl	8000944 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000748:	f000 f8d2 	bl	80008f0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  printString(CLEAR_SCREEN);
 800074c:	4b32      	ldr	r3, [pc, #200]	; (8000818 <main+0xe0>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff fd35 	bl	80001c0 <printString>
  printString(GO_TO_TOP);
 8000756:	4b31      	ldr	r3, [pc, #196]	; (800081c <main+0xe4>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff fd30 	bl	80001c0 <printString>
  printString("Welcome to the CLI!\r\n");
 8000760:	482f      	ldr	r0, [pc, #188]	; (8000820 <main+0xe8>)
 8000762:	f7ff fd2d 	bl	80001c0 <printString>
  HAL_Delay(2000);
 8000766:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800076a:	f000 fccf 	bl	800110c <HAL_Delay>

  //Formats the screen to show counter and create a scroll window
  printString(CLEAR_SCREEN);
 800076e:	4b2a      	ldr	r3, [pc, #168]	; (8000818 <main+0xe0>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff fd24 	bl	80001c0 <printString>
  printString(GO_TO_TOP);
 8000778:	4b28      	ldr	r3, [pc, #160]	; (800081c <main+0xe4>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff fd1f 	bl	80001c0 <printString>
  printString("period: ");
 8000782:	4828      	ldr	r0, [pc, #160]	; (8000824 <main+0xec>)
 8000784:	f7ff fd1c 	bl	80001c0 <printString>
  printString("400");
 8000788:	4827      	ldr	r0, [pc, #156]	; (8000828 <main+0xf0>)
 800078a:	f7ff fd19 	bl	80001c0 <printString>
  printString("\x1b[9;0H");
 800078e:	4827      	ldr	r0, [pc, #156]	; (800082c <main+0xf4>)
 8000790:	f7ff fd16 	bl	80001c0 <printString>
  printString("Enter \"period x\" to change the period of the LED flash, where x > 0");
 8000794:	4826      	ldr	r0, [pc, #152]	; (8000830 <main+0xf8>)
 8000796:	f7ff fd13 	bl	80001c0 <printString>
  printString(SCROLL_WINDOW);
 800079a:	4b26      	ldr	r3, [pc, #152]	; (8000834 <main+0xfc>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff fd0e 	bl	80001c0 <printString>
  printString(GO_TO_SCROLL);
 80007a4:	4b24      	ldr	r3, [pc, #144]	; (8000838 <main+0x100>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff fd09 	bl	80001c0 <printString>

  printString("\n~>$ ");
 80007ae:	4823      	ldr	r0, [pc, #140]	; (800083c <main+0x104>)
 80007b0:	f7ff fd06 	bl	80001c0 <printString>
  printString(SAVE_CURS);
 80007b4:	4b22      	ldr	r3, [pc, #136]	; (8000840 <main+0x108>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff fd01 	bl	80001c0 <printString>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007be:	f002 f81f 	bl	8002800 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Command_Queue */
  Command_QueueHandle = osMessageQueueNew (1, sizeof(uint16_t), &Command_Queue_attributes);
 80007c2:	4a20      	ldr	r2, [pc, #128]	; (8000844 <main+0x10c>)
 80007c4:	2102      	movs	r1, #2
 80007c6:	2001      	movs	r0, #1
 80007c8:	f002 f958 	bl	8002a7c <osMessageQueueNew>
 80007cc:	4602      	mov	r2, r0
 80007ce:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <main+0x110>)
 80007d0:	601a      	str	r2, [r3, #0]

  /* creation of Message_Queue */
  Message_QueueHandle = osMessageQueueNew (1, sizeof(uint16_t), &Message_Queue_attributes);
 80007d2:	4a1e      	ldr	r2, [pc, #120]	; (800084c <main+0x114>)
 80007d4:	2102      	movs	r1, #2
 80007d6:	2001      	movs	r0, #1
 80007d8:	f002 f950 	bl	8002a7c <osMessageQueueNew>
 80007dc:	4602      	mov	r2, r0
 80007de:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <main+0x118>)
 80007e0:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of StateController */
  StateControllerHandle = osThreadNew(StartStateController, NULL, &StateController_attributes);
 80007e2:	4a1c      	ldr	r2, [pc, #112]	; (8000854 <main+0x11c>)
 80007e4:	2100      	movs	r1, #0
 80007e6:	481c      	ldr	r0, [pc, #112]	; (8000858 <main+0x120>)
 80007e8:	f002 f870 	bl	80028cc <osThreadNew>
 80007ec:	4602      	mov	r2, r0
 80007ee:	4b1b      	ldr	r3, [pc, #108]	; (800085c <main+0x124>)
 80007f0:	601a      	str	r2, [r3, #0]

  /* creation of RX_CLI */
  RX_CLIHandle = osThreadNew(StartRX_CLI, NULL, &RX_CLI_attributes);
 80007f2:	4a1b      	ldr	r2, [pc, #108]	; (8000860 <main+0x128>)
 80007f4:	2100      	movs	r1, #0
 80007f6:	481b      	ldr	r0, [pc, #108]	; (8000864 <main+0x12c>)
 80007f8:	f002 f868 	bl	80028cc <osThreadNew>
 80007fc:	4602      	mov	r2, r0
 80007fe:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <main+0x130>)
 8000800:	601a      	str	r2, [r3, #0]

  /* creation of StatusUpdate */
  StatusUpdateHandle = osThreadNew(StartStatusUpdate, NULL, &StatusUpdate_attributes);
 8000802:	4a1a      	ldr	r2, [pc, #104]	; (800086c <main+0x134>)
 8000804:	2100      	movs	r1, #0
 8000806:	481a      	ldr	r0, [pc, #104]	; (8000870 <main+0x138>)
 8000808:	f002 f860 	bl	80028cc <osThreadNew>
 800080c:	4602      	mov	r2, r0
 800080e:	4b19      	ldr	r3, [pc, #100]	; (8000874 <main+0x13c>)
 8000810:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000812:	f002 f827 	bl	8002864 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000816:	e7fe      	b.n	8000816 <main+0xde>
 8000818:	20000004 	.word	0x20000004
 800081c:	20000010 	.word	0x20000010
 8000820:	080060d4 	.word	0x080060d4
 8000824:	080060ec 	.word	0x080060ec
 8000828:	080060f8 	.word	0x080060f8
 800082c:	080060fc 	.word	0x080060fc
 8000830:	08006104 	.word	0x08006104
 8000834:	20000008 	.word	0x20000008
 8000838:	2000000c 	.word	0x2000000c
 800083c:	08006148 	.word	0x08006148
 8000840:	20000020 	.word	0x20000020
 8000844:	08006290 	.word	0x08006290
 8000848:	20001bc4 	.word	0x20001bc4
 800084c:	080062a8 	.word	0x080062a8
 8000850:	20001b3c 	.word	0x20001b3c
 8000854:	08006224 	.word	0x08006224
 8000858:	08000a09 	.word	0x08000a09
 800085c:	20001c04 	.word	0x20001c04
 8000860:	08006248 	.word	0x08006248
 8000864:	08000ac9 	.word	0x08000ac9
 8000868:	20001bc8 	.word	0x20001bc8
 800086c:	0800626c 	.word	0x0800626c
 8000870:	08000d2d 	.word	0x08000d2d
 8000874:	20001bcc 	.word	0x20001bcc

08000878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b090      	sub	sp, #64	; 0x40
 800087c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087e:	f107 0318 	add.w	r3, r7, #24
 8000882:	2228      	movs	r2, #40	; 0x28
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f004 feb1 	bl	80055ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800089a:	2302      	movs	r3, #2
 800089c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800089e:	2301      	movs	r3, #1
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a2:	2310      	movs	r3, #16
 80008a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008aa:	f107 0318 	add.w	r3, r7, #24
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 feba 	bl	8001628 <HAL_RCC_OscConfig>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <SystemClock_Config+0x46>
  {
    Error_Handler();
 80008ba:	f000 fa83 	bl	8000dc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008be:	230f      	movs	r3, #15
 80008c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ce:	2300      	movs	r3, #0
 80008d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f001 f926 	bl	8001b28 <HAL_RCC_ClockConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80008e2:	f000 fa6f 	bl	8000dc4 <Error_Handler>
  }
}
 80008e6:	bf00      	nop
 80008e8:	3740      	adds	r7, #64	; 0x40
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_USART3_UART_Init+0x4c>)
 80008f6:	4a12      	ldr	r2, [pc, #72]	; (8000940 <MX_USART3_UART_Init+0x50>)
 80008f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <MX_USART3_UART_Init+0x4c>)
 80008fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000900:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_USART3_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_USART3_UART_Init+0x4c>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <MX_USART3_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000914:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_USART3_UART_Init+0x4c>)
 8000916:	220c      	movs	r2, #12
 8000918:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <MX_USART3_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_USART3_UART_Init+0x4c>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_USART3_UART_Init+0x4c>)
 8000928:	f001 fd14 	bl	8002354 <HAL_UART_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000932:	f000 fa47 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20001b4c 	.word	0x20001b4c
 8000940:	40004800 	.word	0x40004800

08000944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094a:	f107 0310 	add.w	r3, r7, #16
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000958:	4b28      	ldr	r3, [pc, #160]	; (80009fc <MX_GPIO_Init+0xb8>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	4a27      	ldr	r2, [pc, #156]	; (80009fc <MX_GPIO_Init+0xb8>)
 800095e:	f043 0304 	orr.w	r3, r3, #4
 8000962:	6193      	str	r3, [r2, #24]
 8000964:	4b25      	ldr	r3, [pc, #148]	; (80009fc <MX_GPIO_Init+0xb8>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	f003 0304 	and.w	r3, r3, #4
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000970:	4b22      	ldr	r3, [pc, #136]	; (80009fc <MX_GPIO_Init+0xb8>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	4a21      	ldr	r2, [pc, #132]	; (80009fc <MX_GPIO_Init+0xb8>)
 8000976:	f043 0308 	orr.w	r3, r3, #8
 800097a:	6193      	str	r3, [r2, #24]
 800097c:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <MX_GPIO_Init+0xb8>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	f003 0308 	and.w	r3, r3, #8
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000988:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <MX_GPIO_Init+0xb8>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	4a1b      	ldr	r2, [pc, #108]	; (80009fc <MX_GPIO_Init+0xb8>)
 800098e:	f043 0310 	orr.w	r3, r3, #16
 8000992:	6193      	str	r3, [r2, #24]
 8000994:	4b19      	ldr	r3, [pc, #100]	; (80009fc <MX_GPIO_Init+0xb8>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	f003 0310 	and.w	r3, r3, #16
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R1_Pin|Y1_Pin|G1_Pin|B1_Pin, GPIO_PIN_SET);
 80009a0:	2201      	movs	r2, #1
 80009a2:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80009a6:	4816      	ldr	r0, [pc, #88]	; (8000a00 <MX_GPIO_Init+0xbc>)
 80009a8:	f000 fe0c 	bl	80015c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R2_Pin|Y2_Pin|G2_Pin|B2_Pin, GPIO_PIN_SET);
 80009ac:	2201      	movs	r2, #1
 80009ae:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80009b2:	4814      	ldr	r0, [pc, #80]	; (8000a04 <MX_GPIO_Init+0xc0>)
 80009b4:	f000 fe06 	bl	80015c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : R1_Pin Y1_Pin G1_Pin B1_Pin */
  GPIO_InitStruct.Pin = R1_Pin|Y1_Pin|G1_Pin|B1_Pin;
 80009b8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80009bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009be:	2301      	movs	r3, #1
 80009c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2302      	movs	r3, #2
 80009c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ca:	f107 0310 	add.w	r3, r7, #16
 80009ce:	4619      	mov	r1, r3
 80009d0:	480b      	ldr	r0, [pc, #44]	; (8000a00 <MX_GPIO_Init+0xbc>)
 80009d2:	f000 fc9d 	bl	8001310 <HAL_GPIO_Init>

  /*Configure GPIO pins : R2_Pin Y2_Pin G2_Pin B2_Pin */
  GPIO_InitStruct.Pin = R2_Pin|Y2_Pin|G2_Pin|B2_Pin;
 80009d6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80009da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009dc:	2301      	movs	r3, #1
 80009de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2302      	movs	r3, #2
 80009e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e8:	f107 0310 	add.w	r3, r7, #16
 80009ec:	4619      	mov	r1, r3
 80009ee:	4805      	ldr	r0, [pc, #20]	; (8000a04 <MX_GPIO_Init+0xc0>)
 80009f0:	f000 fc8e 	bl	8001310 <HAL_GPIO_Init>

}
 80009f4:	bf00      	nop
 80009f6:	3720      	adds	r7, #32
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40021000 	.word	0x40021000
 8000a00:	40010800 	.word	0x40010800
 8000a04:	40010c00 	.word	0x40010c00

08000a08 <StartStateController>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartStateController */
void StartStateController(void *argument)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint16_t cmd = 101;
 8000a10:	2365      	movs	r3, #101	; 0x65
 8000a12:	81fb      	strh	r3, [r7, #14]
	uint16_t msg = cmd;
 8000a14:	89fb      	ldrh	r3, [r7, #14]
 8000a16:	81bb      	strh	r3, [r7, #12]
	int period = 400;
 8000a18:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000a1c:	613b      	str	r3, [r7, #16]
	int speedFactor = 1;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	617b      	str	r3, [r7, #20]
	/* Infinite loop */
	for(;;)
	{

		if(osMessageQueueGet(Command_QueueHandle, &cmd, NULL, 0U) == osOK)
 8000a22:	4b26      	ldr	r3, [pc, #152]	; (8000abc <StartStateController+0xb4>)
 8000a24:	6818      	ldr	r0, [r3, #0]
 8000a26:	f107 010e 	add.w	r1, r7, #14
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f002 f91f 	bl	8002c70 <osMessageQueueGet>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d11f      	bne.n	8000a78 <StartStateController+0x70>
		{
			if(cmd != msg && cmd > 100)
 8000a38:	89fa      	ldrh	r2, [r7, #14]
 8000a3a:	89bb      	ldrh	r3, [r7, #12]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d012      	beq.n	8000a66 <StartStateController+0x5e>
 8000a40:	89fb      	ldrh	r3, [r7, #14]
 8000a42:	2b64      	cmp	r3, #100	; 0x64
 8000a44:	d90f      	bls.n	8000a66 <StartStateController+0x5e>
			{
				if(cmd == 101)
 8000a46:	89fb      	ldrh	r3, [r7, #14]
 8000a48:	2b65      	cmp	r3, #101	; 0x65
 8000a4a:	d103      	bne.n	8000a54 <StartStateController+0x4c>
				{
					state = 'x';
 8000a4c:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <StartStateController+0xb8>)
 8000a4e:	2278      	movs	r2, #120	; 0x78
 8000a50:	701a      	strb	r2, [r3, #0]
 8000a52:	e005      	b.n	8000a60 <StartStateController+0x58>
				}
				else if(cmd == 102)
 8000a54:	89fb      	ldrh	r3, [r7, #14]
 8000a56:	2b66      	cmp	r3, #102	; 0x66
 8000a58:	d102      	bne.n	8000a60 <StartStateController+0x58>
				{
					state = 'a';
 8000a5a:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <StartStateController+0xb8>)
 8000a5c:	2261      	movs	r2, #97	; 0x61
 8000a5e:	701a      	strb	r2, [r3, #0]
				}
				msg = cmd;
 8000a60:	89fb      	ldrh	r3, [r7, #14]
 8000a62:	81bb      	strh	r3, [r7, #12]
 8000a64:	e008      	b.n	8000a78 <StartStateController+0x70>
			}
			else if(cmd != msg && cmd > 0)
 8000a66:	89fa      	ldrh	r2, [r7, #14]
 8000a68:	89bb      	ldrh	r3, [r7, #12]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d004      	beq.n	8000a78 <StartStateController+0x70>
 8000a6e:	89fb      	ldrh	r3, [r7, #14]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <StartStateController+0x70>
			{
				speedFactor = cmd;
 8000a74:	89fb      	ldrh	r3, [r7, #14]
 8000a76:	617b      	str	r3, [r7, #20]
			}
		}

		if(osMessageQueuePut(Message_QueueHandle, &msg, 1U, 0U)!= osOK)
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <StartStateController+0xbc>)
 8000a7a:	6818      	ldr	r0, [r3, #0]
 8000a7c:	f107 010c 	add.w	r1, r7, #12
 8000a80:	2300      	movs	r3, #0
 8000a82:	2201      	movs	r2, #1
 8000a84:	f002 f880 	bl	8002b88 <osMessageQueuePut>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <StartStateController+0x8a>
		{
			Error_Handler();
 8000a8e:	f000 f999 	bl	8000dc4 <Error_Handler>
		}
		period = periodState(state, speedFactor);
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <StartStateController+0xb8>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	6979      	ldr	r1, [r7, #20]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff fddb 	bl	8000654 <periodState>
 8000a9e:	6138      	str	r0, [r7, #16]
		state = lightState(state);
 8000aa0:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <StartStateController+0xb8>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fbc3 	bl	8000230 <lightState>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	461a      	mov	r2, r3
 8000aae:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <StartStateController+0xb8>)
 8000ab0:	701a      	strb	r2, [r3, #0]



		osDelay(period);
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f001 ffb3 	bl	8002a20 <osDelay>
		if(osMessageQueueGet(Command_QueueHandle, &cmd, NULL, 0U) == osOK)
 8000aba:	e7b2      	b.n	8000a22 <StartStateController+0x1a>
 8000abc:	20001bc4 	.word	0x20001bc4
 8000ac0:	20000000 	.word	0x20000000
 8000ac4:	20001b3c 	.word	0x20001b3c

08000ac8 <StartRX_CLI>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRX_CLI */
void StartRX_CLI(void *argument)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRX_CLI */
	uint16_t cmd = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	817b      	strh	r3, [r7, #10]
	char* cmdStr;
	char* arg;
  /* Infinite loop */
	for(;;)
	{
		if(HAL_UART_Receive(&huart3, cliBufferRX, 1, 300) == HAL_OK)
 8000ad4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000ad8:	2201      	movs	r2, #1
 8000ada:	4980      	ldr	r1, [pc, #512]	; (8000cdc <StartRX_CLI+0x214>)
 8000adc:	4880      	ldr	r0, [pc, #512]	; (8000ce0 <StartRX_CLI+0x218>)
 8000ade:	f001 fd18 	bl	8002512 <HAL_UART_Receive>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d1f5      	bne.n	8000ad4 <StartRX_CLI+0xc>
		{
			printString(RETURN_CURS);
 8000ae8:	4b7e      	ldr	r3, [pc, #504]	; (8000ce4 <StartRX_CLI+0x21c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fb67 	bl	80001c0 <printString>
			printString(SHOW_CURS);
 8000af2:	4b7d      	ldr	r3, [pc, #500]	; (8000ce8 <StartRX_CLI+0x220>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff fb62 	bl	80001c0 <printString>

			copyCharTo((char *)cliBufferRX, (char *)save, j);
 8000afc:	4b7b      	ldr	r3, [pc, #492]	; (8000cec <StartRX_CLI+0x224>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	461a      	mov	r2, r3
 8000b02:	497b      	ldr	r1, [pc, #492]	; (8000cf0 <StartRX_CLI+0x228>)
 8000b04:	4875      	ldr	r0, [pc, #468]	; (8000cdc <StartRX_CLI+0x214>)
 8000b06:	f7ff fb3d 	bl	8000184 <copyCharTo>
			printString(SAVE_CURS);
 8000b0a:	4b7a      	ldr	r3, [pc, #488]	; (8000cf4 <StartRX_CLI+0x22c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff fb56 	bl	80001c0 <printString>
			//backspace incidence
			if(cliBufferRX[0] == '\b')
 8000b14:	4b71      	ldr	r3, [pc, #452]	; (8000cdc <StartRX_CLI+0x214>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b08      	cmp	r3, #8
 8000b1a:	d105      	bne.n	8000b28 <StartRX_CLI+0x60>
			{
				j--;
 8000b1c:	4b73      	ldr	r3, [pc, #460]	; (8000cec <StartRX_CLI+0x224>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	3b01      	subs	r3, #1
 8000b22:	4a72      	ldr	r2, [pc, #456]	; (8000cec <StartRX_CLI+0x224>)
 8000b24:	6013      	str	r3, [r2, #0]
 8000b26:	e004      	b.n	8000b32 <StartRX_CLI+0x6a>
			}
			else
			{
				j++;
 8000b28:	4b70      	ldr	r3, [pc, #448]	; (8000cec <StartRX_CLI+0x224>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	4a6f      	ldr	r2, [pc, #444]	; (8000cec <StartRX_CLI+0x224>)
 8000b30:	6013      	str	r3, [r2, #0]
			}

			//when enter is hit execute the command
			if(isCompleteLine((char *)cliBufferRX))
 8000b32:	486a      	ldr	r0, [pc, #424]	; (8000cdc <StartRX_CLI+0x214>)
 8000b34:	f7ff fb16 	bl	8000164 <isCompleteLine>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d0ca      	beq.n	8000ad4 <StartRX_CLI+0xc>
			{
				printString("\r\n");
 8000b3e:	486e      	ldr	r0, [pc, #440]	; (8000cf8 <StartRX_CLI+0x230>)
 8000b40:	f7ff fb3e 	bl	80001c0 <printString>
				while(j < 20 && save[j] != '\0')
 8000b44:	e009      	b.n	8000b5a <StartRX_CLI+0x92>
				{
					save[j] = '\0';
 8000b46:	4b69      	ldr	r3, [pc, #420]	; (8000cec <StartRX_CLI+0x224>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a69      	ldr	r2, [pc, #420]	; (8000cf0 <StartRX_CLI+0x228>)
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	54d1      	strb	r1, [r2, r3]
					j++;
 8000b50:	4b66      	ldr	r3, [pc, #408]	; (8000cec <StartRX_CLI+0x224>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	3301      	adds	r3, #1
 8000b56:	4a65      	ldr	r2, [pc, #404]	; (8000cec <StartRX_CLI+0x224>)
 8000b58:	6013      	str	r3, [r2, #0]
				while(j < 20 && save[j] != '\0')
 8000b5a:	4b64      	ldr	r3, [pc, #400]	; (8000cec <StartRX_CLI+0x224>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2b13      	cmp	r3, #19
 8000b60:	dc05      	bgt.n	8000b6e <StartRX_CLI+0xa6>
 8000b62:	4b62      	ldr	r3, [pc, #392]	; (8000cec <StartRX_CLI+0x224>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a62      	ldr	r2, [pc, #392]	; (8000cf0 <StartRX_CLI+0x228>)
 8000b68:	5cd3      	ldrb	r3, [r2, r3]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d1eb      	bne.n	8000b46 <StartRX_CLI+0x7e>
				}


				arg = strtok((char *)save, " ");
 8000b6e:	4963      	ldr	r1, [pc, #396]	; (8000cfc <StartRX_CLI+0x234>)
 8000b70:	485f      	ldr	r0, [pc, #380]	; (8000cf0 <StartRX_CLI+0x228>)
 8000b72:	f004 fd65 	bl	8005640 <strtok>
 8000b76:	6138      	str	r0, [r7, #16]
				cmdStr = arg;
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	60fb      	str	r3, [r7, #12]
				arg = strtok(NULL, " ");
 8000b7c:	495f      	ldr	r1, [pc, #380]	; (8000cfc <StartRX_CLI+0x234>)
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f004 fd5e 	bl	8005640 <strtok>
 8000b84:	6138      	str	r0, [r7, #16]

				if(arg == NULL && strcmp((char *)cmdStr, "help\r") == 0)
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d10c      	bne.n	8000ba6 <StartRX_CLI+0xde>
 8000b8c:	495c      	ldr	r1, [pc, #368]	; (8000d00 <StartRX_CLI+0x238>)
 8000b8e:	68f8      	ldr	r0, [r7, #12]
 8000b90:	f7ff fade 	bl	8000150 <strcmp>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d105      	bne.n	8000ba6 <StartRX_CLI+0xde>
				{
					cmd = 102;
 8000b9a:	2366      	movs	r3, #102	; 0x66
 8000b9c:	817b      	strh	r3, [r7, #10]
					printString("Help list************");
 8000b9e:	4859      	ldr	r0, [pc, #356]	; (8000d04 <StartRX_CLI+0x23c>)
 8000ba0:	f7ff fb0e 	bl	80001c0 <printString>
 8000ba4:	e07d      	b.n	8000ca2 <StartRX_CLI+0x1da>
				}
				else if(strtok(NULL, " ") == NULL)
 8000ba6:	4955      	ldr	r1, [pc, #340]	; (8000cfc <StartRX_CLI+0x234>)
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f004 fd49 	bl	8005640 <strtok>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d171      	bne.n	8000c98 <StartRX_CLI+0x1d0>
				{
					if(atoi(arg) >= 1 && atoi(arg) <= 100 && strcmp((char *)cmdStr, "atm") == 0)
 8000bb4:	6938      	ldr	r0, [r7, #16]
 8000bb6:	f004 fce1 	bl	800557c <atoi>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	dd23      	ble.n	8000c08 <StartRX_CLI+0x140>
 8000bc0:	6938      	ldr	r0, [r7, #16]
 8000bc2:	f004 fcdb 	bl	800557c <atoi>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b64      	cmp	r3, #100	; 0x64
 8000bca:	dc1d      	bgt.n	8000c08 <StartRX_CLI+0x140>
 8000bcc:	494e      	ldr	r1, [pc, #312]	; (8000d08 <StartRX_CLI+0x240>)
 8000bce:	68f8      	ldr	r0, [r7, #12]
 8000bd0:	f7ff fabe 	bl	8000150 <strcmp>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d116      	bne.n	8000c08 <StartRX_CLI+0x140>
					{
						cmd = (uint16_t)atoi(arg);
 8000bda:	6938      	ldr	r0, [r7, #16]
 8000bdc:	f004 fcce 	bl	800557c <atoi>
 8000be0:	4603      	mov	r3, r0
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	817b      	strh	r3, [r7, #10]
						printString("Command read.\r");
 8000be6:	4849      	ldr	r0, [pc, #292]	; (8000d0c <StartRX_CLI+0x244>)
 8000be8:	f7ff faea 	bl	80001c0 <printString>
						if(osMessageQueuePut(Command_QueueHandle, &cmd, 1U, 0U)!= osOK)
 8000bec:	4b48      	ldr	r3, [pc, #288]	; (8000d10 <StartRX_CLI+0x248>)
 8000bee:	6818      	ldr	r0, [r3, #0]
 8000bf0:	f107 010a 	add.w	r1, r7, #10
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	f001 ffc6 	bl	8002b88 <osMessageQueuePut>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d04f      	beq.n	8000ca2 <StartRX_CLI+0x1da>
						{
							Error_Handler();
 8000c02:	f000 f8df 	bl	8000dc4 <Error_Handler>
						if(osMessageQueuePut(Command_QueueHandle, &cmd, 1U, 0U)!= osOK)
 8000c06:	e04c      	b.n	8000ca2 <StartRX_CLI+0x1da>
						}
					}
					else if(strcmp((char *)cmdStr, "mode") == 0 && strcmp((char *)arg, "fsm\r") == 0)
 8000c08:	4942      	ldr	r1, [pc, #264]	; (8000d14 <StartRX_CLI+0x24c>)
 8000c0a:	68f8      	ldr	r0, [r7, #12]
 8000c0c:	f7ff faa0 	bl	8000150 <strcmp>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d119      	bne.n	8000c4a <StartRX_CLI+0x182>
 8000c16:	4940      	ldr	r1, [pc, #256]	; (8000d18 <StartRX_CLI+0x250>)
 8000c18:	6938      	ldr	r0, [r7, #16]
 8000c1a:	f7ff fa99 	bl	8000150 <strcmp>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d112      	bne.n	8000c4a <StartRX_CLI+0x182>
					{
						cmd = 101;
 8000c24:	2365      	movs	r3, #101	; 0x65
 8000c26:	817b      	strh	r3, [r7, #10]
						printString("Command read.");
 8000c28:	483c      	ldr	r0, [pc, #240]	; (8000d1c <StartRX_CLI+0x254>)
 8000c2a:	f7ff fac9 	bl	80001c0 <printString>
						if(osMessageQueuePut(Command_QueueHandle, &cmd, 1U, 0U)!= osOK)
 8000c2e:	4b38      	ldr	r3, [pc, #224]	; (8000d10 <StartRX_CLI+0x248>)
 8000c30:	6818      	ldr	r0, [r3, #0]
 8000c32:	f107 010a 	add.w	r1, r7, #10
 8000c36:	2300      	movs	r3, #0
 8000c38:	2201      	movs	r2, #1
 8000c3a:	f001 ffa5 	bl	8002b88 <osMessageQueuePut>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d02e      	beq.n	8000ca2 <StartRX_CLI+0x1da>
						{
							Error_Handler();
 8000c44:	f000 f8be 	bl	8000dc4 <Error_Handler>
						if(osMessageQueuePut(Command_QueueHandle, &cmd, 1U, 0U)!= osOK)
 8000c48:	e02b      	b.n	8000ca2 <StartRX_CLI+0x1da>
						}
					}
					else if(strcmp((char *)cmdStr, "mode") == 0 && strcmp((char *)arg, "scm\r") == 0)
 8000c4a:	4932      	ldr	r1, [pc, #200]	; (8000d14 <StartRX_CLI+0x24c>)
 8000c4c:	68f8      	ldr	r0, [r7, #12]
 8000c4e:	f7ff fa7f 	bl	8000150 <strcmp>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d119      	bne.n	8000c8c <StartRX_CLI+0x1c4>
 8000c58:	4931      	ldr	r1, [pc, #196]	; (8000d20 <StartRX_CLI+0x258>)
 8000c5a:	6938      	ldr	r0, [r7, #16]
 8000c5c:	f7ff fa78 	bl	8000150 <strcmp>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d112      	bne.n	8000c8c <StartRX_CLI+0x1c4>
					{
						cmd = 102;
 8000c66:	2366      	movs	r3, #102	; 0x66
 8000c68:	817b      	strh	r3, [r7, #10]
						printString("Command read.");
 8000c6a:	482c      	ldr	r0, [pc, #176]	; (8000d1c <StartRX_CLI+0x254>)
 8000c6c:	f7ff faa8 	bl	80001c0 <printString>
						if(osMessageQueuePut(Command_QueueHandle, &cmd, 1U, 0U)!= osOK)
 8000c70:	4b27      	ldr	r3, [pc, #156]	; (8000d10 <StartRX_CLI+0x248>)
 8000c72:	6818      	ldr	r0, [r3, #0]
 8000c74:	f107 010a 	add.w	r1, r7, #10
 8000c78:	2300      	movs	r3, #0
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f001 ff84 	bl	8002b88 <osMessageQueuePut>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d00d      	beq.n	8000ca2 <StartRX_CLI+0x1da>
						{
							Error_Handler();
 8000c86:	f000 f89d 	bl	8000dc4 <Error_Handler>
						if(osMessageQueuePut(Command_QueueHandle, &cmd, 1U, 0U)!= osOK)
 8000c8a:	e00a      	b.n	8000ca2 <StartRX_CLI+0x1da>
						}
					}
					else
					{
						cmd = 103;
 8000c8c:	2367      	movs	r3, #103	; 0x67
 8000c8e:	817b      	strh	r3, [r7, #10]
						printString("Error message************");
 8000c90:	4824      	ldr	r0, [pc, #144]	; (8000d24 <StartRX_CLI+0x25c>)
 8000c92:	f7ff fa95 	bl	80001c0 <printString>
 8000c96:	e004      	b.n	8000ca2 <StartRX_CLI+0x1da>
					}
				}
				else
				{
					cmd = 103;
 8000c98:	2367      	movs	r3, #103	; 0x67
 8000c9a:	817b      	strh	r3, [r7, #10]
					printString("Error message************");
 8000c9c:	4821      	ldr	r0, [pc, #132]	; (8000d24 <StartRX_CLI+0x25c>)
 8000c9e:	f7ff fa8f 	bl	80001c0 <printString>
//				if(osMessageQueuePut(Command_QueueHandle, &cmd, 1U, 0U)!= osOK)
//				{
//					Error_Handler();
//				}

				j = 0;
 8000ca2:	4b12      	ldr	r3, [pc, #72]	; (8000cec <StartRX_CLI+0x224>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < 20; i++)
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	e007      	b.n	8000cbe <StartRX_CLI+0x1f6>
				{
					save[i] = '\0';
 8000cae:	4a10      	ldr	r2, [pc, #64]	; (8000cf0 <StartRX_CLI+0x228>)
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 20; i++)
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	617b      	str	r3, [r7, #20]
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	2b13      	cmp	r3, #19
 8000cc2:	ddf4      	ble.n	8000cae <StartRX_CLI+0x1e6>
				}
				printString("\r\n~>$ ");
 8000cc4:	4818      	ldr	r0, [pc, #96]	; (8000d28 <StartRX_CLI+0x260>)
 8000cc6:	f7ff fa7b 	bl	80001c0 <printString>

				printString(SAVE_CURS);
 8000cca:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <StartRX_CLI+0x22c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fa76 	bl	80001c0 <printString>
				osDelay(10);
 8000cd4:	200a      	movs	r0, #10
 8000cd6:	f001 fea3 	bl	8002a20 <osDelay>
		if(HAL_UART_Receive(&huart3, cliBufferRX, 1, 300) == HAL_OK)
 8000cda:	e6fb      	b.n	8000ad4 <StartRX_CLI+0xc>
 8000cdc:	20001bf8 	.word	0x20001bf8
 8000ce0:	20001b4c 	.word	0x20001b4c
 8000ce4:	20000024 	.word	0x20000024
 8000ce8:	2000001c 	.word	0x2000001c
 8000cec:	20000224 	.word	0x20000224
 8000cf0:	20001bd0 	.word	0x20001bd0
 8000cf4:	20000020 	.word	0x20000020
 8000cf8:	08006150 	.word	0x08006150
 8000cfc:	08006154 	.word	0x08006154
 8000d00:	08006158 	.word	0x08006158
 8000d04:	08006160 	.word	0x08006160
 8000d08:	08006178 	.word	0x08006178
 8000d0c:	0800617c 	.word	0x0800617c
 8000d10:	20001bc4 	.word	0x20001bc4
 8000d14:	0800618c 	.word	0x0800618c
 8000d18:	08006194 	.word	0x08006194
 8000d1c:	0800619c 	.word	0x0800619c
 8000d20:	080061ac 	.word	0x080061ac
 8000d24:	080061b4 	.word	0x080061b4
 8000d28:	080061d0 	.word	0x080061d0

08000d2c <StartStatusUpdate>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStatusUpdate */
void StartStatusUpdate(void *argument)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStatusUpdate */
	uint16_t msg;
  /* Infinite loop */
	for(;;)
	{
		if(osMessageQueueGet(Message_QueueHandle, &msg, NULL, 0U) == osOK)
 8000d34:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <StartStatusUpdate+0x5c>)
 8000d36:	6818      	ldr	r0, [r3, #0]
 8000d38:	f107 010e 	add.w	r1, r7, #14
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f001 ff96 	bl	8002c70 <osMessageQueueGet>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d11a      	bne.n	8000d80 <StartStatusUpdate+0x54>
		{
			sprintf((char *)period_str, "%d", msg);
 8000d4a:	89fb      	ldrh	r3, [r7, #14]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	490f      	ldr	r1, [pc, #60]	; (8000d8c <StartStatusUpdate+0x60>)
 8000d50:	480f      	ldr	r0, [pc, #60]	; (8000d90 <StartStatusUpdate+0x64>)
 8000d52:	f004 fc55 	bl	8005600 <siprintf>
			printString(HIDE_CURS);
 8000d56:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <StartStatusUpdate+0x68>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff fa30 	bl	80001c0 <printString>
			printString(GO_TO_COUNT);
 8000d60:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <StartStatusUpdate+0x6c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fa2b 	bl	80001c0 <printString>
			printString("                           ");
 8000d6a:	480c      	ldr	r0, [pc, #48]	; (8000d9c <StartStatusUpdate+0x70>)
 8000d6c:	f7ff fa28 	bl	80001c0 <printString>
			printString(GO_TO_COUNT);
 8000d70:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <StartStatusUpdate+0x6c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fa23 	bl	80001c0 <printString>
			printString((const char *)period_str);
 8000d7a:	4805      	ldr	r0, [pc, #20]	; (8000d90 <StartStatusUpdate+0x64>)
 8000d7c:	f7ff fa20 	bl	80001c0 <printString>

		}

		osDelay(5);
 8000d80:	2005      	movs	r0, #5
 8000d82:	f001 fe4d 	bl	8002a20 <osDelay>
		if(osMessageQueueGet(Message_QueueHandle, &msg, NULL, 0U) == osOK)
 8000d86:	e7d5      	b.n	8000d34 <StartStatusUpdate+0x8>
 8000d88:	20001b3c 	.word	0x20001b3c
 8000d8c:	080061d8 	.word	0x080061d8
 8000d90:	20001b40 	.word	0x20001b40
 8000d94:	20000018 	.word	0x20000018
 8000d98:	20000014 	.word	0x20000014
 8000d9c:	080061dc 	.word	0x080061dc

08000da0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d101      	bne.n	8000db6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000db2:	f000 f98f 	bl	80010d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40000800 	.word	0x40000800

08000dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr

08000dd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <HAL_MspInit+0x5c>)
 8000dd8:	699b      	ldr	r3, [r3, #24]
 8000dda:	4a14      	ldr	r2, [pc, #80]	; (8000e2c <HAL_MspInit+0x5c>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6193      	str	r3, [r2, #24]
 8000de2:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_MspInit+0x5c>)
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dee:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <HAL_MspInit+0x5c>)
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <HAL_MspInit+0x5c>)
 8000df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df8:	61d3      	str	r3, [r2, #28]
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <HAL_MspInit+0x5c>)
 8000dfc:	69db      	ldr	r3, [r3, #28]
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e06:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <HAL_MspInit+0x60>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <HAL_MspInit+0x60>)
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e22:	bf00      	nop
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	40010000 	.word	0x40010000

08000e34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	; 0x28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a25      	ldr	r2, [pc, #148]	; (8000ee4 <HAL_UART_MspInit+0xb0>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d143      	bne.n	8000edc <HAL_UART_MspInit+0xa8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e54:	4b24      	ldr	r3, [pc, #144]	; (8000ee8 <HAL_UART_MspInit+0xb4>)
 8000e56:	69db      	ldr	r3, [r3, #28]
 8000e58:	4a23      	ldr	r2, [pc, #140]	; (8000ee8 <HAL_UART_MspInit+0xb4>)
 8000e5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e5e:	61d3      	str	r3, [r2, #28]
 8000e60:	4b21      	ldr	r3, [pc, #132]	; (8000ee8 <HAL_UART_MspInit+0xb4>)
 8000e62:	69db      	ldr	r3, [r3, #28]
 8000e64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ee8 <HAL_UART_MspInit+0xb4>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	4a1d      	ldr	r2, [pc, #116]	; (8000ee8 <HAL_UART_MspInit+0xb4>)
 8000e72:	f043 0310 	orr.w	r3, r3, #16
 8000e76:	6193      	str	r3, [r2, #24]
 8000e78:	4b1b      	ldr	r3, [pc, #108]	; (8000ee8 <HAL_UART_MspInit+0xb4>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	f003 0310 	and.w	r3, r3, #16
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e92:	f107 0314 	add.w	r3, r7, #20
 8000e96:	4619      	mov	r1, r3
 8000e98:	4814      	ldr	r0, [pc, #80]	; (8000eec <HAL_UART_MspInit+0xb8>)
 8000e9a:	f000 fa39 	bl	8001310 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	480e      	ldr	r0, [pc, #56]	; (8000eec <HAL_UART_MspInit+0xb8>)
 8000eb4:	f000 fa2c 	bl	8001310 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8000eb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <HAL_UART_MspInit+0xbc>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8000ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8000ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed0:	f043 0310 	orr.w	r3, r3, #16
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ed6:	4a06      	ldr	r2, [pc, #24]	; (8000ef0 <HAL_UART_MspInit+0xbc>)
 8000ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eda:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000edc:	bf00      	nop
 8000ede:	3728      	adds	r7, #40	; 0x28
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40004800 	.word	0x40004800
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	40011000 	.word	0x40011000
 8000ef0:	40010000 	.word	0x40010000

08000ef4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08c      	sub	sp, #48	; 0x30
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000f04:	2200      	movs	r2, #0
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	201e      	movs	r0, #30
 8000f0a:	f000 f9d6 	bl	80012ba <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f0e:	201e      	movs	r0, #30
 8000f10:	f000 f9ef 	bl	80012f2 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000f14:	4b1e      	ldr	r3, [pc, #120]	; (8000f90 <HAL_InitTick+0x9c>)
 8000f16:	69db      	ldr	r3, [r3, #28]
 8000f18:	4a1d      	ldr	r2, [pc, #116]	; (8000f90 <HAL_InitTick+0x9c>)
 8000f1a:	f043 0304 	orr.w	r3, r3, #4
 8000f1e:	61d3      	str	r3, [r2, #28]
 8000f20:	4b1b      	ldr	r3, [pc, #108]	; (8000f90 <HAL_InitTick+0x9c>)
 8000f22:	69db      	ldr	r3, [r3, #28]
 8000f24:	f003 0304 	and.w	r3, r3, #4
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f2c:	f107 0210 	add.w	r2, r7, #16
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4611      	mov	r1, r2
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 ff74 	bl	8001e24 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f3c:	f000 ff4a 	bl	8001dd4 <HAL_RCC_GetPCLK1Freq>
 8000f40:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f44:	4a13      	ldr	r2, [pc, #76]	; (8000f94 <HAL_InitTick+0xa0>)
 8000f46:	fba2 2303 	umull	r2, r3, r2, r3
 8000f4a:	0c9b      	lsrs	r3, r3, #18
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000f50:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <HAL_InitTick+0xa4>)
 8000f52:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <HAL_InitTick+0xa8>)
 8000f54:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <HAL_InitTick+0xa4>)
 8000f58:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f5c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000f5e:	4a0e      	ldr	r2, [pc, #56]	; (8000f98 <HAL_InitTick+0xa4>)
 8000f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f62:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <HAL_InitTick+0xa4>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <HAL_InitTick+0xa4>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000f70:	4809      	ldr	r0, [pc, #36]	; (8000f98 <HAL_InitTick+0xa4>)
 8000f72:	f000 ffa5 	bl	8001ec0 <HAL_TIM_Base_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d104      	bne.n	8000f86 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000f7c:	4806      	ldr	r0, [pc, #24]	; (8000f98 <HAL_InitTick+0xa4>)
 8000f7e:	f000 fff7 	bl	8001f70 <HAL_TIM_Base_Start_IT>
 8000f82:	4603      	mov	r3, r0
 8000f84:	e000      	b.n	8000f88 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3730      	adds	r7, #48	; 0x30
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40021000 	.word	0x40021000
 8000f94:	431bde83 	.word	0x431bde83
 8000f98:	20001c08 	.word	0x20001c08
 8000f9c:	40000800 	.word	0x40000800

08000fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr

08000fac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <HardFault_Handler+0x4>

08000fb2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <MemManage_Handler+0x4>

08000fb8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <BusFault_Handler+0x4>

08000fbe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <UsageFault_Handler+0x4>

08000fc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr

08000fd0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <TIM4_IRQHandler+0x10>)
 8000fd6:	f001 f81d 	bl	8002014 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20001c08 	.word	0x20001c08

08000fe4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fec:	4a14      	ldr	r2, [pc, #80]	; (8001040 <_sbrk+0x5c>)
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <_sbrk+0x60>)
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff8:	4b13      	ldr	r3, [pc, #76]	; (8001048 <_sbrk+0x64>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d102      	bne.n	8001006 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <_sbrk+0x64>)
 8001002:	4a12      	ldr	r2, [pc, #72]	; (800104c <_sbrk+0x68>)
 8001004:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001006:	4b10      	ldr	r3, [pc, #64]	; (8001048 <_sbrk+0x64>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	429a      	cmp	r2, r3
 8001012:	d207      	bcs.n	8001024 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001014:	f004 fab6 	bl	8005584 <__errno>
 8001018:	4602      	mov	r2, r0
 800101a:	230c      	movs	r3, #12
 800101c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800101e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001022:	e009      	b.n	8001038 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001024:	4b08      	ldr	r3, [pc, #32]	; (8001048 <_sbrk+0x64>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102a:	4b07      	ldr	r3, [pc, #28]	; (8001048 <_sbrk+0x64>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	4a05      	ldr	r2, [pc, #20]	; (8001048 <_sbrk+0x64>)
 8001034:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001036:	68fb      	ldr	r3, [r7, #12]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20005000 	.word	0x20005000
 8001044:	00000400 	.word	0x00000400
 8001048:	20000228 	.word	0x20000228
 800104c:	20001c98 	.word	0x20001c98

08001050 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr

0800105c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800105c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800105e:	e003      	b.n	8001068 <LoopCopyDataInit>

08001060 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001062:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001064:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001066:	3104      	adds	r1, #4

08001068 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001068:	480a      	ldr	r0, [pc, #40]	; (8001094 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800106c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800106e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001070:	d3f6      	bcc.n	8001060 <CopyDataInit>
  ldr r2, =_sbss
 8001072:	4a0a      	ldr	r2, [pc, #40]	; (800109c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001074:	e002      	b.n	800107c <LoopFillZerobss>

08001076 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001078:	f842 3b04 	str.w	r3, [r2], #4

0800107c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800107c:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800107e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001080:	d3f9      	bcc.n	8001076 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001082:	f7ff ffe5 	bl	8001050 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001086:	f004 fa83 	bl	8005590 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800108a:	f7ff fb55 	bl	8000738 <main>
  bx lr
 800108e:	4770      	bx	lr
  ldr r3, =_sidata
 8001090:	08006420 	.word	0x08006420
  ldr r0, =_sdata
 8001094:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001098:	20000208 	.word	0x20000208
  ldr r2, =_sbss
 800109c:	20000208 	.word	0x20000208
  ldr r3, = _ebss
 80010a0:	20001c98 	.word	0x20001c98

080010a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010a4:	e7fe      	b.n	80010a4 <ADC1_2_IRQHandler>
	...

080010a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <HAL_Init+0x28>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a07      	ldr	r2, [pc, #28]	; (80010d0 <HAL_Init+0x28>)
 80010b2:	f043 0310 	orr.w	r3, r3, #16
 80010b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b8:	2003      	movs	r0, #3
 80010ba:	f000 f8f3 	bl	80012a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010be:	2000      	movs	r0, #0
 80010c0:	f7ff ff18 	bl	8000ef4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010c4:	f7ff fe84 	bl	8000dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40022000 	.word	0x40022000

080010d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <HAL_IncTick+0x1c>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	461a      	mov	r2, r3
 80010de:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <HAL_IncTick+0x20>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4413      	add	r3, r2
 80010e4:	4a03      	ldr	r2, [pc, #12]	; (80010f4 <HAL_IncTick+0x20>)
 80010e6:	6013      	str	r3, [r2, #0]
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr
 80010f0:	20000030 	.word	0x20000030
 80010f4:	20001c50 	.word	0x20001c50

080010f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return uwTick;
 80010fc:	4b02      	ldr	r3, [pc, #8]	; (8001108 <HAL_GetTick+0x10>)
 80010fe:	681b      	ldr	r3, [r3, #0]
}
 8001100:	4618      	mov	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr
 8001108:	20001c50 	.word	0x20001c50

0800110c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001114:	f7ff fff0 	bl	80010f8 <HAL_GetTick>
 8001118:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001124:	d005      	beq.n	8001132 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <HAL_Delay+0x40>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	461a      	mov	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4413      	add	r3, r2
 8001130:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001132:	bf00      	nop
 8001134:	f7ff ffe0 	bl	80010f8 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	429a      	cmp	r2, r3
 8001142:	d8f7      	bhi.n	8001134 <HAL_Delay+0x28>
  {
  }
}
 8001144:	bf00      	nop
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000030 	.word	0x20000030

08001150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <__NVIC_SetPriorityGrouping+0x44>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800116c:	4013      	ands	r3, r2
 800116e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001178:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800117c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001182:	4a04      	ldr	r2, [pc, #16]	; (8001194 <__NVIC_SetPriorityGrouping+0x44>)
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	60d3      	str	r3, [r2, #12]
}
 8001188:	bf00      	nop
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800119c:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <__NVIC_GetPriorityGrouping+0x18>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	0a1b      	lsrs	r3, r3, #8
 80011a2:	f003 0307 	and.w	r3, r3, #7
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	db0b      	blt.n	80011de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	f003 021f 	and.w	r2, r3, #31
 80011cc:	4906      	ldr	r1, [pc, #24]	; (80011e8 <__NVIC_EnableIRQ+0x34>)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	095b      	lsrs	r3, r3, #5
 80011d4:	2001      	movs	r0, #1
 80011d6:	fa00 f202 	lsl.w	r2, r0, r2
 80011da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr
 80011e8:	e000e100 	.word	0xe000e100

080011ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	6039      	str	r1, [r7, #0]
 80011f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	db0a      	blt.n	8001216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	b2da      	uxtb	r2, r3
 8001204:	490c      	ldr	r1, [pc, #48]	; (8001238 <__NVIC_SetPriority+0x4c>)
 8001206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120a:	0112      	lsls	r2, r2, #4
 800120c:	b2d2      	uxtb	r2, r2
 800120e:	440b      	add	r3, r1
 8001210:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001214:	e00a      	b.n	800122c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4908      	ldr	r1, [pc, #32]	; (800123c <__NVIC_SetPriority+0x50>)
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	f003 030f 	and.w	r3, r3, #15
 8001222:	3b04      	subs	r3, #4
 8001224:	0112      	lsls	r2, r2, #4
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	440b      	add	r3, r1
 800122a:	761a      	strb	r2, [r3, #24]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000e100 	.word	0xe000e100
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001240:	b480      	push	{r7}
 8001242:	b089      	sub	sp, #36	; 0x24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f1c3 0307 	rsb	r3, r3, #7
 800125a:	2b04      	cmp	r3, #4
 800125c:	bf28      	it	cs
 800125e:	2304      	movcs	r3, #4
 8001260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3304      	adds	r3, #4
 8001266:	2b06      	cmp	r3, #6
 8001268:	d902      	bls.n	8001270 <NVIC_EncodePriority+0x30>
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3b03      	subs	r3, #3
 800126e:	e000      	b.n	8001272 <NVIC_EncodePriority+0x32>
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43da      	mvns	r2, r3
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	401a      	ands	r2, r3
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001288:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	fa01 f303 	lsl.w	r3, r1, r3
 8001292:	43d9      	mvns	r1, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	4313      	orrs	r3, r2
         );
}
 800129a:	4618      	mov	r0, r3
 800129c:	3724      	adds	r7, #36	; 0x24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr

080012a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff ff4f 	bl	8001150 <__NVIC_SetPriorityGrouping>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b086      	sub	sp, #24
 80012be:	af00      	add	r7, sp, #0
 80012c0:	4603      	mov	r3, r0
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	607a      	str	r2, [r7, #4]
 80012c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012cc:	f7ff ff64 	bl	8001198 <__NVIC_GetPriorityGrouping>
 80012d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	68b9      	ldr	r1, [r7, #8]
 80012d6:	6978      	ldr	r0, [r7, #20]
 80012d8:	f7ff ffb2 	bl	8001240 <NVIC_EncodePriority>
 80012dc:	4602      	mov	r2, r0
 80012de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e2:	4611      	mov	r1, r2
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ff81 	bl	80011ec <__NVIC_SetPriority>
}
 80012ea:	bf00      	nop
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff57 	bl	80011b4 <__NVIC_EnableIRQ>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001310:	b480      	push	{r7}
 8001312:	b08b      	sub	sp, #44	; 0x2c
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800131a:	2300      	movs	r3, #0
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800131e:	2300      	movs	r3, #0
 8001320:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001322:	e127      	b.n	8001574 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001324:	2201      	movs	r2, #1
 8001326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	69fa      	ldr	r2, [r7, #28]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	429a      	cmp	r2, r3
 800133e:	f040 8116 	bne.w	800156e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	2b12      	cmp	r3, #18
 8001348:	d034      	beq.n	80013b4 <HAL_GPIO_Init+0xa4>
 800134a:	2b12      	cmp	r3, #18
 800134c:	d80d      	bhi.n	800136a <HAL_GPIO_Init+0x5a>
 800134e:	2b02      	cmp	r3, #2
 8001350:	d02b      	beq.n	80013aa <HAL_GPIO_Init+0x9a>
 8001352:	2b02      	cmp	r3, #2
 8001354:	d804      	bhi.n	8001360 <HAL_GPIO_Init+0x50>
 8001356:	2b00      	cmp	r3, #0
 8001358:	d031      	beq.n	80013be <HAL_GPIO_Init+0xae>
 800135a:	2b01      	cmp	r3, #1
 800135c:	d01c      	beq.n	8001398 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800135e:	e048      	b.n	80013f2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001360:	2b03      	cmp	r3, #3
 8001362:	d043      	beq.n	80013ec <HAL_GPIO_Init+0xdc>
 8001364:	2b11      	cmp	r3, #17
 8001366:	d01b      	beq.n	80013a0 <HAL_GPIO_Init+0x90>
          break;
 8001368:	e043      	b.n	80013f2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800136a:	4a89      	ldr	r2, [pc, #548]	; (8001590 <HAL_GPIO_Init+0x280>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d026      	beq.n	80013be <HAL_GPIO_Init+0xae>
 8001370:	4a87      	ldr	r2, [pc, #540]	; (8001590 <HAL_GPIO_Init+0x280>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d806      	bhi.n	8001384 <HAL_GPIO_Init+0x74>
 8001376:	4a87      	ldr	r2, [pc, #540]	; (8001594 <HAL_GPIO_Init+0x284>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d020      	beq.n	80013be <HAL_GPIO_Init+0xae>
 800137c:	4a86      	ldr	r2, [pc, #536]	; (8001598 <HAL_GPIO_Init+0x288>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d01d      	beq.n	80013be <HAL_GPIO_Init+0xae>
          break;
 8001382:	e036      	b.n	80013f2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001384:	4a85      	ldr	r2, [pc, #532]	; (800159c <HAL_GPIO_Init+0x28c>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d019      	beq.n	80013be <HAL_GPIO_Init+0xae>
 800138a:	4a85      	ldr	r2, [pc, #532]	; (80015a0 <HAL_GPIO_Init+0x290>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d016      	beq.n	80013be <HAL_GPIO_Init+0xae>
 8001390:	4a84      	ldr	r2, [pc, #528]	; (80015a4 <HAL_GPIO_Init+0x294>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d013      	beq.n	80013be <HAL_GPIO_Init+0xae>
          break;
 8001396:	e02c      	b.n	80013f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	623b      	str	r3, [r7, #32]
          break;
 800139e:	e028      	b.n	80013f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	3304      	adds	r3, #4
 80013a6:	623b      	str	r3, [r7, #32]
          break;
 80013a8:	e023      	b.n	80013f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	3308      	adds	r3, #8
 80013b0:	623b      	str	r3, [r7, #32]
          break;
 80013b2:	e01e      	b.n	80013f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	330c      	adds	r3, #12
 80013ba:	623b      	str	r3, [r7, #32]
          break;
 80013bc:	e019      	b.n	80013f2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d102      	bne.n	80013cc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013c6:	2304      	movs	r3, #4
 80013c8:	623b      	str	r3, [r7, #32]
          break;
 80013ca:	e012      	b.n	80013f2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d105      	bne.n	80013e0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013d4:	2308      	movs	r3, #8
 80013d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	69fa      	ldr	r2, [r7, #28]
 80013dc:	611a      	str	r2, [r3, #16]
          break;
 80013de:	e008      	b.n	80013f2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013e0:	2308      	movs	r3, #8
 80013e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69fa      	ldr	r2, [r7, #28]
 80013e8:	615a      	str	r2, [r3, #20]
          break;
 80013ea:	e002      	b.n	80013f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013ec:	2300      	movs	r3, #0
 80013ee:	623b      	str	r3, [r7, #32]
          break;
 80013f0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	2bff      	cmp	r3, #255	; 0xff
 80013f6:	d801      	bhi.n	80013fc <HAL_GPIO_Init+0xec>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	e001      	b.n	8001400 <HAL_GPIO_Init+0xf0>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3304      	adds	r3, #4
 8001400:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	2bff      	cmp	r3, #255	; 0xff
 8001406:	d802      	bhi.n	800140e <HAL_GPIO_Init+0xfe>
 8001408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	e002      	b.n	8001414 <HAL_GPIO_Init+0x104>
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	3b08      	subs	r3, #8
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	210f      	movs	r1, #15
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	fa01 f303 	lsl.w	r3, r1, r3
 8001422:	43db      	mvns	r3, r3
 8001424:	401a      	ands	r2, r3
 8001426:	6a39      	ldr	r1, [r7, #32]
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	fa01 f303 	lsl.w	r3, r1, r3
 800142e:	431a      	orrs	r2, r3
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143c:	2b00      	cmp	r3, #0
 800143e:	f000 8096 	beq.w	800156e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001442:	4b59      	ldr	r3, [pc, #356]	; (80015a8 <HAL_GPIO_Init+0x298>)
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	4a58      	ldr	r2, [pc, #352]	; (80015a8 <HAL_GPIO_Init+0x298>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6193      	str	r3, [r2, #24]
 800144e:	4b56      	ldr	r3, [pc, #344]	; (80015a8 <HAL_GPIO_Init+0x298>)
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800145a:	4a54      	ldr	r2, [pc, #336]	; (80015ac <HAL_GPIO_Init+0x29c>)
 800145c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145e:	089b      	lsrs	r3, r3, #2
 8001460:	3302      	adds	r3, #2
 8001462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001466:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146a:	f003 0303 	and.w	r3, r3, #3
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	220f      	movs	r2, #15
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	4013      	ands	r3, r2
 800147c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a4b      	ldr	r2, [pc, #300]	; (80015b0 <HAL_GPIO_Init+0x2a0>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d013      	beq.n	80014ae <HAL_GPIO_Init+0x19e>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a4a      	ldr	r2, [pc, #296]	; (80015b4 <HAL_GPIO_Init+0x2a4>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d00d      	beq.n	80014aa <HAL_GPIO_Init+0x19a>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a49      	ldr	r2, [pc, #292]	; (80015b8 <HAL_GPIO_Init+0x2a8>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d007      	beq.n	80014a6 <HAL_GPIO_Init+0x196>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a48      	ldr	r2, [pc, #288]	; (80015bc <HAL_GPIO_Init+0x2ac>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d101      	bne.n	80014a2 <HAL_GPIO_Init+0x192>
 800149e:	2303      	movs	r3, #3
 80014a0:	e006      	b.n	80014b0 <HAL_GPIO_Init+0x1a0>
 80014a2:	2304      	movs	r3, #4
 80014a4:	e004      	b.n	80014b0 <HAL_GPIO_Init+0x1a0>
 80014a6:	2302      	movs	r3, #2
 80014a8:	e002      	b.n	80014b0 <HAL_GPIO_Init+0x1a0>
 80014aa:	2301      	movs	r3, #1
 80014ac:	e000      	b.n	80014b0 <HAL_GPIO_Init+0x1a0>
 80014ae:	2300      	movs	r3, #0
 80014b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b2:	f002 0203 	and.w	r2, r2, #3
 80014b6:	0092      	lsls	r2, r2, #2
 80014b8:	4093      	lsls	r3, r2
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	4313      	orrs	r3, r2
 80014be:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014c0:	493a      	ldr	r1, [pc, #232]	; (80015ac <HAL_GPIO_Init+0x29c>)
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	089b      	lsrs	r3, r3, #2
 80014c6:	3302      	adds	r3, #2
 80014c8:	68fa      	ldr	r2, [r7, #12]
 80014ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d006      	beq.n	80014e8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014da:	4b39      	ldr	r3, [pc, #228]	; (80015c0 <HAL_GPIO_Init+0x2b0>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	4938      	ldr	r1, [pc, #224]	; (80015c0 <HAL_GPIO_Init+0x2b0>)
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	600b      	str	r3, [r1, #0]
 80014e6:	e006      	b.n	80014f6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014e8:	4b35      	ldr	r3, [pc, #212]	; (80015c0 <HAL_GPIO_Init+0x2b0>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	4933      	ldr	r1, [pc, #204]	; (80015c0 <HAL_GPIO_Init+0x2b0>)
 80014f2:	4013      	ands	r3, r2
 80014f4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d006      	beq.n	8001510 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001502:	4b2f      	ldr	r3, [pc, #188]	; (80015c0 <HAL_GPIO_Init+0x2b0>)
 8001504:	685a      	ldr	r2, [r3, #4]
 8001506:	492e      	ldr	r1, [pc, #184]	; (80015c0 <HAL_GPIO_Init+0x2b0>)
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	4313      	orrs	r3, r2
 800150c:	604b      	str	r3, [r1, #4]
 800150e:	e006      	b.n	800151e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001510:	4b2b      	ldr	r3, [pc, #172]	; (80015c0 <HAL_GPIO_Init+0x2b0>)
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	43db      	mvns	r3, r3
 8001518:	4929      	ldr	r1, [pc, #164]	; (80015c0 <HAL_GPIO_Init+0x2b0>)
 800151a:	4013      	ands	r3, r2
 800151c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d006      	beq.n	8001538 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800152a:	4b25      	ldr	r3, [pc, #148]	; (80015c0 <HAL_GPIO_Init+0x2b0>)
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	4924      	ldr	r1, [pc, #144]	; (80015c0 <HAL_GPIO_Init+0x2b0>)
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	4313      	orrs	r3, r2
 8001534:	608b      	str	r3, [r1, #8]
 8001536:	e006      	b.n	8001546 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001538:	4b21      	ldr	r3, [pc, #132]	; (80015c0 <HAL_GPIO_Init+0x2b0>)
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	43db      	mvns	r3, r3
 8001540:	491f      	ldr	r1, [pc, #124]	; (80015c0 <HAL_GPIO_Init+0x2b0>)
 8001542:	4013      	ands	r3, r2
 8001544:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d006      	beq.n	8001560 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001552:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <HAL_GPIO_Init+0x2b0>)
 8001554:	68da      	ldr	r2, [r3, #12]
 8001556:	491a      	ldr	r1, [pc, #104]	; (80015c0 <HAL_GPIO_Init+0x2b0>)
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	4313      	orrs	r3, r2
 800155c:	60cb      	str	r3, [r1, #12]
 800155e:	e006      	b.n	800156e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001560:	4b17      	ldr	r3, [pc, #92]	; (80015c0 <HAL_GPIO_Init+0x2b0>)
 8001562:	68da      	ldr	r2, [r3, #12]
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	43db      	mvns	r3, r3
 8001568:	4915      	ldr	r1, [pc, #84]	; (80015c0 <HAL_GPIO_Init+0x2b0>)
 800156a:	4013      	ands	r3, r2
 800156c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	3301      	adds	r3, #1
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157a:	fa22 f303 	lsr.w	r3, r2, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	f47f aed0 	bne.w	8001324 <HAL_GPIO_Init+0x14>
  }
}
 8001584:	bf00      	nop
 8001586:	372c      	adds	r7, #44	; 0x2c
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	10210000 	.word	0x10210000
 8001594:	10110000 	.word	0x10110000
 8001598:	10120000 	.word	0x10120000
 800159c:	10310000 	.word	0x10310000
 80015a0:	10320000 	.word	0x10320000
 80015a4:	10220000 	.word	0x10220000
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40010000 	.word	0x40010000
 80015b0:	40010800 	.word	0x40010800
 80015b4:	40010c00 	.word	0x40010c00
 80015b8:	40011000 	.word	0x40011000
 80015bc:	40011400 	.word	0x40011400
 80015c0:	40010400 	.word	0x40010400

080015c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	460b      	mov	r3, r1
 80015ce:	807b      	strh	r3, [r7, #2]
 80015d0:	4613      	mov	r3, r2
 80015d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015d4:	787b      	ldrb	r3, [r7, #1]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015da:	887a      	ldrh	r2, [r7, #2]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015e0:	e003      	b.n	80015ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015e2:	887b      	ldrh	r3, [r7, #2]
 80015e4:	041a      	lsls	r2, r3, #16
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	611a      	str	r2, [r3, #16]
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr

080015f4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001606:	887a      	ldrh	r2, [r7, #2]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4013      	ands	r3, r2
 800160c:	041a      	lsls	r2, r3, #16
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	43d9      	mvns	r1, r3
 8001612:	887b      	ldrh	r3, [r7, #2]
 8001614:	400b      	ands	r3, r1
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	611a      	str	r2, [r3, #16]
}
 800161c:	bf00      	nop
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr
	...

08001628 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e26c      	b.n	8001b14 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b00      	cmp	r3, #0
 8001644:	f000 8087 	beq.w	8001756 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001648:	4b92      	ldr	r3, [pc, #584]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 030c 	and.w	r3, r3, #12
 8001650:	2b04      	cmp	r3, #4
 8001652:	d00c      	beq.n	800166e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001654:	4b8f      	ldr	r3, [pc, #572]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 030c 	and.w	r3, r3, #12
 800165c:	2b08      	cmp	r3, #8
 800165e:	d112      	bne.n	8001686 <HAL_RCC_OscConfig+0x5e>
 8001660:	4b8c      	ldr	r3, [pc, #560]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800166c:	d10b      	bne.n	8001686 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800166e:	4b89      	ldr	r3, [pc, #548]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d06c      	beq.n	8001754 <HAL_RCC_OscConfig+0x12c>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d168      	bne.n	8001754 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e246      	b.n	8001b14 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800168e:	d106      	bne.n	800169e <HAL_RCC_OscConfig+0x76>
 8001690:	4b80      	ldr	r3, [pc, #512]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a7f      	ldr	r2, [pc, #508]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 8001696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800169a:	6013      	str	r3, [r2, #0]
 800169c:	e02e      	b.n	80016fc <HAL_RCC_OscConfig+0xd4>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10c      	bne.n	80016c0 <HAL_RCC_OscConfig+0x98>
 80016a6:	4b7b      	ldr	r3, [pc, #492]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a7a      	ldr	r2, [pc, #488]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 80016ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	4b78      	ldr	r3, [pc, #480]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a77      	ldr	r2, [pc, #476]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 80016b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	e01d      	b.n	80016fc <HAL_RCC_OscConfig+0xd4>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016c8:	d10c      	bne.n	80016e4 <HAL_RCC_OscConfig+0xbc>
 80016ca:	4b72      	ldr	r3, [pc, #456]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a71      	ldr	r2, [pc, #452]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 80016d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	4b6f      	ldr	r3, [pc, #444]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a6e      	ldr	r2, [pc, #440]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	e00b      	b.n	80016fc <HAL_RCC_OscConfig+0xd4>
 80016e4:	4b6b      	ldr	r3, [pc, #428]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a6a      	ldr	r2, [pc, #424]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 80016ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ee:	6013      	str	r3, [r2, #0]
 80016f0:	4b68      	ldr	r3, [pc, #416]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a67      	ldr	r2, [pc, #412]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 80016f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d013      	beq.n	800172c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001704:	f7ff fcf8 	bl	80010f8 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800170c:	f7ff fcf4 	bl	80010f8 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b64      	cmp	r3, #100	; 0x64
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e1fa      	b.n	8001b14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171e:	4b5d      	ldr	r3, [pc, #372]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0f0      	beq.n	800170c <HAL_RCC_OscConfig+0xe4>
 800172a:	e014      	b.n	8001756 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172c:	f7ff fce4 	bl	80010f8 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001734:	f7ff fce0 	bl	80010f8 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b64      	cmp	r3, #100	; 0x64
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e1e6      	b.n	8001b14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001746:	4b53      	ldr	r3, [pc, #332]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f0      	bne.n	8001734 <HAL_RCC_OscConfig+0x10c>
 8001752:	e000      	b.n	8001756 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d063      	beq.n	800182a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001762:	4b4c      	ldr	r3, [pc, #304]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f003 030c 	and.w	r3, r3, #12
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00b      	beq.n	8001786 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800176e:	4b49      	ldr	r3, [pc, #292]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f003 030c 	and.w	r3, r3, #12
 8001776:	2b08      	cmp	r3, #8
 8001778:	d11c      	bne.n	80017b4 <HAL_RCC_OscConfig+0x18c>
 800177a:	4b46      	ldr	r3, [pc, #280]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d116      	bne.n	80017b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001786:	4b43      	ldr	r3, [pc, #268]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d005      	beq.n	800179e <HAL_RCC_OscConfig+0x176>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d001      	beq.n	800179e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e1ba      	b.n	8001b14 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800179e:	4b3d      	ldr	r3, [pc, #244]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	4939      	ldr	r1, [pc, #228]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017b2:	e03a      	b.n	800182a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d020      	beq.n	80017fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017bc:	4b36      	ldr	r3, [pc, #216]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 80017be:	2201      	movs	r2, #1
 80017c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c2:	f7ff fc99 	bl	80010f8 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ca:	f7ff fc95 	bl	80010f8 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e19b      	b.n	8001b14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017dc:	4b2d      	ldr	r3, [pc, #180]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0f0      	beq.n	80017ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e8:	4b2a      	ldr	r3, [pc, #168]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	695b      	ldr	r3, [r3, #20]
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	4927      	ldr	r1, [pc, #156]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	600b      	str	r3, [r1, #0]
 80017fc:	e015      	b.n	800182a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017fe:	4b26      	ldr	r3, [pc, #152]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001804:	f7ff fc78 	bl	80010f8 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800180c:	f7ff fc74 	bl	80010f8 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e17a      	b.n	8001b14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800181e:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1f0      	bne.n	800180c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0308 	and.w	r3, r3, #8
 8001832:	2b00      	cmp	r3, #0
 8001834:	d03a      	beq.n	80018ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d019      	beq.n	8001872 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800183e:	4b17      	ldr	r3, [pc, #92]	; (800189c <HAL_RCC_OscConfig+0x274>)
 8001840:	2201      	movs	r2, #1
 8001842:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001844:	f7ff fc58 	bl	80010f8 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800184c:	f7ff fc54 	bl	80010f8 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e15a      	b.n	8001b14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800185e:	4b0d      	ldr	r3, [pc, #52]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 8001860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0f0      	beq.n	800184c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800186a:	2001      	movs	r0, #1
 800186c:	f000 fb0a 	bl	8001e84 <RCC_Delay>
 8001870:	e01c      	b.n	80018ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001872:	4b0a      	ldr	r3, [pc, #40]	; (800189c <HAL_RCC_OscConfig+0x274>)
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001878:	f7ff fc3e 	bl	80010f8 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800187e:	e00f      	b.n	80018a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001880:	f7ff fc3a 	bl	80010f8 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d908      	bls.n	80018a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e140      	b.n	8001b14 <HAL_RCC_OscConfig+0x4ec>
 8001892:	bf00      	nop
 8001894:	40021000 	.word	0x40021000
 8001898:	42420000 	.word	0x42420000
 800189c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018a0:	4b9e      	ldr	r3, [pc, #632]	; (8001b1c <HAL_RCC_OscConfig+0x4f4>)
 80018a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1e9      	bne.n	8001880 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 80a6 	beq.w	8001a06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ba:	2300      	movs	r3, #0
 80018bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018be:	4b97      	ldr	r3, [pc, #604]	; (8001b1c <HAL_RCC_OscConfig+0x4f4>)
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d10d      	bne.n	80018e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ca:	4b94      	ldr	r3, [pc, #592]	; (8001b1c <HAL_RCC_OscConfig+0x4f4>)
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	4a93      	ldr	r2, [pc, #588]	; (8001b1c <HAL_RCC_OscConfig+0x4f4>)
 80018d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d4:	61d3      	str	r3, [r2, #28]
 80018d6:	4b91      	ldr	r3, [pc, #580]	; (8001b1c <HAL_RCC_OscConfig+0x4f4>)
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018e2:	2301      	movs	r3, #1
 80018e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e6:	4b8e      	ldr	r3, [pc, #568]	; (8001b20 <HAL_RCC_OscConfig+0x4f8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d118      	bne.n	8001924 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018f2:	4b8b      	ldr	r3, [pc, #556]	; (8001b20 <HAL_RCC_OscConfig+0x4f8>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a8a      	ldr	r2, [pc, #552]	; (8001b20 <HAL_RCC_OscConfig+0x4f8>)
 80018f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018fe:	f7ff fbfb 	bl	80010f8 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001906:	f7ff fbf7 	bl	80010f8 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b64      	cmp	r3, #100	; 0x64
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e0fd      	b.n	8001b14 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001918:	4b81      	ldr	r3, [pc, #516]	; (8001b20 <HAL_RCC_OscConfig+0x4f8>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0f0      	beq.n	8001906 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d106      	bne.n	800193a <HAL_RCC_OscConfig+0x312>
 800192c:	4b7b      	ldr	r3, [pc, #492]	; (8001b1c <HAL_RCC_OscConfig+0x4f4>)
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	4a7a      	ldr	r2, [pc, #488]	; (8001b1c <HAL_RCC_OscConfig+0x4f4>)
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	6213      	str	r3, [r2, #32]
 8001938:	e02d      	b.n	8001996 <HAL_RCC_OscConfig+0x36e>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d10c      	bne.n	800195c <HAL_RCC_OscConfig+0x334>
 8001942:	4b76      	ldr	r3, [pc, #472]	; (8001b1c <HAL_RCC_OscConfig+0x4f4>)
 8001944:	6a1b      	ldr	r3, [r3, #32]
 8001946:	4a75      	ldr	r2, [pc, #468]	; (8001b1c <HAL_RCC_OscConfig+0x4f4>)
 8001948:	f023 0301 	bic.w	r3, r3, #1
 800194c:	6213      	str	r3, [r2, #32]
 800194e:	4b73      	ldr	r3, [pc, #460]	; (8001b1c <HAL_RCC_OscConfig+0x4f4>)
 8001950:	6a1b      	ldr	r3, [r3, #32]
 8001952:	4a72      	ldr	r2, [pc, #456]	; (8001b1c <HAL_RCC_OscConfig+0x4f4>)
 8001954:	f023 0304 	bic.w	r3, r3, #4
 8001958:	6213      	str	r3, [r2, #32]
 800195a:	e01c      	b.n	8001996 <HAL_RCC_OscConfig+0x36e>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	2b05      	cmp	r3, #5
 8001962:	d10c      	bne.n	800197e <HAL_RCC_OscConfig+0x356>
 8001964:	4b6d      	ldr	r3, [pc, #436]	; (8001b1c <HAL_RCC_OscConfig+0x4f4>)
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	4a6c      	ldr	r2, [pc, #432]	; (8001b1c <HAL_RCC_OscConfig+0x4f4>)
 800196a:	f043 0304 	orr.w	r3, r3, #4
 800196e:	6213      	str	r3, [r2, #32]
 8001970:	4b6a      	ldr	r3, [pc, #424]	; (8001b1c <HAL_RCC_OscConfig+0x4f4>)
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	4a69      	ldr	r2, [pc, #420]	; (8001b1c <HAL_RCC_OscConfig+0x4f4>)
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	6213      	str	r3, [r2, #32]
 800197c:	e00b      	b.n	8001996 <HAL_RCC_OscConfig+0x36e>
 800197e:	4b67      	ldr	r3, [pc, #412]	; (8001b1c <HAL_RCC_OscConfig+0x4f4>)
 8001980:	6a1b      	ldr	r3, [r3, #32]
 8001982:	4a66      	ldr	r2, [pc, #408]	; (8001b1c <HAL_RCC_OscConfig+0x4f4>)
 8001984:	f023 0301 	bic.w	r3, r3, #1
 8001988:	6213      	str	r3, [r2, #32]
 800198a:	4b64      	ldr	r3, [pc, #400]	; (8001b1c <HAL_RCC_OscConfig+0x4f4>)
 800198c:	6a1b      	ldr	r3, [r3, #32]
 800198e:	4a63      	ldr	r2, [pc, #396]	; (8001b1c <HAL_RCC_OscConfig+0x4f4>)
 8001990:	f023 0304 	bic.w	r3, r3, #4
 8001994:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d015      	beq.n	80019ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800199e:	f7ff fbab 	bl	80010f8 <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a4:	e00a      	b.n	80019bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019a6:	f7ff fba7 	bl	80010f8 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e0ab      	b.n	8001b14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019bc:	4b57      	ldr	r3, [pc, #348]	; (8001b1c <HAL_RCC_OscConfig+0x4f4>)
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0ee      	beq.n	80019a6 <HAL_RCC_OscConfig+0x37e>
 80019c8:	e014      	b.n	80019f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ca:	f7ff fb95 	bl	80010f8 <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019d0:	e00a      	b.n	80019e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019d2:	f7ff fb91 	bl	80010f8 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e095      	b.n	8001b14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019e8:	4b4c      	ldr	r3, [pc, #304]	; (8001b1c <HAL_RCC_OscConfig+0x4f4>)
 80019ea:	6a1b      	ldr	r3, [r3, #32]
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d1ee      	bne.n	80019d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019f4:	7dfb      	ldrb	r3, [r7, #23]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d105      	bne.n	8001a06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019fa:	4b48      	ldr	r3, [pc, #288]	; (8001b1c <HAL_RCC_OscConfig+0x4f4>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	4a47      	ldr	r2, [pc, #284]	; (8001b1c <HAL_RCC_OscConfig+0x4f4>)
 8001a00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 8081 	beq.w	8001b12 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a10:	4b42      	ldr	r3, [pc, #264]	; (8001b1c <HAL_RCC_OscConfig+0x4f4>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f003 030c 	and.w	r3, r3, #12
 8001a18:	2b08      	cmp	r3, #8
 8001a1a:	d061      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69db      	ldr	r3, [r3, #28]
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d146      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a24:	4b3f      	ldr	r3, [pc, #252]	; (8001b24 <HAL_RCC_OscConfig+0x4fc>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2a:	f7ff fb65 	bl	80010f8 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a32:	f7ff fb61 	bl	80010f8 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e067      	b.n	8001b14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a44:	4b35      	ldr	r3, [pc, #212]	; (8001b1c <HAL_RCC_OscConfig+0x4f4>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1f0      	bne.n	8001a32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a58:	d108      	bne.n	8001a6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a5a:	4b30      	ldr	r3, [pc, #192]	; (8001b1c <HAL_RCC_OscConfig+0x4f4>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	492d      	ldr	r1, [pc, #180]	; (8001b1c <HAL_RCC_OscConfig+0x4f4>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a6c:	4b2b      	ldr	r3, [pc, #172]	; (8001b1c <HAL_RCC_OscConfig+0x4f4>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a19      	ldr	r1, [r3, #32]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7c:	430b      	orrs	r3, r1
 8001a7e:	4927      	ldr	r1, [pc, #156]	; (8001b1c <HAL_RCC_OscConfig+0x4f4>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a84:	4b27      	ldr	r3, [pc, #156]	; (8001b24 <HAL_RCC_OscConfig+0x4fc>)
 8001a86:	2201      	movs	r2, #1
 8001a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8a:	f7ff fb35 	bl	80010f8 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a92:	f7ff fb31 	bl	80010f8 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e037      	b.n	8001b14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aa4:	4b1d      	ldr	r3, [pc, #116]	; (8001b1c <HAL_RCC_OscConfig+0x4f4>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0f0      	beq.n	8001a92 <HAL_RCC_OscConfig+0x46a>
 8001ab0:	e02f      	b.n	8001b12 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab2:	4b1c      	ldr	r3, [pc, #112]	; (8001b24 <HAL_RCC_OscConfig+0x4fc>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab8:	f7ff fb1e 	bl	80010f8 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac0:	f7ff fb1a 	bl	80010f8 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e020      	b.n	8001b14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad2:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <HAL_RCC_OscConfig+0x4f4>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1f0      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x498>
 8001ade:	e018      	b.n	8001b12 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69db      	ldr	r3, [r3, #28]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d101      	bne.n	8001aec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e013      	b.n	8001b14 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001aec:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <HAL_RCC_OscConfig+0x4f4>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d106      	bne.n	8001b0e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d001      	beq.n	8001b12 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e000      	b.n	8001b14 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40007000 	.word	0x40007000
 8001b24:	42420060 	.word	0x42420060

08001b28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e0d0      	b.n	8001cde <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b3c:	4b6a      	ldr	r3, [pc, #424]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d910      	bls.n	8001b6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b4a:	4b67      	ldr	r3, [pc, #412]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f023 0207 	bic.w	r2, r3, #7
 8001b52:	4965      	ldr	r1, [pc, #404]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5a:	4b63      	ldr	r3, [pc, #396]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d001      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e0b8      	b.n	8001cde <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d020      	beq.n	8001bba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d005      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b84:	4b59      	ldr	r3, [pc, #356]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	4a58      	ldr	r2, [pc, #352]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001b8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0308 	and.w	r3, r3, #8
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d005      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b9c:	4b53      	ldr	r3, [pc, #332]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	4a52      	ldr	r2, [pc, #328]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001ba2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ba6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba8:	4b50      	ldr	r3, [pc, #320]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	494d      	ldr	r1, [pc, #308]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d040      	beq.n	8001c48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d107      	bne.n	8001bde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bce:	4b47      	ldr	r3, [pc, #284]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d115      	bne.n	8001c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e07f      	b.n	8001cde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d107      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001be6:	4b41      	ldr	r3, [pc, #260]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d109      	bne.n	8001c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e073      	b.n	8001cde <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf6:	4b3d      	ldr	r3, [pc, #244]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e06b      	b.n	8001cde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c06:	4b39      	ldr	r3, [pc, #228]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f023 0203 	bic.w	r2, r3, #3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	4936      	ldr	r1, [pc, #216]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c18:	f7ff fa6e 	bl	80010f8 <HAL_GetTick>
 8001c1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1e:	e00a      	b.n	8001c36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c20:	f7ff fa6a 	bl	80010f8 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e053      	b.n	8001cde <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c36:	4b2d      	ldr	r3, [pc, #180]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f003 020c 	and.w	r2, r3, #12
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d1eb      	bne.n	8001c20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c48:	4b27      	ldr	r3, [pc, #156]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d210      	bcs.n	8001c78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c56:	4b24      	ldr	r3, [pc, #144]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f023 0207 	bic.w	r2, r3, #7
 8001c5e:	4922      	ldr	r1, [pc, #136]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c66:	4b20      	ldr	r3, [pc, #128]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d001      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e032      	b.n	8001cde <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d008      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c84:	4b19      	ldr	r3, [pc, #100]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	4916      	ldr	r1, [pc, #88]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0308 	and.w	r3, r3, #8
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d009      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ca2:	4b12      	ldr	r3, [pc, #72]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	490e      	ldr	r1, [pc, #56]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cb6:	f000 f821 	bl	8001cfc <HAL_RCC_GetSysClockFreq>
 8001cba:	4601      	mov	r1, r0
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	091b      	lsrs	r3, r3, #4
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	4a0a      	ldr	r2, [pc, #40]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8001cc8:	5cd3      	ldrb	r3, [r2, r3]
 8001cca:	fa21 f303 	lsr.w	r3, r1, r3
 8001cce:	4a09      	ldr	r2, [pc, #36]	; (8001cf4 <HAL_RCC_ClockConfig+0x1cc>)
 8001cd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cd2:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <HAL_RCC_ClockConfig+0x1d0>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff f90c 	bl	8000ef4 <HAL_InitTick>

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40022000 	.word	0x40022000
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	080062c0 	.word	0x080062c0
 8001cf4:	20000028 	.word	0x20000028
 8001cf8:	2000002c 	.word	0x2000002c

08001cfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cfc:	b490      	push	{r4, r7}
 8001cfe:	b08a      	sub	sp, #40	; 0x28
 8001d00:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d02:	4b2a      	ldr	r3, [pc, #168]	; (8001dac <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d04:	1d3c      	adds	r4, r7, #4
 8001d06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d0c:	4b28      	ldr	r3, [pc, #160]	; (8001db0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]
 8001d16:	2300      	movs	r3, #0
 8001d18:	61bb      	str	r3, [r7, #24]
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d26:	4b23      	ldr	r3, [pc, #140]	; (8001db4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	f003 030c 	and.w	r3, r3, #12
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	d002      	beq.n	8001d3c <HAL_RCC_GetSysClockFreq+0x40>
 8001d36:	2b08      	cmp	r3, #8
 8001d38:	d003      	beq.n	8001d42 <HAL_RCC_GetSysClockFreq+0x46>
 8001d3a:	e02d      	b.n	8001d98 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d3c:	4b1e      	ldr	r3, [pc, #120]	; (8001db8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d3e:	623b      	str	r3, [r7, #32]
      break;
 8001d40:	e02d      	b.n	8001d9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	0c9b      	lsrs	r3, r3, #18
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d4e:	4413      	add	r3, r2
 8001d50:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d54:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d013      	beq.n	8001d88 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d60:	4b14      	ldr	r3, [pc, #80]	; (8001db4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	0c5b      	lsrs	r3, r3, #17
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d6e:	4413      	add	r3, r2
 8001d70:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d74:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	4a0f      	ldr	r2, [pc, #60]	; (8001db8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d7a:	fb02 f203 	mul.w	r2, r2, r3
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
 8001d86:	e004      	b.n	8001d92 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	4a0c      	ldr	r2, [pc, #48]	; (8001dbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d8c:	fb02 f303 	mul.w	r3, r2, r3
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	623b      	str	r3, [r7, #32]
      break;
 8001d96:	e002      	b.n	8001d9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d98:	4b07      	ldr	r3, [pc, #28]	; (8001db8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d9a:	623b      	str	r3, [r7, #32]
      break;
 8001d9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3728      	adds	r7, #40	; 0x28
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc90      	pop	{r4, r7}
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	080061f8 	.word	0x080061f8
 8001db0:	08006208 	.word	0x08006208
 8001db4:	40021000 	.word	0x40021000
 8001db8:	007a1200 	.word	0x007a1200
 8001dbc:	003d0900 	.word	0x003d0900

08001dc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dc4:	4b02      	ldr	r3, [pc, #8]	; (8001dd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr
 8001dd0:	20000028 	.word	0x20000028

08001dd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001dd8:	f7ff fff2 	bl	8001dc0 <HAL_RCC_GetHCLKFreq>
 8001ddc:	4601      	mov	r1, r0
 8001dde:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	0a1b      	lsrs	r3, r3, #8
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	4a03      	ldr	r2, [pc, #12]	; (8001df8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dea:	5cd3      	ldrb	r3, [r2, r3]
 8001dec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40021000 	.word	0x40021000
 8001df8:	080062d0 	.word	0x080062d0

08001dfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e00:	f7ff ffde 	bl	8001dc0 <HAL_RCC_GetHCLKFreq>
 8001e04:	4601      	mov	r1, r0
 8001e06:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	0adb      	lsrs	r3, r3, #11
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	4a03      	ldr	r2, [pc, #12]	; (8001e20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e12:	5cd3      	ldrb	r3, [r2, r3]
 8001e14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	080062d0 	.word	0x080062d0

08001e24 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	220f      	movs	r2, #15
 8001e32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e34:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <HAL_RCC_GetClockConfig+0x58>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 0203 	and.w	r2, r3, #3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e40:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <HAL_RCC_GetClockConfig+0x58>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <HAL_RCC_GetClockConfig+0x58>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001e58:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <HAL_RCC_GetClockConfig+0x58>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	08db      	lsrs	r3, r3, #3
 8001e5e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e66:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <HAL_RCC_GetClockConfig+0x5c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0207 	and.w	r2, r3, #7
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40022000 	.word	0x40022000

08001e84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e8c:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <RCC_Delay+0x34>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a0a      	ldr	r2, [pc, #40]	; (8001ebc <RCC_Delay+0x38>)
 8001e92:	fba2 2303 	umull	r2, r3, r2, r3
 8001e96:	0a5b      	lsrs	r3, r3, #9
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	fb02 f303 	mul.w	r3, r2, r3
 8001e9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ea0:	bf00      	nop
  }
  while (Delay --);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	1e5a      	subs	r2, r3, #1
 8001ea6:	60fa      	str	r2, [r7, #12]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1f9      	bne.n	8001ea0 <RCC_Delay+0x1c>
}
 8001eac:	bf00      	nop
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	20000028 	.word	0x20000028
 8001ebc:	10624dd3 	.word	0x10624dd3

08001ec0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e041      	b.n	8001f56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d106      	bne.n	8001eec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f839 	bl	8001f5e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2202      	movs	r2, #2
 8001ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3304      	adds	r3, #4
 8001efc:	4619      	mov	r1, r3
 8001efe:	4610      	mov	r0, r2
 8001f00:	f000 f9b4 	bl	800226c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr

08001f70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d001      	beq.n	8001f88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e03a      	b.n	8001ffe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 0201 	orr.w	r2, r2, #1
 8001f9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a18      	ldr	r2, [pc, #96]	; (8002008 <HAL_TIM_Base_Start_IT+0x98>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d00e      	beq.n	8001fc8 <HAL_TIM_Base_Start_IT+0x58>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb2:	d009      	beq.n	8001fc8 <HAL_TIM_Base_Start_IT+0x58>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a14      	ldr	r2, [pc, #80]	; (800200c <HAL_TIM_Base_Start_IT+0x9c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d004      	beq.n	8001fc8 <HAL_TIM_Base_Start_IT+0x58>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a13      	ldr	r2, [pc, #76]	; (8002010 <HAL_TIM_Base_Start_IT+0xa0>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d111      	bne.n	8001fec <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2b06      	cmp	r3, #6
 8001fd8:	d010      	beq.n	8001ffc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f042 0201 	orr.w	r2, r2, #1
 8001fe8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fea:	e007      	b.n	8001ffc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f042 0201 	orr.w	r2, r2, #1
 8001ffa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3714      	adds	r7, #20
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr
 8002008:	40012c00 	.word	0x40012c00
 800200c:	40000400 	.word	0x40000400
 8002010:	40000800 	.word	0x40000800

08002014 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b02      	cmp	r3, #2
 8002028:	d122      	bne.n	8002070 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b02      	cmp	r3, #2
 8002036:	d11b      	bne.n	8002070 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f06f 0202 	mvn.w	r2, #2
 8002040:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f8ed 	bl	8002236 <HAL_TIM_IC_CaptureCallback>
 800205c:	e005      	b.n	800206a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f8e0 	bl	8002224 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 f8ef 	bl	8002248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	f003 0304 	and.w	r3, r3, #4
 800207a:	2b04      	cmp	r3, #4
 800207c:	d122      	bne.n	80020c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b04      	cmp	r3, #4
 800208a:	d11b      	bne.n	80020c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f06f 0204 	mvn.w	r2, #4
 8002094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2202      	movs	r2, #2
 800209a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f8c3 	bl	8002236 <HAL_TIM_IC_CaptureCallback>
 80020b0:	e005      	b.n	80020be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f8b6 	bl	8002224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 f8c5 	bl	8002248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	2b08      	cmp	r3, #8
 80020d0:	d122      	bne.n	8002118 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f003 0308 	and.w	r3, r3, #8
 80020dc:	2b08      	cmp	r3, #8
 80020de:	d11b      	bne.n	8002118 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f06f 0208 	mvn.w	r2, #8
 80020e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2204      	movs	r2, #4
 80020ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f899 	bl	8002236 <HAL_TIM_IC_CaptureCallback>
 8002104:	e005      	b.n	8002112 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f88c 	bl	8002224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 f89b 	bl	8002248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	f003 0310 	and.w	r3, r3, #16
 8002122:	2b10      	cmp	r3, #16
 8002124:	d122      	bne.n	800216c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	f003 0310 	and.w	r3, r3, #16
 8002130:	2b10      	cmp	r3, #16
 8002132:	d11b      	bne.n	800216c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f06f 0210 	mvn.w	r2, #16
 800213c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2208      	movs	r2, #8
 8002142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f86f 	bl	8002236 <HAL_TIM_IC_CaptureCallback>
 8002158:	e005      	b.n	8002166 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f862 	bl	8002224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 f871 	bl	8002248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b01      	cmp	r3, #1
 8002178:	d10e      	bne.n	8002198 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	2b01      	cmp	r3, #1
 8002186:	d107      	bne.n	8002198 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f06f 0201 	mvn.w	r2, #1
 8002190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7fe fe04 	bl	8000da0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a2:	2b80      	cmp	r3, #128	; 0x80
 80021a4:	d10e      	bne.n	80021c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b0:	2b80      	cmp	r3, #128	; 0x80
 80021b2:	d107      	bne.n	80021c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 f8bf 	bl	8002342 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ce:	2b40      	cmp	r3, #64	; 0x40
 80021d0:	d10e      	bne.n	80021f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021dc:	2b40      	cmp	r3, #64	; 0x40
 80021de:	d107      	bne.n	80021f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f835 	bl	800225a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	f003 0320 	and.w	r3, r3, #32
 80021fa:	2b20      	cmp	r3, #32
 80021fc:	d10e      	bne.n	800221c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	f003 0320 	and.w	r3, r3, #32
 8002208:	2b20      	cmp	r3, #32
 800220a:	d107      	bne.n	800221c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f06f 0220 	mvn.w	r2, #32
 8002214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f88a 	bl	8002330 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800221c:	bf00      	nop
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr

08002236 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr

08002248 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr

0800225a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr

0800226c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a29      	ldr	r2, [pc, #164]	; (8002324 <TIM_Base_SetConfig+0xb8>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d00b      	beq.n	800229c <TIM_Base_SetConfig+0x30>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800228a:	d007      	beq.n	800229c <TIM_Base_SetConfig+0x30>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a26      	ldr	r2, [pc, #152]	; (8002328 <TIM_Base_SetConfig+0xbc>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d003      	beq.n	800229c <TIM_Base_SetConfig+0x30>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a25      	ldr	r2, [pc, #148]	; (800232c <TIM_Base_SetConfig+0xc0>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d108      	bne.n	80022ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a1c      	ldr	r2, [pc, #112]	; (8002324 <TIM_Base_SetConfig+0xb8>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d00b      	beq.n	80022ce <TIM_Base_SetConfig+0x62>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022bc:	d007      	beq.n	80022ce <TIM_Base_SetConfig+0x62>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a19      	ldr	r2, [pc, #100]	; (8002328 <TIM_Base_SetConfig+0xbc>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d003      	beq.n	80022ce <TIM_Base_SetConfig+0x62>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a18      	ldr	r2, [pc, #96]	; (800232c <TIM_Base_SetConfig+0xc0>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d108      	bne.n	80022e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	4313      	orrs	r3, r2
 80022de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a07      	ldr	r2, [pc, #28]	; (8002324 <TIM_Base_SetConfig+0xb8>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d103      	bne.n	8002314 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	691a      	ldr	r2, [r3, #16]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	615a      	str	r2, [r3, #20]
}
 800231a:	bf00      	nop
 800231c:	3714      	adds	r7, #20
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr
 8002324:	40012c00 	.word	0x40012c00
 8002328:	40000400 	.word	0x40000400
 800232c:	40000800 	.word	0x40000800

08002330 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr

08002342 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr

08002354 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e03f      	b.n	80023e6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d106      	bne.n	8002380 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7fe fd5a 	bl	8000e34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2224      	movs	r2, #36	; 0x24
 8002384:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68da      	ldr	r2, [r3, #12]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002396:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f9a3 	bl	80026e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	691a      	ldr	r2, [r3, #16]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	695a      	ldr	r2, [r3, #20]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68da      	ldr	r2, [r3, #12]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2220      	movs	r2, #32
 80023d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2220      	movs	r2, #32
 80023e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b08a      	sub	sp, #40	; 0x28
 80023f2:	af02      	add	r7, sp, #8
 80023f4:	60f8      	str	r0, [r7, #12]
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	603b      	str	r3, [r7, #0]
 80023fa:	4613      	mov	r3, r2
 80023fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b20      	cmp	r3, #32
 800240c:	d17c      	bne.n	8002508 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d002      	beq.n	800241a <HAL_UART_Transmit+0x2c>
 8002414:	88fb      	ldrh	r3, [r7, #6]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e075      	b.n	800250a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002424:	2b01      	cmp	r3, #1
 8002426:	d101      	bne.n	800242c <HAL_UART_Transmit+0x3e>
 8002428:	2302      	movs	r3, #2
 800242a:	e06e      	b.n	800250a <HAL_UART_Transmit+0x11c>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2221      	movs	r2, #33	; 0x21
 800243e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002442:	f7fe fe59 	bl	80010f8 <HAL_GetTick>
 8002446:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	88fa      	ldrh	r2, [r7, #6]
 800244c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	88fa      	ldrh	r2, [r7, #6]
 8002452:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800245c:	d108      	bne.n	8002470 <HAL_UART_Transmit+0x82>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d104      	bne.n	8002470 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	61bb      	str	r3, [r7, #24]
 800246e:	e003      	b.n	8002478 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002474:	2300      	movs	r3, #0
 8002476:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002480:	e02a      	b.n	80024d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	2200      	movs	r2, #0
 800248a:	2180      	movs	r1, #128	; 0x80
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 f8df 	bl	8002650 <UART_WaitOnFlagUntilTimeout>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e036      	b.n	800250a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10b      	bne.n	80024ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	461a      	mov	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	3302      	adds	r3, #2
 80024b6:	61bb      	str	r3, [r7, #24]
 80024b8:	e007      	b.n	80024ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	781a      	ldrb	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	3301      	adds	r3, #1
 80024c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	3b01      	subs	r3, #1
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024dc:	b29b      	uxth	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1cf      	bne.n	8002482 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	2200      	movs	r2, #0
 80024ea:	2140      	movs	r1, #64	; 0x40
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f000 f8af 	bl	8002650 <UART_WaitOnFlagUntilTimeout>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e006      	b.n	800250a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2220      	movs	r2, #32
 8002500:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002504:	2300      	movs	r3, #0
 8002506:	e000      	b.n	800250a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002508:	2302      	movs	r3, #2
  }
}
 800250a:	4618      	mov	r0, r3
 800250c:	3720      	adds	r7, #32
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b08a      	sub	sp, #40	; 0x28
 8002516:	af02      	add	r7, sp, #8
 8002518:	60f8      	str	r0, [r7, #12]
 800251a:	60b9      	str	r1, [r7, #8]
 800251c:	603b      	str	r3, [r7, #0]
 800251e:	4613      	mov	r3, r2
 8002520:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b20      	cmp	r3, #32
 8002530:	f040 8089 	bne.w	8002646 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d002      	beq.n	8002540 <HAL_UART_Receive+0x2e>
 800253a:	88fb      	ldrh	r3, [r7, #6]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e081      	b.n	8002648 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800254a:	2b01      	cmp	r3, #1
 800254c:	d101      	bne.n	8002552 <HAL_UART_Receive+0x40>
 800254e:	2302      	movs	r3, #2
 8002550:	e07a      	b.n	8002648 <HAL_UART_Receive+0x136>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2222      	movs	r2, #34	; 0x22
 8002564:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002568:	f7fe fdc6 	bl	80010f8 <HAL_GetTick>
 800256c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	88fa      	ldrh	r2, [r7, #6]
 8002572:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	88fa      	ldrh	r2, [r7, #6]
 8002578:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002582:	d108      	bne.n	8002596 <HAL_UART_Receive+0x84>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d104      	bne.n	8002596 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 800258c:	2300      	movs	r3, #0
 800258e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	61bb      	str	r3, [r7, #24]
 8002594:	e003      	b.n	800259e <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800259a:	2300      	movs	r3, #0
 800259c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80025a6:	e043      	b.n	8002630 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	2200      	movs	r2, #0
 80025b0:	2120      	movs	r1, #32
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f000 f84c 	bl	8002650 <UART_WaitOnFlagUntilTimeout>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e042      	b.n	8002648 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10c      	bne.n	80025e2 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	3302      	adds	r3, #2
 80025de:	61bb      	str	r3, [r7, #24]
 80025e0:	e01f      	b.n	8002622 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ea:	d007      	beq.n	80025fc <HAL_UART_Receive+0xea>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10a      	bne.n	800260a <HAL_UART_Receive+0xf8>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d106      	bne.n	800260a <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	b2da      	uxtb	r2, r3
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	701a      	strb	r2, [r3, #0]
 8002608:	e008      	b.n	800261c <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	b2db      	uxtb	r3, r3
 8002612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002616:	b2da      	uxtb	r2, r3
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	3301      	adds	r3, #1
 8002620:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002626:	b29b      	uxth	r3, r3
 8002628:	3b01      	subs	r3, #1
 800262a:	b29a      	uxth	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002634:	b29b      	uxth	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1b6      	bne.n	80025a8 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2220      	movs	r2, #32
 800263e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8002642:	2300      	movs	r3, #0
 8002644:	e000      	b.n	8002648 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002646:	2302      	movs	r3, #2
  }
}
 8002648:	4618      	mov	r0, r3
 800264a:	3720      	adds	r7, #32
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	603b      	str	r3, [r7, #0]
 800265c:	4613      	mov	r3, r2
 800265e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002660:	e02c      	b.n	80026bc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002668:	d028      	beq.n	80026bc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d007      	beq.n	8002680 <UART_WaitOnFlagUntilTimeout+0x30>
 8002670:	f7fe fd42 	bl	80010f8 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	429a      	cmp	r2, r3
 800267e:	d21d      	bcs.n	80026bc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68da      	ldr	r2, [r3, #12]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800268e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	695a      	ldr	r2, [r3, #20]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0201 	bic.w	r2, r2, #1
 800269e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2220      	movs	r2, #32
 80026a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2220      	movs	r2, #32
 80026ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e00f      	b.n	80026dc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	4013      	ands	r3, r2
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	bf0c      	ite	eq
 80026cc:	2301      	moveq	r3, #1
 80026ce:	2300      	movne	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	461a      	mov	r2, r3
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d0c3      	beq.n	8002662 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68da      	ldr	r2, [r3, #12]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689a      	ldr	r2, [r3, #8]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	4313      	orrs	r3, r2
 8002712:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800271e:	f023 030c 	bic.w	r3, r3, #12
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6812      	ldr	r2, [r2, #0]
 8002726:	68b9      	ldr	r1, [r7, #8]
 8002728:	430b      	orrs	r3, r1
 800272a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	699a      	ldr	r2, [r3, #24]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	430a      	orrs	r2, r1
 8002740:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a2c      	ldr	r2, [pc, #176]	; (80027f8 <UART_SetConfig+0x114>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d103      	bne.n	8002754 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800274c:	f7ff fb56 	bl	8001dfc <HAL_RCC_GetPCLK2Freq>
 8002750:	60f8      	str	r0, [r7, #12]
 8002752:	e002      	b.n	800275a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002754:	f7ff fb3e 	bl	8001dd4 <HAL_RCC_GetPCLK1Freq>
 8002758:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	4613      	mov	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	009a      	lsls	r2, r3, #2
 8002764:	441a      	add	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002770:	4a22      	ldr	r2, [pc, #136]	; (80027fc <UART_SetConfig+0x118>)
 8002772:	fba2 2303 	umull	r2, r3, r2, r3
 8002776:	095b      	lsrs	r3, r3, #5
 8002778:	0119      	lsls	r1, r3, #4
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	4613      	mov	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	009a      	lsls	r2, r3, #2
 8002784:	441a      	add	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002790:	4b1a      	ldr	r3, [pc, #104]	; (80027fc <UART_SetConfig+0x118>)
 8002792:	fba3 0302 	umull	r0, r3, r3, r2
 8002796:	095b      	lsrs	r3, r3, #5
 8002798:	2064      	movs	r0, #100	; 0x64
 800279a:	fb00 f303 	mul.w	r3, r0, r3
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	3332      	adds	r3, #50	; 0x32
 80027a4:	4a15      	ldr	r2, [pc, #84]	; (80027fc <UART_SetConfig+0x118>)
 80027a6:	fba2 2303 	umull	r2, r3, r2, r3
 80027aa:	095b      	lsrs	r3, r3, #5
 80027ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027b0:	4419      	add	r1, r3
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	4613      	mov	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	009a      	lsls	r2, r3, #2
 80027bc:	441a      	add	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80027c8:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <UART_SetConfig+0x118>)
 80027ca:	fba3 0302 	umull	r0, r3, r3, r2
 80027ce:	095b      	lsrs	r3, r3, #5
 80027d0:	2064      	movs	r0, #100	; 0x64
 80027d2:	fb00 f303 	mul.w	r3, r0, r3
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	011b      	lsls	r3, r3, #4
 80027da:	3332      	adds	r3, #50	; 0x32
 80027dc:	4a07      	ldr	r2, [pc, #28]	; (80027fc <UART_SetConfig+0x118>)
 80027de:	fba2 2303 	umull	r2, r3, r2, r3
 80027e2:	095b      	lsrs	r3, r3, #5
 80027e4:	f003 020f 	and.w	r2, r3, #15
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	440a      	add	r2, r1
 80027ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80027f0:	bf00      	nop
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40013800 	.word	0x40013800
 80027fc:	51eb851f 	.word	0x51eb851f

08002800 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002806:	f3ef 8305 	mrs	r3, IPSR
 800280a:	60bb      	str	r3, [r7, #8]
  return(result);
 800280c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10f      	bne.n	8002832 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002812:	f3ef 8310 	mrs	r3, PRIMASK
 8002816:	607b      	str	r3, [r7, #4]
  return(result);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d109      	bne.n	8002832 <osKernelInitialize+0x32>
 800281e:	4b10      	ldr	r3, [pc, #64]	; (8002860 <osKernelInitialize+0x60>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d109      	bne.n	800283a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002826:	f3ef 8311 	mrs	r3, BASEPRI
 800282a:	603b      	str	r3, [r7, #0]
  return(result);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002832:	f06f 0305 	mvn.w	r3, #5
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	e00c      	b.n	8002854 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800283a:	4b09      	ldr	r3, [pc, #36]	; (8002860 <osKernelInitialize+0x60>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d105      	bne.n	800284e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002842:	4b07      	ldr	r3, [pc, #28]	; (8002860 <osKernelInitialize+0x60>)
 8002844:	2201      	movs	r2, #1
 8002846:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002848:	2300      	movs	r3, #0
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	e002      	b.n	8002854 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800284e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002852:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002854:	68fb      	ldr	r3, [r7, #12]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr
 8002860:	2000022c 	.word	0x2000022c

08002864 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800286a:	f3ef 8305 	mrs	r3, IPSR
 800286e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002870:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10f      	bne.n	8002896 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002876:	f3ef 8310 	mrs	r3, PRIMASK
 800287a:	607b      	str	r3, [r7, #4]
  return(result);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d109      	bne.n	8002896 <osKernelStart+0x32>
 8002882:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <osKernelStart+0x64>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d109      	bne.n	800289e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800288a:	f3ef 8311 	mrs	r3, BASEPRI
 800288e:	603b      	str	r3, [r7, #0]
  return(result);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <osKernelStart+0x3a>
    stat = osErrorISR;
 8002896:	f06f 0305 	mvn.w	r3, #5
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	e00e      	b.n	80028bc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800289e:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <osKernelStart+0x64>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d107      	bne.n	80028b6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80028a6:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <osKernelStart+0x64>)
 80028a8:	2202      	movs	r2, #2
 80028aa:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80028ac:	f001 fa8a 	bl	8003dc4 <vTaskStartScheduler>
      stat = osOK;
 80028b0:	2300      	movs	r3, #0
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	e002      	b.n	80028bc <osKernelStart+0x58>
    } else {
      stat = osError;
 80028b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028ba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80028bc:	68fb      	ldr	r3, [r7, #12]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	2000022c 	.word	0x2000022c

080028cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b092      	sub	sp, #72	; 0x48
 80028d0:	af04      	add	r7, sp, #16
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028dc:	f3ef 8305 	mrs	r3, IPSR
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f040 8094 	bne.w	8002a12 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028ea:	f3ef 8310 	mrs	r3, PRIMASK
 80028ee:	623b      	str	r3, [r7, #32]
  return(result);
 80028f0:	6a3b      	ldr	r3, [r7, #32]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f040 808d 	bne.w	8002a12 <osThreadNew+0x146>
 80028f8:	4b48      	ldr	r3, [pc, #288]	; (8002a1c <osThreadNew+0x150>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d106      	bne.n	800290e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002900:	f3ef 8311 	mrs	r3, BASEPRI
 8002904:	61fb      	str	r3, [r7, #28]
  return(result);
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	2b00      	cmp	r3, #0
 800290a:	f040 8082 	bne.w	8002a12 <osThreadNew+0x146>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d07e      	beq.n	8002a12 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002914:	2380      	movs	r3, #128	; 0x80
 8002916:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002918:	2318      	movs	r3, #24
 800291a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800291c:	2300      	movs	r3, #0
 800291e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002920:	f107 031b 	add.w	r3, r7, #27
 8002924:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800292a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d045      	beq.n	80029be <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d002      	beq.n	8002940 <osThreadNew+0x74>
        name = attr->name;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d002      	beq.n	800294e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800294e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002950:	2b00      	cmp	r3, #0
 8002952:	d008      	beq.n	8002966 <osThreadNew+0x9a>
 8002954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002956:	2b38      	cmp	r3, #56	; 0x38
 8002958:	d805      	bhi.n	8002966 <osThreadNew+0x9a>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <osThreadNew+0x9e>
        return (NULL);
 8002966:	2300      	movs	r3, #0
 8002968:	e054      	b.n	8002a14 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	089b      	lsrs	r3, r3, #2
 8002978:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00e      	beq.n	80029a0 <osThreadNew+0xd4>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	2b5b      	cmp	r3, #91	; 0x5b
 8002988:	d90a      	bls.n	80029a0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800298e:	2b00      	cmp	r3, #0
 8002990:	d006      	beq.n	80029a0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d002      	beq.n	80029a0 <osThreadNew+0xd4>
        mem = 1;
 800299a:	2301      	movs	r3, #1
 800299c:	62bb      	str	r3, [r7, #40]	; 0x28
 800299e:	e010      	b.n	80029c2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10c      	bne.n	80029c2 <osThreadNew+0xf6>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d108      	bne.n	80029c2 <osThreadNew+0xf6>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d104      	bne.n	80029c2 <osThreadNew+0xf6>
          mem = 0;
 80029b8:	2300      	movs	r3, #0
 80029ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80029bc:	e001      	b.n	80029c2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80029be:	2300      	movs	r3, #0
 80029c0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80029c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d110      	bne.n	80029ea <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80029d0:	9202      	str	r2, [sp, #8]
 80029d2:	9301      	str	r3, [sp, #4]
 80029d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f001 f828 	bl	8003a34 <xTaskCreateStatic>
 80029e4:	4603      	mov	r3, r0
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	e013      	b.n	8002a12 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80029ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d110      	bne.n	8002a12 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80029f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	f107 0314 	add.w	r3, r7, #20
 80029f8:	9301      	str	r3, [sp, #4]
 80029fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f001 f86f 	bl	8003ae6 <xTaskCreate>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d001      	beq.n	8002a12 <osThreadNew+0x146>
          hTask = NULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002a12:	697b      	ldr	r3, [r7, #20]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3738      	adds	r7, #56	; 0x38
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	2000022c 	.word	0x2000022c

08002a20 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a28:	f3ef 8305 	mrs	r3, IPSR
 8002a2c:	613b      	str	r3, [r7, #16]
  return(result);
 8002a2e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10f      	bne.n	8002a54 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a34:	f3ef 8310 	mrs	r3, PRIMASK
 8002a38:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d109      	bne.n	8002a54 <osDelay+0x34>
 8002a40:	4b0d      	ldr	r3, [pc, #52]	; (8002a78 <osDelay+0x58>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d109      	bne.n	8002a5c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002a48:	f3ef 8311 	mrs	r3, BASEPRI
 8002a4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <osDelay+0x3c>
    stat = osErrorISR;
 8002a54:	f06f 0305 	mvn.w	r3, #5
 8002a58:	617b      	str	r3, [r7, #20]
 8002a5a:	e007      	b.n	8002a6c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <osDelay+0x4c>
      vTaskDelay(ticks);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f001 f978 	bl	8003d5c <vTaskDelay>
    }
  }

  return (stat);
 8002a6c:	697b      	ldr	r3, [r7, #20]
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3718      	adds	r7, #24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	2000022c 	.word	0x2000022c

08002a7c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08c      	sub	sp, #48	; 0x30
 8002a80:	af02      	add	r7, sp, #8
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a8c:	f3ef 8305 	mrs	r3, IPSR
 8002a90:	61bb      	str	r3, [r7, #24]
  return(result);
 8002a92:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d170      	bne.n	8002b7a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a98:	f3ef 8310 	mrs	r3, PRIMASK
 8002a9c:	617b      	str	r3, [r7, #20]
  return(result);
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d16a      	bne.n	8002b7a <osMessageQueueNew+0xfe>
 8002aa4:	4b37      	ldr	r3, [pc, #220]	; (8002b84 <osMessageQueueNew+0x108>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d105      	bne.n	8002ab8 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002aac:	f3ef 8311 	mrs	r3, BASEPRI
 8002ab0:	613b      	str	r3, [r7, #16]
  return(result);
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d160      	bne.n	8002b7a <osMessageQueueNew+0xfe>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d05d      	beq.n	8002b7a <osMessageQueueNew+0xfe>
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d05a      	beq.n	8002b7a <osMessageQueueNew+0xfe>
    mem = -1;
 8002ac4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ac8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d029      	beq.n	8002b24 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d012      	beq.n	8002afe <osMessageQueueNew+0x82>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	2b4f      	cmp	r3, #79	; 0x4f
 8002ade:	d90e      	bls.n	8002afe <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00a      	beq.n	8002afe <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	695a      	ldr	r2, [r3, #20]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	68b9      	ldr	r1, [r7, #8]
 8002af0:	fb01 f303 	mul.w	r3, r1, r3
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d302      	bcc.n	8002afe <osMessageQueueNew+0x82>
        mem = 1;
 8002af8:	2301      	movs	r3, #1
 8002afa:	623b      	str	r3, [r7, #32]
 8002afc:	e014      	b.n	8002b28 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d110      	bne.n	8002b28 <osMessageQueueNew+0xac>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10c      	bne.n	8002b28 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d108      	bne.n	8002b28 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d104      	bne.n	8002b28 <osMessageQueueNew+0xac>
          mem = 0;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	623b      	str	r3, [r7, #32]
 8002b22:	e001      	b.n	8002b28 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002b28:	6a3b      	ldr	r3, [r7, #32]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d10c      	bne.n	8002b48 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	691a      	ldr	r2, [r3, #16]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6899      	ldr	r1, [r3, #8]
 8002b36:	2300      	movs	r3, #0
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	68b9      	ldr	r1, [r7, #8]
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 fa52 	bl	8002fe8 <xQueueGenericCreateStatic>
 8002b44:	6278      	str	r0, [r7, #36]	; 0x24
 8002b46:	e008      	b.n	8002b5a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8002b48:	6a3b      	ldr	r3, [r7, #32]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d105      	bne.n	8002b5a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8002b4e:	2200      	movs	r2, #0
 8002b50:	68b9      	ldr	r1, [r7, #8]
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 faba 	bl	80030cc <xQueueGenericCreate>
 8002b58:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00c      	beq.n	8002b7a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <osMessageQueueNew+0xf2>
        name = attr->name;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	61fb      	str	r3, [r7, #28]
 8002b6c:	e001      	b.n	8002b72 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8002b72:	69f9      	ldr	r1, [r7, #28]
 8002b74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b76:	f000 ff01 	bl	800397c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3728      	adds	r7, #40	; 0x28
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	2000022c 	.word	0x2000022c

08002b88 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b08a      	sub	sp, #40	; 0x28
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	603b      	str	r3, [r7, #0]
 8002b94:	4613      	mov	r3, r2
 8002b96:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ba0:	f3ef 8305 	mrs	r3, IPSR
 8002ba4:	61fb      	str	r3, [r7, #28]
  return(result);
 8002ba6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10f      	bne.n	8002bcc <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bac:	f3ef 8310 	mrs	r3, PRIMASK
 8002bb0:	61bb      	str	r3, [r7, #24]
  return(result);
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d109      	bne.n	8002bcc <osMessageQueuePut+0x44>
 8002bb8:	4b2b      	ldr	r3, [pc, #172]	; (8002c68 <osMessageQueuePut+0xe0>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d12e      	bne.n	8002c1e <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002bc0:	f3ef 8311 	mrs	r3, BASEPRI
 8002bc4:	617b      	str	r3, [r7, #20]
  return(result);
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d028      	beq.n	8002c1e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002bcc:	6a3b      	ldr	r3, [r7, #32]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d005      	beq.n	8002bde <osMessageQueuePut+0x56>
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d002      	beq.n	8002bde <osMessageQueuePut+0x56>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8002bde:	f06f 0303 	mvn.w	r3, #3
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002be4:	e039      	b.n	8002c5a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8002be6:	2300      	movs	r3, #0
 8002be8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8002bea:	f107 0210 	add.w	r2, r7, #16
 8002bee:	2300      	movs	r3, #0
 8002bf0:	68b9      	ldr	r1, [r7, #8]
 8002bf2:	6a38      	ldr	r0, [r7, #32]
 8002bf4:	f000 fbc4 	bl	8003380 <xQueueGenericSendFromISR>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d003      	beq.n	8002c06 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8002bfe:	f06f 0302 	mvn.w	r3, #2
 8002c02:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002c04:	e029      	b.n	8002c5a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d026      	beq.n	8002c5a <osMessageQueuePut+0xd2>
 8002c0c:	4b17      	ldr	r3, [pc, #92]	; (8002c6c <osMessageQueuePut+0xe4>)
 8002c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	f3bf 8f4f 	dsb	sy
 8002c18:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002c1c:	e01d      	b.n	8002c5a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d002      	beq.n	8002c2a <osMessageQueuePut+0xa2>
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d103      	bne.n	8002c32 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8002c2a:	f06f 0303 	mvn.w	r3, #3
 8002c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c30:	e014      	b.n	8002c5c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002c32:	2300      	movs	r3, #0
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	68b9      	ldr	r1, [r7, #8]
 8002c38:	6a38      	ldr	r0, [r7, #32]
 8002c3a:	f000 faa7 	bl	800318c <xQueueGenericSend>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d00b      	beq.n	8002c5c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8002c4a:	f06f 0301 	mvn.w	r3, #1
 8002c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c50:	e004      	b.n	8002c5c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8002c52:	f06f 0302 	mvn.w	r3, #2
 8002c56:	627b      	str	r3, [r7, #36]	; 0x24
 8002c58:	e000      	b.n	8002c5c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002c5a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3728      	adds	r7, #40	; 0x28
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	2000022c 	.word	0x2000022c
 8002c6c:	e000ed04 	.word	0xe000ed04

08002c70 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b08a      	sub	sp, #40	; 0x28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
 8002c7c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002c82:	2300      	movs	r3, #0
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c86:	f3ef 8305 	mrs	r3, IPSR
 8002c8a:	61fb      	str	r3, [r7, #28]
  return(result);
 8002c8c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10f      	bne.n	8002cb2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c92:	f3ef 8310 	mrs	r3, PRIMASK
 8002c96:	61bb      	str	r3, [r7, #24]
  return(result);
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d109      	bne.n	8002cb2 <osMessageQueueGet+0x42>
 8002c9e:	4b2b      	ldr	r3, [pc, #172]	; (8002d4c <osMessageQueueGet+0xdc>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d12e      	bne.n	8002d04 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002ca6:	f3ef 8311 	mrs	r3, BASEPRI
 8002caa:	617b      	str	r3, [r7, #20]
  return(result);
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d028      	beq.n	8002d04 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d005      	beq.n	8002cc4 <osMessageQueueGet+0x54>
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d002      	beq.n	8002cc4 <osMessageQueueGet+0x54>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8002cc4:	f06f 0303 	mvn.w	r3, #3
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002cca:	e038      	b.n	8002d3e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8002cd0:	f107 0310 	add.w	r3, r7, #16
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	68b9      	ldr	r1, [r7, #8]
 8002cd8:	6a38      	ldr	r0, [r7, #32]
 8002cda:	f000 fcc1 	bl	8003660 <xQueueReceiveFromISR>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d003      	beq.n	8002cec <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8002ce4:	f06f 0302 	mvn.w	r3, #2
 8002ce8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002cea:	e028      	b.n	8002d3e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d025      	beq.n	8002d3e <osMessageQueueGet+0xce>
 8002cf2:	4b17      	ldr	r3, [pc, #92]	; (8002d50 <osMessageQueueGet+0xe0>)
 8002cf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	f3bf 8f4f 	dsb	sy
 8002cfe:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002d02:	e01c      	b.n	8002d3e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <osMessageQueueGet+0xa0>
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d103      	bne.n	8002d18 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8002d10:	f06f 0303 	mvn.w	r3, #3
 8002d14:	627b      	str	r3, [r7, #36]	; 0x24
 8002d16:	e013      	b.n	8002d40 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	68b9      	ldr	r1, [r7, #8]
 8002d1c:	6a38      	ldr	r0, [r7, #32]
 8002d1e:	f000 fbc3 	bl	80034a8 <xQueueReceive>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d00b      	beq.n	8002d40 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8002d2e:	f06f 0301 	mvn.w	r3, #1
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
 8002d34:	e004      	b.n	8002d40 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8002d36:	f06f 0302 	mvn.w	r3, #2
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d3c:	e000      	b.n	8002d40 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002d3e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3728      	adds	r7, #40	; 0x28
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	2000022c 	.word	0x2000022c
 8002d50:	e000ed04 	.word	0xe000ed04

08002d54 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4a06      	ldr	r2, [pc, #24]	; (8002d7c <vApplicationGetIdleTaskMemory+0x28>)
 8002d64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	4a05      	ldr	r2, [pc, #20]	; (8002d80 <vApplicationGetIdleTaskMemory+0x2c>)
 8002d6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2280      	movs	r2, #128	; 0x80
 8002d70:	601a      	str	r2, [r3, #0]
}
 8002d72:	bf00      	nop
 8002d74:	3714      	adds	r7, #20
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr
 8002d7c:	20000230 	.word	0x20000230
 8002d80:	2000028c 	.word	0x2000028c

08002d84 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4a07      	ldr	r2, [pc, #28]	; (8002db0 <vApplicationGetTimerTaskMemory+0x2c>)
 8002d94:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	4a06      	ldr	r2, [pc, #24]	; (8002db4 <vApplicationGetTimerTaskMemory+0x30>)
 8002d9a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002da2:	601a      	str	r2, [r3, #0]
}
 8002da4:	bf00      	nop
 8002da6:	3714      	adds	r7, #20
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bc80      	pop	{r7}
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	2000048c 	.word	0x2000048c
 8002db4:	200004e8 	.word	0x200004e8

08002db8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f103 0208 	add.w	r2, r3, #8
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002dd0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f103 0208 	add.w	r2, r3, #8
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f103 0208 	add.w	r2, r3, #8
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bc80      	pop	{r7}
 8002df4:	4770      	bx	lr

08002df6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr

08002e0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b085      	sub	sp, #20
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
 8002e16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	1c5a      	adds	r2, r3, #1
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	601a      	str	r2, [r3, #0]
}
 8002e4a:	bf00      	nop
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bc80      	pop	{r7}
 8002e52:	4770      	bx	lr

08002e54 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e6a:	d103      	bne.n	8002e74 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	e00c      	b.n	8002e8e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3308      	adds	r3, #8
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	e002      	b.n	8002e82 <vListInsert+0x2e>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68ba      	ldr	r2, [r7, #8]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d2f6      	bcs.n	8002e7c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	1c5a      	adds	r2, r3, #1
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	601a      	str	r2, [r3, #0]
}
 8002eba:	bf00      	nop
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr

08002ec4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6892      	ldr	r2, [r2, #8]
 8002eda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6852      	ldr	r2, [r2, #4]
 8002ee4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d103      	bne.n	8002ef8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	1e5a      	subs	r2, r3, #1
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3714      	adds	r7, #20
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bc80      	pop	{r7}
 8002f14:	4770      	bx	lr
	...

08002f18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d109      	bne.n	8002f40 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f30:	f383 8811 	msr	BASEPRI, r3
 8002f34:	f3bf 8f6f 	isb	sy
 8002f38:	f3bf 8f4f 	dsb	sy
 8002f3c:	60bb      	str	r3, [r7, #8]
 8002f3e:	e7fe      	b.n	8002f3e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002f40:	f002 f852 	bl	8004fe8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4c:	68f9      	ldr	r1, [r7, #12]
 8002f4e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002f50:	fb01 f303 	mul.w	r3, r1, r3
 8002f54:	441a      	add	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f70:	3b01      	subs	r3, #1
 8002f72:	68f9      	ldr	r1, [r7, #12]
 8002f74:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002f76:	fb01 f303 	mul.w	r3, r1, r3
 8002f7a:	441a      	add	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	22ff      	movs	r2, #255	; 0xff
 8002f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	22ff      	movs	r2, #255	; 0xff
 8002f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d114      	bne.n	8002fc0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d01a      	beq.n	8002fd4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	3310      	adds	r3, #16
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f001 f992 	bl	80042cc <xTaskRemoveFromEventList>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d012      	beq.n	8002fd4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002fae:	4b0d      	ldr	r3, [pc, #52]	; (8002fe4 <xQueueGenericReset+0xcc>)
 8002fb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	f3bf 8f4f 	dsb	sy
 8002fba:	f3bf 8f6f 	isb	sy
 8002fbe:	e009      	b.n	8002fd4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	3310      	adds	r3, #16
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff fef7 	bl	8002db8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	3324      	adds	r3, #36	; 0x24
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff fef2 	bl	8002db8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002fd4:	f002 f836 	bl	8005044 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002fd8:	2301      	movs	r3, #1
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	e000ed04 	.word	0xe000ed04

08002fe8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08e      	sub	sp, #56	; 0x38
 8002fec:	af02      	add	r7, sp, #8
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
 8002ff4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d109      	bne.n	8003010 <xQueueGenericCreateStatic+0x28>
 8002ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003000:	f383 8811 	msr	BASEPRI, r3
 8003004:	f3bf 8f6f 	isb	sy
 8003008:	f3bf 8f4f 	dsb	sy
 800300c:	62bb      	str	r3, [r7, #40]	; 0x28
 800300e:	e7fe      	b.n	800300e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d109      	bne.n	800302a <xQueueGenericCreateStatic+0x42>
 8003016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800301a:	f383 8811 	msr	BASEPRI, r3
 800301e:	f3bf 8f6f 	isb	sy
 8003022:	f3bf 8f4f 	dsb	sy
 8003026:	627b      	str	r3, [r7, #36]	; 0x24
 8003028:	e7fe      	b.n	8003028 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d002      	beq.n	8003036 <xQueueGenericCreateStatic+0x4e>
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <xQueueGenericCreateStatic+0x52>
 8003036:	2301      	movs	r3, #1
 8003038:	e000      	b.n	800303c <xQueueGenericCreateStatic+0x54>
 800303a:	2300      	movs	r3, #0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d109      	bne.n	8003054 <xQueueGenericCreateStatic+0x6c>
 8003040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003044:	f383 8811 	msr	BASEPRI, r3
 8003048:	f3bf 8f6f 	isb	sy
 800304c:	f3bf 8f4f 	dsb	sy
 8003050:	623b      	str	r3, [r7, #32]
 8003052:	e7fe      	b.n	8003052 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d102      	bne.n	8003060 <xQueueGenericCreateStatic+0x78>
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <xQueueGenericCreateStatic+0x7c>
 8003060:	2301      	movs	r3, #1
 8003062:	e000      	b.n	8003066 <xQueueGenericCreateStatic+0x7e>
 8003064:	2300      	movs	r3, #0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d109      	bne.n	800307e <xQueueGenericCreateStatic+0x96>
 800306a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306e:	f383 8811 	msr	BASEPRI, r3
 8003072:	f3bf 8f6f 	isb	sy
 8003076:	f3bf 8f4f 	dsb	sy
 800307a:	61fb      	str	r3, [r7, #28]
 800307c:	e7fe      	b.n	800307c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800307e:	2350      	movs	r3, #80	; 0x50
 8003080:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	2b50      	cmp	r3, #80	; 0x50
 8003086:	d009      	beq.n	800309c <xQueueGenericCreateStatic+0xb4>
 8003088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308c:	f383 8811 	msr	BASEPRI, r3
 8003090:	f3bf 8f6f 	isb	sy
 8003094:	f3bf 8f4f 	dsb	sy
 8003098:	61bb      	str	r3, [r7, #24]
 800309a:	e7fe      	b.n	800309a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80030a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00d      	beq.n	80030c2 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80030a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80030ae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80030b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	4613      	mov	r3, r2
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	68b9      	ldr	r1, [r7, #8]
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 f842 	bl	8003146 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80030c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3730      	adds	r7, #48	; 0x30
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b08a      	sub	sp, #40	; 0x28
 80030d0:	af02      	add	r7, sp, #8
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	4613      	mov	r3, r2
 80030d8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d109      	bne.n	80030f4 <xQueueGenericCreate+0x28>
 80030e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e4:	f383 8811 	msr	BASEPRI, r3
 80030e8:	f3bf 8f6f 	isb	sy
 80030ec:	f3bf 8f4f 	dsb	sy
 80030f0:	613b      	str	r3, [r7, #16]
 80030f2:	e7fe      	b.n	80030f2 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d102      	bne.n	8003100 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80030fa:	2300      	movs	r3, #0
 80030fc:	61fb      	str	r3, [r7, #28]
 80030fe:	e004      	b.n	800310a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	fb02 f303 	mul.w	r3, r2, r3
 8003108:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	3350      	adds	r3, #80	; 0x50
 800310e:	4618      	mov	r0, r3
 8003110:	f002 f860 	bl	80051d4 <pvPortMalloc>
 8003114:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00f      	beq.n	800313c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	3350      	adds	r3, #80	; 0x50
 8003120:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800312a:	79fa      	ldrb	r2, [r7, #7]
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	4613      	mov	r3, r2
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	68b9      	ldr	r1, [r7, #8]
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 f805 	bl	8003146 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800313c:	69bb      	ldr	r3, [r7, #24]
	}
 800313e:	4618      	mov	r0, r3
 8003140:	3720      	adds	r7, #32
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b084      	sub	sp, #16
 800314a:	af00      	add	r7, sp, #0
 800314c:	60f8      	str	r0, [r7, #12]
 800314e:	60b9      	str	r1, [r7, #8]
 8003150:	607a      	str	r2, [r7, #4]
 8003152:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d103      	bne.n	8003162 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	e002      	b.n	8003168 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003174:	2101      	movs	r1, #1
 8003176:	69b8      	ldr	r0, [r7, #24]
 8003178:	f7ff fece 	bl	8002f18 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	78fa      	ldrb	r2, [r7, #3]
 8003180:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003184:	bf00      	nop
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b08e      	sub	sp, #56	; 0x38
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
 8003198:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800319a:	2300      	movs	r3, #0
 800319c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80031a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d109      	bne.n	80031bc <xQueueGenericSend+0x30>
 80031a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ac:	f383 8811 	msr	BASEPRI, r3
 80031b0:	f3bf 8f6f 	isb	sy
 80031b4:	f3bf 8f4f 	dsb	sy
 80031b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80031ba:	e7fe      	b.n	80031ba <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d103      	bne.n	80031ca <xQueueGenericSend+0x3e>
 80031c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <xQueueGenericSend+0x42>
 80031ca:	2301      	movs	r3, #1
 80031cc:	e000      	b.n	80031d0 <xQueueGenericSend+0x44>
 80031ce:	2300      	movs	r3, #0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d109      	bne.n	80031e8 <xQueueGenericSend+0x5c>
 80031d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d8:	f383 8811 	msr	BASEPRI, r3
 80031dc:	f3bf 8f6f 	isb	sy
 80031e0:	f3bf 8f4f 	dsb	sy
 80031e4:	627b      	str	r3, [r7, #36]	; 0x24
 80031e6:	e7fe      	b.n	80031e6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d103      	bne.n	80031f6 <xQueueGenericSend+0x6a>
 80031ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d101      	bne.n	80031fa <xQueueGenericSend+0x6e>
 80031f6:	2301      	movs	r3, #1
 80031f8:	e000      	b.n	80031fc <xQueueGenericSend+0x70>
 80031fa:	2300      	movs	r3, #0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d109      	bne.n	8003214 <xQueueGenericSend+0x88>
 8003200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003204:	f383 8811 	msr	BASEPRI, r3
 8003208:	f3bf 8f6f 	isb	sy
 800320c:	f3bf 8f4f 	dsb	sy
 8003210:	623b      	str	r3, [r7, #32]
 8003212:	e7fe      	b.n	8003212 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003214:	f001 fa14 	bl	8004640 <xTaskGetSchedulerState>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d102      	bne.n	8003224 <xQueueGenericSend+0x98>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <xQueueGenericSend+0x9c>
 8003224:	2301      	movs	r3, #1
 8003226:	e000      	b.n	800322a <xQueueGenericSend+0x9e>
 8003228:	2300      	movs	r3, #0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d109      	bne.n	8003242 <xQueueGenericSend+0xb6>
 800322e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003232:	f383 8811 	msr	BASEPRI, r3
 8003236:	f3bf 8f6f 	isb	sy
 800323a:	f3bf 8f4f 	dsb	sy
 800323e:	61fb      	str	r3, [r7, #28]
 8003240:	e7fe      	b.n	8003240 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003242:	f001 fed1 	bl	8004fe8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003248:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800324a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800324e:	429a      	cmp	r2, r3
 8003250:	d302      	bcc.n	8003258 <xQueueGenericSend+0xcc>
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	2b02      	cmp	r3, #2
 8003256:	d129      	bne.n	80032ac <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	68b9      	ldr	r1, [r7, #8]
 800325c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800325e:	f000 fa7c 	bl	800375a <prvCopyDataToQueue>
 8003262:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003268:	2b00      	cmp	r3, #0
 800326a:	d010      	beq.n	800328e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800326c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326e:	3324      	adds	r3, #36	; 0x24
 8003270:	4618      	mov	r0, r3
 8003272:	f001 f82b 	bl	80042cc <xTaskRemoveFromEventList>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d013      	beq.n	80032a4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800327c:	4b3f      	ldr	r3, [pc, #252]	; (800337c <xQueueGenericSend+0x1f0>)
 800327e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	f3bf 8f4f 	dsb	sy
 8003288:	f3bf 8f6f 	isb	sy
 800328c:	e00a      	b.n	80032a4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800328e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003290:	2b00      	cmp	r3, #0
 8003292:	d007      	beq.n	80032a4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003294:	4b39      	ldr	r3, [pc, #228]	; (800337c <xQueueGenericSend+0x1f0>)
 8003296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	f3bf 8f4f 	dsb	sy
 80032a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80032a4:	f001 fece 	bl	8005044 <vPortExitCritical>
				return pdPASS;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e063      	b.n	8003374 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d103      	bne.n	80032ba <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032b2:	f001 fec7 	bl	8005044 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80032b6:	2300      	movs	r3, #0
 80032b8:	e05c      	b.n	8003374 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d106      	bne.n	80032ce <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032c0:	f107 0314 	add.w	r3, r7, #20
 80032c4:	4618      	mov	r0, r3
 80032c6:	f001 f863 	bl	8004390 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032ca:	2301      	movs	r3, #1
 80032cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032ce:	f001 feb9 	bl	8005044 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032d2:	f000 fddb 	bl	8003e8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032d6:	f001 fe87 	bl	8004fe8 <vPortEnterCritical>
 80032da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032e0:	b25b      	sxtb	r3, r3
 80032e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032e6:	d103      	bne.n	80032f0 <xQueueGenericSend+0x164>
 80032e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032f6:	b25b      	sxtb	r3, r3
 80032f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032fc:	d103      	bne.n	8003306 <xQueueGenericSend+0x17a>
 80032fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003306:	f001 fe9d 	bl	8005044 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800330a:	1d3a      	adds	r2, r7, #4
 800330c:	f107 0314 	add.w	r3, r7, #20
 8003310:	4611      	mov	r1, r2
 8003312:	4618      	mov	r0, r3
 8003314:	f001 f852 	bl	80043bc <xTaskCheckForTimeOut>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d124      	bne.n	8003368 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800331e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003320:	f000 fb13 	bl	800394a <prvIsQueueFull>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d018      	beq.n	800335c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800332a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332c:	3310      	adds	r3, #16
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	4611      	mov	r1, r2
 8003332:	4618      	mov	r0, r3
 8003334:	f000 ff7c 	bl	8004230 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003338:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800333a:	f000 fa9e 	bl	800387a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800333e:	f000 fdb3 	bl	8003ea8 <xTaskResumeAll>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	f47f af7c 	bne.w	8003242 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800334a:	4b0c      	ldr	r3, [pc, #48]	; (800337c <xQueueGenericSend+0x1f0>)
 800334c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	f3bf 8f4f 	dsb	sy
 8003356:	f3bf 8f6f 	isb	sy
 800335a:	e772      	b.n	8003242 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800335c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800335e:	f000 fa8c 	bl	800387a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003362:	f000 fda1 	bl	8003ea8 <xTaskResumeAll>
 8003366:	e76c      	b.n	8003242 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003368:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800336a:	f000 fa86 	bl	800387a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800336e:	f000 fd9b 	bl	8003ea8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003372:	2300      	movs	r3, #0
		}
	}
}
 8003374:	4618      	mov	r0, r3
 8003376:	3738      	adds	r7, #56	; 0x38
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	e000ed04 	.word	0xe000ed04

08003380 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b08e      	sub	sp, #56	; 0x38
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
 800338c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003394:	2b00      	cmp	r3, #0
 8003396:	d109      	bne.n	80033ac <xQueueGenericSendFromISR+0x2c>
 8003398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800339c:	f383 8811 	msr	BASEPRI, r3
 80033a0:	f3bf 8f6f 	isb	sy
 80033a4:	f3bf 8f4f 	dsb	sy
 80033a8:	627b      	str	r3, [r7, #36]	; 0x24
 80033aa:	e7fe      	b.n	80033aa <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d103      	bne.n	80033ba <xQueueGenericSendFromISR+0x3a>
 80033b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <xQueueGenericSendFromISR+0x3e>
 80033ba:	2301      	movs	r3, #1
 80033bc:	e000      	b.n	80033c0 <xQueueGenericSendFromISR+0x40>
 80033be:	2300      	movs	r3, #0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d109      	bne.n	80033d8 <xQueueGenericSendFromISR+0x58>
 80033c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c8:	f383 8811 	msr	BASEPRI, r3
 80033cc:	f3bf 8f6f 	isb	sy
 80033d0:	f3bf 8f4f 	dsb	sy
 80033d4:	623b      	str	r3, [r7, #32]
 80033d6:	e7fe      	b.n	80033d6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d103      	bne.n	80033e6 <xQueueGenericSendFromISR+0x66>
 80033de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d101      	bne.n	80033ea <xQueueGenericSendFromISR+0x6a>
 80033e6:	2301      	movs	r3, #1
 80033e8:	e000      	b.n	80033ec <xQueueGenericSendFromISR+0x6c>
 80033ea:	2300      	movs	r3, #0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d109      	bne.n	8003404 <xQueueGenericSendFromISR+0x84>
 80033f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f4:	f383 8811 	msr	BASEPRI, r3
 80033f8:	f3bf 8f6f 	isb	sy
 80033fc:	f3bf 8f4f 	dsb	sy
 8003400:	61fb      	str	r3, [r7, #28]
 8003402:	e7fe      	b.n	8003402 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003404:	f001 feaa 	bl	800515c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003408:	f3ef 8211 	mrs	r2, BASEPRI
 800340c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003410:	f383 8811 	msr	BASEPRI, r3
 8003414:	f3bf 8f6f 	isb	sy
 8003418:	f3bf 8f4f 	dsb	sy
 800341c:	61ba      	str	r2, [r7, #24]
 800341e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003420:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003422:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003426:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342c:	429a      	cmp	r2, r3
 800342e:	d302      	bcc.n	8003436 <xQueueGenericSendFromISR+0xb6>
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	2b02      	cmp	r3, #2
 8003434:	d12c      	bne.n	8003490 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003438:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800343c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	68b9      	ldr	r1, [r7, #8]
 8003444:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003446:	f000 f988 	bl	800375a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800344a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800344e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003452:	d112      	bne.n	800347a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	2b00      	cmp	r3, #0
 800345a:	d016      	beq.n	800348a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800345c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345e:	3324      	adds	r3, #36	; 0x24
 8003460:	4618      	mov	r0, r3
 8003462:	f000 ff33 	bl	80042cc <xTaskRemoveFromEventList>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00e      	beq.n	800348a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00b      	beq.n	800348a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	e007      	b.n	800348a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800347a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800347e:	3301      	adds	r3, #1
 8003480:	b2db      	uxtb	r3, r3
 8003482:	b25a      	sxtb	r2, r3
 8003484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003486:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800348a:	2301      	movs	r3, #1
 800348c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800348e:	e001      	b.n	8003494 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003490:	2300      	movs	r3, #0
 8003492:	637b      	str	r3, [r7, #52]	; 0x34
 8003494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003496:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800349e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3738      	adds	r7, #56	; 0x38
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b08c      	sub	sp, #48	; 0x30
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80034b4:	2300      	movs	r3, #0
 80034b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80034bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d109      	bne.n	80034d6 <xQueueReceive+0x2e>
	__asm volatile
 80034c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c6:	f383 8811 	msr	BASEPRI, r3
 80034ca:	f3bf 8f6f 	isb	sy
 80034ce:	f3bf 8f4f 	dsb	sy
 80034d2:	623b      	str	r3, [r7, #32]
 80034d4:	e7fe      	b.n	80034d4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d103      	bne.n	80034e4 <xQueueReceive+0x3c>
 80034dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <xQueueReceive+0x40>
 80034e4:	2301      	movs	r3, #1
 80034e6:	e000      	b.n	80034ea <xQueueReceive+0x42>
 80034e8:	2300      	movs	r3, #0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d109      	bne.n	8003502 <xQueueReceive+0x5a>
 80034ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f2:	f383 8811 	msr	BASEPRI, r3
 80034f6:	f3bf 8f6f 	isb	sy
 80034fa:	f3bf 8f4f 	dsb	sy
 80034fe:	61fb      	str	r3, [r7, #28]
 8003500:	e7fe      	b.n	8003500 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003502:	f001 f89d 	bl	8004640 <xTaskGetSchedulerState>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d102      	bne.n	8003512 <xQueueReceive+0x6a>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <xQueueReceive+0x6e>
 8003512:	2301      	movs	r3, #1
 8003514:	e000      	b.n	8003518 <xQueueReceive+0x70>
 8003516:	2300      	movs	r3, #0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d109      	bne.n	8003530 <xQueueReceive+0x88>
 800351c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003520:	f383 8811 	msr	BASEPRI, r3
 8003524:	f3bf 8f6f 	isb	sy
 8003528:	f3bf 8f4f 	dsb	sy
 800352c:	61bb      	str	r3, [r7, #24]
 800352e:	e7fe      	b.n	800352e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003530:	f001 fd5a 	bl	8004fe8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003538:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	2b00      	cmp	r3, #0
 800353e:	d01f      	beq.n	8003580 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003540:	68b9      	ldr	r1, [r7, #8]
 8003542:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003544:	f000 f973 	bl	800382e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	1e5a      	subs	r2, r3, #1
 800354c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00f      	beq.n	8003578 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355a:	3310      	adds	r3, #16
 800355c:	4618      	mov	r0, r3
 800355e:	f000 feb5 	bl	80042cc <xTaskRemoveFromEventList>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d007      	beq.n	8003578 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003568:	4b3c      	ldr	r3, [pc, #240]	; (800365c <xQueueReceive+0x1b4>)
 800356a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	f3bf 8f4f 	dsb	sy
 8003574:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003578:	f001 fd64 	bl	8005044 <vPortExitCritical>
				return pdPASS;
 800357c:	2301      	movs	r3, #1
 800357e:	e069      	b.n	8003654 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d103      	bne.n	800358e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003586:	f001 fd5d 	bl	8005044 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800358a:	2300      	movs	r3, #0
 800358c:	e062      	b.n	8003654 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800358e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003590:	2b00      	cmp	r3, #0
 8003592:	d106      	bne.n	80035a2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003594:	f107 0310 	add.w	r3, r7, #16
 8003598:	4618      	mov	r0, r3
 800359a:	f000 fef9 	bl	8004390 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800359e:	2301      	movs	r3, #1
 80035a0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035a2:	f001 fd4f 	bl	8005044 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035a6:	f000 fc71 	bl	8003e8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035aa:	f001 fd1d 	bl	8004fe8 <vPortEnterCritical>
 80035ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035b4:	b25b      	sxtb	r3, r3
 80035b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035ba:	d103      	bne.n	80035c4 <xQueueReceive+0x11c>
 80035bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035ca:	b25b      	sxtb	r3, r3
 80035cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035d0:	d103      	bne.n	80035da <xQueueReceive+0x132>
 80035d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035da:	f001 fd33 	bl	8005044 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035de:	1d3a      	adds	r2, r7, #4
 80035e0:	f107 0310 	add.w	r3, r7, #16
 80035e4:	4611      	mov	r1, r2
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 fee8 	bl	80043bc <xTaskCheckForTimeOut>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d123      	bne.n	800363a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035f4:	f000 f993 	bl	800391e <prvIsQueueEmpty>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d017      	beq.n	800362e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80035fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003600:	3324      	adds	r3, #36	; 0x24
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	4611      	mov	r1, r2
 8003606:	4618      	mov	r0, r3
 8003608:	f000 fe12 	bl	8004230 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800360c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800360e:	f000 f934 	bl	800387a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003612:	f000 fc49 	bl	8003ea8 <xTaskResumeAll>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d189      	bne.n	8003530 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800361c:	4b0f      	ldr	r3, [pc, #60]	; (800365c <xQueueReceive+0x1b4>)
 800361e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	f3bf 8f4f 	dsb	sy
 8003628:	f3bf 8f6f 	isb	sy
 800362c:	e780      	b.n	8003530 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800362e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003630:	f000 f923 	bl	800387a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003634:	f000 fc38 	bl	8003ea8 <xTaskResumeAll>
 8003638:	e77a      	b.n	8003530 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800363a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800363c:	f000 f91d 	bl	800387a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003640:	f000 fc32 	bl	8003ea8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003644:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003646:	f000 f96a 	bl	800391e <prvIsQueueEmpty>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	f43f af6f 	beq.w	8003530 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003652:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003654:	4618      	mov	r0, r3
 8003656:	3730      	adds	r7, #48	; 0x30
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	e000ed04 	.word	0xe000ed04

08003660 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b08e      	sub	sp, #56	; 0x38
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003672:	2b00      	cmp	r3, #0
 8003674:	d109      	bne.n	800368a <xQueueReceiveFromISR+0x2a>
 8003676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367a:	f383 8811 	msr	BASEPRI, r3
 800367e:	f3bf 8f6f 	isb	sy
 8003682:	f3bf 8f4f 	dsb	sy
 8003686:	623b      	str	r3, [r7, #32]
 8003688:	e7fe      	b.n	8003688 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d103      	bne.n	8003698 <xQueueReceiveFromISR+0x38>
 8003690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <xQueueReceiveFromISR+0x3c>
 8003698:	2301      	movs	r3, #1
 800369a:	e000      	b.n	800369e <xQueueReceiveFromISR+0x3e>
 800369c:	2300      	movs	r3, #0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d109      	bne.n	80036b6 <xQueueReceiveFromISR+0x56>
 80036a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a6:	f383 8811 	msr	BASEPRI, r3
 80036aa:	f3bf 8f6f 	isb	sy
 80036ae:	f3bf 8f4f 	dsb	sy
 80036b2:	61fb      	str	r3, [r7, #28]
 80036b4:	e7fe      	b.n	80036b4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036b6:	f001 fd51 	bl	800515c <vPortValidateInterruptPriority>
	__asm volatile
 80036ba:	f3ef 8211 	mrs	r2, BASEPRI
 80036be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c2:	f383 8811 	msr	BASEPRI, r3
 80036c6:	f3bf 8f6f 	isb	sy
 80036ca:	f3bf 8f4f 	dsb	sy
 80036ce:	61ba      	str	r2, [r7, #24]
 80036d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80036d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80036d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d02f      	beq.n	8003742 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80036e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80036ec:	68b9      	ldr	r1, [r7, #8]
 80036ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036f0:	f000 f89d 	bl	800382e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80036f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f6:	1e5a      	subs	r2, r3, #1
 80036f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80036fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003700:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003704:	d112      	bne.n	800372c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d016      	beq.n	800373c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800370e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003710:	3310      	adds	r3, #16
 8003712:	4618      	mov	r0, r3
 8003714:	f000 fdda 	bl	80042cc <xTaskRemoveFromEventList>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00e      	beq.n	800373c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00b      	beq.n	800373c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	e007      	b.n	800373c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800372c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003730:	3301      	adds	r3, #1
 8003732:	b2db      	uxtb	r3, r3
 8003734:	b25a      	sxtb	r2, r3
 8003736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800373c:	2301      	movs	r3, #1
 800373e:	637b      	str	r3, [r7, #52]	; 0x34
 8003740:	e001      	b.n	8003746 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8003742:	2300      	movs	r3, #0
 8003744:	637b      	str	r3, [r7, #52]	; 0x34
 8003746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003748:	613b      	str	r3, [r7, #16]
	__asm volatile
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003752:	4618      	mov	r0, r3
 8003754:	3738      	adds	r7, #56	; 0x38
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b086      	sub	sp, #24
 800375e:	af00      	add	r7, sp, #0
 8003760:	60f8      	str	r0, [r7, #12]
 8003762:	60b9      	str	r1, [r7, #8]
 8003764:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003766:	2300      	movs	r3, #0
 8003768:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10d      	bne.n	8003794 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d14d      	bne.n	800381c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	4618      	mov	r0, r3
 8003786:	f000 ff79 	bl	800467c <xTaskPriorityDisinherit>
 800378a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	605a      	str	r2, [r3, #4]
 8003792:	e043      	b.n	800381c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d119      	bne.n	80037ce <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6898      	ldr	r0, [r3, #8]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	461a      	mov	r2, r3
 80037a4:	68b9      	ldr	r1, [r7, #8]
 80037a6:	f001 ff17 	bl	80055d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	441a      	add	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d32b      	bcc.n	800381c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	609a      	str	r2, [r3, #8]
 80037cc:	e026      	b.n	800381c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	68d8      	ldr	r0, [r3, #12]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	461a      	mov	r2, r3
 80037d8:	68b9      	ldr	r1, [r7, #8]
 80037da:	f001 fefd 	bl	80055d8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	68da      	ldr	r2, [r3, #12]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	425b      	negs	r3, r3
 80037e8:	441a      	add	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	68da      	ldr	r2, [r3, #12]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d207      	bcs.n	800380a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	425b      	negs	r3, r3
 8003804:	441a      	add	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b02      	cmp	r3, #2
 800380e:	d105      	bne.n	800381c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d002      	beq.n	800381c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	3b01      	subs	r3, #1
 800381a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1c5a      	adds	r2, r3, #1
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003824:	697b      	ldr	r3, [r7, #20]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3718      	adds	r7, #24
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b082      	sub	sp, #8
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
 8003836:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383c:	2b00      	cmp	r3, #0
 800383e:	d018      	beq.n	8003872 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68da      	ldr	r2, [r3, #12]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003848:	441a      	add	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	429a      	cmp	r2, r3
 8003858:	d303      	bcc.n	8003862 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68d9      	ldr	r1, [r3, #12]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	461a      	mov	r2, r3
 800386c:	6838      	ldr	r0, [r7, #0]
 800386e:	f001 feb3 	bl	80055d8 <memcpy>
	}
}
 8003872:	bf00      	nop
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b084      	sub	sp, #16
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003882:	f001 fbb1 	bl	8004fe8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800388c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800388e:	e011      	b.n	80038b4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	2b00      	cmp	r3, #0
 8003896:	d012      	beq.n	80038be <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3324      	adds	r3, #36	; 0x24
 800389c:	4618      	mov	r0, r3
 800389e:	f000 fd15 	bl	80042cc <xTaskRemoveFromEventList>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80038a8:	f000 fde8 	bl	800447c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80038ac:	7bfb      	ldrb	r3, [r7, #15]
 80038ae:	3b01      	subs	r3, #1
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80038b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	dce9      	bgt.n	8003890 <prvUnlockQueue+0x16>
 80038bc:	e000      	b.n	80038c0 <prvUnlockQueue+0x46>
					break;
 80038be:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	22ff      	movs	r2, #255	; 0xff
 80038c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80038c8:	f001 fbbc 	bl	8005044 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80038cc:	f001 fb8c 	bl	8004fe8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038d6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80038d8:	e011      	b.n	80038fe <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d012      	beq.n	8003908 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	3310      	adds	r3, #16
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 fcf0 	bl	80042cc <xTaskRemoveFromEventList>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80038f2:	f000 fdc3 	bl	800447c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80038f6:	7bbb      	ldrb	r3, [r7, #14]
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80038fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003902:	2b00      	cmp	r3, #0
 8003904:	dce9      	bgt.n	80038da <prvUnlockQueue+0x60>
 8003906:	e000      	b.n	800390a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003908:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	22ff      	movs	r2, #255	; 0xff
 800390e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003912:	f001 fb97 	bl	8005044 <vPortExitCritical>
}
 8003916:	bf00      	nop
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b084      	sub	sp, #16
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003926:	f001 fb5f 	bl	8004fe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392e:	2b00      	cmp	r3, #0
 8003930:	d102      	bne.n	8003938 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003932:	2301      	movs	r3, #1
 8003934:	60fb      	str	r3, [r7, #12]
 8003936:	e001      	b.n	800393c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003938:	2300      	movs	r3, #0
 800393a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800393c:	f001 fb82 	bl	8005044 <vPortExitCritical>

	return xReturn;
 8003940:	68fb      	ldr	r3, [r7, #12]
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b084      	sub	sp, #16
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003952:	f001 fb49 	bl	8004fe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395e:	429a      	cmp	r2, r3
 8003960:	d102      	bne.n	8003968 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003962:	2301      	movs	r3, #1
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	e001      	b.n	800396c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003968:	2300      	movs	r3, #0
 800396a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800396c:	f001 fb6a 	bl	8005044 <vPortExitCritical>

	return xReturn;
 8003970:	68fb      	ldr	r3, [r7, #12]
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
	...

0800397c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003986:	2300      	movs	r3, #0
 8003988:	60fb      	str	r3, [r7, #12]
 800398a:	e014      	b.n	80039b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800398c:	4a0e      	ldr	r2, [pc, #56]	; (80039c8 <vQueueAddToRegistry+0x4c>)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10b      	bne.n	80039b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003998:	490b      	ldr	r1, [pc, #44]	; (80039c8 <vQueueAddToRegistry+0x4c>)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80039a2:	4a09      	ldr	r2, [pc, #36]	; (80039c8 <vQueueAddToRegistry+0x4c>)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	4413      	add	r3, r2
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80039ae:	e005      	b.n	80039bc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	3301      	adds	r3, #1
 80039b4:	60fb      	str	r3, [r7, #12]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2b07      	cmp	r3, #7
 80039ba:	d9e7      	bls.n	800398c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80039bc:	bf00      	nop
 80039be:	3714      	adds	r7, #20
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bc80      	pop	{r7}
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	20001c54 	.word	0x20001c54

080039cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80039dc:	f001 fb04 	bl	8004fe8 <vPortEnterCritical>
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039e6:	b25b      	sxtb	r3, r3
 80039e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039ec:	d103      	bne.n	80039f6 <vQueueWaitForMessageRestricted+0x2a>
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039fc:	b25b      	sxtb	r3, r3
 80039fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a02:	d103      	bne.n	8003a0c <vQueueWaitForMessageRestricted+0x40>
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a0c:	f001 fb1a 	bl	8005044 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d106      	bne.n	8003a26 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	3324      	adds	r3, #36	; 0x24
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	68b9      	ldr	r1, [r7, #8]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f000 fc29 	bl	8004278 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003a26:	6978      	ldr	r0, [r7, #20]
 8003a28:	f7ff ff27 	bl	800387a <prvUnlockQueue>
	}
 8003a2c:	bf00      	nop
 8003a2e:	3718      	adds	r7, #24
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b08e      	sub	sp, #56	; 0x38
 8003a38:	af04      	add	r7, sp, #16
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
 8003a40:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d109      	bne.n	8003a5c <xTaskCreateStatic+0x28>
	__asm volatile
 8003a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4c:	f383 8811 	msr	BASEPRI, r3
 8003a50:	f3bf 8f6f 	isb	sy
 8003a54:	f3bf 8f4f 	dsb	sy
 8003a58:	623b      	str	r3, [r7, #32]
 8003a5a:	e7fe      	b.n	8003a5a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d109      	bne.n	8003a76 <xTaskCreateStatic+0x42>
 8003a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a66:	f383 8811 	msr	BASEPRI, r3
 8003a6a:	f3bf 8f6f 	isb	sy
 8003a6e:	f3bf 8f4f 	dsb	sy
 8003a72:	61fb      	str	r3, [r7, #28]
 8003a74:	e7fe      	b.n	8003a74 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a76:	235c      	movs	r3, #92	; 0x5c
 8003a78:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	2b5c      	cmp	r3, #92	; 0x5c
 8003a7e:	d009      	beq.n	8003a94 <xTaskCreateStatic+0x60>
 8003a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a84:	f383 8811 	msr	BASEPRI, r3
 8003a88:	f3bf 8f6f 	isb	sy
 8003a8c:	f3bf 8f4f 	dsb	sy
 8003a90:	61bb      	str	r3, [r7, #24]
 8003a92:	e7fe      	b.n	8003a92 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d01e      	beq.n	8003ad8 <xTaskCreateStatic+0xa4>
 8003a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d01b      	beq.n	8003ad8 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003aa8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	2202      	movs	r2, #2
 8003aae:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	9303      	str	r3, [sp, #12]
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	9302      	str	r3, [sp, #8]
 8003aba:	f107 0314 	add.w	r3, r7, #20
 8003abe:	9301      	str	r3, [sp, #4]
 8003ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	68b9      	ldr	r1, [r7, #8]
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 f850 	bl	8003b70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ad0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ad2:	f000 f8d3 	bl	8003c7c <prvAddNewTaskToReadyList>
 8003ad6:	e001      	b.n	8003adc <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003adc:	697b      	ldr	r3, [r7, #20]
	}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3728      	adds	r7, #40	; 0x28
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b08c      	sub	sp, #48	; 0x30
 8003aea:	af04      	add	r7, sp, #16
 8003aec:	60f8      	str	r0, [r7, #12]
 8003aee:	60b9      	str	r1, [r7, #8]
 8003af0:	603b      	str	r3, [r7, #0]
 8003af2:	4613      	mov	r3, r2
 8003af4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003af6:	88fb      	ldrh	r3, [r7, #6]
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	4618      	mov	r0, r3
 8003afc:	f001 fb6a 	bl	80051d4 <pvPortMalloc>
 8003b00:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00e      	beq.n	8003b26 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003b08:	205c      	movs	r0, #92	; 0x5c
 8003b0a:	f001 fb63 	bl	80051d4 <pvPortMalloc>
 8003b0e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	631a      	str	r2, [r3, #48]	; 0x30
 8003b1c:	e005      	b.n	8003b2a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b1e:	6978      	ldr	r0, [r7, #20]
 8003b20:	f001 fc1a 	bl	8005358 <vPortFree>
 8003b24:	e001      	b.n	8003b2a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b26:	2300      	movs	r3, #0
 8003b28:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d017      	beq.n	8003b60 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b38:	88fa      	ldrh	r2, [r7, #6]
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	9303      	str	r3, [sp, #12]
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	9302      	str	r3, [sp, #8]
 8003b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b44:	9301      	str	r3, [sp, #4]
 8003b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	68b9      	ldr	r1, [r7, #8]
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 f80e 	bl	8003b70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b54:	69f8      	ldr	r0, [r7, #28]
 8003b56:	f000 f891 	bl	8003c7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	61bb      	str	r3, [r7, #24]
 8003b5e:	e002      	b.n	8003b66 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b64:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b66:	69bb      	ldr	r3, [r7, #24]
	}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3720      	adds	r7, #32
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b088      	sub	sp, #32
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
 8003b7c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b80:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	461a      	mov	r2, r3
 8003b88:	21a5      	movs	r1, #165	; 0xa5
 8003b8a:	f001 fd30 	bl	80055ee <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4413      	add	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	f023 0307 	bic.w	r3, r3, #7
 8003ba6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d009      	beq.n	8003bc6 <prvInitialiseNewTask+0x56>
 8003bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb6:	f383 8811 	msr	BASEPRI, r3
 8003bba:	f3bf 8f6f 	isb	sy
 8003bbe:	f3bf 8f4f 	dsb	sy
 8003bc2:	617b      	str	r3, [r7, #20]
 8003bc4:	e7fe      	b.n	8003bc4 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	61fb      	str	r3, [r7, #28]
 8003bca:	e012      	b.n	8003bf2 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003bcc:	68ba      	ldr	r2, [r7, #8]
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	7819      	ldrb	r1, [r3, #0]
 8003bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	4413      	add	r3, r2
 8003bda:	3334      	adds	r3, #52	; 0x34
 8003bdc:	460a      	mov	r2, r1
 8003bde:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	4413      	add	r3, r2
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d006      	beq.n	8003bfa <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	61fb      	str	r3, [r7, #28]
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	2b0f      	cmp	r3, #15
 8003bf6:	d9e9      	bls.n	8003bcc <prvInitialiseNewTask+0x5c>
 8003bf8:	e000      	b.n	8003bfc <prvInitialiseNewTask+0x8c>
		{
			break;
 8003bfa:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c06:	2b37      	cmp	r3, #55	; 0x37
 8003c08:	d901      	bls.n	8003c0e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c0a:	2337      	movs	r3, #55	; 0x37
 8003c0c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c12:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c18:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c22:	3304      	adds	r3, #4
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7ff f8e6 	bl	8002df6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2c:	3318      	adds	r3, #24
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7ff f8e1 	bl	8002df6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c38:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c42:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c48:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	68f9      	ldr	r1, [r7, #12]
 8003c5c:	69b8      	ldr	r0, [r7, #24]
 8003c5e:	f001 f8d7 	bl	8004e10 <pxPortInitialiseStack>
 8003c62:	4602      	mov	r2, r0
 8003c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c66:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d002      	beq.n	8003c74 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c72:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c74:	bf00      	nop
 8003c76:	3720      	adds	r7, #32
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003c84:	f001 f9b0 	bl	8004fe8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003c88:	4b2d      	ldr	r3, [pc, #180]	; (8003d40 <prvAddNewTaskToReadyList+0xc4>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	4a2c      	ldr	r2, [pc, #176]	; (8003d40 <prvAddNewTaskToReadyList+0xc4>)
 8003c90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003c92:	4b2c      	ldr	r3, [pc, #176]	; (8003d44 <prvAddNewTaskToReadyList+0xc8>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d109      	bne.n	8003cae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003c9a:	4a2a      	ldr	r2, [pc, #168]	; (8003d44 <prvAddNewTaskToReadyList+0xc8>)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ca0:	4b27      	ldr	r3, [pc, #156]	; (8003d40 <prvAddNewTaskToReadyList+0xc4>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d110      	bne.n	8003cca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ca8:	f000 fc0c 	bl	80044c4 <prvInitialiseTaskLists>
 8003cac:	e00d      	b.n	8003cca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003cae:	4b26      	ldr	r3, [pc, #152]	; (8003d48 <prvAddNewTaskToReadyList+0xcc>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d109      	bne.n	8003cca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003cb6:	4b23      	ldr	r3, [pc, #140]	; (8003d44 <prvAddNewTaskToReadyList+0xc8>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d802      	bhi.n	8003cca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003cc4:	4a1f      	ldr	r2, [pc, #124]	; (8003d44 <prvAddNewTaskToReadyList+0xc8>)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003cca:	4b20      	ldr	r3, [pc, #128]	; (8003d4c <prvAddNewTaskToReadyList+0xd0>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	4a1e      	ldr	r2, [pc, #120]	; (8003d4c <prvAddNewTaskToReadyList+0xd0>)
 8003cd2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003cd4:	4b1d      	ldr	r3, [pc, #116]	; (8003d4c <prvAddNewTaskToReadyList+0xd0>)
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce0:	4b1b      	ldr	r3, [pc, #108]	; (8003d50 <prvAddNewTaskToReadyList+0xd4>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d903      	bls.n	8003cf0 <prvAddNewTaskToReadyList+0x74>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cec:	4a18      	ldr	r2, [pc, #96]	; (8003d50 <prvAddNewTaskToReadyList+0xd4>)
 8003cee:	6013      	str	r3, [r2, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4a15      	ldr	r2, [pc, #84]	; (8003d54 <prvAddNewTaskToReadyList+0xd8>)
 8003cfe:	441a      	add	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	3304      	adds	r3, #4
 8003d04:	4619      	mov	r1, r3
 8003d06:	4610      	mov	r0, r2
 8003d08:	f7ff f881 	bl	8002e0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d0c:	f001 f99a 	bl	8005044 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d10:	4b0d      	ldr	r3, [pc, #52]	; (8003d48 <prvAddNewTaskToReadyList+0xcc>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00e      	beq.n	8003d36 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d18:	4b0a      	ldr	r3, [pc, #40]	; (8003d44 <prvAddNewTaskToReadyList+0xc8>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d207      	bcs.n	8003d36 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d26:	4b0c      	ldr	r3, [pc, #48]	; (8003d58 <prvAddNewTaskToReadyList+0xdc>)
 8003d28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	f3bf 8f4f 	dsb	sy
 8003d32:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d36:	bf00      	nop
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	20000dbc 	.word	0x20000dbc
 8003d44:	200008e8 	.word	0x200008e8
 8003d48:	20000dc8 	.word	0x20000dc8
 8003d4c:	20000dd8 	.word	0x20000dd8
 8003d50:	20000dc4 	.word	0x20000dc4
 8003d54:	200008ec 	.word	0x200008ec
 8003d58:	e000ed04 	.word	0xe000ed04

08003d5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003d64:	2300      	movs	r3, #0
 8003d66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d016      	beq.n	8003d9c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003d6e:	4b13      	ldr	r3, [pc, #76]	; (8003dbc <vTaskDelay+0x60>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d009      	beq.n	8003d8a <vTaskDelay+0x2e>
 8003d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7a:	f383 8811 	msr	BASEPRI, r3
 8003d7e:	f3bf 8f6f 	isb	sy
 8003d82:	f3bf 8f4f 	dsb	sy
 8003d86:	60bb      	str	r3, [r7, #8]
 8003d88:	e7fe      	b.n	8003d88 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003d8a:	f000 f87f 	bl	8003e8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d8e:	2100      	movs	r1, #0
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 fcdf 	bl	8004754 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003d96:	f000 f887 	bl	8003ea8 <xTaskResumeAll>
 8003d9a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d107      	bne.n	8003db2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003da2:	4b07      	ldr	r3, [pc, #28]	; (8003dc0 <vTaskDelay+0x64>)
 8003da4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003da8:	601a      	str	r2, [r3, #0]
 8003daa:	f3bf 8f4f 	dsb	sy
 8003dae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003db2:	bf00      	nop
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	20000de4 	.word	0x20000de4
 8003dc0:	e000ed04 	.word	0xe000ed04

08003dc4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b08a      	sub	sp, #40	; 0x28
 8003dc8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003dd2:	463a      	mov	r2, r7
 8003dd4:	1d39      	adds	r1, r7, #4
 8003dd6:	f107 0308 	add.w	r3, r7, #8
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7fe ffba 	bl	8002d54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003de0:	6839      	ldr	r1, [r7, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	9202      	str	r2, [sp, #8]
 8003de8:	9301      	str	r3, [sp, #4]
 8003dea:	2300      	movs	r3, #0
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	2300      	movs	r3, #0
 8003df0:	460a      	mov	r2, r1
 8003df2:	4920      	ldr	r1, [pc, #128]	; (8003e74 <vTaskStartScheduler+0xb0>)
 8003df4:	4820      	ldr	r0, [pc, #128]	; (8003e78 <vTaskStartScheduler+0xb4>)
 8003df6:	f7ff fe1d 	bl	8003a34 <xTaskCreateStatic>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	4b1f      	ldr	r3, [pc, #124]	; (8003e7c <vTaskStartScheduler+0xb8>)
 8003dfe:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003e00:	4b1e      	ldr	r3, [pc, #120]	; (8003e7c <vTaskStartScheduler+0xb8>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d002      	beq.n	8003e0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	617b      	str	r3, [r7, #20]
 8003e0c:	e001      	b.n	8003e12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d102      	bne.n	8003e1e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003e18:	f000 fcf0 	bl	80047fc <xTimerCreateTimerTask>
 8003e1c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d115      	bne.n	8003e50 <vTaskStartScheduler+0x8c>
 8003e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e28:	f383 8811 	msr	BASEPRI, r3
 8003e2c:	f3bf 8f6f 	isb	sy
 8003e30:	f3bf 8f4f 	dsb	sy
 8003e34:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003e36:	4b12      	ldr	r3, [pc, #72]	; (8003e80 <vTaskStartScheduler+0xbc>)
 8003e38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e3c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003e3e:	4b11      	ldr	r3, [pc, #68]	; (8003e84 <vTaskStartScheduler+0xc0>)
 8003e40:	2201      	movs	r2, #1
 8003e42:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003e44:	4b10      	ldr	r3, [pc, #64]	; (8003e88 <vTaskStartScheduler+0xc4>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003e4a:	f001 f85d 	bl	8004f08 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003e4e:	e00d      	b.n	8003e6c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e56:	d109      	bne.n	8003e6c <vTaskStartScheduler+0xa8>
 8003e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5c:	f383 8811 	msr	BASEPRI, r3
 8003e60:	f3bf 8f6f 	isb	sy
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	60fb      	str	r3, [r7, #12]
 8003e6a:	e7fe      	b.n	8003e6a <vTaskStartScheduler+0xa6>
}
 8003e6c:	bf00      	nop
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	0800620c 	.word	0x0800620c
 8003e78:	08004495 	.word	0x08004495
 8003e7c:	20000de0 	.word	0x20000de0
 8003e80:	20000ddc 	.word	0x20000ddc
 8003e84:	20000dc8 	.word	0x20000dc8
 8003e88:	20000dc0 	.word	0x20000dc0

08003e8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003e90:	4b04      	ldr	r3, [pc, #16]	; (8003ea4 <vTaskSuspendAll+0x18>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	3301      	adds	r3, #1
 8003e96:	4a03      	ldr	r2, [pc, #12]	; (8003ea4 <vTaskSuspendAll+0x18>)
 8003e98:	6013      	str	r3, [r2, #0]
}
 8003e9a:	bf00      	nop
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bc80      	pop	{r7}
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	20000de4 	.word	0x20000de4

08003ea8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003eb6:	4b41      	ldr	r3, [pc, #260]	; (8003fbc <xTaskResumeAll+0x114>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d109      	bne.n	8003ed2 <xTaskResumeAll+0x2a>
 8003ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec2:	f383 8811 	msr	BASEPRI, r3
 8003ec6:	f3bf 8f6f 	isb	sy
 8003eca:	f3bf 8f4f 	dsb	sy
 8003ece:	603b      	str	r3, [r7, #0]
 8003ed0:	e7fe      	b.n	8003ed0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003ed2:	f001 f889 	bl	8004fe8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003ed6:	4b39      	ldr	r3, [pc, #228]	; (8003fbc <xTaskResumeAll+0x114>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	3b01      	subs	r3, #1
 8003edc:	4a37      	ldr	r2, [pc, #220]	; (8003fbc <xTaskResumeAll+0x114>)
 8003ede:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ee0:	4b36      	ldr	r3, [pc, #216]	; (8003fbc <xTaskResumeAll+0x114>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d162      	bne.n	8003fae <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ee8:	4b35      	ldr	r3, [pc, #212]	; (8003fc0 <xTaskResumeAll+0x118>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d05e      	beq.n	8003fae <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ef0:	e02f      	b.n	8003f52 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003ef2:	4b34      	ldr	r3, [pc, #208]	; (8003fc4 <xTaskResumeAll+0x11c>)
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	3318      	adds	r3, #24
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7fe ffe0 	bl	8002ec4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	3304      	adds	r3, #4
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7fe ffdb 	bl	8002ec4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f12:	4b2d      	ldr	r3, [pc, #180]	; (8003fc8 <xTaskResumeAll+0x120>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d903      	bls.n	8003f22 <xTaskResumeAll+0x7a>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1e:	4a2a      	ldr	r2, [pc, #168]	; (8003fc8 <xTaskResumeAll+0x120>)
 8003f20:	6013      	str	r3, [r2, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f26:	4613      	mov	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4413      	add	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4a27      	ldr	r2, [pc, #156]	; (8003fcc <xTaskResumeAll+0x124>)
 8003f30:	441a      	add	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	3304      	adds	r3, #4
 8003f36:	4619      	mov	r1, r3
 8003f38:	4610      	mov	r0, r2
 8003f3a:	f7fe ff68 	bl	8002e0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f42:	4b23      	ldr	r3, [pc, #140]	; (8003fd0 <xTaskResumeAll+0x128>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d302      	bcc.n	8003f52 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003f4c:	4b21      	ldr	r3, [pc, #132]	; (8003fd4 <xTaskResumeAll+0x12c>)
 8003f4e:	2201      	movs	r2, #1
 8003f50:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f52:	4b1c      	ldr	r3, [pc, #112]	; (8003fc4 <xTaskResumeAll+0x11c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1cb      	bne.n	8003ef2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f60:	f000 fb4a 	bl	80045f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003f64:	4b1c      	ldr	r3, [pc, #112]	; (8003fd8 <xTaskResumeAll+0x130>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d010      	beq.n	8003f92 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f70:	f000 f844 	bl	8003ffc <xTaskIncrementTick>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d002      	beq.n	8003f80 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003f7a:	4b16      	ldr	r3, [pc, #88]	; (8003fd4 <xTaskResumeAll+0x12c>)
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	3b01      	subs	r3, #1
 8003f84:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1f1      	bne.n	8003f70 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003f8c:	4b12      	ldr	r3, [pc, #72]	; (8003fd8 <xTaskResumeAll+0x130>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003f92:	4b10      	ldr	r3, [pc, #64]	; (8003fd4 <xTaskResumeAll+0x12c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d009      	beq.n	8003fae <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f9e:	4b0f      	ldr	r3, [pc, #60]	; (8003fdc <xTaskResumeAll+0x134>)
 8003fa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	f3bf 8f4f 	dsb	sy
 8003faa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003fae:	f001 f849 	bl	8005044 <vPortExitCritical>

	return xAlreadyYielded;
 8003fb2:	68bb      	ldr	r3, [r7, #8]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	20000de4 	.word	0x20000de4
 8003fc0:	20000dbc 	.word	0x20000dbc
 8003fc4:	20000d7c 	.word	0x20000d7c
 8003fc8:	20000dc4 	.word	0x20000dc4
 8003fcc:	200008ec 	.word	0x200008ec
 8003fd0:	200008e8 	.word	0x200008e8
 8003fd4:	20000dd0 	.word	0x20000dd0
 8003fd8:	20000dcc 	.word	0x20000dcc
 8003fdc:	e000ed04 	.word	0xe000ed04

08003fe0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003fe6:	4b04      	ldr	r3, [pc, #16]	; (8003ff8 <xTaskGetTickCount+0x18>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003fec:	687b      	ldr	r3, [r7, #4]
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc80      	pop	{r7}
 8003ff6:	4770      	bx	lr
 8003ff8:	20000dc0 	.word	0x20000dc0

08003ffc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004002:	2300      	movs	r3, #0
 8004004:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004006:	4b51      	ldr	r3, [pc, #324]	; (800414c <xTaskIncrementTick+0x150>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	f040 808d 	bne.w	800412a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004010:	4b4f      	ldr	r3, [pc, #316]	; (8004150 <xTaskIncrementTick+0x154>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	3301      	adds	r3, #1
 8004016:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004018:	4a4d      	ldr	r2, [pc, #308]	; (8004150 <xTaskIncrementTick+0x154>)
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d11f      	bne.n	8004064 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004024:	4b4b      	ldr	r3, [pc, #300]	; (8004154 <xTaskIncrementTick+0x158>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d009      	beq.n	8004042 <xTaskIncrementTick+0x46>
 800402e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004032:	f383 8811 	msr	BASEPRI, r3
 8004036:	f3bf 8f6f 	isb	sy
 800403a:	f3bf 8f4f 	dsb	sy
 800403e:	603b      	str	r3, [r7, #0]
 8004040:	e7fe      	b.n	8004040 <xTaskIncrementTick+0x44>
 8004042:	4b44      	ldr	r3, [pc, #272]	; (8004154 <xTaskIncrementTick+0x158>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	60fb      	str	r3, [r7, #12]
 8004048:	4b43      	ldr	r3, [pc, #268]	; (8004158 <xTaskIncrementTick+0x15c>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a41      	ldr	r2, [pc, #260]	; (8004154 <xTaskIncrementTick+0x158>)
 800404e:	6013      	str	r3, [r2, #0]
 8004050:	4a41      	ldr	r2, [pc, #260]	; (8004158 <xTaskIncrementTick+0x15c>)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6013      	str	r3, [r2, #0]
 8004056:	4b41      	ldr	r3, [pc, #260]	; (800415c <xTaskIncrementTick+0x160>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	3301      	adds	r3, #1
 800405c:	4a3f      	ldr	r2, [pc, #252]	; (800415c <xTaskIncrementTick+0x160>)
 800405e:	6013      	str	r3, [r2, #0]
 8004060:	f000 faca 	bl	80045f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004064:	4b3e      	ldr	r3, [pc, #248]	; (8004160 <xTaskIncrementTick+0x164>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	429a      	cmp	r2, r3
 800406c:	d34e      	bcc.n	800410c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800406e:	4b39      	ldr	r3, [pc, #228]	; (8004154 <xTaskIncrementTick+0x158>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d101      	bne.n	800407c <xTaskIncrementTick+0x80>
 8004078:	2301      	movs	r3, #1
 800407a:	e000      	b.n	800407e <xTaskIncrementTick+0x82>
 800407c:	2300      	movs	r3, #0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d004      	beq.n	800408c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004082:	4b37      	ldr	r3, [pc, #220]	; (8004160 <xTaskIncrementTick+0x164>)
 8004084:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004088:	601a      	str	r2, [r3, #0]
					break;
 800408a:	e03f      	b.n	800410c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800408c:	4b31      	ldr	r3, [pc, #196]	; (8004154 <xTaskIncrementTick+0x158>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d203      	bcs.n	80040ac <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80040a4:	4a2e      	ldr	r2, [pc, #184]	; (8004160 <xTaskIncrementTick+0x164>)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6013      	str	r3, [r2, #0]
						break;
 80040aa:	e02f      	b.n	800410c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	3304      	adds	r3, #4
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7fe ff07 	bl	8002ec4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d004      	beq.n	80040c8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	3318      	adds	r3, #24
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7fe fefe 	bl	8002ec4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040cc:	4b25      	ldr	r3, [pc, #148]	; (8004164 <xTaskIncrementTick+0x168>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d903      	bls.n	80040dc <xTaskIncrementTick+0xe0>
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d8:	4a22      	ldr	r2, [pc, #136]	; (8004164 <xTaskIncrementTick+0x168>)
 80040da:	6013      	str	r3, [r2, #0]
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e0:	4613      	mov	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4a1f      	ldr	r2, [pc, #124]	; (8004168 <xTaskIncrementTick+0x16c>)
 80040ea:	441a      	add	r2, r3
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	3304      	adds	r3, #4
 80040f0:	4619      	mov	r1, r3
 80040f2:	4610      	mov	r0, r2
 80040f4:	f7fe fe8b 	bl	8002e0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040fc:	4b1b      	ldr	r3, [pc, #108]	; (800416c <xTaskIncrementTick+0x170>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004102:	429a      	cmp	r2, r3
 8004104:	d3b3      	bcc.n	800406e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004106:	2301      	movs	r3, #1
 8004108:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800410a:	e7b0      	b.n	800406e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800410c:	4b17      	ldr	r3, [pc, #92]	; (800416c <xTaskIncrementTick+0x170>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004112:	4915      	ldr	r1, [pc, #84]	; (8004168 <xTaskIncrementTick+0x16c>)
 8004114:	4613      	mov	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4413      	add	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	440b      	add	r3, r1
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d907      	bls.n	8004134 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004124:	2301      	movs	r3, #1
 8004126:	617b      	str	r3, [r7, #20]
 8004128:	e004      	b.n	8004134 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800412a:	4b11      	ldr	r3, [pc, #68]	; (8004170 <xTaskIncrementTick+0x174>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	3301      	adds	r3, #1
 8004130:	4a0f      	ldr	r2, [pc, #60]	; (8004170 <xTaskIncrementTick+0x174>)
 8004132:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004134:	4b0f      	ldr	r3, [pc, #60]	; (8004174 <xTaskIncrementTick+0x178>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800413c:	2301      	movs	r3, #1
 800413e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004140:	697b      	ldr	r3, [r7, #20]
}
 8004142:	4618      	mov	r0, r3
 8004144:	3718      	adds	r7, #24
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	20000de4 	.word	0x20000de4
 8004150:	20000dc0 	.word	0x20000dc0
 8004154:	20000d74 	.word	0x20000d74
 8004158:	20000d78 	.word	0x20000d78
 800415c:	20000dd4 	.word	0x20000dd4
 8004160:	20000ddc 	.word	0x20000ddc
 8004164:	20000dc4 	.word	0x20000dc4
 8004168:	200008ec 	.word	0x200008ec
 800416c:	200008e8 	.word	0x200008e8
 8004170:	20000dcc 	.word	0x20000dcc
 8004174:	20000dd0 	.word	0x20000dd0

08004178 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800417e:	4b27      	ldr	r3, [pc, #156]	; (800421c <vTaskSwitchContext+0xa4>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004186:	4b26      	ldr	r3, [pc, #152]	; (8004220 <vTaskSwitchContext+0xa8>)
 8004188:	2201      	movs	r2, #1
 800418a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800418c:	e040      	b.n	8004210 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800418e:	4b24      	ldr	r3, [pc, #144]	; (8004220 <vTaskSwitchContext+0xa8>)
 8004190:	2200      	movs	r2, #0
 8004192:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004194:	4b23      	ldr	r3, [pc, #140]	; (8004224 <vTaskSwitchContext+0xac>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	e00f      	b.n	80041bc <vTaskSwitchContext+0x44>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d109      	bne.n	80041b6 <vTaskSwitchContext+0x3e>
 80041a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a6:	f383 8811 	msr	BASEPRI, r3
 80041aa:	f3bf 8f6f 	isb	sy
 80041ae:	f3bf 8f4f 	dsb	sy
 80041b2:	607b      	str	r3, [r7, #4]
 80041b4:	e7fe      	b.n	80041b4 <vTaskSwitchContext+0x3c>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	3b01      	subs	r3, #1
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	491a      	ldr	r1, [pc, #104]	; (8004228 <vTaskSwitchContext+0xb0>)
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	4613      	mov	r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	4413      	add	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	440b      	add	r3, r1
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d0e5      	beq.n	800419c <vTaskSwitchContext+0x24>
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	4613      	mov	r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	4413      	add	r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4a13      	ldr	r2, [pc, #76]	; (8004228 <vTaskSwitchContext+0xb0>)
 80041dc:	4413      	add	r3, r2
 80041de:	60bb      	str	r3, [r7, #8]
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	685a      	ldr	r2, [r3, #4]
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	605a      	str	r2, [r3, #4]
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	3308      	adds	r3, #8
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d104      	bne.n	8004200 <vTaskSwitchContext+0x88>
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	605a      	str	r2, [r3, #4]
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	4a09      	ldr	r2, [pc, #36]	; (800422c <vTaskSwitchContext+0xb4>)
 8004208:	6013      	str	r3, [r2, #0]
 800420a:	4a06      	ldr	r2, [pc, #24]	; (8004224 <vTaskSwitchContext+0xac>)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6013      	str	r3, [r2, #0]
}
 8004210:	bf00      	nop
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	bc80      	pop	{r7}
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	20000de4 	.word	0x20000de4
 8004220:	20000dd0 	.word	0x20000dd0
 8004224:	20000dc4 	.word	0x20000dc4
 8004228:	200008ec 	.word	0x200008ec
 800422c:	200008e8 	.word	0x200008e8

08004230 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d109      	bne.n	8004254 <vTaskPlaceOnEventList+0x24>
 8004240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004244:	f383 8811 	msr	BASEPRI, r3
 8004248:	f3bf 8f6f 	isb	sy
 800424c:	f3bf 8f4f 	dsb	sy
 8004250:	60fb      	str	r3, [r7, #12]
 8004252:	e7fe      	b.n	8004252 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004254:	4b07      	ldr	r3, [pc, #28]	; (8004274 <vTaskPlaceOnEventList+0x44>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	3318      	adds	r3, #24
 800425a:	4619      	mov	r1, r3
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f7fe fdf9 	bl	8002e54 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004262:	2101      	movs	r1, #1
 8004264:	6838      	ldr	r0, [r7, #0]
 8004266:	f000 fa75 	bl	8004754 <prvAddCurrentTaskToDelayedList>
}
 800426a:	bf00      	nop
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	200008e8 	.word	0x200008e8

08004278 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d109      	bne.n	800429e <vTaskPlaceOnEventListRestricted+0x26>
 800428a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428e:	f383 8811 	msr	BASEPRI, r3
 8004292:	f3bf 8f6f 	isb	sy
 8004296:	f3bf 8f4f 	dsb	sy
 800429a:	617b      	str	r3, [r7, #20]
 800429c:	e7fe      	b.n	800429c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800429e:	4b0a      	ldr	r3, [pc, #40]	; (80042c8 <vTaskPlaceOnEventListRestricted+0x50>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	3318      	adds	r3, #24
 80042a4:	4619      	mov	r1, r3
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f7fe fdb1 	bl	8002e0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d002      	beq.n	80042b8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80042b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042b6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80042b8:	6879      	ldr	r1, [r7, #4]
 80042ba:	68b8      	ldr	r0, [r7, #8]
 80042bc:	f000 fa4a 	bl	8004754 <prvAddCurrentTaskToDelayedList>
	}
 80042c0:	bf00      	nop
 80042c2:	3718      	adds	r7, #24
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	200008e8 	.word	0x200008e8

080042cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d109      	bne.n	80042f6 <xTaskRemoveFromEventList+0x2a>
 80042e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e6:	f383 8811 	msr	BASEPRI, r3
 80042ea:	f3bf 8f6f 	isb	sy
 80042ee:	f3bf 8f4f 	dsb	sy
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	e7fe      	b.n	80042f4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	3318      	adds	r3, #24
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7fe fde2 	bl	8002ec4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004300:	4b1d      	ldr	r3, [pc, #116]	; (8004378 <xTaskRemoveFromEventList+0xac>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d11d      	bne.n	8004344 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	3304      	adds	r3, #4
 800430c:	4618      	mov	r0, r3
 800430e:	f7fe fdd9 	bl	8002ec4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004316:	4b19      	ldr	r3, [pc, #100]	; (800437c <xTaskRemoveFromEventList+0xb0>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	429a      	cmp	r2, r3
 800431c:	d903      	bls.n	8004326 <xTaskRemoveFromEventList+0x5a>
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004322:	4a16      	ldr	r2, [pc, #88]	; (800437c <xTaskRemoveFromEventList+0xb0>)
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800432a:	4613      	mov	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4413      	add	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4a13      	ldr	r2, [pc, #76]	; (8004380 <xTaskRemoveFromEventList+0xb4>)
 8004334:	441a      	add	r2, r3
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	3304      	adds	r3, #4
 800433a:	4619      	mov	r1, r3
 800433c:	4610      	mov	r0, r2
 800433e:	f7fe fd66 	bl	8002e0e <vListInsertEnd>
 8004342:	e005      	b.n	8004350 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	3318      	adds	r3, #24
 8004348:	4619      	mov	r1, r3
 800434a:	480e      	ldr	r0, [pc, #56]	; (8004384 <xTaskRemoveFromEventList+0xb8>)
 800434c:	f7fe fd5f 	bl	8002e0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004354:	4b0c      	ldr	r3, [pc, #48]	; (8004388 <xTaskRemoveFromEventList+0xbc>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435a:	429a      	cmp	r2, r3
 800435c:	d905      	bls.n	800436a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800435e:	2301      	movs	r3, #1
 8004360:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004362:	4b0a      	ldr	r3, [pc, #40]	; (800438c <xTaskRemoveFromEventList+0xc0>)
 8004364:	2201      	movs	r2, #1
 8004366:	601a      	str	r2, [r3, #0]
 8004368:	e001      	b.n	800436e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800436a:	2300      	movs	r3, #0
 800436c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800436e:	697b      	ldr	r3, [r7, #20]
}
 8004370:	4618      	mov	r0, r3
 8004372:	3718      	adds	r7, #24
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	20000de4 	.word	0x20000de4
 800437c:	20000dc4 	.word	0x20000dc4
 8004380:	200008ec 	.word	0x200008ec
 8004384:	20000d7c 	.word	0x20000d7c
 8004388:	200008e8 	.word	0x200008e8
 800438c:	20000dd0 	.word	0x20000dd0

08004390 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004398:	4b06      	ldr	r3, [pc, #24]	; (80043b4 <vTaskInternalSetTimeOutState+0x24>)
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80043a0:	4b05      	ldr	r3, [pc, #20]	; (80043b8 <vTaskInternalSetTimeOutState+0x28>)
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	605a      	str	r2, [r3, #4]
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bc80      	pop	{r7}
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	20000dd4 	.word	0x20000dd4
 80043b8:	20000dc0 	.word	0x20000dc0

080043bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b088      	sub	sp, #32
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d109      	bne.n	80043e0 <xTaskCheckForTimeOut+0x24>
 80043cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d0:	f383 8811 	msr	BASEPRI, r3
 80043d4:	f3bf 8f6f 	isb	sy
 80043d8:	f3bf 8f4f 	dsb	sy
 80043dc:	613b      	str	r3, [r7, #16]
 80043de:	e7fe      	b.n	80043de <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d109      	bne.n	80043fa <xTaskCheckForTimeOut+0x3e>
 80043e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ea:	f383 8811 	msr	BASEPRI, r3
 80043ee:	f3bf 8f6f 	isb	sy
 80043f2:	f3bf 8f4f 	dsb	sy
 80043f6:	60fb      	str	r3, [r7, #12]
 80043f8:	e7fe      	b.n	80043f8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80043fa:	f000 fdf5 	bl	8004fe8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80043fe:	4b1d      	ldr	r3, [pc, #116]	; (8004474 <xTaskCheckForTimeOut+0xb8>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004416:	d102      	bne.n	800441e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004418:	2300      	movs	r3, #0
 800441a:	61fb      	str	r3, [r7, #28]
 800441c:	e023      	b.n	8004466 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	4b15      	ldr	r3, [pc, #84]	; (8004478 <xTaskCheckForTimeOut+0xbc>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d007      	beq.n	800443a <xTaskCheckForTimeOut+0x7e>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	429a      	cmp	r2, r3
 8004432:	d302      	bcc.n	800443a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004434:	2301      	movs	r3, #1
 8004436:	61fb      	str	r3, [r7, #28]
 8004438:	e015      	b.n	8004466 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	429a      	cmp	r2, r3
 8004442:	d20b      	bcs.n	800445c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	1ad2      	subs	r2, r2, r3
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f7ff ff9d 	bl	8004390 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004456:	2300      	movs	r3, #0
 8004458:	61fb      	str	r3, [r7, #28]
 800445a:	e004      	b.n	8004466 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	2200      	movs	r2, #0
 8004460:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004462:	2301      	movs	r3, #1
 8004464:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004466:	f000 fded 	bl	8005044 <vPortExitCritical>

	return xReturn;
 800446a:	69fb      	ldr	r3, [r7, #28]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3720      	adds	r7, #32
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	20000dc0 	.word	0x20000dc0
 8004478:	20000dd4 	.word	0x20000dd4

0800447c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004480:	4b03      	ldr	r3, [pc, #12]	; (8004490 <vTaskMissedYield+0x14>)
 8004482:	2201      	movs	r2, #1
 8004484:	601a      	str	r2, [r3, #0]
}
 8004486:	bf00      	nop
 8004488:	46bd      	mov	sp, r7
 800448a:	bc80      	pop	{r7}
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	20000dd0 	.word	0x20000dd0

08004494 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800449c:	f000 f852 	bl	8004544 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80044a0:	4b06      	ldr	r3, [pc, #24]	; (80044bc <prvIdleTask+0x28>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d9f9      	bls.n	800449c <prvIdleTask+0x8>
			{
				taskYIELD();
 80044a8:	4b05      	ldr	r3, [pc, #20]	; (80044c0 <prvIdleTask+0x2c>)
 80044aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80044b8:	e7f0      	b.n	800449c <prvIdleTask+0x8>
 80044ba:	bf00      	nop
 80044bc:	200008ec 	.word	0x200008ec
 80044c0:	e000ed04 	.word	0xe000ed04

080044c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044ca:	2300      	movs	r3, #0
 80044cc:	607b      	str	r3, [r7, #4]
 80044ce:	e00c      	b.n	80044ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	4613      	mov	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4413      	add	r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	4a12      	ldr	r2, [pc, #72]	; (8004524 <prvInitialiseTaskLists+0x60>)
 80044dc:	4413      	add	r3, r2
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fe fc6a 	bl	8002db8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	3301      	adds	r3, #1
 80044e8:	607b      	str	r3, [r7, #4]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2b37      	cmp	r3, #55	; 0x37
 80044ee:	d9ef      	bls.n	80044d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80044f0:	480d      	ldr	r0, [pc, #52]	; (8004528 <prvInitialiseTaskLists+0x64>)
 80044f2:	f7fe fc61 	bl	8002db8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80044f6:	480d      	ldr	r0, [pc, #52]	; (800452c <prvInitialiseTaskLists+0x68>)
 80044f8:	f7fe fc5e 	bl	8002db8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80044fc:	480c      	ldr	r0, [pc, #48]	; (8004530 <prvInitialiseTaskLists+0x6c>)
 80044fe:	f7fe fc5b 	bl	8002db8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004502:	480c      	ldr	r0, [pc, #48]	; (8004534 <prvInitialiseTaskLists+0x70>)
 8004504:	f7fe fc58 	bl	8002db8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004508:	480b      	ldr	r0, [pc, #44]	; (8004538 <prvInitialiseTaskLists+0x74>)
 800450a:	f7fe fc55 	bl	8002db8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800450e:	4b0b      	ldr	r3, [pc, #44]	; (800453c <prvInitialiseTaskLists+0x78>)
 8004510:	4a05      	ldr	r2, [pc, #20]	; (8004528 <prvInitialiseTaskLists+0x64>)
 8004512:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004514:	4b0a      	ldr	r3, [pc, #40]	; (8004540 <prvInitialiseTaskLists+0x7c>)
 8004516:	4a05      	ldr	r2, [pc, #20]	; (800452c <prvInitialiseTaskLists+0x68>)
 8004518:	601a      	str	r2, [r3, #0]
}
 800451a:	bf00      	nop
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	200008ec 	.word	0x200008ec
 8004528:	20000d4c 	.word	0x20000d4c
 800452c:	20000d60 	.word	0x20000d60
 8004530:	20000d7c 	.word	0x20000d7c
 8004534:	20000d90 	.word	0x20000d90
 8004538:	20000da8 	.word	0x20000da8
 800453c:	20000d74 	.word	0x20000d74
 8004540:	20000d78 	.word	0x20000d78

08004544 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800454a:	e019      	b.n	8004580 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800454c:	f000 fd4c 	bl	8004fe8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004550:	4b0f      	ldr	r3, [pc, #60]	; (8004590 <prvCheckTasksWaitingTermination+0x4c>)
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3304      	adds	r3, #4
 800455c:	4618      	mov	r0, r3
 800455e:	f7fe fcb1 	bl	8002ec4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004562:	4b0c      	ldr	r3, [pc, #48]	; (8004594 <prvCheckTasksWaitingTermination+0x50>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	3b01      	subs	r3, #1
 8004568:	4a0a      	ldr	r2, [pc, #40]	; (8004594 <prvCheckTasksWaitingTermination+0x50>)
 800456a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800456c:	4b0a      	ldr	r3, [pc, #40]	; (8004598 <prvCheckTasksWaitingTermination+0x54>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	3b01      	subs	r3, #1
 8004572:	4a09      	ldr	r2, [pc, #36]	; (8004598 <prvCheckTasksWaitingTermination+0x54>)
 8004574:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004576:	f000 fd65 	bl	8005044 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f80e 	bl	800459c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004580:	4b05      	ldr	r3, [pc, #20]	; (8004598 <prvCheckTasksWaitingTermination+0x54>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1e1      	bne.n	800454c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004588:	bf00      	nop
 800458a:	3708      	adds	r7, #8
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	20000d90 	.word	0x20000d90
 8004594:	20000dbc 	.word	0x20000dbc
 8004598:	20000da4 	.word	0x20000da4

0800459c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d108      	bne.n	80045c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b2:	4618      	mov	r0, r3
 80045b4:	f000 fed0 	bl	8005358 <vPortFree>
				vPortFree( pxTCB );
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 fecd 	bl	8005358 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80045be:	e017      	b.n	80045f0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d103      	bne.n	80045d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 fec4 	bl	8005358 <vPortFree>
	}
 80045d0:	e00e      	b.n	80045f0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d009      	beq.n	80045f0 <prvDeleteTCB+0x54>
 80045dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e0:	f383 8811 	msr	BASEPRI, r3
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	60fb      	str	r3, [r7, #12]
 80045ee:	e7fe      	b.n	80045ee <prvDeleteTCB+0x52>
	}
 80045f0:	bf00      	nop
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045fe:	4b0e      	ldr	r3, [pc, #56]	; (8004638 <prvResetNextTaskUnblockTime+0x40>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <prvResetNextTaskUnblockTime+0x14>
 8004608:	2301      	movs	r3, #1
 800460a:	e000      	b.n	800460e <prvResetNextTaskUnblockTime+0x16>
 800460c:	2300      	movs	r3, #0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d004      	beq.n	800461c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004612:	4b0a      	ldr	r3, [pc, #40]	; (800463c <prvResetNextTaskUnblockTime+0x44>)
 8004614:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004618:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800461a:	e008      	b.n	800462e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800461c:	4b06      	ldr	r3, [pc, #24]	; (8004638 <prvResetNextTaskUnblockTime+0x40>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	4a04      	ldr	r2, [pc, #16]	; (800463c <prvResetNextTaskUnblockTime+0x44>)
 800462c:	6013      	str	r3, [r2, #0]
}
 800462e:	bf00      	nop
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	bc80      	pop	{r7}
 8004636:	4770      	bx	lr
 8004638:	20000d74 	.word	0x20000d74
 800463c:	20000ddc 	.word	0x20000ddc

08004640 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004646:	4b0b      	ldr	r3, [pc, #44]	; (8004674 <xTaskGetSchedulerState+0x34>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d102      	bne.n	8004654 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800464e:	2301      	movs	r3, #1
 8004650:	607b      	str	r3, [r7, #4]
 8004652:	e008      	b.n	8004666 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004654:	4b08      	ldr	r3, [pc, #32]	; (8004678 <xTaskGetSchedulerState+0x38>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d102      	bne.n	8004662 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800465c:	2302      	movs	r3, #2
 800465e:	607b      	str	r3, [r7, #4]
 8004660:	e001      	b.n	8004666 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004662:	2300      	movs	r3, #0
 8004664:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004666:	687b      	ldr	r3, [r7, #4]
	}
 8004668:	4618      	mov	r0, r3
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	bc80      	pop	{r7}
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	20000dc8 	.word	0x20000dc8
 8004678:	20000de4 	.word	0x20000de4

0800467c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004688:	2300      	movs	r3, #0
 800468a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d054      	beq.n	800473c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004692:	4b2d      	ldr	r3, [pc, #180]	; (8004748 <xTaskPriorityDisinherit+0xcc>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	429a      	cmp	r2, r3
 800469a:	d009      	beq.n	80046b0 <xTaskPriorityDisinherit+0x34>
 800469c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a0:	f383 8811 	msr	BASEPRI, r3
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	60fb      	str	r3, [r7, #12]
 80046ae:	e7fe      	b.n	80046ae <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d109      	bne.n	80046cc <xTaskPriorityDisinherit+0x50>
 80046b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046bc:	f383 8811 	msr	BASEPRI, r3
 80046c0:	f3bf 8f6f 	isb	sy
 80046c4:	f3bf 8f4f 	dsb	sy
 80046c8:	60bb      	str	r3, [r7, #8]
 80046ca:	e7fe      	b.n	80046ca <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d0:	1e5a      	subs	r2, r3, #1
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046de:	429a      	cmp	r2, r3
 80046e0:	d02c      	beq.n	800473c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d128      	bne.n	800473c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	3304      	adds	r3, #4
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7fe fbe8 	bl	8002ec4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004700:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800470c:	4b0f      	ldr	r3, [pc, #60]	; (800474c <xTaskPriorityDisinherit+0xd0>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	429a      	cmp	r2, r3
 8004712:	d903      	bls.n	800471c <xTaskPriorityDisinherit+0xa0>
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004718:	4a0c      	ldr	r2, [pc, #48]	; (800474c <xTaskPriorityDisinherit+0xd0>)
 800471a:	6013      	str	r3, [r2, #0]
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004720:	4613      	mov	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4413      	add	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4a09      	ldr	r2, [pc, #36]	; (8004750 <xTaskPriorityDisinherit+0xd4>)
 800472a:	441a      	add	r2, r3
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	3304      	adds	r3, #4
 8004730:	4619      	mov	r1, r3
 8004732:	4610      	mov	r0, r2
 8004734:	f7fe fb6b 	bl	8002e0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004738:	2301      	movs	r3, #1
 800473a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800473c:	697b      	ldr	r3, [r7, #20]
	}
 800473e:	4618      	mov	r0, r3
 8004740:	3718      	adds	r7, #24
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	200008e8 	.word	0x200008e8
 800474c:	20000dc4 	.word	0x20000dc4
 8004750:	200008ec 	.word	0x200008ec

08004754 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800475e:	4b21      	ldr	r3, [pc, #132]	; (80047e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004764:	4b20      	ldr	r3, [pc, #128]	; (80047e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	3304      	adds	r3, #4
 800476a:	4618      	mov	r0, r3
 800476c:	f7fe fbaa 	bl	8002ec4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004776:	d10a      	bne.n	800478e <prvAddCurrentTaskToDelayedList+0x3a>
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d007      	beq.n	800478e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800477e:	4b1a      	ldr	r3, [pc, #104]	; (80047e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	3304      	adds	r3, #4
 8004784:	4619      	mov	r1, r3
 8004786:	4819      	ldr	r0, [pc, #100]	; (80047ec <prvAddCurrentTaskToDelayedList+0x98>)
 8004788:	f7fe fb41 	bl	8002e0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800478c:	e026      	b.n	80047dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4413      	add	r3, r2
 8004794:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004796:	4b14      	ldr	r3, [pc, #80]	; (80047e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d209      	bcs.n	80047ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047a6:	4b12      	ldr	r3, [pc, #72]	; (80047f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	4b0f      	ldr	r3, [pc, #60]	; (80047e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	3304      	adds	r3, #4
 80047b0:	4619      	mov	r1, r3
 80047b2:	4610      	mov	r0, r2
 80047b4:	f7fe fb4e 	bl	8002e54 <vListInsert>
}
 80047b8:	e010      	b.n	80047dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047ba:	4b0e      	ldr	r3, [pc, #56]	; (80047f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	4b0a      	ldr	r3, [pc, #40]	; (80047e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	3304      	adds	r3, #4
 80047c4:	4619      	mov	r1, r3
 80047c6:	4610      	mov	r0, r2
 80047c8:	f7fe fb44 	bl	8002e54 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80047cc:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68ba      	ldr	r2, [r7, #8]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d202      	bcs.n	80047dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80047d6:	4a08      	ldr	r2, [pc, #32]	; (80047f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	6013      	str	r3, [r2, #0]
}
 80047dc:	bf00      	nop
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	20000dc0 	.word	0x20000dc0
 80047e8:	200008e8 	.word	0x200008e8
 80047ec:	20000da8 	.word	0x20000da8
 80047f0:	20000d78 	.word	0x20000d78
 80047f4:	20000d74 	.word	0x20000d74
 80047f8:	20000ddc 	.word	0x20000ddc

080047fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b08a      	sub	sp, #40	; 0x28
 8004800:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004802:	2300      	movs	r3, #0
 8004804:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004806:	f000 fac3 	bl	8004d90 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800480a:	4b1c      	ldr	r3, [pc, #112]	; (800487c <xTimerCreateTimerTask+0x80>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d021      	beq.n	8004856 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004812:	2300      	movs	r3, #0
 8004814:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004816:	2300      	movs	r3, #0
 8004818:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800481a:	1d3a      	adds	r2, r7, #4
 800481c:	f107 0108 	add.w	r1, r7, #8
 8004820:	f107 030c 	add.w	r3, r7, #12
 8004824:	4618      	mov	r0, r3
 8004826:	f7fe faad 	bl	8002d84 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800482a:	6879      	ldr	r1, [r7, #4]
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	9202      	str	r2, [sp, #8]
 8004832:	9301      	str	r3, [sp, #4]
 8004834:	2302      	movs	r3, #2
 8004836:	9300      	str	r3, [sp, #0]
 8004838:	2300      	movs	r3, #0
 800483a:	460a      	mov	r2, r1
 800483c:	4910      	ldr	r1, [pc, #64]	; (8004880 <xTimerCreateTimerTask+0x84>)
 800483e:	4811      	ldr	r0, [pc, #68]	; (8004884 <xTimerCreateTimerTask+0x88>)
 8004840:	f7ff f8f8 	bl	8003a34 <xTaskCreateStatic>
 8004844:	4602      	mov	r2, r0
 8004846:	4b10      	ldr	r3, [pc, #64]	; (8004888 <xTimerCreateTimerTask+0x8c>)
 8004848:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800484a:	4b0f      	ldr	r3, [pc, #60]	; (8004888 <xTimerCreateTimerTask+0x8c>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004852:	2301      	movs	r3, #1
 8004854:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d109      	bne.n	8004870 <xTimerCreateTimerTask+0x74>
 800485c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004860:	f383 8811 	msr	BASEPRI, r3
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	613b      	str	r3, [r7, #16]
 800486e:	e7fe      	b.n	800486e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004870:	697b      	ldr	r3, [r7, #20]
}
 8004872:	4618      	mov	r0, r3
 8004874:	3718      	adds	r7, #24
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	20000e18 	.word	0x20000e18
 8004880:	08006214 	.word	0x08006214
 8004884:	080049a5 	.word	0x080049a5
 8004888:	20000e1c 	.word	0x20000e1c

0800488c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b08a      	sub	sp, #40	; 0x28
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
 8004898:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800489a:	2300      	movs	r3, #0
 800489c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d109      	bne.n	80048b8 <xTimerGenericCommand+0x2c>
 80048a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a8:	f383 8811 	msr	BASEPRI, r3
 80048ac:	f3bf 8f6f 	isb	sy
 80048b0:	f3bf 8f4f 	dsb	sy
 80048b4:	623b      	str	r3, [r7, #32]
 80048b6:	e7fe      	b.n	80048b6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80048b8:	4b19      	ldr	r3, [pc, #100]	; (8004920 <xTimerGenericCommand+0x94>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d02a      	beq.n	8004916 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	2b05      	cmp	r3, #5
 80048d0:	dc18      	bgt.n	8004904 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80048d2:	f7ff feb5 	bl	8004640 <xTaskGetSchedulerState>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d109      	bne.n	80048f0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80048dc:	4b10      	ldr	r3, [pc, #64]	; (8004920 <xTimerGenericCommand+0x94>)
 80048de:	6818      	ldr	r0, [r3, #0]
 80048e0:	f107 0110 	add.w	r1, r7, #16
 80048e4:	2300      	movs	r3, #0
 80048e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048e8:	f7fe fc50 	bl	800318c <xQueueGenericSend>
 80048ec:	6278      	str	r0, [r7, #36]	; 0x24
 80048ee:	e012      	b.n	8004916 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80048f0:	4b0b      	ldr	r3, [pc, #44]	; (8004920 <xTimerGenericCommand+0x94>)
 80048f2:	6818      	ldr	r0, [r3, #0]
 80048f4:	f107 0110 	add.w	r1, r7, #16
 80048f8:	2300      	movs	r3, #0
 80048fa:	2200      	movs	r2, #0
 80048fc:	f7fe fc46 	bl	800318c <xQueueGenericSend>
 8004900:	6278      	str	r0, [r7, #36]	; 0x24
 8004902:	e008      	b.n	8004916 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004904:	4b06      	ldr	r3, [pc, #24]	; (8004920 <xTimerGenericCommand+0x94>)
 8004906:	6818      	ldr	r0, [r3, #0]
 8004908:	f107 0110 	add.w	r1, r7, #16
 800490c:	2300      	movs	r3, #0
 800490e:	683a      	ldr	r2, [r7, #0]
 8004910:	f7fe fd36 	bl	8003380 <xQueueGenericSendFromISR>
 8004914:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004918:	4618      	mov	r0, r3
 800491a:	3728      	adds	r7, #40	; 0x28
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	20000e18 	.word	0x20000e18

08004924 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b088      	sub	sp, #32
 8004928:	af02      	add	r7, sp, #8
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800492e:	4b1c      	ldr	r3, [pc, #112]	; (80049a0 <prvProcessExpiredTimer+0x7c>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	3304      	adds	r3, #4
 800493c:	4618      	mov	r0, r3
 800493e:	f7fe fac1 	bl	8002ec4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d121      	bne.n	800498e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	699a      	ldr	r2, [r3, #24]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	18d1      	adds	r1, r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	6978      	ldr	r0, [r7, #20]
 8004958:	f000 f8c8 	bl	8004aec <prvInsertTimerInActiveList>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d015      	beq.n	800498e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004962:	2300      	movs	r3, #0
 8004964:	9300      	str	r3, [sp, #0]
 8004966:	2300      	movs	r3, #0
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	2100      	movs	r1, #0
 800496c:	6978      	ldr	r0, [r7, #20]
 800496e:	f7ff ff8d 	bl	800488c <xTimerGenericCommand>
 8004972:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d109      	bne.n	800498e <prvProcessExpiredTimer+0x6a>
 800497a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497e:	f383 8811 	msr	BASEPRI, r3
 8004982:	f3bf 8f6f 	isb	sy
 8004986:	f3bf 8f4f 	dsb	sy
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	e7fe      	b.n	800498c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	6978      	ldr	r0, [r7, #20]
 8004994:	4798      	blx	r3
}
 8004996:	bf00      	nop
 8004998:	3718      	adds	r7, #24
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	20000e10 	.word	0x20000e10

080049a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80049ac:	f107 0308 	add.w	r3, r7, #8
 80049b0:	4618      	mov	r0, r3
 80049b2:	f000 f857 	bl	8004a64 <prvGetNextExpireTime>
 80049b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	4619      	mov	r1, r3
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 f803 	bl	80049c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80049c2:	f000 f8d5 	bl	8004b70 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80049c6:	e7f1      	b.n	80049ac <prvTimerTask+0x8>

080049c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80049d2:	f7ff fa5b 	bl	8003e8c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80049d6:	f107 0308 	add.w	r3, r7, #8
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 f866 	bl	8004aac <prvSampleTimeNow>
 80049e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d130      	bne.n	8004a4a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10a      	bne.n	8004a04 <prvProcessTimerOrBlockTask+0x3c>
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d806      	bhi.n	8004a04 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80049f6:	f7ff fa57 	bl	8003ea8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80049fa:	68f9      	ldr	r1, [r7, #12]
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f7ff ff91 	bl	8004924 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004a02:	e024      	b.n	8004a4e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d008      	beq.n	8004a1c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004a0a:	4b13      	ldr	r3, [pc, #76]	; (8004a58 <prvProcessTimerOrBlockTask+0x90>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	bf0c      	ite	eq
 8004a14:	2301      	moveq	r3, #1
 8004a16:	2300      	movne	r3, #0
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004a1c:	4b0f      	ldr	r3, [pc, #60]	; (8004a5c <prvProcessTimerOrBlockTask+0x94>)
 8004a1e:	6818      	ldr	r0, [r3, #0]
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	4619      	mov	r1, r3
 8004a2a:	f7fe ffcf 	bl	80039cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004a2e:	f7ff fa3b 	bl	8003ea8 <xTaskResumeAll>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10a      	bne.n	8004a4e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004a38:	4b09      	ldr	r3, [pc, #36]	; (8004a60 <prvProcessTimerOrBlockTask+0x98>)
 8004a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	f3bf 8f4f 	dsb	sy
 8004a44:	f3bf 8f6f 	isb	sy
}
 8004a48:	e001      	b.n	8004a4e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004a4a:	f7ff fa2d 	bl	8003ea8 <xTaskResumeAll>
}
 8004a4e:	bf00      	nop
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	20000e14 	.word	0x20000e14
 8004a5c:	20000e18 	.word	0x20000e18
 8004a60:	e000ed04 	.word	0xe000ed04

08004a64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004a6c:	4b0e      	ldr	r3, [pc, #56]	; (8004aa8 <prvGetNextExpireTime+0x44>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	bf0c      	ite	eq
 8004a76:	2301      	moveq	r3, #1
 8004a78:	2300      	movne	r3, #0
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d105      	bne.n	8004a96 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a8a:	4b07      	ldr	r3, [pc, #28]	; (8004aa8 <prvGetNextExpireTime+0x44>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	60fb      	str	r3, [r7, #12]
 8004a94:	e001      	b.n	8004a9a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3714      	adds	r7, #20
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bc80      	pop	{r7}
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	20000e10 	.word	0x20000e10

08004aac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004ab4:	f7ff fa94 	bl	8003fe0 <xTaskGetTickCount>
 8004ab8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004aba:	4b0b      	ldr	r3, [pc, #44]	; (8004ae8 <prvSampleTimeNow+0x3c>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d205      	bcs.n	8004ad0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004ac4:	f000 f904 	bl	8004cd0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	601a      	str	r2, [r3, #0]
 8004ace:	e002      	b.n	8004ad6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004ad6:	4a04      	ldr	r2, [pc, #16]	; (8004ae8 <prvSampleTimeNow+0x3c>)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004adc:	68fb      	ldr	r3, [r7, #12]
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	20000e20 	.word	0x20000e20

08004aec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
 8004af8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004afa:	2300      	movs	r3, #0
 8004afc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d812      	bhi.n	8004b38 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	1ad2      	subs	r2, r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d302      	bcc.n	8004b26 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004b20:	2301      	movs	r3, #1
 8004b22:	617b      	str	r3, [r7, #20]
 8004b24:	e01b      	b.n	8004b5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004b26:	4b10      	ldr	r3, [pc, #64]	; (8004b68 <prvInsertTimerInActiveList+0x7c>)
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	3304      	adds	r3, #4
 8004b2e:	4619      	mov	r1, r3
 8004b30:	4610      	mov	r0, r2
 8004b32:	f7fe f98f 	bl	8002e54 <vListInsert>
 8004b36:	e012      	b.n	8004b5e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d206      	bcs.n	8004b4e <prvInsertTimerInActiveList+0x62>
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d302      	bcc.n	8004b4e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	617b      	str	r3, [r7, #20]
 8004b4c:	e007      	b.n	8004b5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b4e:	4b07      	ldr	r3, [pc, #28]	; (8004b6c <prvInsertTimerInActiveList+0x80>)
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	3304      	adds	r3, #4
 8004b56:	4619      	mov	r1, r3
 8004b58:	4610      	mov	r0, r2
 8004b5a:	f7fe f97b 	bl	8002e54 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004b5e:	697b      	ldr	r3, [r7, #20]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3718      	adds	r7, #24
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	20000e14 	.word	0x20000e14
 8004b6c:	20000e10 	.word	0x20000e10

08004b70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b08e      	sub	sp, #56	; 0x38
 8004b74:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b76:	e099      	b.n	8004cac <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	da17      	bge.n	8004bae <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004b7e:	1d3b      	adds	r3, r7, #4
 8004b80:	3304      	adds	r3, #4
 8004b82:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d109      	bne.n	8004b9e <prvProcessReceivedCommands+0x2e>
 8004b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8e:	f383 8811 	msr	BASEPRI, r3
 8004b92:	f3bf 8f6f 	isb	sy
 8004b96:	f3bf 8f4f 	dsb	sy
 8004b9a:	61fb      	str	r3, [r7, #28]
 8004b9c:	e7fe      	b.n	8004b9c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ba4:	6850      	ldr	r0, [r2, #4]
 8004ba6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ba8:	6892      	ldr	r2, [r2, #8]
 8004baa:	4611      	mov	r1, r2
 8004bac:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	db7a      	blt.n	8004caa <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d004      	beq.n	8004bca <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7fe f97d 	bl	8002ec4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004bca:	463b      	mov	r3, r7
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7ff ff6d 	bl	8004aac <prvSampleTimeNow>
 8004bd2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2b09      	cmp	r3, #9
 8004bd8:	d868      	bhi.n	8004cac <prvProcessReceivedCommands+0x13c>
 8004bda:	a201      	add	r2, pc, #4	; (adr r2, 8004be0 <prvProcessReceivedCommands+0x70>)
 8004bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be0:	08004c09 	.word	0x08004c09
 8004be4:	08004c09 	.word	0x08004c09
 8004be8:	08004c09 	.word	0x08004c09
 8004bec:	08004cad 	.word	0x08004cad
 8004bf0:	08004c63 	.word	0x08004c63
 8004bf4:	08004c99 	.word	0x08004c99
 8004bf8:	08004c09 	.word	0x08004c09
 8004bfc:	08004c09 	.word	0x08004c09
 8004c00:	08004cad 	.word	0x08004cad
 8004c04:	08004c63 	.word	0x08004c63
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	18d1      	adds	r1, r2, r3
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c16:	f7ff ff69 	bl	8004aec <prvInsertTimerInActiveList>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d045      	beq.n	8004cac <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c26:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2a:	69db      	ldr	r3, [r3, #28]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d13d      	bne.n	8004cac <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	441a      	add	r2, r3
 8004c38:	2300      	movs	r3, #0
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	2100      	movs	r1, #0
 8004c40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c42:	f7ff fe23 	bl	800488c <xTimerGenericCommand>
 8004c46:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004c48:	6a3b      	ldr	r3, [r7, #32]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d12e      	bne.n	8004cac <prvProcessReceivedCommands+0x13c>
 8004c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c52:	f383 8811 	msr	BASEPRI, r3
 8004c56:	f3bf 8f6f 	isb	sy
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	61bb      	str	r3, [r7, #24]
 8004c60:	e7fe      	b.n	8004c60 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c66:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d109      	bne.n	8004c84 <prvProcessReceivedCommands+0x114>
 8004c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c74:	f383 8811 	msr	BASEPRI, r3
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	617b      	str	r3, [r7, #20]
 8004c82:	e7fe      	b.n	8004c82 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c86:	699a      	ldr	r2, [r3, #24]
 8004c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8a:	18d1      	adds	r1, r2, r3
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c92:	f7ff ff2b 	bl	8004aec <prvInsertTimerInActiveList>
					break;
 8004c96:	e009      	b.n	8004cac <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d104      	bne.n	8004cac <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8004ca2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ca4:	f000 fb58 	bl	8005358 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004ca8:	e000      	b.n	8004cac <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004caa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004cac:	4b07      	ldr	r3, [pc, #28]	; (8004ccc <prvProcessReceivedCommands+0x15c>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	1d39      	adds	r1, r7, #4
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7fe fbf7 	bl	80034a8 <xQueueReceive>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f47f af5b 	bne.w	8004b78 <prvProcessReceivedCommands+0x8>
	}
}
 8004cc2:	bf00      	nop
 8004cc4:	3730      	adds	r7, #48	; 0x30
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	20000e18 	.word	0x20000e18

08004cd0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b088      	sub	sp, #32
 8004cd4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004cd6:	e044      	b.n	8004d62 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004cd8:	4b2b      	ldr	r3, [pc, #172]	; (8004d88 <prvSwitchTimerLists+0xb8>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ce2:	4b29      	ldr	r3, [pc, #164]	; (8004d88 <prvSwitchTimerLists+0xb8>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	3304      	adds	r3, #4
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7fe f8e7 	bl	8002ec4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d12d      	bne.n	8004d62 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d90e      	bls.n	8004d36 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d24:	4b18      	ldr	r3, [pc, #96]	; (8004d88 <prvSwitchTimerLists+0xb8>)
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	3304      	adds	r3, #4
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4610      	mov	r0, r2
 8004d30:	f7fe f890 	bl	8002e54 <vListInsert>
 8004d34:	e015      	b.n	8004d62 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d36:	2300      	movs	r3, #0
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	2100      	movs	r1, #0
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f7ff fda3 	bl	800488c <xTimerGenericCommand>
 8004d46:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d109      	bne.n	8004d62 <prvSwitchTimerLists+0x92>
 8004d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d52:	f383 8811 	msr	BASEPRI, r3
 8004d56:	f3bf 8f6f 	isb	sy
 8004d5a:	f3bf 8f4f 	dsb	sy
 8004d5e:	603b      	str	r3, [r7, #0]
 8004d60:	e7fe      	b.n	8004d60 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d62:	4b09      	ldr	r3, [pc, #36]	; (8004d88 <prvSwitchTimerLists+0xb8>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1b5      	bne.n	8004cd8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004d6c:	4b06      	ldr	r3, [pc, #24]	; (8004d88 <prvSwitchTimerLists+0xb8>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004d72:	4b06      	ldr	r3, [pc, #24]	; (8004d8c <prvSwitchTimerLists+0xbc>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a04      	ldr	r2, [pc, #16]	; (8004d88 <prvSwitchTimerLists+0xb8>)
 8004d78:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004d7a:	4a04      	ldr	r2, [pc, #16]	; (8004d8c <prvSwitchTimerLists+0xbc>)
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	6013      	str	r3, [r2, #0]
}
 8004d80:	bf00      	nop
 8004d82:	3718      	adds	r7, #24
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	20000e10 	.word	0x20000e10
 8004d8c:	20000e14 	.word	0x20000e14

08004d90 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004d96:	f000 f927 	bl	8004fe8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004d9a:	4b15      	ldr	r3, [pc, #84]	; (8004df0 <prvCheckForValidListAndQueue+0x60>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d120      	bne.n	8004de4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004da2:	4814      	ldr	r0, [pc, #80]	; (8004df4 <prvCheckForValidListAndQueue+0x64>)
 8004da4:	f7fe f808 	bl	8002db8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004da8:	4813      	ldr	r0, [pc, #76]	; (8004df8 <prvCheckForValidListAndQueue+0x68>)
 8004daa:	f7fe f805 	bl	8002db8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004dae:	4b13      	ldr	r3, [pc, #76]	; (8004dfc <prvCheckForValidListAndQueue+0x6c>)
 8004db0:	4a10      	ldr	r2, [pc, #64]	; (8004df4 <prvCheckForValidListAndQueue+0x64>)
 8004db2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004db4:	4b12      	ldr	r3, [pc, #72]	; (8004e00 <prvCheckForValidListAndQueue+0x70>)
 8004db6:	4a10      	ldr	r2, [pc, #64]	; (8004df8 <prvCheckForValidListAndQueue+0x68>)
 8004db8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004dba:	2300      	movs	r3, #0
 8004dbc:	9300      	str	r3, [sp, #0]
 8004dbe:	4b11      	ldr	r3, [pc, #68]	; (8004e04 <prvCheckForValidListAndQueue+0x74>)
 8004dc0:	4a11      	ldr	r2, [pc, #68]	; (8004e08 <prvCheckForValidListAndQueue+0x78>)
 8004dc2:	2110      	movs	r1, #16
 8004dc4:	200a      	movs	r0, #10
 8004dc6:	f7fe f90f 	bl	8002fe8 <xQueueGenericCreateStatic>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	4b08      	ldr	r3, [pc, #32]	; (8004df0 <prvCheckForValidListAndQueue+0x60>)
 8004dce:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004dd0:	4b07      	ldr	r3, [pc, #28]	; (8004df0 <prvCheckForValidListAndQueue+0x60>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d005      	beq.n	8004de4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004dd8:	4b05      	ldr	r3, [pc, #20]	; (8004df0 <prvCheckForValidListAndQueue+0x60>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	490b      	ldr	r1, [pc, #44]	; (8004e0c <prvCheckForValidListAndQueue+0x7c>)
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fe fdcc 	bl	800397c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004de4:	f000 f92e 	bl	8005044 <vPortExitCritical>
}
 8004de8:	bf00      	nop
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	20000e18 	.word	0x20000e18
 8004df4:	20000de8 	.word	0x20000de8
 8004df8:	20000dfc 	.word	0x20000dfc
 8004dfc:	20000e10 	.word	0x20000e10
 8004e00:	20000e14 	.word	0x20000e14
 8004e04:	20000ec4 	.word	0x20000ec4
 8004e08:	20000e24 	.word	0x20000e24
 8004e0c:	0800621c 	.word	0x0800621c

08004e10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	3b04      	subs	r3, #4
 8004e20:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	3b04      	subs	r3, #4
 8004e2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	f023 0201 	bic.w	r2, r3, #1
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	3b04      	subs	r3, #4
 8004e3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e40:	4a08      	ldr	r2, [pc, #32]	; (8004e64 <pxPortInitialiseStack+0x54>)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	3b14      	subs	r3, #20
 8004e4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	3b20      	subs	r3, #32
 8004e56:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e58:	68fb      	ldr	r3, [r7, #12]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bc80      	pop	{r7}
 8004e62:	4770      	bx	lr
 8004e64:	08004e69 	.word	0x08004e69

08004e68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004e72:	4b10      	ldr	r3, [pc, #64]	; (8004eb4 <prvTaskExitError+0x4c>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e7a:	d009      	beq.n	8004e90 <prvTaskExitError+0x28>
 8004e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e80:	f383 8811 	msr	BASEPRI, r3
 8004e84:	f3bf 8f6f 	isb	sy
 8004e88:	f3bf 8f4f 	dsb	sy
 8004e8c:	60fb      	str	r3, [r7, #12]
 8004e8e:	e7fe      	b.n	8004e8e <prvTaskExitError+0x26>
 8004e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e94:	f383 8811 	msr	BASEPRI, r3
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004ea2:	bf00      	nop
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d0fc      	beq.n	8004ea4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004eaa:	bf00      	nop
 8004eac:	3714      	adds	r7, #20
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bc80      	pop	{r7}
 8004eb2:	4770      	bx	lr
 8004eb4:	20000034 	.word	0x20000034
	...

08004ec0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ec0:	4b07      	ldr	r3, [pc, #28]	; (8004ee0 <pxCurrentTCBConst2>)
 8004ec2:	6819      	ldr	r1, [r3, #0]
 8004ec4:	6808      	ldr	r0, [r1, #0]
 8004ec6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004eca:	f380 8809 	msr	PSP, r0
 8004ece:	f3bf 8f6f 	isb	sy
 8004ed2:	f04f 0000 	mov.w	r0, #0
 8004ed6:	f380 8811 	msr	BASEPRI, r0
 8004eda:	f04e 0e0d 	orr.w	lr, lr, #13
 8004ede:	4770      	bx	lr

08004ee0 <pxCurrentTCBConst2>:
 8004ee0:	200008e8 	.word	0x200008e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ee4:	bf00      	nop
 8004ee6:	bf00      	nop

08004ee8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004ee8:	4806      	ldr	r0, [pc, #24]	; (8004f04 <prvPortStartFirstTask+0x1c>)
 8004eea:	6800      	ldr	r0, [r0, #0]
 8004eec:	6800      	ldr	r0, [r0, #0]
 8004eee:	f380 8808 	msr	MSP, r0
 8004ef2:	b662      	cpsie	i
 8004ef4:	b661      	cpsie	f
 8004ef6:	f3bf 8f4f 	dsb	sy
 8004efa:	f3bf 8f6f 	isb	sy
 8004efe:	df00      	svc	0
 8004f00:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004f02:	bf00      	nop
 8004f04:	e000ed08 	.word	0xe000ed08

08004f08 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f0e:	4b31      	ldr	r3, [pc, #196]	; (8004fd4 <xPortStartScheduler+0xcc>)
 8004f10:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	22ff      	movs	r2, #255	; 0xff
 8004f1e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f28:	78fb      	ldrb	r3, [r7, #3]
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004f30:	b2da      	uxtb	r2, r3
 8004f32:	4b29      	ldr	r3, [pc, #164]	; (8004fd8 <xPortStartScheduler+0xd0>)
 8004f34:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f36:	4b29      	ldr	r3, [pc, #164]	; (8004fdc <xPortStartScheduler+0xd4>)
 8004f38:	2207      	movs	r2, #7
 8004f3a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f3c:	e009      	b.n	8004f52 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004f3e:	4b27      	ldr	r3, [pc, #156]	; (8004fdc <xPortStartScheduler+0xd4>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	3b01      	subs	r3, #1
 8004f44:	4a25      	ldr	r2, [pc, #148]	; (8004fdc <xPortStartScheduler+0xd4>)
 8004f46:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004f48:	78fb      	ldrb	r3, [r7, #3]
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	005b      	lsls	r3, r3, #1
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f52:	78fb      	ldrb	r3, [r7, #3]
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f5a:	2b80      	cmp	r3, #128	; 0x80
 8004f5c:	d0ef      	beq.n	8004f3e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f5e:	4b1f      	ldr	r3, [pc, #124]	; (8004fdc <xPortStartScheduler+0xd4>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f1c3 0307 	rsb	r3, r3, #7
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	d009      	beq.n	8004f7e <xPortStartScheduler+0x76>
 8004f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6e:	f383 8811 	msr	BASEPRI, r3
 8004f72:	f3bf 8f6f 	isb	sy
 8004f76:	f3bf 8f4f 	dsb	sy
 8004f7a:	60bb      	str	r3, [r7, #8]
 8004f7c:	e7fe      	b.n	8004f7c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004f7e:	4b17      	ldr	r3, [pc, #92]	; (8004fdc <xPortStartScheduler+0xd4>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	021b      	lsls	r3, r3, #8
 8004f84:	4a15      	ldr	r2, [pc, #84]	; (8004fdc <xPortStartScheduler+0xd4>)
 8004f86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004f88:	4b14      	ldr	r3, [pc, #80]	; (8004fdc <xPortStartScheduler+0xd4>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f90:	4a12      	ldr	r2, [pc, #72]	; (8004fdc <xPortStartScheduler+0xd4>)
 8004f92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004f9c:	4b10      	ldr	r3, [pc, #64]	; (8004fe0 <xPortStartScheduler+0xd8>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a0f      	ldr	r2, [pc, #60]	; (8004fe0 <xPortStartScheduler+0xd8>)
 8004fa2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004fa6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004fa8:	4b0d      	ldr	r3, [pc, #52]	; (8004fe0 <xPortStartScheduler+0xd8>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a0c      	ldr	r2, [pc, #48]	; (8004fe0 <xPortStartScheduler+0xd8>)
 8004fae:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004fb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004fb4:	f000 f8b0 	bl	8005118 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004fb8:	4b0a      	ldr	r3, [pc, #40]	; (8004fe4 <xPortStartScheduler+0xdc>)
 8004fba:	2200      	movs	r2, #0
 8004fbc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004fbe:	f7ff ff93 	bl	8004ee8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004fc2:	f7ff f8d9 	bl	8004178 <vTaskSwitchContext>
	prvTaskExitError();
 8004fc6:	f7ff ff4f 	bl	8004e68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	e000e400 	.word	0xe000e400
 8004fd8:	20000f14 	.word	0x20000f14
 8004fdc:	20000f18 	.word	0x20000f18
 8004fe0:	e000ed20 	.word	0xe000ed20
 8004fe4:	20000034 	.word	0x20000034

08004fe8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff2:	f383 8811 	msr	BASEPRI, r3
 8004ff6:	f3bf 8f6f 	isb	sy
 8004ffa:	f3bf 8f4f 	dsb	sy
 8004ffe:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005000:	4b0e      	ldr	r3, [pc, #56]	; (800503c <vPortEnterCritical+0x54>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	3301      	adds	r3, #1
 8005006:	4a0d      	ldr	r2, [pc, #52]	; (800503c <vPortEnterCritical+0x54>)
 8005008:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800500a:	4b0c      	ldr	r3, [pc, #48]	; (800503c <vPortEnterCritical+0x54>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d10e      	bne.n	8005030 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005012:	4b0b      	ldr	r3, [pc, #44]	; (8005040 <vPortEnterCritical+0x58>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b00      	cmp	r3, #0
 800501a:	d009      	beq.n	8005030 <vPortEnterCritical+0x48>
 800501c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005020:	f383 8811 	msr	BASEPRI, r3
 8005024:	f3bf 8f6f 	isb	sy
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	603b      	str	r3, [r7, #0]
 800502e:	e7fe      	b.n	800502e <vPortEnterCritical+0x46>
	}
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	bc80      	pop	{r7}
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	20000034 	.word	0x20000034
 8005040:	e000ed04 	.word	0xe000ed04

08005044 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800504a:	4b10      	ldr	r3, [pc, #64]	; (800508c <vPortExitCritical+0x48>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d109      	bne.n	8005066 <vPortExitCritical+0x22>
 8005052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005056:	f383 8811 	msr	BASEPRI, r3
 800505a:	f3bf 8f6f 	isb	sy
 800505e:	f3bf 8f4f 	dsb	sy
 8005062:	607b      	str	r3, [r7, #4]
 8005064:	e7fe      	b.n	8005064 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005066:	4b09      	ldr	r3, [pc, #36]	; (800508c <vPortExitCritical+0x48>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	3b01      	subs	r3, #1
 800506c:	4a07      	ldr	r2, [pc, #28]	; (800508c <vPortExitCritical+0x48>)
 800506e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005070:	4b06      	ldr	r3, [pc, #24]	; (800508c <vPortExitCritical+0x48>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d104      	bne.n	8005082 <vPortExitCritical+0x3e>
 8005078:	2300      	movs	r3, #0
 800507a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005082:	bf00      	nop
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	bc80      	pop	{r7}
 800508a:	4770      	bx	lr
 800508c:	20000034 	.word	0x20000034

08005090 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005090:	f3ef 8009 	mrs	r0, PSP
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	4b0d      	ldr	r3, [pc, #52]	; (80050d0 <pxCurrentTCBConst>)
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80050a0:	6010      	str	r0, [r2, #0]
 80050a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80050a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80050aa:	f380 8811 	msr	BASEPRI, r0
 80050ae:	f7ff f863 	bl	8004178 <vTaskSwitchContext>
 80050b2:	f04f 0000 	mov.w	r0, #0
 80050b6:	f380 8811 	msr	BASEPRI, r0
 80050ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80050be:	6819      	ldr	r1, [r3, #0]
 80050c0:	6808      	ldr	r0, [r1, #0]
 80050c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80050c6:	f380 8809 	msr	PSP, r0
 80050ca:	f3bf 8f6f 	isb	sy
 80050ce:	4770      	bx	lr

080050d0 <pxCurrentTCBConst>:
 80050d0:	200008e8 	.word	0x200008e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80050d4:	bf00      	nop
 80050d6:	bf00      	nop

080050d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
	__asm volatile
 80050de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e2:	f383 8811 	msr	BASEPRI, r3
 80050e6:	f3bf 8f6f 	isb	sy
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80050f0:	f7fe ff84 	bl	8003ffc <xTaskIncrementTick>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80050fa:	4b06      	ldr	r3, [pc, #24]	; (8005114 <SysTick_Handler+0x3c>)
 80050fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	2300      	movs	r3, #0
 8005104:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800510c:	bf00      	nop
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	e000ed04 	.word	0xe000ed04

08005118 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005118:	b480      	push	{r7}
 800511a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800511c:	4b0a      	ldr	r3, [pc, #40]	; (8005148 <vPortSetupTimerInterrupt+0x30>)
 800511e:	2200      	movs	r2, #0
 8005120:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005122:	4b0a      	ldr	r3, [pc, #40]	; (800514c <vPortSetupTimerInterrupt+0x34>)
 8005124:	2200      	movs	r2, #0
 8005126:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005128:	4b09      	ldr	r3, [pc, #36]	; (8005150 <vPortSetupTimerInterrupt+0x38>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a09      	ldr	r2, [pc, #36]	; (8005154 <vPortSetupTimerInterrupt+0x3c>)
 800512e:	fba2 2303 	umull	r2, r3, r2, r3
 8005132:	099b      	lsrs	r3, r3, #6
 8005134:	4a08      	ldr	r2, [pc, #32]	; (8005158 <vPortSetupTimerInterrupt+0x40>)
 8005136:	3b01      	subs	r3, #1
 8005138:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800513a:	4b03      	ldr	r3, [pc, #12]	; (8005148 <vPortSetupTimerInterrupt+0x30>)
 800513c:	2207      	movs	r2, #7
 800513e:	601a      	str	r2, [r3, #0]
}
 8005140:	bf00      	nop
 8005142:	46bd      	mov	sp, r7
 8005144:	bc80      	pop	{r7}
 8005146:	4770      	bx	lr
 8005148:	e000e010 	.word	0xe000e010
 800514c:	e000e018 	.word	0xe000e018
 8005150:	20000028 	.word	0x20000028
 8005154:	10624dd3 	.word	0x10624dd3
 8005158:	e000e014 	.word	0xe000e014

0800515c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005162:	f3ef 8305 	mrs	r3, IPSR
 8005166:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2b0f      	cmp	r3, #15
 800516c:	d913      	bls.n	8005196 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800516e:	4a15      	ldr	r2, [pc, #84]	; (80051c4 <vPortValidateInterruptPriority+0x68>)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	4413      	add	r3, r2
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005178:	4b13      	ldr	r3, [pc, #76]	; (80051c8 <vPortValidateInterruptPriority+0x6c>)
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	7afa      	ldrb	r2, [r7, #11]
 800517e:	429a      	cmp	r2, r3
 8005180:	d209      	bcs.n	8005196 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005186:	f383 8811 	msr	BASEPRI, r3
 800518a:	f3bf 8f6f 	isb	sy
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	607b      	str	r3, [r7, #4]
 8005194:	e7fe      	b.n	8005194 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005196:	4b0d      	ldr	r3, [pc, #52]	; (80051cc <vPortValidateInterruptPriority+0x70>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800519e:	4b0c      	ldr	r3, [pc, #48]	; (80051d0 <vPortValidateInterruptPriority+0x74>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d909      	bls.n	80051ba <vPortValidateInterruptPriority+0x5e>
 80051a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051aa:	f383 8811 	msr	BASEPRI, r3
 80051ae:	f3bf 8f6f 	isb	sy
 80051b2:	f3bf 8f4f 	dsb	sy
 80051b6:	603b      	str	r3, [r7, #0]
 80051b8:	e7fe      	b.n	80051b8 <vPortValidateInterruptPriority+0x5c>
	}
 80051ba:	bf00      	nop
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	bc80      	pop	{r7}
 80051c2:	4770      	bx	lr
 80051c4:	e000e3f0 	.word	0xe000e3f0
 80051c8:	20000f14 	.word	0x20000f14
 80051cc:	e000ed0c 	.word	0xe000ed0c
 80051d0:	20000f18 	.word	0x20000f18

080051d4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b08a      	sub	sp, #40	; 0x28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80051dc:	2300      	movs	r3, #0
 80051de:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80051e0:	f7fe fe54 	bl	8003e8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80051e4:	4b57      	ldr	r3, [pc, #348]	; (8005344 <pvPortMalloc+0x170>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d101      	bne.n	80051f0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80051ec:	f000 f90c 	bl	8005408 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80051f0:	4b55      	ldr	r3, [pc, #340]	; (8005348 <pvPortMalloc+0x174>)
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4013      	ands	r3, r2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f040 808c 	bne.w	8005316 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d01c      	beq.n	800523e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005204:	2208      	movs	r2, #8
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4413      	add	r3, r2
 800520a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f003 0307 	and.w	r3, r3, #7
 8005212:	2b00      	cmp	r3, #0
 8005214:	d013      	beq.n	800523e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f023 0307 	bic.w	r3, r3, #7
 800521c:	3308      	adds	r3, #8
 800521e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f003 0307 	and.w	r3, r3, #7
 8005226:	2b00      	cmp	r3, #0
 8005228:	d009      	beq.n	800523e <pvPortMalloc+0x6a>
 800522a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522e:	f383 8811 	msr	BASEPRI, r3
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	617b      	str	r3, [r7, #20]
 800523c:	e7fe      	b.n	800523c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d068      	beq.n	8005316 <pvPortMalloc+0x142>
 8005244:	4b41      	ldr	r3, [pc, #260]	; (800534c <pvPortMalloc+0x178>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	429a      	cmp	r2, r3
 800524c:	d863      	bhi.n	8005316 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800524e:	4b40      	ldr	r3, [pc, #256]	; (8005350 <pvPortMalloc+0x17c>)
 8005250:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005252:	4b3f      	ldr	r3, [pc, #252]	; (8005350 <pvPortMalloc+0x17c>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005258:	e004      	b.n	8005264 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	429a      	cmp	r2, r3
 800526c:	d903      	bls.n	8005276 <pvPortMalloc+0xa2>
 800526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1f1      	bne.n	800525a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005276:	4b33      	ldr	r3, [pc, #204]	; (8005344 <pvPortMalloc+0x170>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800527c:	429a      	cmp	r2, r3
 800527e:	d04a      	beq.n	8005316 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005280:	6a3b      	ldr	r3, [r7, #32]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2208      	movs	r2, #8
 8005286:	4413      	add	r3, r2
 8005288:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800528a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	6a3b      	ldr	r3, [r7, #32]
 8005290:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005294:	685a      	ldr	r2, [r3, #4]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	1ad2      	subs	r2, r2, r3
 800529a:	2308      	movs	r3, #8
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	429a      	cmp	r2, r3
 80052a0:	d91e      	bls.n	80052e0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80052a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4413      	add	r3, r2
 80052a8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d009      	beq.n	80052c8 <pvPortMalloc+0xf4>
 80052b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b8:	f383 8811 	msr	BASEPRI, r3
 80052bc:	f3bf 8f6f 	isb	sy
 80052c0:	f3bf 8f4f 	dsb	sy
 80052c4:	613b      	str	r3, [r7, #16]
 80052c6:	e7fe      	b.n	80052c6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	1ad2      	subs	r2, r2, r3
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80052da:	69b8      	ldr	r0, [r7, #24]
 80052dc:	f000 f8f6 	bl	80054cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80052e0:	4b1a      	ldr	r3, [pc, #104]	; (800534c <pvPortMalloc+0x178>)
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	4a18      	ldr	r2, [pc, #96]	; (800534c <pvPortMalloc+0x178>)
 80052ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80052ee:	4b17      	ldr	r3, [pc, #92]	; (800534c <pvPortMalloc+0x178>)
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	4b18      	ldr	r3, [pc, #96]	; (8005354 <pvPortMalloc+0x180>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d203      	bcs.n	8005302 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80052fa:	4b14      	ldr	r3, [pc, #80]	; (800534c <pvPortMalloc+0x178>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a15      	ldr	r2, [pc, #84]	; (8005354 <pvPortMalloc+0x180>)
 8005300:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	4b10      	ldr	r3, [pc, #64]	; (8005348 <pvPortMalloc+0x174>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	431a      	orrs	r2, r3
 800530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005312:	2200      	movs	r2, #0
 8005314:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005316:	f7fe fdc7 	bl	8003ea8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	f003 0307 	and.w	r3, r3, #7
 8005320:	2b00      	cmp	r3, #0
 8005322:	d009      	beq.n	8005338 <pvPortMalloc+0x164>
 8005324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005328:	f383 8811 	msr	BASEPRI, r3
 800532c:	f3bf 8f6f 	isb	sy
 8005330:	f3bf 8f4f 	dsb	sy
 8005334:	60fb      	str	r3, [r7, #12]
 8005336:	e7fe      	b.n	8005336 <pvPortMalloc+0x162>
	return pvReturn;
 8005338:	69fb      	ldr	r3, [r7, #28]
}
 800533a:	4618      	mov	r0, r3
 800533c:	3728      	adds	r7, #40	; 0x28
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	20001b24 	.word	0x20001b24
 8005348:	20001b30 	.word	0x20001b30
 800534c:	20001b28 	.word	0x20001b28
 8005350:	20001b1c 	.word	0x20001b1c
 8005354:	20001b2c 	.word	0x20001b2c

08005358 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d046      	beq.n	80053f8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800536a:	2308      	movs	r3, #8
 800536c:	425b      	negs	r3, r3
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	4413      	add	r3, r2
 8005372:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	4b20      	ldr	r3, [pc, #128]	; (8005400 <vPortFree+0xa8>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4013      	ands	r3, r2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d109      	bne.n	800539a <vPortFree+0x42>
 8005386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538a:	f383 8811 	msr	BASEPRI, r3
 800538e:	f3bf 8f6f 	isb	sy
 8005392:	f3bf 8f4f 	dsb	sy
 8005396:	60fb      	str	r3, [r7, #12]
 8005398:	e7fe      	b.n	8005398 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d009      	beq.n	80053b6 <vPortFree+0x5e>
 80053a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a6:	f383 8811 	msr	BASEPRI, r3
 80053aa:	f3bf 8f6f 	isb	sy
 80053ae:	f3bf 8f4f 	dsb	sy
 80053b2:	60bb      	str	r3, [r7, #8]
 80053b4:	e7fe      	b.n	80053b4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	685a      	ldr	r2, [r3, #4]
 80053ba:	4b11      	ldr	r3, [pc, #68]	; (8005400 <vPortFree+0xa8>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4013      	ands	r3, r2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d019      	beq.n	80053f8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d115      	bne.n	80053f8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	685a      	ldr	r2, [r3, #4]
 80053d0:	4b0b      	ldr	r3, [pc, #44]	; (8005400 <vPortFree+0xa8>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	43db      	mvns	r3, r3
 80053d6:	401a      	ands	r2, r3
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80053dc:	f7fe fd56 	bl	8003e8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	4b07      	ldr	r3, [pc, #28]	; (8005404 <vPortFree+0xac>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4413      	add	r3, r2
 80053ea:	4a06      	ldr	r2, [pc, #24]	; (8005404 <vPortFree+0xac>)
 80053ec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80053ee:	6938      	ldr	r0, [r7, #16]
 80053f0:	f000 f86c 	bl	80054cc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80053f4:	f7fe fd58 	bl	8003ea8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80053f8:	bf00      	nop
 80053fa:	3718      	adds	r7, #24
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	20001b30 	.word	0x20001b30
 8005404:	20001b28 	.word	0x20001b28

08005408 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800540e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005412:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005414:	4b27      	ldr	r3, [pc, #156]	; (80054b4 <prvHeapInit+0xac>)
 8005416:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f003 0307 	and.w	r3, r3, #7
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00c      	beq.n	800543c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	3307      	adds	r3, #7
 8005426:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f023 0307 	bic.w	r3, r3, #7
 800542e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	4a1f      	ldr	r2, [pc, #124]	; (80054b4 <prvHeapInit+0xac>)
 8005438:	4413      	add	r3, r2
 800543a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005440:	4a1d      	ldr	r2, [pc, #116]	; (80054b8 <prvHeapInit+0xb0>)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005446:	4b1c      	ldr	r3, [pc, #112]	; (80054b8 <prvHeapInit+0xb0>)
 8005448:	2200      	movs	r2, #0
 800544a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	4413      	add	r3, r2
 8005452:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005454:	2208      	movs	r2, #8
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	1a9b      	subs	r3, r3, r2
 800545a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f023 0307 	bic.w	r3, r3, #7
 8005462:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	4a15      	ldr	r2, [pc, #84]	; (80054bc <prvHeapInit+0xb4>)
 8005468:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800546a:	4b14      	ldr	r3, [pc, #80]	; (80054bc <prvHeapInit+0xb4>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2200      	movs	r2, #0
 8005470:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005472:	4b12      	ldr	r3, [pc, #72]	; (80054bc <prvHeapInit+0xb4>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2200      	movs	r2, #0
 8005478:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	1ad2      	subs	r2, r2, r3
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005488:	4b0c      	ldr	r3, [pc, #48]	; (80054bc <prvHeapInit+0xb4>)
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	4a0a      	ldr	r2, [pc, #40]	; (80054c0 <prvHeapInit+0xb8>)
 8005496:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	4a09      	ldr	r2, [pc, #36]	; (80054c4 <prvHeapInit+0xbc>)
 800549e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80054a0:	4b09      	ldr	r3, [pc, #36]	; (80054c8 <prvHeapInit+0xc0>)
 80054a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80054a6:	601a      	str	r2, [r3, #0]
}
 80054a8:	bf00      	nop
 80054aa:	3714      	adds	r7, #20
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bc80      	pop	{r7}
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	20000f1c 	.word	0x20000f1c
 80054b8:	20001b1c 	.word	0x20001b1c
 80054bc:	20001b24 	.word	0x20001b24
 80054c0:	20001b2c 	.word	0x20001b2c
 80054c4:	20001b28 	.word	0x20001b28
 80054c8:	20001b30 	.word	0x20001b30

080054cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80054d4:	4b27      	ldr	r3, [pc, #156]	; (8005574 <prvInsertBlockIntoFreeList+0xa8>)
 80054d6:	60fb      	str	r3, [r7, #12]
 80054d8:	e002      	b.n	80054e0 <prvInsertBlockIntoFreeList+0x14>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	60fb      	str	r3, [r7, #12]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d8f7      	bhi.n	80054da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	4413      	add	r3, r2
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d108      	bne.n	800550e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	441a      	add	r2, r3
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	441a      	add	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	429a      	cmp	r2, r3
 8005520:	d118      	bne.n	8005554 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	4b14      	ldr	r3, [pc, #80]	; (8005578 <prvInsertBlockIntoFreeList+0xac>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	429a      	cmp	r2, r3
 800552c:	d00d      	beq.n	800554a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685a      	ldr	r2, [r3, #4]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	441a      	add	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	601a      	str	r2, [r3, #0]
 8005548:	e008      	b.n	800555c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800554a:	4b0b      	ldr	r3, [pc, #44]	; (8005578 <prvInsertBlockIntoFreeList+0xac>)
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	601a      	str	r2, [r3, #0]
 8005552:	e003      	b.n	800555c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	429a      	cmp	r2, r3
 8005562:	d002      	beq.n	800556a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800556a:	bf00      	nop
 800556c:	3714      	adds	r7, #20
 800556e:	46bd      	mov	sp, r7
 8005570:	bc80      	pop	{r7}
 8005572:	4770      	bx	lr
 8005574:	20001b1c 	.word	0x20001b1c
 8005578:	20001b24 	.word	0x20001b24

0800557c <atoi>:
 800557c:	220a      	movs	r2, #10
 800557e:	2100      	movs	r1, #0
 8005580:	f000 b92e 	b.w	80057e0 <strtol>

08005584 <__errno>:
 8005584:	4b01      	ldr	r3, [pc, #4]	; (800558c <__errno+0x8>)
 8005586:	6818      	ldr	r0, [r3, #0]
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	20000038 	.word	0x20000038

08005590 <__libc_init_array>:
 8005590:	b570      	push	{r4, r5, r6, lr}
 8005592:	2500      	movs	r5, #0
 8005594:	4e0c      	ldr	r6, [pc, #48]	; (80055c8 <__libc_init_array+0x38>)
 8005596:	4c0d      	ldr	r4, [pc, #52]	; (80055cc <__libc_init_array+0x3c>)
 8005598:	1ba4      	subs	r4, r4, r6
 800559a:	10a4      	asrs	r4, r4, #2
 800559c:	42a5      	cmp	r5, r4
 800559e:	d109      	bne.n	80055b4 <__libc_init_array+0x24>
 80055a0:	f000 fd46 	bl	8006030 <_init>
 80055a4:	2500      	movs	r5, #0
 80055a6:	4e0a      	ldr	r6, [pc, #40]	; (80055d0 <__libc_init_array+0x40>)
 80055a8:	4c0a      	ldr	r4, [pc, #40]	; (80055d4 <__libc_init_array+0x44>)
 80055aa:	1ba4      	subs	r4, r4, r6
 80055ac:	10a4      	asrs	r4, r4, #2
 80055ae:	42a5      	cmp	r5, r4
 80055b0:	d105      	bne.n	80055be <__libc_init_array+0x2e>
 80055b2:	bd70      	pop	{r4, r5, r6, pc}
 80055b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80055b8:	4798      	blx	r3
 80055ba:	3501      	adds	r5, #1
 80055bc:	e7ee      	b.n	800559c <__libc_init_array+0xc>
 80055be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80055c2:	4798      	blx	r3
 80055c4:	3501      	adds	r5, #1
 80055c6:	e7f2      	b.n	80055ae <__libc_init_array+0x1e>
 80055c8:	08006418 	.word	0x08006418
 80055cc:	08006418 	.word	0x08006418
 80055d0:	08006418 	.word	0x08006418
 80055d4:	0800641c 	.word	0x0800641c

080055d8 <memcpy>:
 80055d8:	b510      	push	{r4, lr}
 80055da:	1e43      	subs	r3, r0, #1
 80055dc:	440a      	add	r2, r1
 80055de:	4291      	cmp	r1, r2
 80055e0:	d100      	bne.n	80055e4 <memcpy+0xc>
 80055e2:	bd10      	pop	{r4, pc}
 80055e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055ec:	e7f7      	b.n	80055de <memcpy+0x6>

080055ee <memset>:
 80055ee:	4603      	mov	r3, r0
 80055f0:	4402      	add	r2, r0
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d100      	bne.n	80055f8 <memset+0xa>
 80055f6:	4770      	bx	lr
 80055f8:	f803 1b01 	strb.w	r1, [r3], #1
 80055fc:	e7f9      	b.n	80055f2 <memset+0x4>
	...

08005600 <siprintf>:
 8005600:	b40e      	push	{r1, r2, r3}
 8005602:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005606:	b500      	push	{lr}
 8005608:	b09c      	sub	sp, #112	; 0x70
 800560a:	ab1d      	add	r3, sp, #116	; 0x74
 800560c:	9002      	str	r0, [sp, #8]
 800560e:	9006      	str	r0, [sp, #24]
 8005610:	9107      	str	r1, [sp, #28]
 8005612:	9104      	str	r1, [sp, #16]
 8005614:	4808      	ldr	r0, [pc, #32]	; (8005638 <siprintf+0x38>)
 8005616:	4909      	ldr	r1, [pc, #36]	; (800563c <siprintf+0x3c>)
 8005618:	f853 2b04 	ldr.w	r2, [r3], #4
 800561c:	9105      	str	r1, [sp, #20]
 800561e:	6800      	ldr	r0, [r0, #0]
 8005620:	a902      	add	r1, sp, #8
 8005622:	9301      	str	r3, [sp, #4]
 8005624:	f000 fa10 	bl	8005a48 <_svfiprintf_r>
 8005628:	2200      	movs	r2, #0
 800562a:	9b02      	ldr	r3, [sp, #8]
 800562c:	701a      	strb	r2, [r3, #0]
 800562e:	b01c      	add	sp, #112	; 0x70
 8005630:	f85d eb04 	ldr.w	lr, [sp], #4
 8005634:	b003      	add	sp, #12
 8005636:	4770      	bx	lr
 8005638:	20000038 	.word	0x20000038
 800563c:	ffff0208 	.word	0xffff0208

08005640 <strtok>:
 8005640:	4b13      	ldr	r3, [pc, #76]	; (8005690 <strtok+0x50>)
 8005642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005646:	681d      	ldr	r5, [r3, #0]
 8005648:	4606      	mov	r6, r0
 800564a:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800564c:	460f      	mov	r7, r1
 800564e:	b9b4      	cbnz	r4, 800567e <strtok+0x3e>
 8005650:	2050      	movs	r0, #80	; 0x50
 8005652:	f000 f8df 	bl	8005814 <malloc>
 8005656:	65a8      	str	r0, [r5, #88]	; 0x58
 8005658:	e9c0 4400 	strd	r4, r4, [r0]
 800565c:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005660:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005664:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005668:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800566c:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005670:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005674:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005678:	6184      	str	r4, [r0, #24]
 800567a:	7704      	strb	r4, [r0, #28]
 800567c:	6244      	str	r4, [r0, #36]	; 0x24
 800567e:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8005680:	4639      	mov	r1, r7
 8005682:	4630      	mov	r0, r6
 8005684:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005688:	2301      	movs	r3, #1
 800568a:	f000 b803 	b.w	8005694 <__strtok_r>
 800568e:	bf00      	nop
 8005690:	20000038 	.word	0x20000038

08005694 <__strtok_r>:
 8005694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005696:	b918      	cbnz	r0, 80056a0 <__strtok_r+0xc>
 8005698:	6810      	ldr	r0, [r2, #0]
 800569a:	b908      	cbnz	r0, 80056a0 <__strtok_r+0xc>
 800569c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800569e:	4620      	mov	r0, r4
 80056a0:	4604      	mov	r4, r0
 80056a2:	460f      	mov	r7, r1
 80056a4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80056a8:	f817 6b01 	ldrb.w	r6, [r7], #1
 80056ac:	b91e      	cbnz	r6, 80056b6 <__strtok_r+0x22>
 80056ae:	b96d      	cbnz	r5, 80056cc <__strtok_r+0x38>
 80056b0:	6015      	str	r5, [r2, #0]
 80056b2:	4628      	mov	r0, r5
 80056b4:	e7f2      	b.n	800569c <__strtok_r+0x8>
 80056b6:	42b5      	cmp	r5, r6
 80056b8:	d1f6      	bne.n	80056a8 <__strtok_r+0x14>
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1ef      	bne.n	800569e <__strtok_r+0xa>
 80056be:	6014      	str	r4, [r2, #0]
 80056c0:	7003      	strb	r3, [r0, #0]
 80056c2:	e7eb      	b.n	800569c <__strtok_r+0x8>
 80056c4:	462b      	mov	r3, r5
 80056c6:	e00d      	b.n	80056e4 <__strtok_r+0x50>
 80056c8:	b926      	cbnz	r6, 80056d4 <__strtok_r+0x40>
 80056ca:	461c      	mov	r4, r3
 80056cc:	4623      	mov	r3, r4
 80056ce:	460f      	mov	r7, r1
 80056d0:	f813 5b01 	ldrb.w	r5, [r3], #1
 80056d4:	f817 6b01 	ldrb.w	r6, [r7], #1
 80056d8:	42b5      	cmp	r5, r6
 80056da:	d1f5      	bne.n	80056c8 <__strtok_r+0x34>
 80056dc:	2d00      	cmp	r5, #0
 80056de:	d0f1      	beq.n	80056c4 <__strtok_r+0x30>
 80056e0:	2100      	movs	r1, #0
 80056e2:	7021      	strb	r1, [r4, #0]
 80056e4:	6013      	str	r3, [r2, #0]
 80056e6:	e7d9      	b.n	800569c <__strtok_r+0x8>

080056e8 <_strtol_l.isra.0>:
 80056e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056ec:	4680      	mov	r8, r0
 80056ee:	4689      	mov	r9, r1
 80056f0:	4692      	mov	sl, r2
 80056f2:	461e      	mov	r6, r3
 80056f4:	460f      	mov	r7, r1
 80056f6:	463d      	mov	r5, r7
 80056f8:	9808      	ldr	r0, [sp, #32]
 80056fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80056fe:	f000 f885 	bl	800580c <__locale_ctype_ptr_l>
 8005702:	4420      	add	r0, r4
 8005704:	7843      	ldrb	r3, [r0, #1]
 8005706:	f013 0308 	ands.w	r3, r3, #8
 800570a:	d132      	bne.n	8005772 <_strtol_l.isra.0+0x8a>
 800570c:	2c2d      	cmp	r4, #45	; 0x2d
 800570e:	d132      	bne.n	8005776 <_strtol_l.isra.0+0x8e>
 8005710:	2201      	movs	r2, #1
 8005712:	787c      	ldrb	r4, [r7, #1]
 8005714:	1cbd      	adds	r5, r7, #2
 8005716:	2e00      	cmp	r6, #0
 8005718:	d05d      	beq.n	80057d6 <_strtol_l.isra.0+0xee>
 800571a:	2e10      	cmp	r6, #16
 800571c:	d109      	bne.n	8005732 <_strtol_l.isra.0+0x4a>
 800571e:	2c30      	cmp	r4, #48	; 0x30
 8005720:	d107      	bne.n	8005732 <_strtol_l.isra.0+0x4a>
 8005722:	782b      	ldrb	r3, [r5, #0]
 8005724:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005728:	2b58      	cmp	r3, #88	; 0x58
 800572a:	d14f      	bne.n	80057cc <_strtol_l.isra.0+0xe4>
 800572c:	2610      	movs	r6, #16
 800572e:	786c      	ldrb	r4, [r5, #1]
 8005730:	3502      	adds	r5, #2
 8005732:	2a00      	cmp	r2, #0
 8005734:	bf14      	ite	ne
 8005736:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800573a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800573e:	2700      	movs	r7, #0
 8005740:	fbb1 fcf6 	udiv	ip, r1, r6
 8005744:	4638      	mov	r0, r7
 8005746:	fb06 1e1c 	mls	lr, r6, ip, r1
 800574a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800574e:	2b09      	cmp	r3, #9
 8005750:	d817      	bhi.n	8005782 <_strtol_l.isra.0+0x9a>
 8005752:	461c      	mov	r4, r3
 8005754:	42a6      	cmp	r6, r4
 8005756:	dd23      	ble.n	80057a0 <_strtol_l.isra.0+0xb8>
 8005758:	1c7b      	adds	r3, r7, #1
 800575a:	d007      	beq.n	800576c <_strtol_l.isra.0+0x84>
 800575c:	4584      	cmp	ip, r0
 800575e:	d31c      	bcc.n	800579a <_strtol_l.isra.0+0xb2>
 8005760:	d101      	bne.n	8005766 <_strtol_l.isra.0+0x7e>
 8005762:	45a6      	cmp	lr, r4
 8005764:	db19      	blt.n	800579a <_strtol_l.isra.0+0xb2>
 8005766:	2701      	movs	r7, #1
 8005768:	fb00 4006 	mla	r0, r0, r6, r4
 800576c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005770:	e7eb      	b.n	800574a <_strtol_l.isra.0+0x62>
 8005772:	462f      	mov	r7, r5
 8005774:	e7bf      	b.n	80056f6 <_strtol_l.isra.0+0xe>
 8005776:	2c2b      	cmp	r4, #43	; 0x2b
 8005778:	bf04      	itt	eq
 800577a:	1cbd      	addeq	r5, r7, #2
 800577c:	787c      	ldrbeq	r4, [r7, #1]
 800577e:	461a      	mov	r2, r3
 8005780:	e7c9      	b.n	8005716 <_strtol_l.isra.0+0x2e>
 8005782:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005786:	2b19      	cmp	r3, #25
 8005788:	d801      	bhi.n	800578e <_strtol_l.isra.0+0xa6>
 800578a:	3c37      	subs	r4, #55	; 0x37
 800578c:	e7e2      	b.n	8005754 <_strtol_l.isra.0+0x6c>
 800578e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005792:	2b19      	cmp	r3, #25
 8005794:	d804      	bhi.n	80057a0 <_strtol_l.isra.0+0xb8>
 8005796:	3c57      	subs	r4, #87	; 0x57
 8005798:	e7dc      	b.n	8005754 <_strtol_l.isra.0+0x6c>
 800579a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800579e:	e7e5      	b.n	800576c <_strtol_l.isra.0+0x84>
 80057a0:	1c7b      	adds	r3, r7, #1
 80057a2:	d108      	bne.n	80057b6 <_strtol_l.isra.0+0xce>
 80057a4:	2322      	movs	r3, #34	; 0x22
 80057a6:	4608      	mov	r0, r1
 80057a8:	f8c8 3000 	str.w	r3, [r8]
 80057ac:	f1ba 0f00 	cmp.w	sl, #0
 80057b0:	d107      	bne.n	80057c2 <_strtol_l.isra.0+0xda>
 80057b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057b6:	b102      	cbz	r2, 80057ba <_strtol_l.isra.0+0xd2>
 80057b8:	4240      	negs	r0, r0
 80057ba:	f1ba 0f00 	cmp.w	sl, #0
 80057be:	d0f8      	beq.n	80057b2 <_strtol_l.isra.0+0xca>
 80057c0:	b10f      	cbz	r7, 80057c6 <_strtol_l.isra.0+0xde>
 80057c2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80057c6:	f8ca 9000 	str.w	r9, [sl]
 80057ca:	e7f2      	b.n	80057b2 <_strtol_l.isra.0+0xca>
 80057cc:	2430      	movs	r4, #48	; 0x30
 80057ce:	2e00      	cmp	r6, #0
 80057d0:	d1af      	bne.n	8005732 <_strtol_l.isra.0+0x4a>
 80057d2:	2608      	movs	r6, #8
 80057d4:	e7ad      	b.n	8005732 <_strtol_l.isra.0+0x4a>
 80057d6:	2c30      	cmp	r4, #48	; 0x30
 80057d8:	d0a3      	beq.n	8005722 <_strtol_l.isra.0+0x3a>
 80057da:	260a      	movs	r6, #10
 80057dc:	e7a9      	b.n	8005732 <_strtol_l.isra.0+0x4a>
	...

080057e0 <strtol>:
 80057e0:	4b08      	ldr	r3, [pc, #32]	; (8005804 <strtol+0x24>)
 80057e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057e4:	681c      	ldr	r4, [r3, #0]
 80057e6:	4d08      	ldr	r5, [pc, #32]	; (8005808 <strtol+0x28>)
 80057e8:	6a23      	ldr	r3, [r4, #32]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	bf08      	it	eq
 80057ee:	462b      	moveq	r3, r5
 80057f0:	9300      	str	r3, [sp, #0]
 80057f2:	4613      	mov	r3, r2
 80057f4:	460a      	mov	r2, r1
 80057f6:	4601      	mov	r1, r0
 80057f8:	4620      	mov	r0, r4
 80057fa:	f7ff ff75 	bl	80056e8 <_strtol_l.isra.0>
 80057fe:	b003      	add	sp, #12
 8005800:	bd30      	pop	{r4, r5, pc}
 8005802:	bf00      	nop
 8005804:	20000038 	.word	0x20000038
 8005808:	2000009c 	.word	0x2000009c

0800580c <__locale_ctype_ptr_l>:
 800580c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005810:	4770      	bx	lr
	...

08005814 <malloc>:
 8005814:	4b02      	ldr	r3, [pc, #8]	; (8005820 <malloc+0xc>)
 8005816:	4601      	mov	r1, r0
 8005818:	6818      	ldr	r0, [r3, #0]
 800581a:	f000 b861 	b.w	80058e0 <_malloc_r>
 800581e:	bf00      	nop
 8005820:	20000038 	.word	0x20000038

08005824 <__ascii_mbtowc>:
 8005824:	b082      	sub	sp, #8
 8005826:	b901      	cbnz	r1, 800582a <__ascii_mbtowc+0x6>
 8005828:	a901      	add	r1, sp, #4
 800582a:	b142      	cbz	r2, 800583e <__ascii_mbtowc+0x1a>
 800582c:	b14b      	cbz	r3, 8005842 <__ascii_mbtowc+0x1e>
 800582e:	7813      	ldrb	r3, [r2, #0]
 8005830:	600b      	str	r3, [r1, #0]
 8005832:	7812      	ldrb	r2, [r2, #0]
 8005834:	1c10      	adds	r0, r2, #0
 8005836:	bf18      	it	ne
 8005838:	2001      	movne	r0, #1
 800583a:	b002      	add	sp, #8
 800583c:	4770      	bx	lr
 800583e:	4610      	mov	r0, r2
 8005840:	e7fb      	b.n	800583a <__ascii_mbtowc+0x16>
 8005842:	f06f 0001 	mvn.w	r0, #1
 8005846:	e7f8      	b.n	800583a <__ascii_mbtowc+0x16>

08005848 <_free_r>:
 8005848:	b538      	push	{r3, r4, r5, lr}
 800584a:	4605      	mov	r5, r0
 800584c:	2900      	cmp	r1, #0
 800584e:	d043      	beq.n	80058d8 <_free_r+0x90>
 8005850:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005854:	1f0c      	subs	r4, r1, #4
 8005856:	2b00      	cmp	r3, #0
 8005858:	bfb8      	it	lt
 800585a:	18e4      	addlt	r4, r4, r3
 800585c:	f000 fbb8 	bl	8005fd0 <__malloc_lock>
 8005860:	4a1e      	ldr	r2, [pc, #120]	; (80058dc <_free_r+0x94>)
 8005862:	6813      	ldr	r3, [r2, #0]
 8005864:	4610      	mov	r0, r2
 8005866:	b933      	cbnz	r3, 8005876 <_free_r+0x2e>
 8005868:	6063      	str	r3, [r4, #4]
 800586a:	6014      	str	r4, [r2, #0]
 800586c:	4628      	mov	r0, r5
 800586e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005872:	f000 bbae 	b.w	8005fd2 <__malloc_unlock>
 8005876:	42a3      	cmp	r3, r4
 8005878:	d90b      	bls.n	8005892 <_free_r+0x4a>
 800587a:	6821      	ldr	r1, [r4, #0]
 800587c:	1862      	adds	r2, r4, r1
 800587e:	4293      	cmp	r3, r2
 8005880:	bf01      	itttt	eq
 8005882:	681a      	ldreq	r2, [r3, #0]
 8005884:	685b      	ldreq	r3, [r3, #4]
 8005886:	1852      	addeq	r2, r2, r1
 8005888:	6022      	streq	r2, [r4, #0]
 800588a:	6063      	str	r3, [r4, #4]
 800588c:	6004      	str	r4, [r0, #0]
 800588e:	e7ed      	b.n	800586c <_free_r+0x24>
 8005890:	4613      	mov	r3, r2
 8005892:	685a      	ldr	r2, [r3, #4]
 8005894:	b10a      	cbz	r2, 800589a <_free_r+0x52>
 8005896:	42a2      	cmp	r2, r4
 8005898:	d9fa      	bls.n	8005890 <_free_r+0x48>
 800589a:	6819      	ldr	r1, [r3, #0]
 800589c:	1858      	adds	r0, r3, r1
 800589e:	42a0      	cmp	r0, r4
 80058a0:	d10b      	bne.n	80058ba <_free_r+0x72>
 80058a2:	6820      	ldr	r0, [r4, #0]
 80058a4:	4401      	add	r1, r0
 80058a6:	1858      	adds	r0, r3, r1
 80058a8:	4282      	cmp	r2, r0
 80058aa:	6019      	str	r1, [r3, #0]
 80058ac:	d1de      	bne.n	800586c <_free_r+0x24>
 80058ae:	6810      	ldr	r0, [r2, #0]
 80058b0:	6852      	ldr	r2, [r2, #4]
 80058b2:	4401      	add	r1, r0
 80058b4:	6019      	str	r1, [r3, #0]
 80058b6:	605a      	str	r2, [r3, #4]
 80058b8:	e7d8      	b.n	800586c <_free_r+0x24>
 80058ba:	d902      	bls.n	80058c2 <_free_r+0x7a>
 80058bc:	230c      	movs	r3, #12
 80058be:	602b      	str	r3, [r5, #0]
 80058c0:	e7d4      	b.n	800586c <_free_r+0x24>
 80058c2:	6820      	ldr	r0, [r4, #0]
 80058c4:	1821      	adds	r1, r4, r0
 80058c6:	428a      	cmp	r2, r1
 80058c8:	bf01      	itttt	eq
 80058ca:	6811      	ldreq	r1, [r2, #0]
 80058cc:	6852      	ldreq	r2, [r2, #4]
 80058ce:	1809      	addeq	r1, r1, r0
 80058d0:	6021      	streq	r1, [r4, #0]
 80058d2:	6062      	str	r2, [r4, #4]
 80058d4:	605c      	str	r4, [r3, #4]
 80058d6:	e7c9      	b.n	800586c <_free_r+0x24>
 80058d8:	bd38      	pop	{r3, r4, r5, pc}
 80058da:	bf00      	nop
 80058dc:	20001b34 	.word	0x20001b34

080058e0 <_malloc_r>:
 80058e0:	b570      	push	{r4, r5, r6, lr}
 80058e2:	1ccd      	adds	r5, r1, #3
 80058e4:	f025 0503 	bic.w	r5, r5, #3
 80058e8:	3508      	adds	r5, #8
 80058ea:	2d0c      	cmp	r5, #12
 80058ec:	bf38      	it	cc
 80058ee:	250c      	movcc	r5, #12
 80058f0:	2d00      	cmp	r5, #0
 80058f2:	4606      	mov	r6, r0
 80058f4:	db01      	blt.n	80058fa <_malloc_r+0x1a>
 80058f6:	42a9      	cmp	r1, r5
 80058f8:	d903      	bls.n	8005902 <_malloc_r+0x22>
 80058fa:	230c      	movs	r3, #12
 80058fc:	6033      	str	r3, [r6, #0]
 80058fe:	2000      	movs	r0, #0
 8005900:	bd70      	pop	{r4, r5, r6, pc}
 8005902:	f000 fb65 	bl	8005fd0 <__malloc_lock>
 8005906:	4a21      	ldr	r2, [pc, #132]	; (800598c <_malloc_r+0xac>)
 8005908:	6814      	ldr	r4, [r2, #0]
 800590a:	4621      	mov	r1, r4
 800590c:	b991      	cbnz	r1, 8005934 <_malloc_r+0x54>
 800590e:	4c20      	ldr	r4, [pc, #128]	; (8005990 <_malloc_r+0xb0>)
 8005910:	6823      	ldr	r3, [r4, #0]
 8005912:	b91b      	cbnz	r3, 800591c <_malloc_r+0x3c>
 8005914:	4630      	mov	r0, r6
 8005916:	f000 fb17 	bl	8005f48 <_sbrk_r>
 800591a:	6020      	str	r0, [r4, #0]
 800591c:	4629      	mov	r1, r5
 800591e:	4630      	mov	r0, r6
 8005920:	f000 fb12 	bl	8005f48 <_sbrk_r>
 8005924:	1c43      	adds	r3, r0, #1
 8005926:	d124      	bne.n	8005972 <_malloc_r+0x92>
 8005928:	230c      	movs	r3, #12
 800592a:	4630      	mov	r0, r6
 800592c:	6033      	str	r3, [r6, #0]
 800592e:	f000 fb50 	bl	8005fd2 <__malloc_unlock>
 8005932:	e7e4      	b.n	80058fe <_malloc_r+0x1e>
 8005934:	680b      	ldr	r3, [r1, #0]
 8005936:	1b5b      	subs	r3, r3, r5
 8005938:	d418      	bmi.n	800596c <_malloc_r+0x8c>
 800593a:	2b0b      	cmp	r3, #11
 800593c:	d90f      	bls.n	800595e <_malloc_r+0x7e>
 800593e:	600b      	str	r3, [r1, #0]
 8005940:	18cc      	adds	r4, r1, r3
 8005942:	50cd      	str	r5, [r1, r3]
 8005944:	4630      	mov	r0, r6
 8005946:	f000 fb44 	bl	8005fd2 <__malloc_unlock>
 800594a:	f104 000b 	add.w	r0, r4, #11
 800594e:	1d23      	adds	r3, r4, #4
 8005950:	f020 0007 	bic.w	r0, r0, #7
 8005954:	1ac3      	subs	r3, r0, r3
 8005956:	d0d3      	beq.n	8005900 <_malloc_r+0x20>
 8005958:	425a      	negs	r2, r3
 800595a:	50e2      	str	r2, [r4, r3]
 800595c:	e7d0      	b.n	8005900 <_malloc_r+0x20>
 800595e:	684b      	ldr	r3, [r1, #4]
 8005960:	428c      	cmp	r4, r1
 8005962:	bf16      	itet	ne
 8005964:	6063      	strne	r3, [r4, #4]
 8005966:	6013      	streq	r3, [r2, #0]
 8005968:	460c      	movne	r4, r1
 800596a:	e7eb      	b.n	8005944 <_malloc_r+0x64>
 800596c:	460c      	mov	r4, r1
 800596e:	6849      	ldr	r1, [r1, #4]
 8005970:	e7cc      	b.n	800590c <_malloc_r+0x2c>
 8005972:	1cc4      	adds	r4, r0, #3
 8005974:	f024 0403 	bic.w	r4, r4, #3
 8005978:	42a0      	cmp	r0, r4
 800597a:	d005      	beq.n	8005988 <_malloc_r+0xa8>
 800597c:	1a21      	subs	r1, r4, r0
 800597e:	4630      	mov	r0, r6
 8005980:	f000 fae2 	bl	8005f48 <_sbrk_r>
 8005984:	3001      	adds	r0, #1
 8005986:	d0cf      	beq.n	8005928 <_malloc_r+0x48>
 8005988:	6025      	str	r5, [r4, #0]
 800598a:	e7db      	b.n	8005944 <_malloc_r+0x64>
 800598c:	20001b34 	.word	0x20001b34
 8005990:	20001b38 	.word	0x20001b38

08005994 <__ssputs_r>:
 8005994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005998:	688e      	ldr	r6, [r1, #8]
 800599a:	4682      	mov	sl, r0
 800599c:	429e      	cmp	r6, r3
 800599e:	460c      	mov	r4, r1
 80059a0:	4690      	mov	r8, r2
 80059a2:	4699      	mov	r9, r3
 80059a4:	d837      	bhi.n	8005a16 <__ssputs_r+0x82>
 80059a6:	898a      	ldrh	r2, [r1, #12]
 80059a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80059ac:	d031      	beq.n	8005a12 <__ssputs_r+0x7e>
 80059ae:	2302      	movs	r3, #2
 80059b0:	6825      	ldr	r5, [r4, #0]
 80059b2:	6909      	ldr	r1, [r1, #16]
 80059b4:	1a6f      	subs	r7, r5, r1
 80059b6:	6965      	ldr	r5, [r4, #20]
 80059b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80059bc:	fb95 f5f3 	sdiv	r5, r5, r3
 80059c0:	f109 0301 	add.w	r3, r9, #1
 80059c4:	443b      	add	r3, r7
 80059c6:	429d      	cmp	r5, r3
 80059c8:	bf38      	it	cc
 80059ca:	461d      	movcc	r5, r3
 80059cc:	0553      	lsls	r3, r2, #21
 80059ce:	d530      	bpl.n	8005a32 <__ssputs_r+0x9e>
 80059d0:	4629      	mov	r1, r5
 80059d2:	f7ff ff85 	bl	80058e0 <_malloc_r>
 80059d6:	4606      	mov	r6, r0
 80059d8:	b950      	cbnz	r0, 80059f0 <__ssputs_r+0x5c>
 80059da:	230c      	movs	r3, #12
 80059dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059e0:	f8ca 3000 	str.w	r3, [sl]
 80059e4:	89a3      	ldrh	r3, [r4, #12]
 80059e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059ea:	81a3      	strh	r3, [r4, #12]
 80059ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059f0:	463a      	mov	r2, r7
 80059f2:	6921      	ldr	r1, [r4, #16]
 80059f4:	f7ff fdf0 	bl	80055d8 <memcpy>
 80059f8:	89a3      	ldrh	r3, [r4, #12]
 80059fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80059fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a02:	81a3      	strh	r3, [r4, #12]
 8005a04:	6126      	str	r6, [r4, #16]
 8005a06:	443e      	add	r6, r7
 8005a08:	6026      	str	r6, [r4, #0]
 8005a0a:	464e      	mov	r6, r9
 8005a0c:	6165      	str	r5, [r4, #20]
 8005a0e:	1bed      	subs	r5, r5, r7
 8005a10:	60a5      	str	r5, [r4, #8]
 8005a12:	454e      	cmp	r6, r9
 8005a14:	d900      	bls.n	8005a18 <__ssputs_r+0x84>
 8005a16:	464e      	mov	r6, r9
 8005a18:	4632      	mov	r2, r6
 8005a1a:	4641      	mov	r1, r8
 8005a1c:	6820      	ldr	r0, [r4, #0]
 8005a1e:	f000 fabe 	bl	8005f9e <memmove>
 8005a22:	68a3      	ldr	r3, [r4, #8]
 8005a24:	2000      	movs	r0, #0
 8005a26:	1b9b      	subs	r3, r3, r6
 8005a28:	60a3      	str	r3, [r4, #8]
 8005a2a:	6823      	ldr	r3, [r4, #0]
 8005a2c:	441e      	add	r6, r3
 8005a2e:	6026      	str	r6, [r4, #0]
 8005a30:	e7dc      	b.n	80059ec <__ssputs_r+0x58>
 8005a32:	462a      	mov	r2, r5
 8005a34:	f000 face 	bl	8005fd4 <_realloc_r>
 8005a38:	4606      	mov	r6, r0
 8005a3a:	2800      	cmp	r0, #0
 8005a3c:	d1e2      	bne.n	8005a04 <__ssputs_r+0x70>
 8005a3e:	6921      	ldr	r1, [r4, #16]
 8005a40:	4650      	mov	r0, sl
 8005a42:	f7ff ff01 	bl	8005848 <_free_r>
 8005a46:	e7c8      	b.n	80059da <__ssputs_r+0x46>

08005a48 <_svfiprintf_r>:
 8005a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a4c:	461d      	mov	r5, r3
 8005a4e:	898b      	ldrh	r3, [r1, #12]
 8005a50:	b09d      	sub	sp, #116	; 0x74
 8005a52:	061f      	lsls	r7, r3, #24
 8005a54:	4680      	mov	r8, r0
 8005a56:	460c      	mov	r4, r1
 8005a58:	4616      	mov	r6, r2
 8005a5a:	d50f      	bpl.n	8005a7c <_svfiprintf_r+0x34>
 8005a5c:	690b      	ldr	r3, [r1, #16]
 8005a5e:	b96b      	cbnz	r3, 8005a7c <_svfiprintf_r+0x34>
 8005a60:	2140      	movs	r1, #64	; 0x40
 8005a62:	f7ff ff3d 	bl	80058e0 <_malloc_r>
 8005a66:	6020      	str	r0, [r4, #0]
 8005a68:	6120      	str	r0, [r4, #16]
 8005a6a:	b928      	cbnz	r0, 8005a78 <_svfiprintf_r+0x30>
 8005a6c:	230c      	movs	r3, #12
 8005a6e:	f8c8 3000 	str.w	r3, [r8]
 8005a72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a76:	e0c8      	b.n	8005c0a <_svfiprintf_r+0x1c2>
 8005a78:	2340      	movs	r3, #64	; 0x40
 8005a7a:	6163      	str	r3, [r4, #20]
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	9309      	str	r3, [sp, #36]	; 0x24
 8005a80:	2320      	movs	r3, #32
 8005a82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a86:	2330      	movs	r3, #48	; 0x30
 8005a88:	f04f 0b01 	mov.w	fp, #1
 8005a8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a90:	9503      	str	r5, [sp, #12]
 8005a92:	4637      	mov	r7, r6
 8005a94:	463d      	mov	r5, r7
 8005a96:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005a9a:	b10b      	cbz	r3, 8005aa0 <_svfiprintf_r+0x58>
 8005a9c:	2b25      	cmp	r3, #37	; 0x25
 8005a9e:	d13e      	bne.n	8005b1e <_svfiprintf_r+0xd6>
 8005aa0:	ebb7 0a06 	subs.w	sl, r7, r6
 8005aa4:	d00b      	beq.n	8005abe <_svfiprintf_r+0x76>
 8005aa6:	4653      	mov	r3, sl
 8005aa8:	4632      	mov	r2, r6
 8005aaa:	4621      	mov	r1, r4
 8005aac:	4640      	mov	r0, r8
 8005aae:	f7ff ff71 	bl	8005994 <__ssputs_r>
 8005ab2:	3001      	adds	r0, #1
 8005ab4:	f000 80a4 	beq.w	8005c00 <_svfiprintf_r+0x1b8>
 8005ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aba:	4453      	add	r3, sl
 8005abc:	9309      	str	r3, [sp, #36]	; 0x24
 8005abe:	783b      	ldrb	r3, [r7, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 809d 	beq.w	8005c00 <_svfiprintf_r+0x1b8>
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005acc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ad0:	9304      	str	r3, [sp, #16]
 8005ad2:	9307      	str	r3, [sp, #28]
 8005ad4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ad8:	931a      	str	r3, [sp, #104]	; 0x68
 8005ada:	462f      	mov	r7, r5
 8005adc:	2205      	movs	r2, #5
 8005ade:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005ae2:	4850      	ldr	r0, [pc, #320]	; (8005c24 <_svfiprintf_r+0x1dc>)
 8005ae4:	f000 fa4d 	bl	8005f82 <memchr>
 8005ae8:	9b04      	ldr	r3, [sp, #16]
 8005aea:	b9d0      	cbnz	r0, 8005b22 <_svfiprintf_r+0xda>
 8005aec:	06d9      	lsls	r1, r3, #27
 8005aee:	bf44      	itt	mi
 8005af0:	2220      	movmi	r2, #32
 8005af2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005af6:	071a      	lsls	r2, r3, #28
 8005af8:	bf44      	itt	mi
 8005afa:	222b      	movmi	r2, #43	; 0x2b
 8005afc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005b00:	782a      	ldrb	r2, [r5, #0]
 8005b02:	2a2a      	cmp	r2, #42	; 0x2a
 8005b04:	d015      	beq.n	8005b32 <_svfiprintf_r+0xea>
 8005b06:	462f      	mov	r7, r5
 8005b08:	2000      	movs	r0, #0
 8005b0a:	250a      	movs	r5, #10
 8005b0c:	9a07      	ldr	r2, [sp, #28]
 8005b0e:	4639      	mov	r1, r7
 8005b10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b14:	3b30      	subs	r3, #48	; 0x30
 8005b16:	2b09      	cmp	r3, #9
 8005b18:	d94d      	bls.n	8005bb6 <_svfiprintf_r+0x16e>
 8005b1a:	b1b8      	cbz	r0, 8005b4c <_svfiprintf_r+0x104>
 8005b1c:	e00f      	b.n	8005b3e <_svfiprintf_r+0xf6>
 8005b1e:	462f      	mov	r7, r5
 8005b20:	e7b8      	b.n	8005a94 <_svfiprintf_r+0x4c>
 8005b22:	4a40      	ldr	r2, [pc, #256]	; (8005c24 <_svfiprintf_r+0x1dc>)
 8005b24:	463d      	mov	r5, r7
 8005b26:	1a80      	subs	r0, r0, r2
 8005b28:	fa0b f000 	lsl.w	r0, fp, r0
 8005b2c:	4318      	orrs	r0, r3
 8005b2e:	9004      	str	r0, [sp, #16]
 8005b30:	e7d3      	b.n	8005ada <_svfiprintf_r+0x92>
 8005b32:	9a03      	ldr	r2, [sp, #12]
 8005b34:	1d11      	adds	r1, r2, #4
 8005b36:	6812      	ldr	r2, [r2, #0]
 8005b38:	9103      	str	r1, [sp, #12]
 8005b3a:	2a00      	cmp	r2, #0
 8005b3c:	db01      	blt.n	8005b42 <_svfiprintf_r+0xfa>
 8005b3e:	9207      	str	r2, [sp, #28]
 8005b40:	e004      	b.n	8005b4c <_svfiprintf_r+0x104>
 8005b42:	4252      	negs	r2, r2
 8005b44:	f043 0302 	orr.w	r3, r3, #2
 8005b48:	9207      	str	r2, [sp, #28]
 8005b4a:	9304      	str	r3, [sp, #16]
 8005b4c:	783b      	ldrb	r3, [r7, #0]
 8005b4e:	2b2e      	cmp	r3, #46	; 0x2e
 8005b50:	d10c      	bne.n	8005b6c <_svfiprintf_r+0x124>
 8005b52:	787b      	ldrb	r3, [r7, #1]
 8005b54:	2b2a      	cmp	r3, #42	; 0x2a
 8005b56:	d133      	bne.n	8005bc0 <_svfiprintf_r+0x178>
 8005b58:	9b03      	ldr	r3, [sp, #12]
 8005b5a:	3702      	adds	r7, #2
 8005b5c:	1d1a      	adds	r2, r3, #4
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	9203      	str	r2, [sp, #12]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	bfb8      	it	lt
 8005b66:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005b6a:	9305      	str	r3, [sp, #20]
 8005b6c:	4d2e      	ldr	r5, [pc, #184]	; (8005c28 <_svfiprintf_r+0x1e0>)
 8005b6e:	2203      	movs	r2, #3
 8005b70:	7839      	ldrb	r1, [r7, #0]
 8005b72:	4628      	mov	r0, r5
 8005b74:	f000 fa05 	bl	8005f82 <memchr>
 8005b78:	b138      	cbz	r0, 8005b8a <_svfiprintf_r+0x142>
 8005b7a:	2340      	movs	r3, #64	; 0x40
 8005b7c:	1b40      	subs	r0, r0, r5
 8005b7e:	fa03 f000 	lsl.w	r0, r3, r0
 8005b82:	9b04      	ldr	r3, [sp, #16]
 8005b84:	3701      	adds	r7, #1
 8005b86:	4303      	orrs	r3, r0
 8005b88:	9304      	str	r3, [sp, #16]
 8005b8a:	7839      	ldrb	r1, [r7, #0]
 8005b8c:	2206      	movs	r2, #6
 8005b8e:	4827      	ldr	r0, [pc, #156]	; (8005c2c <_svfiprintf_r+0x1e4>)
 8005b90:	1c7e      	adds	r6, r7, #1
 8005b92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b96:	f000 f9f4 	bl	8005f82 <memchr>
 8005b9a:	2800      	cmp	r0, #0
 8005b9c:	d038      	beq.n	8005c10 <_svfiprintf_r+0x1c8>
 8005b9e:	4b24      	ldr	r3, [pc, #144]	; (8005c30 <_svfiprintf_r+0x1e8>)
 8005ba0:	bb13      	cbnz	r3, 8005be8 <_svfiprintf_r+0x1a0>
 8005ba2:	9b03      	ldr	r3, [sp, #12]
 8005ba4:	3307      	adds	r3, #7
 8005ba6:	f023 0307 	bic.w	r3, r3, #7
 8005baa:	3308      	adds	r3, #8
 8005bac:	9303      	str	r3, [sp, #12]
 8005bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bb0:	444b      	add	r3, r9
 8005bb2:	9309      	str	r3, [sp, #36]	; 0x24
 8005bb4:	e76d      	b.n	8005a92 <_svfiprintf_r+0x4a>
 8005bb6:	fb05 3202 	mla	r2, r5, r2, r3
 8005bba:	2001      	movs	r0, #1
 8005bbc:	460f      	mov	r7, r1
 8005bbe:	e7a6      	b.n	8005b0e <_svfiprintf_r+0xc6>
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	250a      	movs	r5, #10
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	3701      	adds	r7, #1
 8005bc8:	9305      	str	r3, [sp, #20]
 8005bca:	4638      	mov	r0, r7
 8005bcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bd0:	3a30      	subs	r2, #48	; 0x30
 8005bd2:	2a09      	cmp	r2, #9
 8005bd4:	d903      	bls.n	8005bde <_svfiprintf_r+0x196>
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d0c8      	beq.n	8005b6c <_svfiprintf_r+0x124>
 8005bda:	9105      	str	r1, [sp, #20]
 8005bdc:	e7c6      	b.n	8005b6c <_svfiprintf_r+0x124>
 8005bde:	fb05 2101 	mla	r1, r5, r1, r2
 8005be2:	2301      	movs	r3, #1
 8005be4:	4607      	mov	r7, r0
 8005be6:	e7f0      	b.n	8005bca <_svfiprintf_r+0x182>
 8005be8:	ab03      	add	r3, sp, #12
 8005bea:	9300      	str	r3, [sp, #0]
 8005bec:	4622      	mov	r2, r4
 8005bee:	4b11      	ldr	r3, [pc, #68]	; (8005c34 <_svfiprintf_r+0x1ec>)
 8005bf0:	a904      	add	r1, sp, #16
 8005bf2:	4640      	mov	r0, r8
 8005bf4:	f3af 8000 	nop.w
 8005bf8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005bfc:	4681      	mov	r9, r0
 8005bfe:	d1d6      	bne.n	8005bae <_svfiprintf_r+0x166>
 8005c00:	89a3      	ldrh	r3, [r4, #12]
 8005c02:	065b      	lsls	r3, r3, #25
 8005c04:	f53f af35 	bmi.w	8005a72 <_svfiprintf_r+0x2a>
 8005c08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c0a:	b01d      	add	sp, #116	; 0x74
 8005c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c10:	ab03      	add	r3, sp, #12
 8005c12:	9300      	str	r3, [sp, #0]
 8005c14:	4622      	mov	r2, r4
 8005c16:	4b07      	ldr	r3, [pc, #28]	; (8005c34 <_svfiprintf_r+0x1ec>)
 8005c18:	a904      	add	r1, sp, #16
 8005c1a:	4640      	mov	r0, r8
 8005c1c:	f000 f882 	bl	8005d24 <_printf_i>
 8005c20:	e7ea      	b.n	8005bf8 <_svfiprintf_r+0x1b0>
 8005c22:	bf00      	nop
 8005c24:	080062e2 	.word	0x080062e2
 8005c28:	080062e8 	.word	0x080062e8
 8005c2c:	080062ec 	.word	0x080062ec
 8005c30:	00000000 	.word	0x00000000
 8005c34:	08005995 	.word	0x08005995

08005c38 <_printf_common>:
 8005c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c3c:	4691      	mov	r9, r2
 8005c3e:	461f      	mov	r7, r3
 8005c40:	688a      	ldr	r2, [r1, #8]
 8005c42:	690b      	ldr	r3, [r1, #16]
 8005c44:	4606      	mov	r6, r0
 8005c46:	4293      	cmp	r3, r2
 8005c48:	bfb8      	it	lt
 8005c4a:	4613      	movlt	r3, r2
 8005c4c:	f8c9 3000 	str.w	r3, [r9]
 8005c50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c54:	460c      	mov	r4, r1
 8005c56:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c5a:	b112      	cbz	r2, 8005c62 <_printf_common+0x2a>
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	f8c9 3000 	str.w	r3, [r9]
 8005c62:	6823      	ldr	r3, [r4, #0]
 8005c64:	0699      	lsls	r1, r3, #26
 8005c66:	bf42      	ittt	mi
 8005c68:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005c6c:	3302      	addmi	r3, #2
 8005c6e:	f8c9 3000 	strmi.w	r3, [r9]
 8005c72:	6825      	ldr	r5, [r4, #0]
 8005c74:	f015 0506 	ands.w	r5, r5, #6
 8005c78:	d107      	bne.n	8005c8a <_printf_common+0x52>
 8005c7a:	f104 0a19 	add.w	sl, r4, #25
 8005c7e:	68e3      	ldr	r3, [r4, #12]
 8005c80:	f8d9 2000 	ldr.w	r2, [r9]
 8005c84:	1a9b      	subs	r3, r3, r2
 8005c86:	42ab      	cmp	r3, r5
 8005c88:	dc29      	bgt.n	8005cde <_printf_common+0xa6>
 8005c8a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005c8e:	6822      	ldr	r2, [r4, #0]
 8005c90:	3300      	adds	r3, #0
 8005c92:	bf18      	it	ne
 8005c94:	2301      	movne	r3, #1
 8005c96:	0692      	lsls	r2, r2, #26
 8005c98:	d42e      	bmi.n	8005cf8 <_printf_common+0xc0>
 8005c9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c9e:	4639      	mov	r1, r7
 8005ca0:	4630      	mov	r0, r6
 8005ca2:	47c0      	blx	r8
 8005ca4:	3001      	adds	r0, #1
 8005ca6:	d021      	beq.n	8005cec <_printf_common+0xb4>
 8005ca8:	6823      	ldr	r3, [r4, #0]
 8005caa:	68e5      	ldr	r5, [r4, #12]
 8005cac:	f003 0306 	and.w	r3, r3, #6
 8005cb0:	2b04      	cmp	r3, #4
 8005cb2:	bf18      	it	ne
 8005cb4:	2500      	movne	r5, #0
 8005cb6:	f8d9 2000 	ldr.w	r2, [r9]
 8005cba:	f04f 0900 	mov.w	r9, #0
 8005cbe:	bf08      	it	eq
 8005cc0:	1aad      	subeq	r5, r5, r2
 8005cc2:	68a3      	ldr	r3, [r4, #8]
 8005cc4:	6922      	ldr	r2, [r4, #16]
 8005cc6:	bf08      	it	eq
 8005cc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	bfc4      	itt	gt
 8005cd0:	1a9b      	subgt	r3, r3, r2
 8005cd2:	18ed      	addgt	r5, r5, r3
 8005cd4:	341a      	adds	r4, #26
 8005cd6:	454d      	cmp	r5, r9
 8005cd8:	d11a      	bne.n	8005d10 <_printf_common+0xd8>
 8005cda:	2000      	movs	r0, #0
 8005cdc:	e008      	b.n	8005cf0 <_printf_common+0xb8>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	4652      	mov	r2, sl
 8005ce2:	4639      	mov	r1, r7
 8005ce4:	4630      	mov	r0, r6
 8005ce6:	47c0      	blx	r8
 8005ce8:	3001      	adds	r0, #1
 8005cea:	d103      	bne.n	8005cf4 <_printf_common+0xbc>
 8005cec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cf4:	3501      	adds	r5, #1
 8005cf6:	e7c2      	b.n	8005c7e <_printf_common+0x46>
 8005cf8:	2030      	movs	r0, #48	; 0x30
 8005cfa:	18e1      	adds	r1, r4, r3
 8005cfc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d00:	1c5a      	adds	r2, r3, #1
 8005d02:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d06:	4422      	add	r2, r4
 8005d08:	3302      	adds	r3, #2
 8005d0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d0e:	e7c4      	b.n	8005c9a <_printf_common+0x62>
 8005d10:	2301      	movs	r3, #1
 8005d12:	4622      	mov	r2, r4
 8005d14:	4639      	mov	r1, r7
 8005d16:	4630      	mov	r0, r6
 8005d18:	47c0      	blx	r8
 8005d1a:	3001      	adds	r0, #1
 8005d1c:	d0e6      	beq.n	8005cec <_printf_common+0xb4>
 8005d1e:	f109 0901 	add.w	r9, r9, #1
 8005d22:	e7d8      	b.n	8005cd6 <_printf_common+0x9e>

08005d24 <_printf_i>:
 8005d24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d28:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005d2c:	460c      	mov	r4, r1
 8005d2e:	7e09      	ldrb	r1, [r1, #24]
 8005d30:	b085      	sub	sp, #20
 8005d32:	296e      	cmp	r1, #110	; 0x6e
 8005d34:	4617      	mov	r7, r2
 8005d36:	4606      	mov	r6, r0
 8005d38:	4698      	mov	r8, r3
 8005d3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d3c:	f000 80b3 	beq.w	8005ea6 <_printf_i+0x182>
 8005d40:	d822      	bhi.n	8005d88 <_printf_i+0x64>
 8005d42:	2963      	cmp	r1, #99	; 0x63
 8005d44:	d036      	beq.n	8005db4 <_printf_i+0x90>
 8005d46:	d80a      	bhi.n	8005d5e <_printf_i+0x3a>
 8005d48:	2900      	cmp	r1, #0
 8005d4a:	f000 80b9 	beq.w	8005ec0 <_printf_i+0x19c>
 8005d4e:	2958      	cmp	r1, #88	; 0x58
 8005d50:	f000 8083 	beq.w	8005e5a <_printf_i+0x136>
 8005d54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d58:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005d5c:	e032      	b.n	8005dc4 <_printf_i+0xa0>
 8005d5e:	2964      	cmp	r1, #100	; 0x64
 8005d60:	d001      	beq.n	8005d66 <_printf_i+0x42>
 8005d62:	2969      	cmp	r1, #105	; 0x69
 8005d64:	d1f6      	bne.n	8005d54 <_printf_i+0x30>
 8005d66:	6820      	ldr	r0, [r4, #0]
 8005d68:	6813      	ldr	r3, [r2, #0]
 8005d6a:	0605      	lsls	r5, r0, #24
 8005d6c:	f103 0104 	add.w	r1, r3, #4
 8005d70:	d52a      	bpl.n	8005dc8 <_printf_i+0xa4>
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6011      	str	r1, [r2, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	da03      	bge.n	8005d82 <_printf_i+0x5e>
 8005d7a:	222d      	movs	r2, #45	; 0x2d
 8005d7c:	425b      	negs	r3, r3
 8005d7e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005d82:	486f      	ldr	r0, [pc, #444]	; (8005f40 <_printf_i+0x21c>)
 8005d84:	220a      	movs	r2, #10
 8005d86:	e039      	b.n	8005dfc <_printf_i+0xd8>
 8005d88:	2973      	cmp	r1, #115	; 0x73
 8005d8a:	f000 809d 	beq.w	8005ec8 <_printf_i+0x1a4>
 8005d8e:	d808      	bhi.n	8005da2 <_printf_i+0x7e>
 8005d90:	296f      	cmp	r1, #111	; 0x6f
 8005d92:	d020      	beq.n	8005dd6 <_printf_i+0xb2>
 8005d94:	2970      	cmp	r1, #112	; 0x70
 8005d96:	d1dd      	bne.n	8005d54 <_printf_i+0x30>
 8005d98:	6823      	ldr	r3, [r4, #0]
 8005d9a:	f043 0320 	orr.w	r3, r3, #32
 8005d9e:	6023      	str	r3, [r4, #0]
 8005da0:	e003      	b.n	8005daa <_printf_i+0x86>
 8005da2:	2975      	cmp	r1, #117	; 0x75
 8005da4:	d017      	beq.n	8005dd6 <_printf_i+0xb2>
 8005da6:	2978      	cmp	r1, #120	; 0x78
 8005da8:	d1d4      	bne.n	8005d54 <_printf_i+0x30>
 8005daa:	2378      	movs	r3, #120	; 0x78
 8005dac:	4865      	ldr	r0, [pc, #404]	; (8005f44 <_printf_i+0x220>)
 8005dae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005db2:	e055      	b.n	8005e60 <_printf_i+0x13c>
 8005db4:	6813      	ldr	r3, [r2, #0]
 8005db6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dba:	1d19      	adds	r1, r3, #4
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	6011      	str	r1, [r2, #0]
 8005dc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e08c      	b.n	8005ee2 <_printf_i+0x1be>
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005dce:	6011      	str	r1, [r2, #0]
 8005dd0:	bf18      	it	ne
 8005dd2:	b21b      	sxthne	r3, r3
 8005dd4:	e7cf      	b.n	8005d76 <_printf_i+0x52>
 8005dd6:	6813      	ldr	r3, [r2, #0]
 8005dd8:	6825      	ldr	r5, [r4, #0]
 8005dda:	1d18      	adds	r0, r3, #4
 8005ddc:	6010      	str	r0, [r2, #0]
 8005dde:	0628      	lsls	r0, r5, #24
 8005de0:	d501      	bpl.n	8005de6 <_printf_i+0xc2>
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	e002      	b.n	8005dec <_printf_i+0xc8>
 8005de6:	0668      	lsls	r0, r5, #25
 8005de8:	d5fb      	bpl.n	8005de2 <_printf_i+0xbe>
 8005dea:	881b      	ldrh	r3, [r3, #0]
 8005dec:	296f      	cmp	r1, #111	; 0x6f
 8005dee:	bf14      	ite	ne
 8005df0:	220a      	movne	r2, #10
 8005df2:	2208      	moveq	r2, #8
 8005df4:	4852      	ldr	r0, [pc, #328]	; (8005f40 <_printf_i+0x21c>)
 8005df6:	2100      	movs	r1, #0
 8005df8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005dfc:	6865      	ldr	r5, [r4, #4]
 8005dfe:	2d00      	cmp	r5, #0
 8005e00:	60a5      	str	r5, [r4, #8]
 8005e02:	f2c0 8095 	blt.w	8005f30 <_printf_i+0x20c>
 8005e06:	6821      	ldr	r1, [r4, #0]
 8005e08:	f021 0104 	bic.w	r1, r1, #4
 8005e0c:	6021      	str	r1, [r4, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d13d      	bne.n	8005e8e <_printf_i+0x16a>
 8005e12:	2d00      	cmp	r5, #0
 8005e14:	f040 808e 	bne.w	8005f34 <_printf_i+0x210>
 8005e18:	4665      	mov	r5, ip
 8005e1a:	2a08      	cmp	r2, #8
 8005e1c:	d10b      	bne.n	8005e36 <_printf_i+0x112>
 8005e1e:	6823      	ldr	r3, [r4, #0]
 8005e20:	07db      	lsls	r3, r3, #31
 8005e22:	d508      	bpl.n	8005e36 <_printf_i+0x112>
 8005e24:	6923      	ldr	r3, [r4, #16]
 8005e26:	6862      	ldr	r2, [r4, #4]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	bfde      	ittt	le
 8005e2c:	2330      	movle	r3, #48	; 0x30
 8005e2e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e32:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005e36:	ebac 0305 	sub.w	r3, ip, r5
 8005e3a:	6123      	str	r3, [r4, #16]
 8005e3c:	f8cd 8000 	str.w	r8, [sp]
 8005e40:	463b      	mov	r3, r7
 8005e42:	aa03      	add	r2, sp, #12
 8005e44:	4621      	mov	r1, r4
 8005e46:	4630      	mov	r0, r6
 8005e48:	f7ff fef6 	bl	8005c38 <_printf_common>
 8005e4c:	3001      	adds	r0, #1
 8005e4e:	d14d      	bne.n	8005eec <_printf_i+0x1c8>
 8005e50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e54:	b005      	add	sp, #20
 8005e56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e5a:	4839      	ldr	r0, [pc, #228]	; (8005f40 <_printf_i+0x21c>)
 8005e5c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005e60:	6813      	ldr	r3, [r2, #0]
 8005e62:	6821      	ldr	r1, [r4, #0]
 8005e64:	1d1d      	adds	r5, r3, #4
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	6015      	str	r5, [r2, #0]
 8005e6a:	060a      	lsls	r2, r1, #24
 8005e6c:	d50b      	bpl.n	8005e86 <_printf_i+0x162>
 8005e6e:	07ca      	lsls	r2, r1, #31
 8005e70:	bf44      	itt	mi
 8005e72:	f041 0120 	orrmi.w	r1, r1, #32
 8005e76:	6021      	strmi	r1, [r4, #0]
 8005e78:	b91b      	cbnz	r3, 8005e82 <_printf_i+0x15e>
 8005e7a:	6822      	ldr	r2, [r4, #0]
 8005e7c:	f022 0220 	bic.w	r2, r2, #32
 8005e80:	6022      	str	r2, [r4, #0]
 8005e82:	2210      	movs	r2, #16
 8005e84:	e7b7      	b.n	8005df6 <_printf_i+0xd2>
 8005e86:	064d      	lsls	r5, r1, #25
 8005e88:	bf48      	it	mi
 8005e8a:	b29b      	uxthmi	r3, r3
 8005e8c:	e7ef      	b.n	8005e6e <_printf_i+0x14a>
 8005e8e:	4665      	mov	r5, ip
 8005e90:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e94:	fb02 3311 	mls	r3, r2, r1, r3
 8005e98:	5cc3      	ldrb	r3, [r0, r3]
 8005e9a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	2900      	cmp	r1, #0
 8005ea2:	d1f5      	bne.n	8005e90 <_printf_i+0x16c>
 8005ea4:	e7b9      	b.n	8005e1a <_printf_i+0xf6>
 8005ea6:	6813      	ldr	r3, [r2, #0]
 8005ea8:	6825      	ldr	r5, [r4, #0]
 8005eaa:	1d18      	adds	r0, r3, #4
 8005eac:	6961      	ldr	r1, [r4, #20]
 8005eae:	6010      	str	r0, [r2, #0]
 8005eb0:	0628      	lsls	r0, r5, #24
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	d501      	bpl.n	8005eba <_printf_i+0x196>
 8005eb6:	6019      	str	r1, [r3, #0]
 8005eb8:	e002      	b.n	8005ec0 <_printf_i+0x19c>
 8005eba:	066a      	lsls	r2, r5, #25
 8005ebc:	d5fb      	bpl.n	8005eb6 <_printf_i+0x192>
 8005ebe:	8019      	strh	r1, [r3, #0]
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	4665      	mov	r5, ip
 8005ec4:	6123      	str	r3, [r4, #16]
 8005ec6:	e7b9      	b.n	8005e3c <_printf_i+0x118>
 8005ec8:	6813      	ldr	r3, [r2, #0]
 8005eca:	1d19      	adds	r1, r3, #4
 8005ecc:	6011      	str	r1, [r2, #0]
 8005ece:	681d      	ldr	r5, [r3, #0]
 8005ed0:	6862      	ldr	r2, [r4, #4]
 8005ed2:	2100      	movs	r1, #0
 8005ed4:	4628      	mov	r0, r5
 8005ed6:	f000 f854 	bl	8005f82 <memchr>
 8005eda:	b108      	cbz	r0, 8005ee0 <_printf_i+0x1bc>
 8005edc:	1b40      	subs	r0, r0, r5
 8005ede:	6060      	str	r0, [r4, #4]
 8005ee0:	6863      	ldr	r3, [r4, #4]
 8005ee2:	6123      	str	r3, [r4, #16]
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005eea:	e7a7      	b.n	8005e3c <_printf_i+0x118>
 8005eec:	6923      	ldr	r3, [r4, #16]
 8005eee:	462a      	mov	r2, r5
 8005ef0:	4639      	mov	r1, r7
 8005ef2:	4630      	mov	r0, r6
 8005ef4:	47c0      	blx	r8
 8005ef6:	3001      	adds	r0, #1
 8005ef8:	d0aa      	beq.n	8005e50 <_printf_i+0x12c>
 8005efa:	6823      	ldr	r3, [r4, #0]
 8005efc:	079b      	lsls	r3, r3, #30
 8005efe:	d413      	bmi.n	8005f28 <_printf_i+0x204>
 8005f00:	68e0      	ldr	r0, [r4, #12]
 8005f02:	9b03      	ldr	r3, [sp, #12]
 8005f04:	4298      	cmp	r0, r3
 8005f06:	bfb8      	it	lt
 8005f08:	4618      	movlt	r0, r3
 8005f0a:	e7a3      	b.n	8005e54 <_printf_i+0x130>
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	464a      	mov	r2, r9
 8005f10:	4639      	mov	r1, r7
 8005f12:	4630      	mov	r0, r6
 8005f14:	47c0      	blx	r8
 8005f16:	3001      	adds	r0, #1
 8005f18:	d09a      	beq.n	8005e50 <_printf_i+0x12c>
 8005f1a:	3501      	adds	r5, #1
 8005f1c:	68e3      	ldr	r3, [r4, #12]
 8005f1e:	9a03      	ldr	r2, [sp, #12]
 8005f20:	1a9b      	subs	r3, r3, r2
 8005f22:	42ab      	cmp	r3, r5
 8005f24:	dcf2      	bgt.n	8005f0c <_printf_i+0x1e8>
 8005f26:	e7eb      	b.n	8005f00 <_printf_i+0x1dc>
 8005f28:	2500      	movs	r5, #0
 8005f2a:	f104 0919 	add.w	r9, r4, #25
 8005f2e:	e7f5      	b.n	8005f1c <_printf_i+0x1f8>
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1ac      	bne.n	8005e8e <_printf_i+0x16a>
 8005f34:	7803      	ldrb	r3, [r0, #0]
 8005f36:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f3e:	e76c      	b.n	8005e1a <_printf_i+0xf6>
 8005f40:	080062f3 	.word	0x080062f3
 8005f44:	08006304 	.word	0x08006304

08005f48 <_sbrk_r>:
 8005f48:	b538      	push	{r3, r4, r5, lr}
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	4c05      	ldr	r4, [pc, #20]	; (8005f64 <_sbrk_r+0x1c>)
 8005f4e:	4605      	mov	r5, r0
 8005f50:	4608      	mov	r0, r1
 8005f52:	6023      	str	r3, [r4, #0]
 8005f54:	f7fb f846 	bl	8000fe4 <_sbrk>
 8005f58:	1c43      	adds	r3, r0, #1
 8005f5a:	d102      	bne.n	8005f62 <_sbrk_r+0x1a>
 8005f5c:	6823      	ldr	r3, [r4, #0]
 8005f5e:	b103      	cbz	r3, 8005f62 <_sbrk_r+0x1a>
 8005f60:	602b      	str	r3, [r5, #0]
 8005f62:	bd38      	pop	{r3, r4, r5, pc}
 8005f64:	20001c94 	.word	0x20001c94

08005f68 <__ascii_wctomb>:
 8005f68:	b149      	cbz	r1, 8005f7e <__ascii_wctomb+0x16>
 8005f6a:	2aff      	cmp	r2, #255	; 0xff
 8005f6c:	bf8b      	itete	hi
 8005f6e:	238a      	movhi	r3, #138	; 0x8a
 8005f70:	700a      	strbls	r2, [r1, #0]
 8005f72:	6003      	strhi	r3, [r0, #0]
 8005f74:	2001      	movls	r0, #1
 8005f76:	bf88      	it	hi
 8005f78:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005f7c:	4770      	bx	lr
 8005f7e:	4608      	mov	r0, r1
 8005f80:	4770      	bx	lr

08005f82 <memchr>:
 8005f82:	b510      	push	{r4, lr}
 8005f84:	b2c9      	uxtb	r1, r1
 8005f86:	4402      	add	r2, r0
 8005f88:	4290      	cmp	r0, r2
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	d101      	bne.n	8005f92 <memchr+0x10>
 8005f8e:	2300      	movs	r3, #0
 8005f90:	e003      	b.n	8005f9a <memchr+0x18>
 8005f92:	781c      	ldrb	r4, [r3, #0]
 8005f94:	3001      	adds	r0, #1
 8005f96:	428c      	cmp	r4, r1
 8005f98:	d1f6      	bne.n	8005f88 <memchr+0x6>
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	bd10      	pop	{r4, pc}

08005f9e <memmove>:
 8005f9e:	4288      	cmp	r0, r1
 8005fa0:	b510      	push	{r4, lr}
 8005fa2:	eb01 0302 	add.w	r3, r1, r2
 8005fa6:	d807      	bhi.n	8005fb8 <memmove+0x1a>
 8005fa8:	1e42      	subs	r2, r0, #1
 8005faa:	4299      	cmp	r1, r3
 8005fac:	d00a      	beq.n	8005fc4 <memmove+0x26>
 8005fae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fb2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005fb6:	e7f8      	b.n	8005faa <memmove+0xc>
 8005fb8:	4283      	cmp	r3, r0
 8005fba:	d9f5      	bls.n	8005fa8 <memmove+0xa>
 8005fbc:	1881      	adds	r1, r0, r2
 8005fbe:	1ad2      	subs	r2, r2, r3
 8005fc0:	42d3      	cmn	r3, r2
 8005fc2:	d100      	bne.n	8005fc6 <memmove+0x28>
 8005fc4:	bd10      	pop	{r4, pc}
 8005fc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005fca:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005fce:	e7f7      	b.n	8005fc0 <memmove+0x22>

08005fd0 <__malloc_lock>:
 8005fd0:	4770      	bx	lr

08005fd2 <__malloc_unlock>:
 8005fd2:	4770      	bx	lr

08005fd4 <_realloc_r>:
 8005fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fd6:	4607      	mov	r7, r0
 8005fd8:	4614      	mov	r4, r2
 8005fda:	460e      	mov	r6, r1
 8005fdc:	b921      	cbnz	r1, 8005fe8 <_realloc_r+0x14>
 8005fde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005fe2:	4611      	mov	r1, r2
 8005fe4:	f7ff bc7c 	b.w	80058e0 <_malloc_r>
 8005fe8:	b922      	cbnz	r2, 8005ff4 <_realloc_r+0x20>
 8005fea:	f7ff fc2d 	bl	8005848 <_free_r>
 8005fee:	4625      	mov	r5, r4
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ff4:	f000 f814 	bl	8006020 <_malloc_usable_size_r>
 8005ff8:	42a0      	cmp	r0, r4
 8005ffa:	d20f      	bcs.n	800601c <_realloc_r+0x48>
 8005ffc:	4621      	mov	r1, r4
 8005ffe:	4638      	mov	r0, r7
 8006000:	f7ff fc6e 	bl	80058e0 <_malloc_r>
 8006004:	4605      	mov	r5, r0
 8006006:	2800      	cmp	r0, #0
 8006008:	d0f2      	beq.n	8005ff0 <_realloc_r+0x1c>
 800600a:	4631      	mov	r1, r6
 800600c:	4622      	mov	r2, r4
 800600e:	f7ff fae3 	bl	80055d8 <memcpy>
 8006012:	4631      	mov	r1, r6
 8006014:	4638      	mov	r0, r7
 8006016:	f7ff fc17 	bl	8005848 <_free_r>
 800601a:	e7e9      	b.n	8005ff0 <_realloc_r+0x1c>
 800601c:	4635      	mov	r5, r6
 800601e:	e7e7      	b.n	8005ff0 <_realloc_r+0x1c>

08006020 <_malloc_usable_size_r>:
 8006020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006024:	1f18      	subs	r0, r3, #4
 8006026:	2b00      	cmp	r3, #0
 8006028:	bfbc      	itt	lt
 800602a:	580b      	ldrlt	r3, [r1, r0]
 800602c:	18c0      	addlt	r0, r0, r3
 800602e:	4770      	bx	lr

08006030 <_init>:
 8006030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006032:	bf00      	nop
 8006034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006036:	bc08      	pop	{r3}
 8006038:	469e      	mov	lr, r3
 800603a:	4770      	bx	lr

0800603c <_fini>:
 800603c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800603e:	bf00      	nop
 8006040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006042:	bc08      	pop	{r3}
 8006044:	469e      	mov	lr, r3
 8006046:	4770      	bx	lr
