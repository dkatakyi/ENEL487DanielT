
LabProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005924  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  08005a34  08005a34  00015a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ee8  08005ee8  00020204  2**0
                  CONTENTS
  4 .ARM          00000000  08005ee8  08005ee8  00020204  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ee8  08005ee8  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ee8  08005ee8  00015ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005eec  08005eec  00015eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08005ef0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a84  20000204  080060f4  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c88  080060f4  00021c88  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   000180dc  00000000  00000000  0002022d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000300e  00000000  00000000  00038309  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001308  00000000  00000000  0003b318  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011a0  00000000  00000000  0003c620  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000193cb  00000000  00000000  0003d7c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000106c1  00000000  00000000  00056b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00094129  00000000  00000000  0006724c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fb375  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005288  00000000  00000000  000fb3f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000204 	.word	0x20000204
 800012c:	00000000 	.word	0x00000000
 8000130:	08005a1c 	.word	0x08005a1c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000208 	.word	0x20000208
 800014c:	08005a1c 	.word	0x08005a1c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <isCompleteLine>:
 */

#include "CLI.h"

bool isCompleteLine(char recBuffer[10])
{
 8000164:	b480      	push	{r7}
 8000166:	b083      	sub	sp, #12
 8000168:	af00      	add	r7, sp, #0
 800016a:	6078      	str	r0, [r7, #4]
	//if enter was hit, then it is a complete line, else it isnt
	if(recBuffer[0] == '\r')
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	781b      	ldrb	r3, [r3, #0]
 8000170:	2b0d      	cmp	r3, #13
 8000172:	d101      	bne.n	8000178 <isCompleteLine+0x14>
	{
		return true;
 8000174:	2301      	movs	r3, #1
 8000176:	e000      	b.n	800017a <isCompleteLine+0x16>
	}
	else
	{
		return false;
 8000178:	2300      	movs	r3, #0
	}
}
 800017a:	4618      	mov	r0, r3
 800017c:	370c      	adds	r7, #12
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr

08000184 <copyCharTo>:

void copyCharTo(char recBuffer[10], char s[100], int coun)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b084      	sub	sp, #16
 8000188:	af00      	add	r7, sp, #0
 800018a:	60f8      	str	r0, [r7, #12]
 800018c:	60b9      	str	r1, [r7, #8]
 800018e:	607a      	str	r2, [r7, #4]

		  if(recBuffer[0] == '\b')
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	781b      	ldrb	r3, [r3, #0]
 8000194:	2b08      	cmp	r3, #8
 8000196:	d103      	bne.n	80001a0 <copyCharTo+0x1c>
		  {
			  printString("\b \b");
 8000198:	4808      	ldr	r0, [pc, #32]	; (80001bc <copyCharTo+0x38>)
 800019a:	f000 f811 	bl	80001c0 <printString>
		  {
			  s[coun] = recBuffer[0];
			  printString(recBuffer);

		  }
}
 800019e:	e008      	b.n	80001b2 <copyCharTo+0x2e>
			  s[coun] = recBuffer[0];
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	68ba      	ldr	r2, [r7, #8]
 80001a4:	4413      	add	r3, r2
 80001a6:	68fa      	ldr	r2, [r7, #12]
 80001a8:	7812      	ldrb	r2, [r2, #0]
 80001aa:	701a      	strb	r2, [r3, #0]
			  printString(recBuffer);
 80001ac:	68f8      	ldr	r0, [r7, #12]
 80001ae:	f000 f807 	bl	80001c0 <printString>
}
 80001b2:	bf00      	nop
 80001b4:	3710      	adds	r7, #16
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bd80      	pop	{r7, pc}
 80001ba:	bf00      	nop
 80001bc:	08005a34 	.word	0x08005a34

080001c0 <printString>:
//		  HAL_UART_Transmit(&huart3, (char *)recBuffer, strlen((char *)recBuffer), 1000);
//	  }
//}

void printString(const char* mess)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b09e      	sub	sp, #120	; 0x78
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	6078      	str	r0, [r7, #4]
	int i = 0;
 80001c8:	2300      	movs	r3, #0
 80001ca:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_StatusTypeDef  st;
	uint8_t cliBufferTX[100];

	while(huart3.gState == HAL_UART_STATE_BUSY_TX){}
 80001cc:	bf00      	nop
 80001ce:	4b18      	ldr	r3, [pc, #96]	; (8000230 <printString+0x70>)
 80001d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80001d4:	b2db      	uxtb	r3, r3
 80001d6:	2b21      	cmp	r3, #33	; 0x21
 80001d8:	d0f9      	beq.n	80001ce <printString+0xe>

	for(const char* p = mess; *p; ++p)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	673b      	str	r3, [r7, #112]	; 0x70
 80001de:	e00d      	b.n	80001fc <printString+0x3c>
	{
		cliBufferTX[i] = *p;
 80001e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80001e2:	7819      	ldrb	r1, [r3, #0]
 80001e4:	f107 0208 	add.w	r2, r7, #8
 80001e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80001ea:	4413      	add	r3, r2
 80001ec:	460a      	mov	r2, r1
 80001ee:	701a      	strb	r2, [r3, #0]
		i++;
 80001f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80001f2:	3301      	adds	r3, #1
 80001f4:	677b      	str	r3, [r7, #116]	; 0x74
	for(const char* p = mess; *p; ++p)
 80001f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80001f8:	3301      	adds	r3, #1
 80001fa:	673b      	str	r3, [r7, #112]	; 0x70
 80001fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	2b00      	cmp	r3, #0
 8000202:	d1ed      	bne.n	80001e0 <printString+0x20>
	}

	st = HAL_UART_Transmit(&huart3, cliBufferTX, i, 1000);
 8000204:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000206:	b29a      	uxth	r2, r3
 8000208:	f107 0108 	add.w	r1, r7, #8
 800020c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000210:	4807      	ldr	r0, [pc, #28]	; (8000230 <printString+0x70>)
 8000212:	f002 f972 	bl	80024fa <HAL_UART_Transmit>
 8000216:	4603      	mov	r3, r0
 8000218:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(st != HAL_OK)
 800021c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000220:	2b00      	cmp	r3, #0
 8000222:	d001      	beq.n	8000228 <printString+0x68>
	{
		Error_Handler();
 8000224:	f000 fe54 	bl	8000ed0 <Error_Handler>
	}

}
 8000228:	bf00      	nop
 800022a:	3778      	adds	r7, #120	; 0x78
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	20001b38 	.word	0x20001b38

08000234 <lightState>:

#include "TrafficLight.h"


char lightState(char st)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	4603      	mov	r3, r0
 800023c:	71fb      	strb	r3, [r7, #7]
	switch(st){
 800023e:	79fb      	ldrb	r3, [r7, #7]
 8000240:	3b61      	subs	r3, #97	; 0x61
 8000242:	2b18      	cmp	r3, #24
 8000244:	f200 81fc 	bhi.w	8000640 <lightState+0x40c>
 8000248:	a201      	add	r2, pc, #4	; (adr r2, 8000250 <lightState+0x1c>)
 800024a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800024e:	bf00      	nop
 8000250:	080002b5 	.word	0x080002b5
 8000254:	08000317 	.word	0x08000317
 8000258:	08000379 	.word	0x08000379
 800025c:	080003db 	.word	0x080003db
 8000260:	0800043d 	.word	0x0800043d
 8000264:	0800049f 	.word	0x0800049f
 8000268:	08000501 	.word	0x08000501
 800026c:	08000563 	.word	0x08000563
 8000270:	08000641 	.word	0x08000641
 8000274:	08000641 	.word	0x08000641
 8000278:	08000641 	.word	0x08000641
 800027c:	08000641 	.word	0x08000641
 8000280:	08000641 	.word	0x08000641
 8000284:	08000641 	.word	0x08000641
 8000288:	08000641 	.word	0x08000641
 800028c:	08000641 	.word	0x08000641
 8000290:	08000641 	.word	0x08000641
 8000294:	08000641 	.word	0x08000641
 8000298:	08000641 	.word	0x08000641
 800029c:	08000641 	.word	0x08000641
 80002a0:	08000641 	.word	0x08000641
 80002a4:	08000641 	.word	0x08000641
 80002a8:	08000641 	.word	0x08000641
 80002ac:	080005cd 	.word	0x080005cd
 80002b0:	0800062f 	.word	0x0800062f

	case 'a':
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_RESET);
 80002b4:	2200      	movs	r2, #0
 80002b6:	2140      	movs	r1, #64	; 0x40
 80002b8:	48c2      	ldr	r0, [pc, #776]	; (80005c4 <lightState+0x390>)
 80002ba:	f001 fa09 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Y1_Pin, GPIO_PIN_SET);
 80002be:	2201      	movs	r2, #1
 80002c0:	2180      	movs	r1, #128	; 0x80
 80002c2:	48c0      	ldr	r0, [pc, #768]	; (80005c4 <lightState+0x390>)
 80002c4:	f001 fa04 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, G1_Pin, GPIO_PIN_SET);
 80002c8:	2201      	movs	r2, #1
 80002ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ce:	48bd      	ldr	r0, [pc, #756]	; (80005c4 <lightState+0x390>)
 80002d0:	f001 f9fe 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, B1_Pin, GPIO_PIN_SET);
 80002d4:	2201      	movs	r2, #1
 80002d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002da:	48ba      	ldr	r0, [pc, #744]	; (80005c4 <lightState+0x390>)
 80002dc:	f001 f9f8 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, R2_Pin, GPIO_PIN_RESET);
 80002e0:	2200      	movs	r2, #0
 80002e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002e6:	48b8      	ldr	r0, [pc, #736]	; (80005c8 <lightState+0x394>)
 80002e8:	f001 f9f2 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_SET);
 80002ec:	2201      	movs	r2, #1
 80002ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002f2:	48b5      	ldr	r0, [pc, #724]	; (80005c8 <lightState+0x394>)
 80002f4:	f001 f9ec 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_SET);
 80002f8:	2201      	movs	r2, #1
 80002fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002fe:	48b2      	ldr	r0, [pc, #712]	; (80005c8 <lightState+0x394>)
 8000300:	f001 f9e6 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, B2_Pin, GPIO_PIN_SET);
 8000304:	2201      	movs	r2, #1
 8000306:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800030a:	48af      	ldr	r0, [pc, #700]	; (80005c8 <lightState+0x394>)
 800030c:	f001 f9e0 	bl	80016d0 <HAL_GPIO_WritePin>
		st = 'b';
 8000310:	2362      	movs	r3, #98	; 0x62
 8000312:	71fb      	strb	r3, [r7, #7]
		break;
 8000314:	e197      	b.n	8000646 <lightState+0x412>

	case 'b':
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_SET);
 8000316:	2201      	movs	r2, #1
 8000318:	2140      	movs	r1, #64	; 0x40
 800031a:	48aa      	ldr	r0, [pc, #680]	; (80005c4 <lightState+0x390>)
 800031c:	f001 f9d8 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Y1_Pin, GPIO_PIN_SET);
 8000320:	2201      	movs	r2, #1
 8000322:	2180      	movs	r1, #128	; 0x80
 8000324:	48a7      	ldr	r0, [pc, #668]	; (80005c4 <lightState+0x390>)
 8000326:	f001 f9d3 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, G1_Pin, GPIO_PIN_RESET);
 800032a:	2200      	movs	r2, #0
 800032c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000330:	48a4      	ldr	r0, [pc, #656]	; (80005c4 <lightState+0x390>)
 8000332:	f001 f9cd 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, B1_Pin, GPIO_PIN_RESET);
 8000336:	2200      	movs	r2, #0
 8000338:	f44f 7100 	mov.w	r1, #512	; 0x200
 800033c:	48a1      	ldr	r0, [pc, #644]	; (80005c4 <lightState+0x390>)
 800033e:	f001 f9c7 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, R2_Pin, GPIO_PIN_RESET);
 8000342:	2200      	movs	r2, #0
 8000344:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000348:	489f      	ldr	r0, [pc, #636]	; (80005c8 <lightState+0x394>)
 800034a:	f001 f9c1 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_SET);
 800034e:	2201      	movs	r2, #1
 8000350:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000354:	489c      	ldr	r0, [pc, #624]	; (80005c8 <lightState+0x394>)
 8000356:	f001 f9bb 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_SET);
 800035a:	2201      	movs	r2, #1
 800035c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000360:	4899      	ldr	r0, [pc, #612]	; (80005c8 <lightState+0x394>)
 8000362:	f001 f9b5 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, B2_Pin, GPIO_PIN_SET);
 8000366:	2201      	movs	r2, #1
 8000368:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800036c:	4896      	ldr	r0, [pc, #600]	; (80005c8 <lightState+0x394>)
 800036e:	f001 f9af 	bl	80016d0 <HAL_GPIO_WritePin>
		st = 'c';
 8000372:	2363      	movs	r3, #99	; 0x63
 8000374:	71fb      	strb	r3, [r7, #7]
		break;
 8000376:	e166      	b.n	8000646 <lightState+0x412>

	case 'c':
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_SET);
 8000378:	2201      	movs	r2, #1
 800037a:	2140      	movs	r1, #64	; 0x40
 800037c:	4891      	ldr	r0, [pc, #580]	; (80005c4 <lightState+0x390>)
 800037e:	f001 f9a7 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Y1_Pin, GPIO_PIN_SET);
 8000382:	2201      	movs	r2, #1
 8000384:	2180      	movs	r1, #128	; 0x80
 8000386:	488f      	ldr	r0, [pc, #572]	; (80005c4 <lightState+0x390>)
 8000388:	f001 f9a2 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, G1_Pin, GPIO_PIN_RESET);
 800038c:	2200      	movs	r2, #0
 800038e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000392:	488c      	ldr	r0, [pc, #560]	; (80005c4 <lightState+0x390>)
 8000394:	f001 f99c 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, B1_Pin, GPIO_PIN_SET);
 8000398:	2201      	movs	r2, #1
 800039a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800039e:	4889      	ldr	r0, [pc, #548]	; (80005c4 <lightState+0x390>)
 80003a0:	f001 f996 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, R2_Pin, GPIO_PIN_RESET);
 80003a4:	2200      	movs	r2, #0
 80003a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003aa:	4887      	ldr	r0, [pc, #540]	; (80005c8 <lightState+0x394>)
 80003ac:	f001 f990 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_SET);
 80003b0:	2201      	movs	r2, #1
 80003b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003b6:	4884      	ldr	r0, [pc, #528]	; (80005c8 <lightState+0x394>)
 80003b8:	f001 f98a 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_SET);
 80003bc:	2201      	movs	r2, #1
 80003be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003c2:	4881      	ldr	r0, [pc, #516]	; (80005c8 <lightState+0x394>)
 80003c4:	f001 f984 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, B2_Pin, GPIO_PIN_SET);
 80003c8:	2201      	movs	r2, #1
 80003ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003ce:	487e      	ldr	r0, [pc, #504]	; (80005c8 <lightState+0x394>)
 80003d0:	f001 f97e 	bl	80016d0 <HAL_GPIO_WritePin>
		st = 'd';
 80003d4:	2364      	movs	r3, #100	; 0x64
 80003d6:	71fb      	strb	r3, [r7, #7]
		break;
 80003d8:	e135      	b.n	8000646 <lightState+0x412>

	case 'd':
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_SET);
 80003da:	2201      	movs	r2, #1
 80003dc:	2140      	movs	r1, #64	; 0x40
 80003de:	4879      	ldr	r0, [pc, #484]	; (80005c4 <lightState+0x390>)
 80003e0:	f001 f976 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Y1_Pin, GPIO_PIN_RESET);
 80003e4:	2200      	movs	r2, #0
 80003e6:	2180      	movs	r1, #128	; 0x80
 80003e8:	4876      	ldr	r0, [pc, #472]	; (80005c4 <lightState+0x390>)
 80003ea:	f001 f971 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, G1_Pin, GPIO_PIN_SET);
 80003ee:	2201      	movs	r2, #1
 80003f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003f4:	4873      	ldr	r0, [pc, #460]	; (80005c4 <lightState+0x390>)
 80003f6:	f001 f96b 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, B1_Pin, GPIO_PIN_SET);
 80003fa:	2201      	movs	r2, #1
 80003fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000400:	4870      	ldr	r0, [pc, #448]	; (80005c4 <lightState+0x390>)
 8000402:	f001 f965 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, R2_Pin, GPIO_PIN_RESET);
 8000406:	2200      	movs	r2, #0
 8000408:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800040c:	486e      	ldr	r0, [pc, #440]	; (80005c8 <lightState+0x394>)
 800040e:	f001 f95f 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_SET);
 8000412:	2201      	movs	r2, #1
 8000414:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000418:	486b      	ldr	r0, [pc, #428]	; (80005c8 <lightState+0x394>)
 800041a:	f001 f959 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_SET);
 800041e:	2201      	movs	r2, #1
 8000420:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000424:	4868      	ldr	r0, [pc, #416]	; (80005c8 <lightState+0x394>)
 8000426:	f001 f953 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, B2_Pin, GPIO_PIN_SET);
 800042a:	2201      	movs	r2, #1
 800042c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000430:	4865      	ldr	r0, [pc, #404]	; (80005c8 <lightState+0x394>)
 8000432:	f001 f94d 	bl	80016d0 <HAL_GPIO_WritePin>
		st = 'e';
 8000436:	2365      	movs	r3, #101	; 0x65
 8000438:	71fb      	strb	r3, [r7, #7]
		break;
 800043a:	e104      	b.n	8000646 <lightState+0x412>

	case 'e':
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_RESET);
 800043c:	2200      	movs	r2, #0
 800043e:	2140      	movs	r1, #64	; 0x40
 8000440:	4860      	ldr	r0, [pc, #384]	; (80005c4 <lightState+0x390>)
 8000442:	f001 f945 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Y1_Pin, GPIO_PIN_SET);
 8000446:	2201      	movs	r2, #1
 8000448:	2180      	movs	r1, #128	; 0x80
 800044a:	485e      	ldr	r0, [pc, #376]	; (80005c4 <lightState+0x390>)
 800044c:	f001 f940 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, G1_Pin, GPIO_PIN_SET);
 8000450:	2201      	movs	r2, #1
 8000452:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000456:	485b      	ldr	r0, [pc, #364]	; (80005c4 <lightState+0x390>)
 8000458:	f001 f93a 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, B1_Pin, GPIO_PIN_SET);
 800045c:	2201      	movs	r2, #1
 800045e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000462:	4858      	ldr	r0, [pc, #352]	; (80005c4 <lightState+0x390>)
 8000464:	f001 f934 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, R2_Pin, GPIO_PIN_RESET);
 8000468:	2200      	movs	r2, #0
 800046a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800046e:	4856      	ldr	r0, [pc, #344]	; (80005c8 <lightState+0x394>)
 8000470:	f001 f92e 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_SET);
 8000474:	2201      	movs	r2, #1
 8000476:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800047a:	4853      	ldr	r0, [pc, #332]	; (80005c8 <lightState+0x394>)
 800047c:	f001 f928 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_SET);
 8000480:	2201      	movs	r2, #1
 8000482:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000486:	4850      	ldr	r0, [pc, #320]	; (80005c8 <lightState+0x394>)
 8000488:	f001 f922 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, B2_Pin, GPIO_PIN_SET);
 800048c:	2201      	movs	r2, #1
 800048e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000492:	484d      	ldr	r0, [pc, #308]	; (80005c8 <lightState+0x394>)
 8000494:	f001 f91c 	bl	80016d0 <HAL_GPIO_WritePin>
		st = 'f';
 8000498:	2366      	movs	r3, #102	; 0x66
 800049a:	71fb      	strb	r3, [r7, #7]
		break;
 800049c:	e0d3      	b.n	8000646 <lightState+0x412>

	case 'f':
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_RESET);
 800049e:	2200      	movs	r2, #0
 80004a0:	2140      	movs	r1, #64	; 0x40
 80004a2:	4848      	ldr	r0, [pc, #288]	; (80005c4 <lightState+0x390>)
 80004a4:	f001 f914 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Y1_Pin, GPIO_PIN_SET);
 80004a8:	2201      	movs	r2, #1
 80004aa:	2180      	movs	r1, #128	; 0x80
 80004ac:	4845      	ldr	r0, [pc, #276]	; (80005c4 <lightState+0x390>)
 80004ae:	f001 f90f 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, G1_Pin, GPIO_PIN_SET);
 80004b2:	2201      	movs	r2, #1
 80004b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004b8:	4842      	ldr	r0, [pc, #264]	; (80005c4 <lightState+0x390>)
 80004ba:	f001 f909 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, B1_Pin, GPIO_PIN_SET);
 80004be:	2201      	movs	r2, #1
 80004c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004c4:	483f      	ldr	r0, [pc, #252]	; (80005c4 <lightState+0x390>)
 80004c6:	f001 f903 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, R2_Pin, GPIO_PIN_SET);
 80004ca:	2201      	movs	r2, #1
 80004cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004d0:	483d      	ldr	r0, [pc, #244]	; (80005c8 <lightState+0x394>)
 80004d2:	f001 f8fd 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_SET);
 80004d6:	2201      	movs	r2, #1
 80004d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004dc:	483a      	ldr	r0, [pc, #232]	; (80005c8 <lightState+0x394>)
 80004de:	f001 f8f7 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_RESET);
 80004e2:	2200      	movs	r2, #0
 80004e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004e8:	4837      	ldr	r0, [pc, #220]	; (80005c8 <lightState+0x394>)
 80004ea:	f001 f8f1 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, B2_Pin, GPIO_PIN_RESET);
 80004ee:	2200      	movs	r2, #0
 80004f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004f4:	4834      	ldr	r0, [pc, #208]	; (80005c8 <lightState+0x394>)
 80004f6:	f001 f8eb 	bl	80016d0 <HAL_GPIO_WritePin>
		st = 'g';
 80004fa:	2367      	movs	r3, #103	; 0x67
 80004fc:	71fb      	strb	r3, [r7, #7]
		break;
 80004fe:	e0a2      	b.n	8000646 <lightState+0x412>

	case 'g':
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_RESET);
 8000500:	2200      	movs	r2, #0
 8000502:	2140      	movs	r1, #64	; 0x40
 8000504:	482f      	ldr	r0, [pc, #188]	; (80005c4 <lightState+0x390>)
 8000506:	f001 f8e3 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Y1_Pin, GPIO_PIN_SET);
 800050a:	2201      	movs	r2, #1
 800050c:	2180      	movs	r1, #128	; 0x80
 800050e:	482d      	ldr	r0, [pc, #180]	; (80005c4 <lightState+0x390>)
 8000510:	f001 f8de 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, G1_Pin, GPIO_PIN_SET);
 8000514:	2201      	movs	r2, #1
 8000516:	f44f 7180 	mov.w	r1, #256	; 0x100
 800051a:	482a      	ldr	r0, [pc, #168]	; (80005c4 <lightState+0x390>)
 800051c:	f001 f8d8 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, B1_Pin, GPIO_PIN_SET);
 8000520:	2201      	movs	r2, #1
 8000522:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000526:	4827      	ldr	r0, [pc, #156]	; (80005c4 <lightState+0x390>)
 8000528:	f001 f8d2 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, R2_Pin, GPIO_PIN_SET);
 800052c:	2201      	movs	r2, #1
 800052e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000532:	4825      	ldr	r0, [pc, #148]	; (80005c8 <lightState+0x394>)
 8000534:	f001 f8cc 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_SET);
 8000538:	2201      	movs	r2, #1
 800053a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800053e:	4822      	ldr	r0, [pc, #136]	; (80005c8 <lightState+0x394>)
 8000540:	f001 f8c6 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800054a:	481f      	ldr	r0, [pc, #124]	; (80005c8 <lightState+0x394>)
 800054c:	f001 f8c0 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, B2_Pin, GPIO_PIN_SET);
 8000550:	2201      	movs	r2, #1
 8000552:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000556:	481c      	ldr	r0, [pc, #112]	; (80005c8 <lightState+0x394>)
 8000558:	f001 f8ba 	bl	80016d0 <HAL_GPIO_WritePin>
		st = 'h';
 800055c:	2368      	movs	r3, #104	; 0x68
 800055e:	71fb      	strb	r3, [r7, #7]
		break;
 8000560:	e071      	b.n	8000646 <lightState+0x412>

	case 'h':
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_RESET);
 8000562:	2200      	movs	r2, #0
 8000564:	2140      	movs	r1, #64	; 0x40
 8000566:	4817      	ldr	r0, [pc, #92]	; (80005c4 <lightState+0x390>)
 8000568:	f001 f8b2 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Y1_Pin, GPIO_PIN_SET);
 800056c:	2201      	movs	r2, #1
 800056e:	2180      	movs	r1, #128	; 0x80
 8000570:	4814      	ldr	r0, [pc, #80]	; (80005c4 <lightState+0x390>)
 8000572:	f001 f8ad 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, G1_Pin, GPIO_PIN_SET);
 8000576:	2201      	movs	r2, #1
 8000578:	f44f 7180 	mov.w	r1, #256	; 0x100
 800057c:	4811      	ldr	r0, [pc, #68]	; (80005c4 <lightState+0x390>)
 800057e:	f001 f8a7 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, B1_Pin, GPIO_PIN_SET);
 8000582:	2201      	movs	r2, #1
 8000584:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000588:	480e      	ldr	r0, [pc, #56]	; (80005c4 <lightState+0x390>)
 800058a:	f001 f8a1 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, R2_Pin, GPIO_PIN_SET);
 800058e:	2201      	movs	r2, #1
 8000590:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000594:	480c      	ldr	r0, [pc, #48]	; (80005c8 <lightState+0x394>)
 8000596:	f001 f89b 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005a0:	4809      	ldr	r0, [pc, #36]	; (80005c8 <lightState+0x394>)
 80005a2:	f001 f895 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_SET);
 80005a6:	2201      	movs	r2, #1
 80005a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ac:	4806      	ldr	r0, [pc, #24]	; (80005c8 <lightState+0x394>)
 80005ae:	f001 f88f 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, B2_Pin, GPIO_PIN_SET);
 80005b2:	2201      	movs	r2, #1
 80005b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005b8:	4803      	ldr	r0, [pc, #12]	; (80005c8 <lightState+0x394>)
 80005ba:	f001 f889 	bl	80016d0 <HAL_GPIO_WritePin>
		st = 'a';
 80005be:	2361      	movs	r3, #97	; 0x61
 80005c0:	71fb      	strb	r3, [r7, #7]
		break;
 80005c2:	e040      	b.n	8000646 <lightState+0x412>
 80005c4:	40010800 	.word	0x40010800
 80005c8:	40010c00 	.word	0x40010c00

	case 'x':
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_RESET);
 80005cc:	2200      	movs	r2, #0
 80005ce:	2140      	movs	r1, #64	; 0x40
 80005d0:	481f      	ldr	r0, [pc, #124]	; (8000650 <lightState+0x41c>)
 80005d2:	f001 f87d 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Y1_Pin, GPIO_PIN_SET);
 80005d6:	2201      	movs	r2, #1
 80005d8:	2180      	movs	r1, #128	; 0x80
 80005da:	481d      	ldr	r0, [pc, #116]	; (8000650 <lightState+0x41c>)
 80005dc:	f001 f878 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, G1_Pin, GPIO_PIN_SET);
 80005e0:	2201      	movs	r2, #1
 80005e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e6:	481a      	ldr	r0, [pc, #104]	; (8000650 <lightState+0x41c>)
 80005e8:	f001 f872 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, B1_Pin, GPIO_PIN_SET);
 80005ec:	2201      	movs	r2, #1
 80005ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005f2:	4817      	ldr	r0, [pc, #92]	; (8000650 <lightState+0x41c>)
 80005f4:	f001 f86c 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, R2_Pin, GPIO_PIN_RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005fe:	4815      	ldr	r0, [pc, #84]	; (8000654 <lightState+0x420>)
 8000600:	f001 f866 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_SET);
 8000604:	2201      	movs	r2, #1
 8000606:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800060a:	4812      	ldr	r0, [pc, #72]	; (8000654 <lightState+0x420>)
 800060c:	f001 f860 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_SET);
 8000610:	2201      	movs	r2, #1
 8000612:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000616:	480f      	ldr	r0, [pc, #60]	; (8000654 <lightState+0x420>)
 8000618:	f001 f85a 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, B2_Pin, GPIO_PIN_SET);
 800061c:	2201      	movs	r2, #1
 800061e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000622:	480c      	ldr	r0, [pc, #48]	; (8000654 <lightState+0x420>)
 8000624:	f001 f854 	bl	80016d0 <HAL_GPIO_WritePin>
		st = 'y';
 8000628:	2379      	movs	r3, #121	; 0x79
 800062a:	71fb      	strb	r3, [r7, #7]
		break;
 800062c:	e00b      	b.n	8000646 <lightState+0x412>

	case 'y':
		HAL_GPIO_TogglePin(GPIOA, R1_Pin);
 800062e:	2140      	movs	r1, #64	; 0x40
 8000630:	4807      	ldr	r0, [pc, #28]	; (8000650 <lightState+0x41c>)
 8000632:	f001 f865 	bl	8001700 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, R2_Pin);
 8000636:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800063a:	4806      	ldr	r0, [pc, #24]	; (8000654 <lightState+0x420>)
 800063c:	f001 f860 	bl	8001700 <HAL_GPIO_TogglePin>

	default:
		st = 'x';
 8000640:	2378      	movs	r3, #120	; 0x78
 8000642:	71fb      	strb	r3, [r7, #7]
		break;
 8000644:	bf00      	nop
	}

	return st;
 8000646:	79fb      	ldrb	r3, [r7, #7]
}
 8000648:	4618      	mov	r0, r3
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40010800 	.word	0x40010800
 8000654:	40010c00 	.word	0x40010c00

08000658 <periodState>:

int periodState(char st, int x)
{
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	6039      	str	r1, [r7, #0]
 8000662:	71fb      	strb	r3, [r7, #7]
	int pd;

	switch(st){
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	3b61      	subs	r3, #97	; 0x61
 8000668:	2b18      	cmp	r3, #24
 800066a:	d85b      	bhi.n	8000724 <periodState+0xcc>
 800066c:	a201      	add	r2, pc, #4	; (adr r2, 8000674 <periodState+0x1c>)
 800066e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000672:	bf00      	nop
 8000674:	080006d9 	.word	0x080006d9
 8000678:	080006e1 	.word	0x080006e1
 800067c:	080006e7 	.word	0x080006e7
 8000680:	080006ef 	.word	0x080006ef
 8000684:	080006f7 	.word	0x080006f7
 8000688:	080006ff 	.word	0x080006ff
 800068c:	08000707 	.word	0x08000707
 8000690:	0800070f 	.word	0x0800070f
 8000694:	08000725 	.word	0x08000725
 8000698:	08000725 	.word	0x08000725
 800069c:	08000725 	.word	0x08000725
 80006a0:	08000725 	.word	0x08000725
 80006a4:	08000725 	.word	0x08000725
 80006a8:	08000725 	.word	0x08000725
 80006ac:	08000725 	.word	0x08000725
 80006b0:	08000725 	.word	0x08000725
 80006b4:	08000725 	.word	0x08000725
 80006b8:	08000725 	.word	0x08000725
 80006bc:	08000725 	.word	0x08000725
 80006c0:	08000725 	.word	0x08000725
 80006c4:	08000725 	.word	0x08000725
 80006c8:	08000725 	.word	0x08000725
 80006cc:	08000725 	.word	0x08000725
 80006d0:	08000717 	.word	0x08000717
 80006d4:	0800071f 	.word	0x0800071f

	case 'a':
		pd = 6000;
 80006d8:	f241 7370 	movw	r3, #6000	; 0x1770
 80006dc:	60fb      	str	r3, [r7, #12]
		break;
 80006de:	e022      	b.n	8000726 <periodState+0xce>

	case 'b':
		pd = 70500;
 80006e0:	4b15      	ldr	r3, [pc, #84]	; (8000738 <periodState+0xe0>)
 80006e2:	60fb      	str	r3, [r7, #12]
		break;
 80006e4:	e01f      	b.n	8000726 <periodState+0xce>

	case 'c':
		pd = 13500;
 80006e6:	f243 43bc 	movw	r3, #13500	; 0x34bc
 80006ea:	60fb      	str	r3, [r7, #12]
		break;
 80006ec:	e01b      	b.n	8000726 <periodState+0xce>

	case 'd':
		pd = 3500;
 80006ee:	f640 53ac 	movw	r3, #3500	; 0xdac
 80006f2:	60fb      	str	r3, [r7, #12]
		break;
 80006f4:	e017      	b.n	8000726 <periodState+0xce>

	case 'e':
		pd = 6000;
 80006f6:	f241 7370 	movw	r3, #6000	; 0x1770
 80006fa:	60fb      	str	r3, [r7, #12]
		break;
 80006fc:	e013      	b.n	8000726 <periodState+0xce>

	case 'f':
		pd = 20000;
 80006fe:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000702:	60fb      	str	r3, [r7, #12]
		break;
 8000704:	e00f      	b.n	8000726 <periodState+0xce>

	case 'g':
		pd = 8000;
 8000706:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800070a:	60fb      	str	r3, [r7, #12]
		break;
 800070c:	e00b      	b.n	8000726 <periodState+0xce>

	case 'h':
		pd = 3500;
 800070e:	f640 53ac 	movw	r3, #3500	; 0xdac
 8000712:	60fb      	str	r3, [r7, #12]
		break;
 8000714:	e007      	b.n	8000726 <periodState+0xce>

	case 'x':
		pd = 1500;
 8000716:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800071a:	60fb      	str	r3, [r7, #12]
		break;
 800071c:	e003      	b.n	8000726 <periodState+0xce>

	case 'y':
		pd = 500;
 800071e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000722:	60fb      	str	r3, [r7, #12]

	default:

		break;
 8000724:	bf00      	nop
	}

	return pd / x;
 8000726:	68fa      	ldr	r2, [r7, #12]
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	fb92 f3f3 	sdiv	r3, r2, r3
}
 800072e:	4618      	mov	r0, r3
 8000730:	3714      	adds	r7, #20
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr
 8000738:	00011364 	.word	0x00011364

0800073c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000740:	f000 fd38 	bl	80011b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000744:	f000 f8a0 	bl	8000888 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000748:	f000 f904 	bl	8000954 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800074c:	f000 f8d8 	bl	8000900 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  printString(CLEAR_SCREEN);
 8000750:	4b34      	ldr	r3, [pc, #208]	; (8000824 <main+0xe8>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff fd33 	bl	80001c0 <printString>
  printString(GO_TO_TOP);
 800075a:	4b33      	ldr	r3, [pc, #204]	; (8000828 <main+0xec>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff fd2e 	bl	80001c0 <printString>
  printString("Welcome to the ItC!\r\n");
 8000764:	4831      	ldr	r0, [pc, #196]	; (800082c <main+0xf0>)
 8000766:	f7ff fd2b 	bl	80001c0 <printString>
  printString("Created by Daniel Takyi.\r\n");
 800076a:	4831      	ldr	r0, [pc, #196]	; (8000830 <main+0xf4>)
 800076c:	f7ff fd28 	bl	80001c0 <printString>
  HAL_Delay(2000);
 8000770:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000774:	f000 fd50 	bl	8001218 <HAL_Delay>

  //Formats the screen to show counter and create a scroll window
  printString(CLEAR_SCREEN);
 8000778:	4b2a      	ldr	r3, [pc, #168]	; (8000824 <main+0xe8>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff fd1f 	bl	80001c0 <printString>
  printString(GO_TO_TOP);
 8000782:	4b29      	ldr	r3, [pc, #164]	; (8000828 <main+0xec>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff fd1a 	bl	80001c0 <printString>
  printString("Mode: ");
 800078c:	4829      	ldr	r0, [pc, #164]	; (8000834 <main+0xf8>)
 800078e:	f7ff fd17 	bl	80001c0 <printString>
  printString("Failsafe");
 8000792:	4829      	ldr	r0, [pc, #164]	; (8000838 <main+0xfc>)
 8000794:	f7ff fd14 	bl	80001c0 <printString>
  printString("\x1b[9;0H");
 8000798:	4828      	ldr	r0, [pc, #160]	; (800083c <main+0x100>)
 800079a:	f7ff fd11 	bl	80001c0 <printString>
  printString("Enter \"help\" for a list of commands");
 800079e:	4828      	ldr	r0, [pc, #160]	; (8000840 <main+0x104>)
 80007a0:	f7ff fd0e 	bl	80001c0 <printString>
  printString(SCROLL_WINDOW);
 80007a4:	4b27      	ldr	r3, [pc, #156]	; (8000844 <main+0x108>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff fd09 	bl	80001c0 <printString>
  printString(GO_TO_SCROLL);
 80007ae:	4b26      	ldr	r3, [pc, #152]	; (8000848 <main+0x10c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff fd04 	bl	80001c0 <printString>

  printString("\n~>$ ");
 80007b8:	4824      	ldr	r0, [pc, #144]	; (800084c <main+0x110>)
 80007ba:	f7ff fd01 	bl	80001c0 <printString>
  printString(SAVE_CURS);
 80007be:	4b24      	ldr	r3, [pc, #144]	; (8000850 <main+0x114>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fcfc 	bl	80001c0 <printString>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007c8:	f002 f8a0 	bl	800290c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Command_Queue */
  Command_QueueHandle = osMessageQueueNew (1, sizeof(uint16_t), &Command_Queue_attributes);
 80007cc:	4a21      	ldr	r2, [pc, #132]	; (8000854 <main+0x118>)
 80007ce:	2102      	movs	r1, #2
 80007d0:	2001      	movs	r0, #1
 80007d2:	f002 f9d9 	bl	8002b88 <osMessageQueueNew>
 80007d6:	4602      	mov	r2, r0
 80007d8:	4b1f      	ldr	r3, [pc, #124]	; (8000858 <main+0x11c>)
 80007da:	601a      	str	r2, [r3, #0]

  /* creation of Message_Queue */
  Message_QueueHandle = osMessageQueueNew (1, sizeof(uint16_t), &Message_Queue_attributes);
 80007dc:	4a1f      	ldr	r2, [pc, #124]	; (800085c <main+0x120>)
 80007de:	2102      	movs	r1, #2
 80007e0:	2001      	movs	r0, #1
 80007e2:	f002 f9d1 	bl	8002b88 <osMessageQueueNew>
 80007e6:	4602      	mov	r2, r0
 80007e8:	4b1d      	ldr	r3, [pc, #116]	; (8000860 <main+0x124>)
 80007ea:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of StateController */
  StateControllerHandle = osThreadNew(StartStateController, NULL, &StateController_attributes);
 80007ec:	4a1d      	ldr	r2, [pc, #116]	; (8000864 <main+0x128>)
 80007ee:	2100      	movs	r1, #0
 80007f0:	481d      	ldr	r0, [pc, #116]	; (8000868 <main+0x12c>)
 80007f2:	f002 f8f1 	bl	80029d8 <osThreadNew>
 80007f6:	4602      	mov	r2, r0
 80007f8:	4b1c      	ldr	r3, [pc, #112]	; (800086c <main+0x130>)
 80007fa:	601a      	str	r2, [r3, #0]

  /* creation of RX_CLI */
  RX_CLIHandle = osThreadNew(StartRX_CLI, NULL, &RX_CLI_attributes);
 80007fc:	4a1c      	ldr	r2, [pc, #112]	; (8000870 <main+0x134>)
 80007fe:	2100      	movs	r1, #0
 8000800:	481c      	ldr	r0, [pc, #112]	; (8000874 <main+0x138>)
 8000802:	f002 f8e9 	bl	80029d8 <osThreadNew>
 8000806:	4602      	mov	r2, r0
 8000808:	4b1b      	ldr	r3, [pc, #108]	; (8000878 <main+0x13c>)
 800080a:	601a      	str	r2, [r3, #0]

  /* creation of StatusUpdate */
  StatusUpdateHandle = osThreadNew(StartStatusUpdate, NULL, &StatusUpdate_attributes);
 800080c:	4a1b      	ldr	r2, [pc, #108]	; (800087c <main+0x140>)
 800080e:	2100      	movs	r1, #0
 8000810:	481b      	ldr	r0, [pc, #108]	; (8000880 <main+0x144>)
 8000812:	f002 f8e1 	bl	80029d8 <osThreadNew>
 8000816:	4602      	mov	r2, r0
 8000818:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <main+0x148>)
 800081a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800081c:	f002 f8a8 	bl	8002970 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000820:	e7fe      	b.n	8000820 <main+0xe4>
 8000822:	bf00      	nop
 8000824:	20000000 	.word	0x20000000
 8000828:	2000000c 	.word	0x2000000c
 800082c:	08005ac0 	.word	0x08005ac0
 8000830:	08005ad8 	.word	0x08005ad8
 8000834:	08005af4 	.word	0x08005af4
 8000838:	08005afc 	.word	0x08005afc
 800083c:	08005b08 	.word	0x08005b08
 8000840:	08005b10 	.word	0x08005b10
 8000844:	20000004 	.word	0x20000004
 8000848:	20000008 	.word	0x20000008
 800084c:	08005b34 	.word	0x08005b34
 8000850:	2000001c 	.word	0x2000001c
 8000854:	08005d94 	.word	0x08005d94
 8000858:	20001b78 	.word	0x20001b78
 800085c:	08005dac 	.word	0x08005dac
 8000860:	20001b34 	.word	0x20001b34
 8000864:	08005d28 	.word	0x08005d28
 8000868:	08000a19 	.word	0x08000a19
 800086c:	20001bf4 	.word	0x20001bf4
 8000870:	08005d4c 	.word	0x08005d4c
 8000874:	08000acd 	.word	0x08000acd
 8000878:	20001b7c 	.word	0x20001b7c
 800087c:	08005d70 	.word	0x08005d70
 8000880:	08000e19 	.word	0x08000e19
 8000884:	20001b80 	.word	0x20001b80

08000888 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b090      	sub	sp, #64	; 0x40
 800088c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088e:	f107 0318 	add.w	r3, r7, #24
 8000892:	2228      	movs	r2, #40	; 0x28
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f004 ff31 	bl	80056fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008aa:	2302      	movs	r3, #2
 80008ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ae:	2301      	movs	r3, #1
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b2:	2310      	movs	r3, #16
 80008b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ba:	f107 0318 	add.w	r3, r7, #24
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 ff38 	bl	8001734 <HAL_RCC_OscConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0x46>
  {
    Error_Handler();
 80008ca:	f000 fb01 	bl	8000ed0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ce:	230f      	movs	r3, #15
 80008d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008d2:	2300      	movs	r3, #0
 80008d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	2100      	movs	r1, #0
 80008e6:	4618      	mov	r0, r3
 80008e8:	f001 f9a4 	bl	8001c34 <HAL_RCC_ClockConfig>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80008f2:	f000 faed 	bl	8000ed0 <Error_Handler>
  }
}
 80008f6:	bf00      	nop
 80008f8:	3740      	adds	r7, #64	; 0x40
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <MX_USART3_UART_Init+0x4c>)
 8000906:	4a12      	ldr	r2, [pc, #72]	; (8000950 <MX_USART3_UART_Init+0x50>)
 8000908:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <MX_USART3_UART_Init+0x4c>)
 800090c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000910:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <MX_USART3_UART_Init+0x4c>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <MX_USART3_UART_Init+0x4c>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <MX_USART3_UART_Init+0x4c>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000924:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_USART3_UART_Init+0x4c>)
 8000926:	220c      	movs	r2, #12
 8000928:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <MX_USART3_UART_Init+0x4c>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <MX_USART3_UART_Init+0x4c>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000936:	4805      	ldr	r0, [pc, #20]	; (800094c <MX_USART3_UART_Init+0x4c>)
 8000938:	f001 fd92 	bl	8002460 <HAL_UART_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000942:	f000 fac5 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20001b38 	.word	0x20001b38
 8000950:	40004800 	.word	0x40004800

08000954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b088      	sub	sp, #32
 8000958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095a:	f107 0310 	add.w	r3, r7, #16
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000968:	4b28      	ldr	r3, [pc, #160]	; (8000a0c <MX_GPIO_Init+0xb8>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	4a27      	ldr	r2, [pc, #156]	; (8000a0c <MX_GPIO_Init+0xb8>)
 800096e:	f043 0304 	orr.w	r3, r3, #4
 8000972:	6193      	str	r3, [r2, #24]
 8000974:	4b25      	ldr	r3, [pc, #148]	; (8000a0c <MX_GPIO_Init+0xb8>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	f003 0304 	and.w	r3, r3, #4
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000980:	4b22      	ldr	r3, [pc, #136]	; (8000a0c <MX_GPIO_Init+0xb8>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	4a21      	ldr	r2, [pc, #132]	; (8000a0c <MX_GPIO_Init+0xb8>)
 8000986:	f043 0308 	orr.w	r3, r3, #8
 800098a:	6193      	str	r3, [r2, #24]
 800098c:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <MX_GPIO_Init+0xb8>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	f003 0308 	and.w	r3, r3, #8
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000998:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <MX_GPIO_Init+0xb8>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	4a1b      	ldr	r2, [pc, #108]	; (8000a0c <MX_GPIO_Init+0xb8>)
 800099e:	f043 0310 	orr.w	r3, r3, #16
 80009a2:	6193      	str	r3, [r2, #24]
 80009a4:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <MX_GPIO_Init+0xb8>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	f003 0310 	and.w	r3, r3, #16
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R1_Pin|Y1_Pin|G1_Pin|B1_Pin, GPIO_PIN_SET);
 80009b0:	2201      	movs	r2, #1
 80009b2:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80009b6:	4816      	ldr	r0, [pc, #88]	; (8000a10 <MX_GPIO_Init+0xbc>)
 80009b8:	f000 fe8a 	bl	80016d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R2_Pin|Y2_Pin|G2_Pin|B2_Pin, GPIO_PIN_SET);
 80009bc:	2201      	movs	r2, #1
 80009be:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80009c2:	4814      	ldr	r0, [pc, #80]	; (8000a14 <MX_GPIO_Init+0xc0>)
 80009c4:	f000 fe84 	bl	80016d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : R1_Pin Y1_Pin G1_Pin B1_Pin */
  GPIO_InitStruct.Pin = R1_Pin|Y1_Pin|G1_Pin|B1_Pin;
 80009c8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80009cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2302      	movs	r3, #2
 80009d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009da:	f107 0310 	add.w	r3, r7, #16
 80009de:	4619      	mov	r1, r3
 80009e0:	480b      	ldr	r0, [pc, #44]	; (8000a10 <MX_GPIO_Init+0xbc>)
 80009e2:	f000 fd1b 	bl	800141c <HAL_GPIO_Init>

  /*Configure GPIO pins : R2_Pin Y2_Pin G2_Pin B2_Pin */
  GPIO_InitStruct.Pin = R2_Pin|Y2_Pin|G2_Pin|B2_Pin;
 80009e6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80009ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ec:	2301      	movs	r3, #1
 80009ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2302      	movs	r3, #2
 80009f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f8:	f107 0310 	add.w	r3, r7, #16
 80009fc:	4619      	mov	r1, r3
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <MX_GPIO_Init+0xc0>)
 8000a00:	f000 fd0c 	bl	800141c <HAL_GPIO_Init>

}
 8000a04:	bf00      	nop
 8000a06:	3720      	adds	r7, #32
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	40010800 	.word	0x40010800
 8000a14:	40010c00 	.word	0x40010c00

08000a18 <StartStateController>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartStateController */
void StartStateController(void *argument)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	char state = 'x';
 8000a20:	2378      	movs	r3, #120	; 0x78
 8000a22:	75fb      	strb	r3, [r7, #23]
	uint16_t cmd = 101;
 8000a24:	2365      	movs	r3, #101	; 0x65
 8000a26:	817b      	strh	r3, [r7, #10]
	uint16_t msg = cmd;
 8000a28:	897b      	ldrh	r3, [r7, #10]
 8000a2a:	813b      	strh	r3, [r7, #8]
	int period = 400;
 8000a2c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000a30:	60fb      	str	r3, [r7, #12]
	int speedFactor = 1;
 8000a32:	2301      	movs	r3, #1
 8000a34:	613b      	str	r3, [r7, #16]
	/* Infinite loop */
	for(;;)
	{

		if(osMessageQueueGet(Command_QueueHandle, &cmd, NULL, 0U) == osOK)
 8000a36:	4b23      	ldr	r3, [pc, #140]	; (8000ac4 <StartStateController+0xac>)
 8000a38:	6818      	ldr	r0, [r3, #0]
 8000a3a:	f107 010a 	add.w	r1, r7, #10
 8000a3e:	2300      	movs	r3, #0
 8000a40:	2200      	movs	r2, #0
 8000a42:	f002 f99b 	bl	8002d7c <osMessageQueueGet>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d11d      	bne.n	8000a88 <StartStateController+0x70>
		{
			if(cmd != msg && cmd > 100)
 8000a4c:	897a      	ldrh	r2, [r7, #10]
 8000a4e:	893b      	ldrh	r3, [r7, #8]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d010      	beq.n	8000a76 <StartStateController+0x5e>
 8000a54:	897b      	ldrh	r3, [r7, #10]
 8000a56:	2b64      	cmp	r3, #100	; 0x64
 8000a58:	d90d      	bls.n	8000a76 <StartStateController+0x5e>
			{
				if(cmd == 101)
 8000a5a:	897b      	ldrh	r3, [r7, #10]
 8000a5c:	2b65      	cmp	r3, #101	; 0x65
 8000a5e:	d102      	bne.n	8000a66 <StartStateController+0x4e>
				{
					state = 'x';
 8000a60:	2378      	movs	r3, #120	; 0x78
 8000a62:	75fb      	strb	r3, [r7, #23]
 8000a64:	e004      	b.n	8000a70 <StartStateController+0x58>
				}
				else if(cmd == 102)
 8000a66:	897b      	ldrh	r3, [r7, #10]
 8000a68:	2b66      	cmp	r3, #102	; 0x66
 8000a6a:	d101      	bne.n	8000a70 <StartStateController+0x58>
				{
					state = 'a';
 8000a6c:	2361      	movs	r3, #97	; 0x61
 8000a6e:	75fb      	strb	r3, [r7, #23]
				}
				msg = cmd;
 8000a70:	897b      	ldrh	r3, [r7, #10]
 8000a72:	813b      	strh	r3, [r7, #8]
 8000a74:	e008      	b.n	8000a88 <StartStateController+0x70>
			}
			else if(cmd != msg && cmd > 0)
 8000a76:	897a      	ldrh	r2, [r7, #10]
 8000a78:	893b      	ldrh	r3, [r7, #8]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d004      	beq.n	8000a88 <StartStateController+0x70>
 8000a7e:	897b      	ldrh	r3, [r7, #10]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <StartStateController+0x70>
			{
				speedFactor = cmd;
 8000a84:	897b      	ldrh	r3, [r7, #10]
 8000a86:	613b      	str	r3, [r7, #16]
			}
		}

		if(osMessageQueuePut(Message_QueueHandle, &msg, 1U, 0U)!= osOK)
 8000a88:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <StartStateController+0xb0>)
 8000a8a:	6818      	ldr	r0, [r3, #0]
 8000a8c:	f107 0108 	add.w	r1, r7, #8
 8000a90:	2300      	movs	r3, #0
 8000a92:	2201      	movs	r2, #1
 8000a94:	f002 f8fe 	bl	8002c94 <osMessageQueuePut>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <StartStateController+0x8a>
		{
			Error_Handler();
 8000a9e:	f000 fa17 	bl	8000ed0 <Error_Handler>
		}
		period = periodState(state, speedFactor);
 8000aa2:	7dfb      	ldrb	r3, [r7, #23]
 8000aa4:	6939      	ldr	r1, [r7, #16]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff fdd6 	bl	8000658 <periodState>
 8000aac:	60f8      	str	r0, [r7, #12]
		state = lightState(state);
 8000aae:	7dfb      	ldrb	r3, [r7, #23]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff fbbf 	bl	8000234 <lightState>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	75fb      	strb	r3, [r7, #23]



		osDelay(period);
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f002 f835 	bl	8002b2c <osDelay>
		if(osMessageQueueGet(Command_QueueHandle, &cmd, NULL, 0U) == osOK)
 8000ac2:	e7b8      	b.n	8000a36 <StartStateController+0x1e>
 8000ac4:	20001b78 	.word	0x20001b78
 8000ac8:	20001b34 	.word	0x20001b34

08000acc <StartRX_CLI>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRX_CLI */
void StartRX_CLI(void *argument)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b0a0      	sub	sp, #128	; 0x80
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRX_CLI */
	int j = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint16_t cmd = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	char* arg;
	uint8_t temp[100];
  /* Infinite loop */
	for(;;)
	{
		if(HAL_UART_Receive(&huart3, cliBufferRX, 1, 300) == HAL_OK)
 8000ade:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	49ae      	ldr	r1, [pc, #696]	; (8000da0 <StartRX_CLI+0x2d4>)
 8000ae6:	48af      	ldr	r0, [pc, #700]	; (8000da4 <StartRX_CLI+0x2d8>)
 8000ae8:	f001 fd99 	bl	800261e <HAL_UART_Receive>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d1f5      	bne.n	8000ade <StartRX_CLI+0x12>
		{
			printString(RETURN_CURS);
 8000af2:	4bad      	ldr	r3, [pc, #692]	; (8000da8 <StartRX_CLI+0x2dc>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff fb62 	bl	80001c0 <printString>
			printString(SHOW_CURS);
 8000afc:	4bab      	ldr	r3, [pc, #684]	; (8000dac <StartRX_CLI+0x2e0>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff fb5d 	bl	80001c0 <printString>

			copyCharTo((char *)cliBufferRX, (char *)save, j);
 8000b06:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000b08:	49a9      	ldr	r1, [pc, #676]	; (8000db0 <StartRX_CLI+0x2e4>)
 8000b0a:	48a5      	ldr	r0, [pc, #660]	; (8000da0 <StartRX_CLI+0x2d4>)
 8000b0c:	f7ff fb3a 	bl	8000184 <copyCharTo>
			printString(SAVE_CURS);
 8000b10:	4ba8      	ldr	r3, [pc, #672]	; (8000db4 <StartRX_CLI+0x2e8>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fb53 	bl	80001c0 <printString>
			//backspace incidence
			if(cliBufferRX[0] == '\b')
 8000b1a:	4ba1      	ldr	r3, [pc, #644]	; (8000da0 <StartRX_CLI+0x2d4>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	2b08      	cmp	r3, #8
 8000b20:	d103      	bne.n	8000b2a <StartRX_CLI+0x5e>
			{
				j--;
 8000b22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b24:	3b01      	subs	r3, #1
 8000b26:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000b28:	e002      	b.n	8000b30 <StartRX_CLI+0x64>
			}
			else
			{
				j++;
 8000b2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	67fb      	str	r3, [r7, #124]	; 0x7c
			}

			//when enter is hit execute the command
			if(isCompleteLine((char *)cliBufferRX))
 8000b30:	489b      	ldr	r0, [pc, #620]	; (8000da0 <StartRX_CLI+0x2d4>)
 8000b32:	f7ff fb17 	bl	8000164 <isCompleteLine>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d0d0      	beq.n	8000ade <StartRX_CLI+0x12>
			{
				printString("\r\n");
 8000b3c:	489e      	ldr	r0, [pc, #632]	; (8000db8 <StartRX_CLI+0x2ec>)
 8000b3e:	f7ff fb3f 	bl	80001c0 <printString>
				save[j-1] = '\0';
 8000b42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b44:	3b01      	subs	r3, #1
 8000b46:	4a9a      	ldr	r2, [pc, #616]	; (8000db0 <StartRX_CLI+0x2e4>)
 8000b48:	2100      	movs	r1, #0
 8000b4a:	54d1      	strb	r1, [r2, r3]
				while(j < 100 && save[j] != '\0')
 8000b4c:	e007      	b.n	8000b5e <StartRX_CLI+0x92>
				{
					save[j] = '\0';
 8000b4e:	4a98      	ldr	r2, [pc, #608]	; (8000db0 <StartRX_CLI+0x2e4>)
 8000b50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b52:	4413      	add	r3, r2
 8000b54:	2200      	movs	r2, #0
 8000b56:	701a      	strb	r2, [r3, #0]
					j++;
 8000b58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	67fb      	str	r3, [r7, #124]	; 0x7c
				while(j < 100 && save[j] != '\0')
 8000b5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b60:	2b63      	cmp	r3, #99	; 0x63
 8000b62:	dc05      	bgt.n	8000b70 <StartRX_CLI+0xa4>
 8000b64:	4a92      	ldr	r2, [pc, #584]	; (8000db0 <StartRX_CLI+0x2e4>)
 8000b66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b68:	4413      	add	r3, r2
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d1ee      	bne.n	8000b4e <StartRX_CLI+0x82>
				}

				strcpy((char *)temp, (const char *)save);
 8000b70:	f107 0308 	add.w	r3, r7, #8
 8000b74:	498e      	ldr	r1, [pc, #568]	; (8000db0 <StartRX_CLI+0x2e4>)
 8000b76:	4618      	mov	r0, r3
 8000b78:	f004 fdc9 	bl	800570e <strcpy>
				arg = strtok((char *)save, " ");
 8000b7c:	498f      	ldr	r1, [pc, #572]	; (8000dbc <StartRX_CLI+0x2f0>)
 8000b7e:	488c      	ldr	r0, [pc, #560]	; (8000db0 <StartRX_CLI+0x2e4>)
 8000b80:	f004 fdce 	bl	8005720 <strtok>
 8000b84:	6778      	str	r0, [r7, #116]	; 0x74
				cmdStr = arg;
 8000b86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b88:	673b      	str	r3, [r7, #112]	; 0x70
				arg = strtok(NULL, " ");
 8000b8a:	498c      	ldr	r1, [pc, #560]	; (8000dbc <StartRX_CLI+0x2f0>)
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	f004 fdc7 	bl	8005720 <strtok>
 8000b92:	6778      	str	r0, [r7, #116]	; 0x74

				if(arg == NULL && strcmp((char *)cmdStr, "help") == 0)
 8000b94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d113      	bne.n	8000bc2 <StartRX_CLI+0xf6>
 8000b9a:	4989      	ldr	r1, [pc, #548]	; (8000dc0 <StartRX_CLI+0x2f4>)
 8000b9c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000b9e:	f7ff fad7 	bl	8000150 <strcmp>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d10c      	bne.n	8000bc2 <StartRX_CLI+0xf6>
				{
					cmd = 103;
 8000ba8:	2367      	movs	r3, #103	; 0x67
 8000baa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
					printString("1. \"mode fsm\" switches controller to Failsafe mode\r\n");
 8000bae:	4885      	ldr	r0, [pc, #532]	; (8000dc4 <StartRX_CLI+0x2f8>)
 8000bb0:	f7ff fb06 	bl	80001c0 <printString>
					printString("\n2. \"mode scm\" switches controller to Static Cycle mode\r\n");
 8000bb4:	4884      	ldr	r0, [pc, #528]	; (8000dc8 <StartRX_CLI+0x2fc>)
 8000bb6:	f7ff fb03 	bl	80001c0 <printString>
					printString("\n3. \"atm x\" enters accelerated test mode with multiplication factor x, when 0 < x < 101\r\n");
 8000bba:	4884      	ldr	r0, [pc, #528]	; (8000dcc <StartRX_CLI+0x300>)
 8000bbc:	f7ff fb00 	bl	80001c0 <printString>
 8000bc0:	e0d2      	b.n	8000d68 <StartRX_CLI+0x29c>
				}
				else if(arg == NULL && strcmp((char *)cmdStr, "clear") == 0)
 8000bc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d135      	bne.n	8000c34 <StartRX_CLI+0x168>
 8000bc8:	4981      	ldr	r1, [pc, #516]	; (8000dd0 <StartRX_CLI+0x304>)
 8000bca:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000bcc:	f7ff fac0 	bl	8000150 <strcmp>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d12e      	bne.n	8000c34 <StartRX_CLI+0x168>
				{
					cmd = 104;
 8000bd6:	2368      	movs	r3, #104	; 0x68
 8000bd8:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
					printString(CLEAR_SCREEN);
 8000bdc:	4b7d      	ldr	r3, [pc, #500]	; (8000dd4 <StartRX_CLI+0x308>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff faed 	bl	80001c0 <printString>
					printString(GO_TO_TOP);
 8000be6:	4b7c      	ldr	r3, [pc, #496]	; (8000dd8 <StartRX_CLI+0x30c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fae8 	bl	80001c0 <printString>
					printString("Mode: ");
 8000bf0:	487a      	ldr	r0, [pc, #488]	; (8000ddc <StartRX_CLI+0x310>)
 8000bf2:	f7ff fae5 	bl	80001c0 <printString>
					printString("\x1b[9;0H");
 8000bf6:	487a      	ldr	r0, [pc, #488]	; (8000de0 <StartRX_CLI+0x314>)
 8000bf8:	f7ff fae2 	bl	80001c0 <printString>
					printString("Enter \"help\" for a list of commands");
 8000bfc:	4879      	ldr	r0, [pc, #484]	; (8000de4 <StartRX_CLI+0x318>)
 8000bfe:	f7ff fadf 	bl	80001c0 <printString>
					printString(SCROLL_WINDOW);
 8000c02:	4b79      	ldr	r3, [pc, #484]	; (8000de8 <StartRX_CLI+0x31c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff fada 	bl	80001c0 <printString>
					printString(GO_TO_SCROLL);
 8000c0c:	4b77      	ldr	r3, [pc, #476]	; (8000dec <StartRX_CLI+0x320>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fad5 	bl	80001c0 <printString>
					if(osMessageQueuePut(Command_QueueHandle, &cmd, 1U, 0U)!= osOK)
 8000c16:	4b76      	ldr	r3, [pc, #472]	; (8000df0 <StartRX_CLI+0x324>)
 8000c18:	6818      	ldr	r0, [r3, #0]
 8000c1a:	f107 016e 	add.w	r1, r7, #110	; 0x6e
 8000c1e:	2300      	movs	r3, #0
 8000c20:	2201      	movs	r2, #1
 8000c22:	f002 f837 	bl	8002c94 <osMessageQueuePut>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	f000 809d 	beq.w	8000d68 <StartRX_CLI+0x29c>
					{
						Error_Handler();
 8000c2e:	f000 f94f 	bl	8000ed0 <Error_Handler>
					if(osMessageQueuePut(Command_QueueHandle, &cmd, 1U, 0U)!= osOK)
 8000c32:	e099      	b.n	8000d68 <StartRX_CLI+0x29c>
					}
				}
				else if(cmdStr == NULL)
 8000c34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d103      	bne.n	8000c42 <StartRX_CLI+0x176>
				{
					cmd = 103;
 8000c3a:	2367      	movs	r3, #103	; 0x67
 8000c3c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8000c40:	e092      	b.n	8000d68 <StartRX_CLI+0x29c>
				}
				else if(strtok(NULL, " ") == NULL)
 8000c42:	495e      	ldr	r1, [pc, #376]	; (8000dbc <StartRX_CLI+0x2f0>)
 8000c44:	2000      	movs	r0, #0
 8000c46:	f004 fd6b 	bl	8005720 <strtok>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d17d      	bne.n	8000d4c <StartRX_CLI+0x280>
				{
					if(atoi(arg) >= 1 && atoi(arg) <= 100 && strcmp((char *)cmdStr, "atm") == 0)
 8000c50:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000c52:	f004 fd1b 	bl	800568c <atoi>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	dd24      	ble.n	8000ca6 <StartRX_CLI+0x1da>
 8000c5c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000c5e:	f004 fd15 	bl	800568c <atoi>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b64      	cmp	r3, #100	; 0x64
 8000c66:	dc1e      	bgt.n	8000ca6 <StartRX_CLI+0x1da>
 8000c68:	4962      	ldr	r1, [pc, #392]	; (8000df4 <StartRX_CLI+0x328>)
 8000c6a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000c6c:	f7ff fa70 	bl	8000150 <strcmp>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d117      	bne.n	8000ca6 <StartRX_CLI+0x1da>
					{
						cmd = (uint16_t)atoi(arg);
 8000c76:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000c78:	f004 fd08 	bl	800568c <atoi>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
						printString("Entering accelerated test mode.\r\n");
 8000c84:	485c      	ldr	r0, [pc, #368]	; (8000df8 <StartRX_CLI+0x32c>)
 8000c86:	f7ff fa9b 	bl	80001c0 <printString>
						if(osMessageQueuePut(Command_QueueHandle, &cmd, 1U, 0U)!= osOK)
 8000c8a:	4b59      	ldr	r3, [pc, #356]	; (8000df0 <StartRX_CLI+0x324>)
 8000c8c:	6818      	ldr	r0, [r3, #0]
 8000c8e:	f107 016e 	add.w	r1, r7, #110	; 0x6e
 8000c92:	2300      	movs	r3, #0
 8000c94:	2201      	movs	r2, #1
 8000c96:	f001 fffd 	bl	8002c94 <osMessageQueuePut>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d063      	beq.n	8000d68 <StartRX_CLI+0x29c>
						{
							Error_Handler();
 8000ca0:	f000 f916 	bl	8000ed0 <Error_Handler>
						if(osMessageQueuePut(Command_QueueHandle, &cmd, 1U, 0U)!= osOK)
 8000ca4:	e060      	b.n	8000d68 <StartRX_CLI+0x29c>
						}
					}
					else if(strcmp((char *)cmdStr, "mode") == 0 && strcmp((char *)arg, "fsm") == 0)
 8000ca6:	4955      	ldr	r1, [pc, #340]	; (8000dfc <StartRX_CLI+0x330>)
 8000ca8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000caa:	f7ff fa51 	bl	8000150 <strcmp>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d11a      	bne.n	8000cea <StartRX_CLI+0x21e>
 8000cb4:	4952      	ldr	r1, [pc, #328]	; (8000e00 <StartRX_CLI+0x334>)
 8000cb6:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000cb8:	f7ff fa4a 	bl	8000150 <strcmp>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d113      	bne.n	8000cea <StartRX_CLI+0x21e>
					{
						cmd = 101;
 8000cc2:	2365      	movs	r3, #101	; 0x65
 8000cc4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
						printString("Switching to Failsafe mode.\r\n");
 8000cc8:	484e      	ldr	r0, [pc, #312]	; (8000e04 <StartRX_CLI+0x338>)
 8000cca:	f7ff fa79 	bl	80001c0 <printString>
						if(osMessageQueuePut(Command_QueueHandle, &cmd, 1U, 0U)!= osOK)
 8000cce:	4b48      	ldr	r3, [pc, #288]	; (8000df0 <StartRX_CLI+0x324>)
 8000cd0:	6818      	ldr	r0, [r3, #0]
 8000cd2:	f107 016e 	add.w	r1, r7, #110	; 0x6e
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	2201      	movs	r2, #1
 8000cda:	f001 ffdb 	bl	8002c94 <osMessageQueuePut>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d041      	beq.n	8000d68 <StartRX_CLI+0x29c>
						{
							Error_Handler();
 8000ce4:	f000 f8f4 	bl	8000ed0 <Error_Handler>
						if(osMessageQueuePut(Command_QueueHandle, &cmd, 1U, 0U)!= osOK)
 8000ce8:	e03e      	b.n	8000d68 <StartRX_CLI+0x29c>
						}
					}
					else if(strcmp((char *)cmdStr, "mode") == 0 && strcmp((char *)arg, "scm") == 0)
 8000cea:	4944      	ldr	r1, [pc, #272]	; (8000dfc <StartRX_CLI+0x330>)
 8000cec:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000cee:	f7ff fa2f 	bl	8000150 <strcmp>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d11a      	bne.n	8000d2e <StartRX_CLI+0x262>
 8000cf8:	4943      	ldr	r1, [pc, #268]	; (8000e08 <StartRX_CLI+0x33c>)
 8000cfa:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000cfc:	f7ff fa28 	bl	8000150 <strcmp>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d113      	bne.n	8000d2e <StartRX_CLI+0x262>
					{
						cmd = 102;
 8000d06:	2366      	movs	r3, #102	; 0x66
 8000d08:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
						printString("Switching to Static Cycle mode.\r\n");
 8000d0c:	483f      	ldr	r0, [pc, #252]	; (8000e0c <StartRX_CLI+0x340>)
 8000d0e:	f7ff fa57 	bl	80001c0 <printString>
						if(osMessageQueuePut(Command_QueueHandle, &cmd, 1U, 0U)!= osOK)
 8000d12:	4b37      	ldr	r3, [pc, #220]	; (8000df0 <StartRX_CLI+0x324>)
 8000d14:	6818      	ldr	r0, [r3, #0]
 8000d16:	f107 016e 	add.w	r1, r7, #110	; 0x6e
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	f001 ffb9 	bl	8002c94 <osMessageQueuePut>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d01f      	beq.n	8000d68 <StartRX_CLI+0x29c>
						{
							Error_Handler();
 8000d28:	f000 f8d2 	bl	8000ed0 <Error_Handler>
						if(osMessageQueuePut(Command_QueueHandle, &cmd, 1U, 0U)!= osOK)
 8000d2c:	e01c      	b.n	8000d68 <StartRX_CLI+0x29c>
						}
					}
					else
					{
						cmd = 103;
 8000d2e:	2367      	movs	r3, #103	; 0x67
 8000d30:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
						printString("Invalid command: ");
 8000d34:	4836      	ldr	r0, [pc, #216]	; (8000e10 <StartRX_CLI+0x344>)
 8000d36:	f7ff fa43 	bl	80001c0 <printString>
						printString((char *)temp);
 8000d3a:	f107 0308 	add.w	r3, r7, #8
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff fa3e 	bl	80001c0 <printString>
						printString("\r\n");
 8000d44:	481c      	ldr	r0, [pc, #112]	; (8000db8 <StartRX_CLI+0x2ec>)
 8000d46:	f7ff fa3b 	bl	80001c0 <printString>
 8000d4a:	e00d      	b.n	8000d68 <StartRX_CLI+0x29c>
					}
				}
				else
				{
					cmd = 103;
 8000d4c:	2367      	movs	r3, #103	; 0x67
 8000d4e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
					printString("Invalid command: ");
 8000d52:	482f      	ldr	r0, [pc, #188]	; (8000e10 <StartRX_CLI+0x344>)
 8000d54:	f7ff fa34 	bl	80001c0 <printString>
					printString((char *)temp);
 8000d58:	f107 0308 	add.w	r3, r7, #8
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fa2f 	bl	80001c0 <printString>
					printString("\r\n");
 8000d62:	4815      	ldr	r0, [pc, #84]	; (8000db8 <StartRX_CLI+0x2ec>)
 8000d64:	f7ff fa2c 	bl	80001c0 <printString>
				}

				j = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	67fb      	str	r3, [r7, #124]	; 0x7c
				for(int i = 0; i < 20; i++)
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	67bb      	str	r3, [r7, #120]	; 0x78
 8000d70:	e007      	b.n	8000d82 <StartRX_CLI+0x2b6>
				{
					save[i] = '\0';
 8000d72:	4a0f      	ldr	r2, [pc, #60]	; (8000db0 <StartRX_CLI+0x2e4>)
 8000d74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d76:	4413      	add	r3, r2
 8000d78:	2200      	movs	r2, #0
 8000d7a:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 20; i++)
 8000d7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d7e:	3301      	adds	r3, #1
 8000d80:	67bb      	str	r3, [r7, #120]	; 0x78
 8000d82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d84:	2b13      	cmp	r3, #19
 8000d86:	ddf4      	ble.n	8000d72 <StartRX_CLI+0x2a6>
				}
				printString("\r\n~>$ ");
 8000d88:	4822      	ldr	r0, [pc, #136]	; (8000e14 <StartRX_CLI+0x348>)
 8000d8a:	f7ff fa19 	bl	80001c0 <printString>

				printString(SAVE_CURS);
 8000d8e:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <StartRX_CLI+0x2e8>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff fa14 	bl	80001c0 <printString>
				osDelay(10);
 8000d98:	200a      	movs	r0, #10
 8000d9a:	f001 fec7 	bl	8002b2c <osDelay>
		if(HAL_UART_Receive(&huart3, cliBufferRX, 1, 300) == HAL_OK)
 8000d9e:	e69e      	b.n	8000ade <StartRX_CLI+0x12>
 8000da0:	20001be8 	.word	0x20001be8
 8000da4:	20001b38 	.word	0x20001b38
 8000da8:	20000020 	.word	0x20000020
 8000dac:	20000018 	.word	0x20000018
 8000db0:	20001b84 	.word	0x20001b84
 8000db4:	2000001c 	.word	0x2000001c
 8000db8:	08005b3c 	.word	0x08005b3c
 8000dbc:	08005b40 	.word	0x08005b40
 8000dc0:	08005b44 	.word	0x08005b44
 8000dc4:	08005b4c 	.word	0x08005b4c
 8000dc8:	08005b84 	.word	0x08005b84
 8000dcc:	08005bc0 	.word	0x08005bc0
 8000dd0:	08005c1c 	.word	0x08005c1c
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	2000000c 	.word	0x2000000c
 8000ddc:	08005af4 	.word	0x08005af4
 8000de0:	08005b08 	.word	0x08005b08
 8000de4:	08005b10 	.word	0x08005b10
 8000de8:	20000004 	.word	0x20000004
 8000dec:	20000008 	.word	0x20000008
 8000df0:	20001b78 	.word	0x20001b78
 8000df4:	08005c24 	.word	0x08005c24
 8000df8:	08005c28 	.word	0x08005c28
 8000dfc:	08005c4c 	.word	0x08005c4c
 8000e00:	08005c54 	.word	0x08005c54
 8000e04:	08005c58 	.word	0x08005c58
 8000e08:	08005c78 	.word	0x08005c78
 8000e0c:	08005c7c 	.word	0x08005c7c
 8000e10:	08005ca0 	.word	0x08005ca0
 8000e14:	08005cb4 	.word	0x08005cb4

08000e18 <StartStatusUpdate>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStatusUpdate */
void StartStatusUpdate(void *argument)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStatusUpdate */
	uint16_t msg = 101;
 8000e20:	2365      	movs	r3, #101	; 0x65
 8000e22:	81bb      	strh	r3, [r7, #12]
	uint16_t mode = msg;
 8000e24:	89bb      	ldrh	r3, [r7, #12]
 8000e26:	81fb      	strh	r3, [r7, #14]
  /* Infinite loop */
	for(;;)
	{
		if(osMessageQueueGet(Message_QueueHandle, &msg, NULL, 0U) == osOK)
 8000e28:	4b1a      	ldr	r3, [pc, #104]	; (8000e94 <StartStatusUpdate+0x7c>)
 8000e2a:	6818      	ldr	r0, [r3, #0]
 8000e2c:	f107 010c 	add.w	r1, r7, #12
 8000e30:	2300      	movs	r3, #0
 8000e32:	2200      	movs	r2, #0
 8000e34:	f001 ffa2 	bl	8002d7c <osMessageQueueGet>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d126      	bne.n	8000e8c <StartStatusUpdate+0x74>
		{
			if(msg != mode)
 8000e3e:	89bb      	ldrh	r3, [r7, #12]
 8000e40:	89fa      	ldrh	r2, [r7, #14]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d022      	beq.n	8000e8c <StartStatusUpdate+0x74>
			{
				if(msg == 104)
 8000e46:	89bb      	ldrh	r3, [r7, #12]
 8000e48:	2b68      	cmp	r3, #104	; 0x68
 8000e4a:	d101      	bne.n	8000e50 <StartStatusUpdate+0x38>
				{
					msg = mode;
 8000e4c:	89fb      	ldrh	r3, [r7, #14]
 8000e4e:	81bb      	strh	r3, [r7, #12]
				}
				printString(HIDE_CURS);
 8000e50:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <StartStatusUpdate+0x80>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff f9b3 	bl	80001c0 <printString>
				printString(GO_TO_COUNT);
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <StartStatusUpdate+0x84>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff f9ae 	bl	80001c0 <printString>
				printString("                           ");
 8000e64:	480e      	ldr	r0, [pc, #56]	; (8000ea0 <StartStatusUpdate+0x88>)
 8000e66:	f7ff f9ab 	bl	80001c0 <printString>
				printString(GO_TO_COUNT);
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <StartStatusUpdate+0x84>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff f9a6 	bl	80001c0 <printString>
				if(msg == 102)
 8000e74:	89bb      	ldrh	r3, [r7, #12]
 8000e76:	2b66      	cmp	r3, #102	; 0x66
 8000e78:	d103      	bne.n	8000e82 <StartStatusUpdate+0x6a>
				{
					printString("Static cycle mode");
 8000e7a:	480a      	ldr	r0, [pc, #40]	; (8000ea4 <StartStatusUpdate+0x8c>)
 8000e7c:	f7ff f9a0 	bl	80001c0 <printString>
 8000e80:	e002      	b.n	8000e88 <StartStatusUpdate+0x70>
				}
				else
				{
					printString("Failsafe mode");
 8000e82:	4809      	ldr	r0, [pc, #36]	; (8000ea8 <StartStatusUpdate+0x90>)
 8000e84:	f7ff f99c 	bl	80001c0 <printString>
				}
				mode = msg;
 8000e88:	89bb      	ldrh	r3, [r7, #12]
 8000e8a:	81fb      	strh	r3, [r7, #14]
			}

		}

		osDelay(10);
 8000e8c:	200a      	movs	r0, #10
 8000e8e:	f001 fe4d 	bl	8002b2c <osDelay>
		if(osMessageQueueGet(Message_QueueHandle, &msg, NULL, 0U) == osOK)
 8000e92:	e7c9      	b.n	8000e28 <StartStatusUpdate+0x10>
 8000e94:	20001b34 	.word	0x20001b34
 8000e98:	20000014 	.word	0x20000014
 8000e9c:	20000010 	.word	0x20000010
 8000ea0:	08005cbc 	.word	0x08005cbc
 8000ea4:	08005cd8 	.word	0x08005cd8
 8000ea8:	08005cec 	.word	0x08005cec

08000eac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a04      	ldr	r2, [pc, #16]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d101      	bne.n	8000ec2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ebe:	f000 f98f 	bl	80011e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40000800 	.word	0x40000800

08000ed0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr

08000edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <HAL_MspInit+0x5c>)
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	4a14      	ldr	r2, [pc, #80]	; (8000f38 <HAL_MspInit+0x5c>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	6193      	str	r3, [r2, #24]
 8000eee:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <HAL_MspInit+0x5c>)
 8000ef0:	699b      	ldr	r3, [r3, #24]
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efa:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <HAL_MspInit+0x5c>)
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	4a0e      	ldr	r2, [pc, #56]	; (8000f38 <HAL_MspInit+0x5c>)
 8000f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f04:	61d3      	str	r3, [r2, #28]
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <HAL_MspInit+0x5c>)
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f12:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <HAL_MspInit+0x60>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <HAL_MspInit+0x60>)
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	3714      	adds	r7, #20
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40010000 	.word	0x40010000

08000f40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	; 0x28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a25      	ldr	r2, [pc, #148]	; (8000ff0 <HAL_UART_MspInit+0xb0>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d143      	bne.n	8000fe8 <HAL_UART_MspInit+0xa8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f60:	4b24      	ldr	r3, [pc, #144]	; (8000ff4 <HAL_UART_MspInit+0xb4>)
 8000f62:	69db      	ldr	r3, [r3, #28]
 8000f64:	4a23      	ldr	r2, [pc, #140]	; (8000ff4 <HAL_UART_MspInit+0xb4>)
 8000f66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f6a:	61d3      	str	r3, [r2, #28]
 8000f6c:	4b21      	ldr	r3, [pc, #132]	; (8000ff4 <HAL_UART_MspInit+0xb4>)
 8000f6e:	69db      	ldr	r3, [r3, #28]
 8000f70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f78:	4b1e      	ldr	r3, [pc, #120]	; (8000ff4 <HAL_UART_MspInit+0xb4>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	4a1d      	ldr	r2, [pc, #116]	; (8000ff4 <HAL_UART_MspInit+0xb4>)
 8000f7e:	f043 0310 	orr.w	r3, r3, #16
 8000f82:	6193      	str	r3, [r2, #24]
 8000f84:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <HAL_UART_MspInit+0xb4>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	f003 0310 	and.w	r3, r3, #16
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	2302      	movs	r3, #2
 8000f98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4814      	ldr	r0, [pc, #80]	; (8000ff8 <HAL_UART_MspInit+0xb8>)
 8000fa6:	f000 fa39 	bl	800141c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000faa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	480e      	ldr	r0, [pc, #56]	; (8000ff8 <HAL_UART_MspInit+0xb8>)
 8000fc0:	f000 fa2c 	bl	800141c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8000fc4:	4b0d      	ldr	r3, [pc, #52]	; (8000ffc <HAL_UART_MspInit+0xbc>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8000fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fcc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8000fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8000fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fdc:	f043 0310 	orr.w	r3, r3, #16
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8000fe2:	4a06      	ldr	r2, [pc, #24]	; (8000ffc <HAL_UART_MspInit+0xbc>)
 8000fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe6:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fe8:	bf00      	nop
 8000fea:	3728      	adds	r7, #40	; 0x28
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40004800 	.word	0x40004800
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	40011000 	.word	0x40011000
 8000ffc:	40010000 	.word	0x40010000

08001000 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08c      	sub	sp, #48	; 0x30
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8001010:	2200      	movs	r2, #0
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	201e      	movs	r0, #30
 8001016:	f000 f9d6 	bl	80013c6 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800101a:	201e      	movs	r0, #30
 800101c:	f000 f9ef 	bl	80013fe <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001020:	4b1e      	ldr	r3, [pc, #120]	; (800109c <HAL_InitTick+0x9c>)
 8001022:	69db      	ldr	r3, [r3, #28]
 8001024:	4a1d      	ldr	r2, [pc, #116]	; (800109c <HAL_InitTick+0x9c>)
 8001026:	f043 0304 	orr.w	r3, r3, #4
 800102a:	61d3      	str	r3, [r2, #28]
 800102c:	4b1b      	ldr	r3, [pc, #108]	; (800109c <HAL_InitTick+0x9c>)
 800102e:	69db      	ldr	r3, [r3, #28]
 8001030:	f003 0304 	and.w	r3, r3, #4
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001038:	f107 0210 	add.w	r2, r7, #16
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4611      	mov	r1, r2
 8001042:	4618      	mov	r0, r3
 8001044:	f000 ff74 	bl	8001f30 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001048:	f000 ff4a 	bl	8001ee0 <HAL_RCC_GetPCLK1Freq>
 800104c:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800104e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001050:	4a13      	ldr	r2, [pc, #76]	; (80010a0 <HAL_InitTick+0xa0>)
 8001052:	fba2 2303 	umull	r2, r3, r2, r3
 8001056:	0c9b      	lsrs	r3, r3, #18
 8001058:	3b01      	subs	r3, #1
 800105a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <HAL_InitTick+0xa4>)
 800105e:	4a12      	ldr	r2, [pc, #72]	; (80010a8 <HAL_InitTick+0xa8>)
 8001060:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <HAL_InitTick+0xa4>)
 8001064:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001068:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800106a:	4a0e      	ldr	r2, [pc, #56]	; (80010a4 <HAL_InitTick+0xa4>)
 800106c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800106e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <HAL_InitTick+0xa4>)
 8001072:	2200      	movs	r2, #0
 8001074:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <HAL_InitTick+0xa4>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 800107c:	4809      	ldr	r0, [pc, #36]	; (80010a4 <HAL_InitTick+0xa4>)
 800107e:	f000 ffa5 	bl	8001fcc <HAL_TIM_Base_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d104      	bne.n	8001092 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001088:	4806      	ldr	r0, [pc, #24]	; (80010a4 <HAL_InitTick+0xa4>)
 800108a:	f000 fff7 	bl	800207c <HAL_TIM_Base_Start_IT>
 800108e:	4603      	mov	r3, r0
 8001090:	e000      	b.n	8001094 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
}
 8001094:	4618      	mov	r0, r3
 8001096:	3730      	adds	r7, #48	; 0x30
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40021000 	.word	0x40021000
 80010a0:	431bde83 	.word	0x431bde83
 80010a4:	20001bf8 	.word	0x20001bf8
 80010a8:	40000800 	.word	0x40000800

080010ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr

080010b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <HardFault_Handler+0x4>

080010be <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c2:	e7fe      	b.n	80010c2 <MemManage_Handler+0x4>

080010c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <BusFault_Handler+0x4>

080010ca <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010ce:	e7fe      	b.n	80010ce <UsageFault_Handler+0x4>

080010d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr

080010dc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80010e0:	4802      	ldr	r0, [pc, #8]	; (80010ec <TIM4_IRQHandler+0x10>)
 80010e2:	f001 f81d 	bl	8002120 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20001bf8 	.word	0x20001bf8

080010f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f8:	4a14      	ldr	r2, [pc, #80]	; (800114c <_sbrk+0x5c>)
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <_sbrk+0x60>)
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001104:	4b13      	ldr	r3, [pc, #76]	; (8001154 <_sbrk+0x64>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d102      	bne.n	8001112 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <_sbrk+0x64>)
 800110e:	4a12      	ldr	r2, [pc, #72]	; (8001158 <_sbrk+0x68>)
 8001110:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <_sbrk+0x64>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	429a      	cmp	r2, r3
 800111e:	d207      	bcs.n	8001130 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001120:	f004 fab8 	bl	8005694 <__errno>
 8001124:	4602      	mov	r2, r0
 8001126:	230c      	movs	r3, #12
 8001128:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800112a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800112e:	e009      	b.n	8001144 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <_sbrk+0x64>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001136:	4b07      	ldr	r3, [pc, #28]	; (8001154 <_sbrk+0x64>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	4a05      	ldr	r2, [pc, #20]	; (8001154 <_sbrk+0x64>)
 8001140:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001142:	68fb      	ldr	r3, [r7, #12]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20005000 	.word	0x20005000
 8001150:	00000400 	.word	0x00000400
 8001154:	20000220 	.word	0x20000220
 8001158:	20001c88 	.word	0x20001c88

0800115c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr

08001168 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001168:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800116a:	e003      	b.n	8001174 <LoopCopyDataInit>

0800116c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800116c:	4b0b      	ldr	r3, [pc, #44]	; (800119c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800116e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001170:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001172:	3104      	adds	r1, #4

08001174 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001174:	480a      	ldr	r0, [pc, #40]	; (80011a0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001176:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001178:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800117a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800117c:	d3f6      	bcc.n	800116c <CopyDataInit>
  ldr r2, =_sbss
 800117e:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001180:	e002      	b.n	8001188 <LoopFillZerobss>

08001182 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001184:	f842 3b04 	str.w	r3, [r2], #4

08001188 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001188:	4b08      	ldr	r3, [pc, #32]	; (80011ac <LoopFillZerobss+0x24>)
  cmp r2, r3
 800118a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800118c:	d3f9      	bcc.n	8001182 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800118e:	f7ff ffe5 	bl	800115c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001192:	f004 fa85 	bl	80056a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001196:	f7ff fad1 	bl	800073c <main>
  bx lr
 800119a:	4770      	bx	lr
  ldr r3, =_sidata
 800119c:	08005ef0 	.word	0x08005ef0
  ldr r0, =_sdata
 80011a0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80011a4:	20000204 	.word	0x20000204
  ldr r2, =_sbss
 80011a8:	20000204 	.word	0x20000204
  ldr r3, = _ebss
 80011ac:	20001c88 	.word	0x20001c88

080011b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011b0:	e7fe      	b.n	80011b0 <ADC1_2_IRQHandler>
	...

080011b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <HAL_Init+0x28>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a07      	ldr	r2, [pc, #28]	; (80011dc <HAL_Init+0x28>)
 80011be:	f043 0310 	orr.w	r3, r3, #16
 80011c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c4:	2003      	movs	r0, #3
 80011c6:	f000 f8f3 	bl	80013b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ca:	2000      	movs	r0, #0
 80011cc:	f7ff ff18 	bl	8001000 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011d0:	f7ff fe84 	bl	8000edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40022000 	.word	0x40022000

080011e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e4:	4b05      	ldr	r3, [pc, #20]	; (80011fc <HAL_IncTick+0x1c>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b05      	ldr	r3, [pc, #20]	; (8001200 <HAL_IncTick+0x20>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4413      	add	r3, r2
 80011f0:	4a03      	ldr	r2, [pc, #12]	; (8001200 <HAL_IncTick+0x20>)
 80011f2:	6013      	str	r3, [r2, #0]
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr
 80011fc:	2000002c 	.word	0x2000002c
 8001200:	20001c40 	.word	0x20001c40

08001204 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  return uwTick;
 8001208:	4b02      	ldr	r3, [pc, #8]	; (8001214 <HAL_GetTick+0x10>)
 800120a:	681b      	ldr	r3, [r3, #0]
}
 800120c:	4618      	mov	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr
 8001214:	20001c40 	.word	0x20001c40

08001218 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001220:	f7ff fff0 	bl	8001204 <HAL_GetTick>
 8001224:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001230:	d005      	beq.n	800123e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <HAL_Delay+0x40>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	461a      	mov	r2, r3
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4413      	add	r3, r2
 800123c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800123e:	bf00      	nop
 8001240:	f7ff ffe0 	bl	8001204 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	429a      	cmp	r2, r3
 800124e:	d8f7      	bhi.n	8001240 <HAL_Delay+0x28>
  {
  }
}
 8001250:	bf00      	nop
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	2000002c 	.word	0x2000002c

0800125c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <__NVIC_SetPriorityGrouping+0x44>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001278:	4013      	ands	r3, r2
 800127a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001284:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800128c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800128e:	4a04      	ldr	r2, [pc, #16]	; (80012a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	60d3      	str	r3, [r2, #12]
}
 8001294:	bf00      	nop
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a8:	4b04      	ldr	r3, [pc, #16]	; (80012bc <__NVIC_GetPriorityGrouping+0x18>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	0a1b      	lsrs	r3, r3, #8
 80012ae:	f003 0307 	and.w	r3, r3, #7
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	db0b      	blt.n	80012ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	f003 021f 	and.w	r2, r3, #31
 80012d8:	4906      	ldr	r1, [pc, #24]	; (80012f4 <__NVIC_EnableIRQ+0x34>)
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	095b      	lsrs	r3, r3, #5
 80012e0:	2001      	movs	r0, #1
 80012e2:	fa00 f202 	lsl.w	r2, r0, r2
 80012e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr
 80012f4:	e000e100 	.word	0xe000e100

080012f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	6039      	str	r1, [r7, #0]
 8001302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001308:	2b00      	cmp	r3, #0
 800130a:	db0a      	blt.n	8001322 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	b2da      	uxtb	r2, r3
 8001310:	490c      	ldr	r1, [pc, #48]	; (8001344 <__NVIC_SetPriority+0x4c>)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	0112      	lsls	r2, r2, #4
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	440b      	add	r3, r1
 800131c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001320:	e00a      	b.n	8001338 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4908      	ldr	r1, [pc, #32]	; (8001348 <__NVIC_SetPriority+0x50>)
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	f003 030f 	and.w	r3, r3, #15
 800132e:	3b04      	subs	r3, #4
 8001330:	0112      	lsls	r2, r2, #4
 8001332:	b2d2      	uxtb	r2, r2
 8001334:	440b      	add	r3, r1
 8001336:	761a      	strb	r2, [r3, #24]
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	bc80      	pop	{r7}
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	e000e100 	.word	0xe000e100
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800134c:	b480      	push	{r7}
 800134e:	b089      	sub	sp, #36	; 0x24
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f1c3 0307 	rsb	r3, r3, #7
 8001366:	2b04      	cmp	r3, #4
 8001368:	bf28      	it	cs
 800136a:	2304      	movcs	r3, #4
 800136c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3304      	adds	r3, #4
 8001372:	2b06      	cmp	r3, #6
 8001374:	d902      	bls.n	800137c <NVIC_EncodePriority+0x30>
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3b03      	subs	r3, #3
 800137a:	e000      	b.n	800137e <NVIC_EncodePriority+0x32>
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001380:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43da      	mvns	r2, r3
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	401a      	ands	r2, r3
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001394:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	fa01 f303 	lsl.w	r3, r1, r3
 800139e:	43d9      	mvns	r1, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a4:	4313      	orrs	r3, r2
         );
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3724      	adds	r7, #36	; 0x24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr

080013b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff ff4f 	bl	800125c <__NVIC_SetPriorityGrouping>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b086      	sub	sp, #24
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	4603      	mov	r3, r0
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
 80013d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013d8:	f7ff ff64 	bl	80012a4 <__NVIC_GetPriorityGrouping>
 80013dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	68b9      	ldr	r1, [r7, #8]
 80013e2:	6978      	ldr	r0, [r7, #20]
 80013e4:	f7ff ffb2 	bl	800134c <NVIC_EncodePriority>
 80013e8:	4602      	mov	r2, r0
 80013ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff81 	bl	80012f8 <__NVIC_SetPriority>
}
 80013f6:	bf00      	nop
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	4603      	mov	r3, r0
 8001406:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ff57 	bl	80012c0 <__NVIC_EnableIRQ>
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800141c:	b480      	push	{r7}
 800141e:	b08b      	sub	sp, #44	; 0x2c
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800142a:	2300      	movs	r3, #0
 800142c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800142e:	e127      	b.n	8001680 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001430:	2201      	movs	r2, #1
 8001432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	69fa      	ldr	r2, [r7, #28]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	429a      	cmp	r2, r3
 800144a:	f040 8116 	bne.w	800167a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b12      	cmp	r3, #18
 8001454:	d034      	beq.n	80014c0 <HAL_GPIO_Init+0xa4>
 8001456:	2b12      	cmp	r3, #18
 8001458:	d80d      	bhi.n	8001476 <HAL_GPIO_Init+0x5a>
 800145a:	2b02      	cmp	r3, #2
 800145c:	d02b      	beq.n	80014b6 <HAL_GPIO_Init+0x9a>
 800145e:	2b02      	cmp	r3, #2
 8001460:	d804      	bhi.n	800146c <HAL_GPIO_Init+0x50>
 8001462:	2b00      	cmp	r3, #0
 8001464:	d031      	beq.n	80014ca <HAL_GPIO_Init+0xae>
 8001466:	2b01      	cmp	r3, #1
 8001468:	d01c      	beq.n	80014a4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800146a:	e048      	b.n	80014fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800146c:	2b03      	cmp	r3, #3
 800146e:	d043      	beq.n	80014f8 <HAL_GPIO_Init+0xdc>
 8001470:	2b11      	cmp	r3, #17
 8001472:	d01b      	beq.n	80014ac <HAL_GPIO_Init+0x90>
          break;
 8001474:	e043      	b.n	80014fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001476:	4a89      	ldr	r2, [pc, #548]	; (800169c <HAL_GPIO_Init+0x280>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d026      	beq.n	80014ca <HAL_GPIO_Init+0xae>
 800147c:	4a87      	ldr	r2, [pc, #540]	; (800169c <HAL_GPIO_Init+0x280>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d806      	bhi.n	8001490 <HAL_GPIO_Init+0x74>
 8001482:	4a87      	ldr	r2, [pc, #540]	; (80016a0 <HAL_GPIO_Init+0x284>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d020      	beq.n	80014ca <HAL_GPIO_Init+0xae>
 8001488:	4a86      	ldr	r2, [pc, #536]	; (80016a4 <HAL_GPIO_Init+0x288>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d01d      	beq.n	80014ca <HAL_GPIO_Init+0xae>
          break;
 800148e:	e036      	b.n	80014fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001490:	4a85      	ldr	r2, [pc, #532]	; (80016a8 <HAL_GPIO_Init+0x28c>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d019      	beq.n	80014ca <HAL_GPIO_Init+0xae>
 8001496:	4a85      	ldr	r2, [pc, #532]	; (80016ac <HAL_GPIO_Init+0x290>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d016      	beq.n	80014ca <HAL_GPIO_Init+0xae>
 800149c:	4a84      	ldr	r2, [pc, #528]	; (80016b0 <HAL_GPIO_Init+0x294>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d013      	beq.n	80014ca <HAL_GPIO_Init+0xae>
          break;
 80014a2:	e02c      	b.n	80014fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	623b      	str	r3, [r7, #32]
          break;
 80014aa:	e028      	b.n	80014fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	3304      	adds	r3, #4
 80014b2:	623b      	str	r3, [r7, #32]
          break;
 80014b4:	e023      	b.n	80014fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	3308      	adds	r3, #8
 80014bc:	623b      	str	r3, [r7, #32]
          break;
 80014be:	e01e      	b.n	80014fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	330c      	adds	r3, #12
 80014c6:	623b      	str	r3, [r7, #32]
          break;
 80014c8:	e019      	b.n	80014fe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d102      	bne.n	80014d8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014d2:	2304      	movs	r3, #4
 80014d4:	623b      	str	r3, [r7, #32]
          break;
 80014d6:	e012      	b.n	80014fe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d105      	bne.n	80014ec <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014e0:	2308      	movs	r3, #8
 80014e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	69fa      	ldr	r2, [r7, #28]
 80014e8:	611a      	str	r2, [r3, #16]
          break;
 80014ea:	e008      	b.n	80014fe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014ec:	2308      	movs	r3, #8
 80014ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69fa      	ldr	r2, [r7, #28]
 80014f4:	615a      	str	r2, [r3, #20]
          break;
 80014f6:	e002      	b.n	80014fe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014f8:	2300      	movs	r3, #0
 80014fa:	623b      	str	r3, [r7, #32]
          break;
 80014fc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	2bff      	cmp	r3, #255	; 0xff
 8001502:	d801      	bhi.n	8001508 <HAL_GPIO_Init+0xec>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	e001      	b.n	800150c <HAL_GPIO_Init+0xf0>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3304      	adds	r3, #4
 800150c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	2bff      	cmp	r3, #255	; 0xff
 8001512:	d802      	bhi.n	800151a <HAL_GPIO_Init+0xfe>
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	e002      	b.n	8001520 <HAL_GPIO_Init+0x104>
 800151a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151c:	3b08      	subs	r3, #8
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	210f      	movs	r1, #15
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	fa01 f303 	lsl.w	r3, r1, r3
 800152e:	43db      	mvns	r3, r3
 8001530:	401a      	ands	r2, r3
 8001532:	6a39      	ldr	r1, [r7, #32]
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	fa01 f303 	lsl.w	r3, r1, r3
 800153a:	431a      	orrs	r2, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001548:	2b00      	cmp	r3, #0
 800154a:	f000 8096 	beq.w	800167a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800154e:	4b59      	ldr	r3, [pc, #356]	; (80016b4 <HAL_GPIO_Init+0x298>)
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	4a58      	ldr	r2, [pc, #352]	; (80016b4 <HAL_GPIO_Init+0x298>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6193      	str	r3, [r2, #24]
 800155a:	4b56      	ldr	r3, [pc, #344]	; (80016b4 <HAL_GPIO_Init+0x298>)
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001566:	4a54      	ldr	r2, [pc, #336]	; (80016b8 <HAL_GPIO_Init+0x29c>)
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	089b      	lsrs	r3, r3, #2
 800156c:	3302      	adds	r3, #2
 800156e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001572:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001576:	f003 0303 	and.w	r3, r3, #3
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	220f      	movs	r2, #15
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43db      	mvns	r3, r3
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	4013      	ands	r3, r2
 8001588:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a4b      	ldr	r2, [pc, #300]	; (80016bc <HAL_GPIO_Init+0x2a0>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d013      	beq.n	80015ba <HAL_GPIO_Init+0x19e>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a4a      	ldr	r2, [pc, #296]	; (80016c0 <HAL_GPIO_Init+0x2a4>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d00d      	beq.n	80015b6 <HAL_GPIO_Init+0x19a>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a49      	ldr	r2, [pc, #292]	; (80016c4 <HAL_GPIO_Init+0x2a8>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d007      	beq.n	80015b2 <HAL_GPIO_Init+0x196>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a48      	ldr	r2, [pc, #288]	; (80016c8 <HAL_GPIO_Init+0x2ac>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d101      	bne.n	80015ae <HAL_GPIO_Init+0x192>
 80015aa:	2303      	movs	r3, #3
 80015ac:	e006      	b.n	80015bc <HAL_GPIO_Init+0x1a0>
 80015ae:	2304      	movs	r3, #4
 80015b0:	e004      	b.n	80015bc <HAL_GPIO_Init+0x1a0>
 80015b2:	2302      	movs	r3, #2
 80015b4:	e002      	b.n	80015bc <HAL_GPIO_Init+0x1a0>
 80015b6:	2301      	movs	r3, #1
 80015b8:	e000      	b.n	80015bc <HAL_GPIO_Init+0x1a0>
 80015ba:	2300      	movs	r3, #0
 80015bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015be:	f002 0203 	and.w	r2, r2, #3
 80015c2:	0092      	lsls	r2, r2, #2
 80015c4:	4093      	lsls	r3, r2
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015cc:	493a      	ldr	r1, [pc, #232]	; (80016b8 <HAL_GPIO_Init+0x29c>)
 80015ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d0:	089b      	lsrs	r3, r3, #2
 80015d2:	3302      	adds	r3, #2
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d006      	beq.n	80015f4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015e6:	4b39      	ldr	r3, [pc, #228]	; (80016cc <HAL_GPIO_Init+0x2b0>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	4938      	ldr	r1, [pc, #224]	; (80016cc <HAL_GPIO_Init+0x2b0>)
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	600b      	str	r3, [r1, #0]
 80015f2:	e006      	b.n	8001602 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015f4:	4b35      	ldr	r3, [pc, #212]	; (80016cc <HAL_GPIO_Init+0x2b0>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	43db      	mvns	r3, r3
 80015fc:	4933      	ldr	r1, [pc, #204]	; (80016cc <HAL_GPIO_Init+0x2b0>)
 80015fe:	4013      	ands	r3, r2
 8001600:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d006      	beq.n	800161c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800160e:	4b2f      	ldr	r3, [pc, #188]	; (80016cc <HAL_GPIO_Init+0x2b0>)
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	492e      	ldr	r1, [pc, #184]	; (80016cc <HAL_GPIO_Init+0x2b0>)
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	4313      	orrs	r3, r2
 8001618:	604b      	str	r3, [r1, #4]
 800161a:	e006      	b.n	800162a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800161c:	4b2b      	ldr	r3, [pc, #172]	; (80016cc <HAL_GPIO_Init+0x2b0>)
 800161e:	685a      	ldr	r2, [r3, #4]
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	43db      	mvns	r3, r3
 8001624:	4929      	ldr	r1, [pc, #164]	; (80016cc <HAL_GPIO_Init+0x2b0>)
 8001626:	4013      	ands	r3, r2
 8001628:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d006      	beq.n	8001644 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001636:	4b25      	ldr	r3, [pc, #148]	; (80016cc <HAL_GPIO_Init+0x2b0>)
 8001638:	689a      	ldr	r2, [r3, #8]
 800163a:	4924      	ldr	r1, [pc, #144]	; (80016cc <HAL_GPIO_Init+0x2b0>)
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	4313      	orrs	r3, r2
 8001640:	608b      	str	r3, [r1, #8]
 8001642:	e006      	b.n	8001652 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001644:	4b21      	ldr	r3, [pc, #132]	; (80016cc <HAL_GPIO_Init+0x2b0>)
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	43db      	mvns	r3, r3
 800164c:	491f      	ldr	r1, [pc, #124]	; (80016cc <HAL_GPIO_Init+0x2b0>)
 800164e:	4013      	ands	r3, r2
 8001650:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d006      	beq.n	800166c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800165e:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <HAL_GPIO_Init+0x2b0>)
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	491a      	ldr	r1, [pc, #104]	; (80016cc <HAL_GPIO_Init+0x2b0>)
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	4313      	orrs	r3, r2
 8001668:	60cb      	str	r3, [r1, #12]
 800166a:	e006      	b.n	800167a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800166c:	4b17      	ldr	r3, [pc, #92]	; (80016cc <HAL_GPIO_Init+0x2b0>)
 800166e:	68da      	ldr	r2, [r3, #12]
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	43db      	mvns	r3, r3
 8001674:	4915      	ldr	r1, [pc, #84]	; (80016cc <HAL_GPIO_Init+0x2b0>)
 8001676:	4013      	ands	r3, r2
 8001678:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	3301      	adds	r3, #1
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001686:	fa22 f303 	lsr.w	r3, r2, r3
 800168a:	2b00      	cmp	r3, #0
 800168c:	f47f aed0 	bne.w	8001430 <HAL_GPIO_Init+0x14>
  }
}
 8001690:	bf00      	nop
 8001692:	372c      	adds	r7, #44	; 0x2c
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	10210000 	.word	0x10210000
 80016a0:	10110000 	.word	0x10110000
 80016a4:	10120000 	.word	0x10120000
 80016a8:	10310000 	.word	0x10310000
 80016ac:	10320000 	.word	0x10320000
 80016b0:	10220000 	.word	0x10220000
 80016b4:	40021000 	.word	0x40021000
 80016b8:	40010000 	.word	0x40010000
 80016bc:	40010800 	.word	0x40010800
 80016c0:	40010c00 	.word	0x40010c00
 80016c4:	40011000 	.word	0x40011000
 80016c8:	40011400 	.word	0x40011400
 80016cc:	40010400 	.word	0x40010400

080016d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	460b      	mov	r3, r1
 80016da:	807b      	strh	r3, [r7, #2]
 80016dc:	4613      	mov	r3, r2
 80016de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016e0:	787b      	ldrb	r3, [r7, #1]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016e6:	887a      	ldrh	r2, [r7, #2]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016ec:	e003      	b.n	80016f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016ee:	887b      	ldrh	r3, [r7, #2]
 80016f0:	041a      	lsls	r2, r3, #16
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	611a      	str	r2, [r3, #16]
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr

08001700 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001712:	887a      	ldrh	r2, [r7, #2]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	4013      	ands	r3, r2
 8001718:	041a      	lsls	r2, r3, #16
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	43d9      	mvns	r1, r3
 800171e:	887b      	ldrh	r3, [r7, #2]
 8001720:	400b      	ands	r3, r1
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	611a      	str	r2, [r3, #16]
}
 8001728:	bf00      	nop
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
	...

08001734 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e26c      	b.n	8001c20 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	f000 8087 	beq.w	8001862 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001754:	4b92      	ldr	r3, [pc, #584]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 030c 	and.w	r3, r3, #12
 800175c:	2b04      	cmp	r3, #4
 800175e:	d00c      	beq.n	800177a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001760:	4b8f      	ldr	r3, [pc, #572]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f003 030c 	and.w	r3, r3, #12
 8001768:	2b08      	cmp	r3, #8
 800176a:	d112      	bne.n	8001792 <HAL_RCC_OscConfig+0x5e>
 800176c:	4b8c      	ldr	r3, [pc, #560]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001778:	d10b      	bne.n	8001792 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800177a:	4b89      	ldr	r3, [pc, #548]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d06c      	beq.n	8001860 <HAL_RCC_OscConfig+0x12c>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d168      	bne.n	8001860 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e246      	b.n	8001c20 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800179a:	d106      	bne.n	80017aa <HAL_RCC_OscConfig+0x76>
 800179c:	4b80      	ldr	r3, [pc, #512]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a7f      	ldr	r2, [pc, #508]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	e02e      	b.n	8001808 <HAL_RCC_OscConfig+0xd4>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10c      	bne.n	80017cc <HAL_RCC_OscConfig+0x98>
 80017b2:	4b7b      	ldr	r3, [pc, #492]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a7a      	ldr	r2, [pc, #488]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	4b78      	ldr	r3, [pc, #480]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a77      	ldr	r2, [pc, #476]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	e01d      	b.n	8001808 <HAL_RCC_OscConfig+0xd4>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017d4:	d10c      	bne.n	80017f0 <HAL_RCC_OscConfig+0xbc>
 80017d6:	4b72      	ldr	r3, [pc, #456]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a71      	ldr	r2, [pc, #452]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	4b6f      	ldr	r3, [pc, #444]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a6e      	ldr	r2, [pc, #440]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	e00b      	b.n	8001808 <HAL_RCC_OscConfig+0xd4>
 80017f0:	4b6b      	ldr	r3, [pc, #428]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a6a      	ldr	r2, [pc, #424]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017fa:	6013      	str	r3, [r2, #0]
 80017fc:	4b68      	ldr	r3, [pc, #416]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a67      	ldr	r2, [pc, #412]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 8001802:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001806:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d013      	beq.n	8001838 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001810:	f7ff fcf8 	bl	8001204 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001818:	f7ff fcf4 	bl	8001204 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b64      	cmp	r3, #100	; 0x64
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e1fa      	b.n	8001c20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182a:	4b5d      	ldr	r3, [pc, #372]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0f0      	beq.n	8001818 <HAL_RCC_OscConfig+0xe4>
 8001836:	e014      	b.n	8001862 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001838:	f7ff fce4 	bl	8001204 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001840:	f7ff fce0 	bl	8001204 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b64      	cmp	r3, #100	; 0x64
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e1e6      	b.n	8001c20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001852:	4b53      	ldr	r3, [pc, #332]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f0      	bne.n	8001840 <HAL_RCC_OscConfig+0x10c>
 800185e:	e000      	b.n	8001862 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d063      	beq.n	8001936 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800186e:	4b4c      	ldr	r3, [pc, #304]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f003 030c 	and.w	r3, r3, #12
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00b      	beq.n	8001892 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800187a:	4b49      	ldr	r3, [pc, #292]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 030c 	and.w	r3, r3, #12
 8001882:	2b08      	cmp	r3, #8
 8001884:	d11c      	bne.n	80018c0 <HAL_RCC_OscConfig+0x18c>
 8001886:	4b46      	ldr	r3, [pc, #280]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d116      	bne.n	80018c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001892:	4b43      	ldr	r3, [pc, #268]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d005      	beq.n	80018aa <HAL_RCC_OscConfig+0x176>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d001      	beq.n	80018aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e1ba      	b.n	8001c20 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018aa:	4b3d      	ldr	r3, [pc, #244]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	4939      	ldr	r1, [pc, #228]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018be:	e03a      	b.n	8001936 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d020      	beq.n	800190a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018c8:	4b36      	ldr	r3, [pc, #216]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ce:	f7ff fc99 	bl	8001204 <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d6:	f7ff fc95 	bl	8001204 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e19b      	b.n	8001c20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e8:	4b2d      	ldr	r3, [pc, #180]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0f0      	beq.n	80018d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f4:	4b2a      	ldr	r3, [pc, #168]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	695b      	ldr	r3, [r3, #20]
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	4927      	ldr	r1, [pc, #156]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 8001904:	4313      	orrs	r3, r2
 8001906:	600b      	str	r3, [r1, #0]
 8001908:	e015      	b.n	8001936 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800190a:	4b26      	ldr	r3, [pc, #152]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001910:	f7ff fc78 	bl	8001204 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001918:	f7ff fc74 	bl	8001204 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e17a      	b.n	8001c20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800192a:	4b1d      	ldr	r3, [pc, #116]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f0      	bne.n	8001918 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0308 	and.w	r3, r3, #8
 800193e:	2b00      	cmp	r3, #0
 8001940:	d03a      	beq.n	80019b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d019      	beq.n	800197e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800194a:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <HAL_RCC_OscConfig+0x274>)
 800194c:	2201      	movs	r2, #1
 800194e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001950:	f7ff fc58 	bl	8001204 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001958:	f7ff fc54 	bl	8001204 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e15a      	b.n	8001c20 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800196a:	4b0d      	ldr	r3, [pc, #52]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 800196c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0f0      	beq.n	8001958 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001976:	2001      	movs	r0, #1
 8001978:	f000 fb0a 	bl	8001f90 <RCC_Delay>
 800197c:	e01c      	b.n	80019b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800197e:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <HAL_RCC_OscConfig+0x274>)
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001984:	f7ff fc3e 	bl	8001204 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800198a:	e00f      	b.n	80019ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800198c:	f7ff fc3a 	bl	8001204 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d908      	bls.n	80019ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e140      	b.n	8001c20 <HAL_RCC_OscConfig+0x4ec>
 800199e:	bf00      	nop
 80019a0:	40021000 	.word	0x40021000
 80019a4:	42420000 	.word	0x42420000
 80019a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ac:	4b9e      	ldr	r3, [pc, #632]	; (8001c28 <HAL_RCC_OscConfig+0x4f4>)
 80019ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1e9      	bne.n	800198c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f000 80a6 	beq.w	8001b12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019c6:	2300      	movs	r3, #0
 80019c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ca:	4b97      	ldr	r3, [pc, #604]	; (8001c28 <HAL_RCC_OscConfig+0x4f4>)
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10d      	bne.n	80019f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019d6:	4b94      	ldr	r3, [pc, #592]	; (8001c28 <HAL_RCC_OscConfig+0x4f4>)
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	4a93      	ldr	r2, [pc, #588]	; (8001c28 <HAL_RCC_OscConfig+0x4f4>)
 80019dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e0:	61d3      	str	r3, [r2, #28]
 80019e2:	4b91      	ldr	r3, [pc, #580]	; (8001c28 <HAL_RCC_OscConfig+0x4f4>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ea:	60bb      	str	r3, [r7, #8]
 80019ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ee:	2301      	movs	r3, #1
 80019f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f2:	4b8e      	ldr	r3, [pc, #568]	; (8001c2c <HAL_RCC_OscConfig+0x4f8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d118      	bne.n	8001a30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019fe:	4b8b      	ldr	r3, [pc, #556]	; (8001c2c <HAL_RCC_OscConfig+0x4f8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a8a      	ldr	r2, [pc, #552]	; (8001c2c <HAL_RCC_OscConfig+0x4f8>)
 8001a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a0a:	f7ff fbfb 	bl	8001204 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a12:	f7ff fbf7 	bl	8001204 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b64      	cmp	r3, #100	; 0x64
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e0fd      	b.n	8001c20 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a24:	4b81      	ldr	r3, [pc, #516]	; (8001c2c <HAL_RCC_OscConfig+0x4f8>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0f0      	beq.n	8001a12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d106      	bne.n	8001a46 <HAL_RCC_OscConfig+0x312>
 8001a38:	4b7b      	ldr	r3, [pc, #492]	; (8001c28 <HAL_RCC_OscConfig+0x4f4>)
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
 8001a3c:	4a7a      	ldr	r2, [pc, #488]	; (8001c28 <HAL_RCC_OscConfig+0x4f4>)
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	6213      	str	r3, [r2, #32]
 8001a44:	e02d      	b.n	8001aa2 <HAL_RCC_OscConfig+0x36e>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10c      	bne.n	8001a68 <HAL_RCC_OscConfig+0x334>
 8001a4e:	4b76      	ldr	r3, [pc, #472]	; (8001c28 <HAL_RCC_OscConfig+0x4f4>)
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	4a75      	ldr	r2, [pc, #468]	; (8001c28 <HAL_RCC_OscConfig+0x4f4>)
 8001a54:	f023 0301 	bic.w	r3, r3, #1
 8001a58:	6213      	str	r3, [r2, #32]
 8001a5a:	4b73      	ldr	r3, [pc, #460]	; (8001c28 <HAL_RCC_OscConfig+0x4f4>)
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	4a72      	ldr	r2, [pc, #456]	; (8001c28 <HAL_RCC_OscConfig+0x4f4>)
 8001a60:	f023 0304 	bic.w	r3, r3, #4
 8001a64:	6213      	str	r3, [r2, #32]
 8001a66:	e01c      	b.n	8001aa2 <HAL_RCC_OscConfig+0x36e>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	2b05      	cmp	r3, #5
 8001a6e:	d10c      	bne.n	8001a8a <HAL_RCC_OscConfig+0x356>
 8001a70:	4b6d      	ldr	r3, [pc, #436]	; (8001c28 <HAL_RCC_OscConfig+0x4f4>)
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	4a6c      	ldr	r2, [pc, #432]	; (8001c28 <HAL_RCC_OscConfig+0x4f4>)
 8001a76:	f043 0304 	orr.w	r3, r3, #4
 8001a7a:	6213      	str	r3, [r2, #32]
 8001a7c:	4b6a      	ldr	r3, [pc, #424]	; (8001c28 <HAL_RCC_OscConfig+0x4f4>)
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
 8001a80:	4a69      	ldr	r2, [pc, #420]	; (8001c28 <HAL_RCC_OscConfig+0x4f4>)
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	6213      	str	r3, [r2, #32]
 8001a88:	e00b      	b.n	8001aa2 <HAL_RCC_OscConfig+0x36e>
 8001a8a:	4b67      	ldr	r3, [pc, #412]	; (8001c28 <HAL_RCC_OscConfig+0x4f4>)
 8001a8c:	6a1b      	ldr	r3, [r3, #32]
 8001a8e:	4a66      	ldr	r2, [pc, #408]	; (8001c28 <HAL_RCC_OscConfig+0x4f4>)
 8001a90:	f023 0301 	bic.w	r3, r3, #1
 8001a94:	6213      	str	r3, [r2, #32]
 8001a96:	4b64      	ldr	r3, [pc, #400]	; (8001c28 <HAL_RCC_OscConfig+0x4f4>)
 8001a98:	6a1b      	ldr	r3, [r3, #32]
 8001a9a:	4a63      	ldr	r2, [pc, #396]	; (8001c28 <HAL_RCC_OscConfig+0x4f4>)
 8001a9c:	f023 0304 	bic.w	r3, r3, #4
 8001aa0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d015      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aaa:	f7ff fbab 	bl	8001204 <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab0:	e00a      	b.n	8001ac8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab2:	f7ff fba7 	bl	8001204 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e0ab      	b.n	8001c20 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac8:	4b57      	ldr	r3, [pc, #348]	; (8001c28 <HAL_RCC_OscConfig+0x4f4>)
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0ee      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x37e>
 8001ad4:	e014      	b.n	8001b00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad6:	f7ff fb95 	bl	8001204 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001adc:	e00a      	b.n	8001af4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ade:	f7ff fb91 	bl	8001204 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e095      	b.n	8001c20 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af4:	4b4c      	ldr	r3, [pc, #304]	; (8001c28 <HAL_RCC_OscConfig+0x4f4>)
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1ee      	bne.n	8001ade <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b00:	7dfb      	ldrb	r3, [r7, #23]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d105      	bne.n	8001b12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b06:	4b48      	ldr	r3, [pc, #288]	; (8001c28 <HAL_RCC_OscConfig+0x4f4>)
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	4a47      	ldr	r2, [pc, #284]	; (8001c28 <HAL_RCC_OscConfig+0x4f4>)
 8001b0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f000 8081 	beq.w	8001c1e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b1c:	4b42      	ldr	r3, [pc, #264]	; (8001c28 <HAL_RCC_OscConfig+0x4f4>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 030c 	and.w	r3, r3, #12
 8001b24:	2b08      	cmp	r3, #8
 8001b26:	d061      	beq.n	8001bec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	69db      	ldr	r3, [r3, #28]
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d146      	bne.n	8001bbe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b30:	4b3f      	ldr	r3, [pc, #252]	; (8001c30 <HAL_RCC_OscConfig+0x4fc>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b36:	f7ff fb65 	bl	8001204 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b3e:	f7ff fb61 	bl	8001204 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e067      	b.n	8001c20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b50:	4b35      	ldr	r3, [pc, #212]	; (8001c28 <HAL_RCC_OscConfig+0x4f4>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1f0      	bne.n	8001b3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b64:	d108      	bne.n	8001b78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b66:	4b30      	ldr	r3, [pc, #192]	; (8001c28 <HAL_RCC_OscConfig+0x4f4>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	492d      	ldr	r1, [pc, #180]	; (8001c28 <HAL_RCC_OscConfig+0x4f4>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b78:	4b2b      	ldr	r3, [pc, #172]	; (8001c28 <HAL_RCC_OscConfig+0x4f4>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a19      	ldr	r1, [r3, #32]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b88:	430b      	orrs	r3, r1
 8001b8a:	4927      	ldr	r1, [pc, #156]	; (8001c28 <HAL_RCC_OscConfig+0x4f4>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b90:	4b27      	ldr	r3, [pc, #156]	; (8001c30 <HAL_RCC_OscConfig+0x4fc>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b96:	f7ff fb35 	bl	8001204 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9e:	f7ff fb31 	bl	8001204 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e037      	b.n	8001c20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bb0:	4b1d      	ldr	r3, [pc, #116]	; (8001c28 <HAL_RCC_OscConfig+0x4f4>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0f0      	beq.n	8001b9e <HAL_RCC_OscConfig+0x46a>
 8001bbc:	e02f      	b.n	8001c1e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bbe:	4b1c      	ldr	r3, [pc, #112]	; (8001c30 <HAL_RCC_OscConfig+0x4fc>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc4:	f7ff fb1e 	bl	8001204 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bcc:	f7ff fb1a 	bl	8001204 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e020      	b.n	8001c20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bde:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <HAL_RCC_OscConfig+0x4f4>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0x498>
 8001bea:	e018      	b.n	8001c1e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d101      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e013      	b.n	8001c20 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <HAL_RCC_OscConfig+0x4f4>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d106      	bne.n	8001c1a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d001      	beq.n	8001c1e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e000      	b.n	8001c20 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40007000 	.word	0x40007000
 8001c30:	42420060 	.word	0x42420060

08001c34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e0d0      	b.n	8001dea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c48:	4b6a      	ldr	r3, [pc, #424]	; (8001df4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d910      	bls.n	8001c78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c56:	4b67      	ldr	r3, [pc, #412]	; (8001df4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f023 0207 	bic.w	r2, r3, #7
 8001c5e:	4965      	ldr	r1, [pc, #404]	; (8001df4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c66:	4b63      	ldr	r3, [pc, #396]	; (8001df4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d001      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e0b8      	b.n	8001dea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d020      	beq.n	8001cc6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d005      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c90:	4b59      	ldr	r3, [pc, #356]	; (8001df8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	4a58      	ldr	r2, [pc, #352]	; (8001df8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c9a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0308 	and.w	r3, r3, #8
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d005      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ca8:	4b53      	ldr	r3, [pc, #332]	; (8001df8 <HAL_RCC_ClockConfig+0x1c4>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	4a52      	ldr	r2, [pc, #328]	; (8001df8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001cb2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cb4:	4b50      	ldr	r3, [pc, #320]	; (8001df8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	494d      	ldr	r1, [pc, #308]	; (8001df8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d040      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d107      	bne.n	8001cea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cda:	4b47      	ldr	r3, [pc, #284]	; (8001df8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d115      	bne.n	8001d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e07f      	b.n	8001dea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d107      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf2:	4b41      	ldr	r3, [pc, #260]	; (8001df8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d109      	bne.n	8001d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e073      	b.n	8001dea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d02:	4b3d      	ldr	r3, [pc, #244]	; (8001df8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e06b      	b.n	8001dea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d12:	4b39      	ldr	r3, [pc, #228]	; (8001df8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f023 0203 	bic.w	r2, r3, #3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	4936      	ldr	r1, [pc, #216]	; (8001df8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d24:	f7ff fa6e 	bl	8001204 <HAL_GetTick>
 8001d28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d2a:	e00a      	b.n	8001d42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d2c:	f7ff fa6a 	bl	8001204 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e053      	b.n	8001dea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d42:	4b2d      	ldr	r3, [pc, #180]	; (8001df8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f003 020c 	and.w	r2, r3, #12
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d1eb      	bne.n	8001d2c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d54:	4b27      	ldr	r3, [pc, #156]	; (8001df4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0307 	and.w	r3, r3, #7
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d210      	bcs.n	8001d84 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d62:	4b24      	ldr	r3, [pc, #144]	; (8001df4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f023 0207 	bic.w	r2, r3, #7
 8001d6a:	4922      	ldr	r1, [pc, #136]	; (8001df4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d72:	4b20      	ldr	r3, [pc, #128]	; (8001df4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d001      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e032      	b.n	8001dea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d008      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d90:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	4916      	ldr	r1, [pc, #88]	; (8001df8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d009      	beq.n	8001dc2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dae:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <HAL_RCC_ClockConfig+0x1c4>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	490e      	ldr	r1, [pc, #56]	; (8001df8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dc2:	f000 f821 	bl	8001e08 <HAL_RCC_GetSysClockFreq>
 8001dc6:	4601      	mov	r1, r0
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	091b      	lsrs	r3, r3, #4
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	4a0a      	ldr	r2, [pc, #40]	; (8001dfc <HAL_RCC_ClockConfig+0x1c8>)
 8001dd4:	5cd3      	ldrb	r3, [r2, r3]
 8001dd6:	fa21 f303 	lsr.w	r3, r1, r3
 8001dda:	4a09      	ldr	r2, [pc, #36]	; (8001e00 <HAL_RCC_ClockConfig+0x1cc>)
 8001ddc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dde:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <HAL_RCC_ClockConfig+0x1d0>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff f90c 	bl	8001000 <HAL_InitTick>

  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40022000 	.word	0x40022000
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	08005dc4 	.word	0x08005dc4
 8001e00:	20000024 	.word	0x20000024
 8001e04:	20000028 	.word	0x20000028

08001e08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e08:	b490      	push	{r4, r7}
 8001e0a:	b08a      	sub	sp, #40	; 0x28
 8001e0c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e0e:	4b2a      	ldr	r3, [pc, #168]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e10:	1d3c      	adds	r4, r7, #4
 8001e12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e18:	4b28      	ldr	r3, [pc, #160]	; (8001ebc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e1a:	881b      	ldrh	r3, [r3, #0]
 8001e1c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
 8001e22:	2300      	movs	r3, #0
 8001e24:	61bb      	str	r3, [r7, #24]
 8001e26:	2300      	movs	r3, #0
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e32:	4b23      	ldr	r3, [pc, #140]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f003 030c 	and.w	r3, r3, #12
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	d002      	beq.n	8001e48 <HAL_RCC_GetSysClockFreq+0x40>
 8001e42:	2b08      	cmp	r3, #8
 8001e44:	d003      	beq.n	8001e4e <HAL_RCC_GetSysClockFreq+0x46>
 8001e46:	e02d      	b.n	8001ea4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e48:	4b1e      	ldr	r3, [pc, #120]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e4a:	623b      	str	r3, [r7, #32]
      break;
 8001e4c:	e02d      	b.n	8001eaa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	0c9b      	lsrs	r3, r3, #18
 8001e52:	f003 030f 	and.w	r3, r3, #15
 8001e56:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e5a:	4413      	add	r3, r2
 8001e5c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e60:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d013      	beq.n	8001e94 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e6c:	4b14      	ldr	r3, [pc, #80]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	0c5b      	lsrs	r3, r3, #17
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e7a:	4413      	add	r3, r2
 8001e7c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e80:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	4a0f      	ldr	r2, [pc, #60]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e86:	fb02 f203 	mul.w	r2, r2, r3
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
 8001e92:	e004      	b.n	8001e9e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	4a0c      	ldr	r2, [pc, #48]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e98:	fb02 f303 	mul.w	r3, r2, r3
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	623b      	str	r3, [r7, #32]
      break;
 8001ea2:	e002      	b.n	8001eaa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ea4:	4b07      	ldr	r3, [pc, #28]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ea6:	623b      	str	r3, [r7, #32]
      break;
 8001ea8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eaa:	6a3b      	ldr	r3, [r7, #32]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3728      	adds	r7, #40	; 0x28
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc90      	pop	{r4, r7}
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	08005cfc 	.word	0x08005cfc
 8001ebc:	08005d0c 	.word	0x08005d0c
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	007a1200 	.word	0x007a1200
 8001ec8:	003d0900 	.word	0x003d0900

08001ecc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ed0:	4b02      	ldr	r3, [pc, #8]	; (8001edc <HAL_RCC_GetHCLKFreq+0x10>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr
 8001edc:	20000024 	.word	0x20000024

08001ee0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ee4:	f7ff fff2 	bl	8001ecc <HAL_RCC_GetHCLKFreq>
 8001ee8:	4601      	mov	r1, r0
 8001eea:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	0a1b      	lsrs	r3, r3, #8
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	4a03      	ldr	r2, [pc, #12]	; (8001f04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ef6:	5cd3      	ldrb	r3, [r2, r3]
 8001ef8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40021000 	.word	0x40021000
 8001f04:	08005dd4 	.word	0x08005dd4

08001f08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f0c:	f7ff ffde 	bl	8001ecc <HAL_RCC_GetHCLKFreq>
 8001f10:	4601      	mov	r1, r0
 8001f12:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	0adb      	lsrs	r3, r3, #11
 8001f18:	f003 0307 	and.w	r3, r3, #7
 8001f1c:	4a03      	ldr	r2, [pc, #12]	; (8001f2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f1e:	5cd3      	ldrb	r3, [r2, r3]
 8001f20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	08005dd4 	.word	0x08005dd4

08001f30 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	220f      	movs	r2, #15
 8001f3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f40:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <HAL_RCC_GetClockConfig+0x58>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 0203 	and.w	r2, r3, #3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f4c:	4b0e      	ldr	r3, [pc, #56]	; (8001f88 <HAL_RCC_GetClockConfig+0x58>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f58:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <HAL_RCC_GetClockConfig+0x58>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001f64:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <HAL_RCC_GetClockConfig+0x58>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	08db      	lsrs	r3, r3, #3
 8001f6a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f72:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <HAL_RCC_GetClockConfig+0x5c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0207 	and.w	r2, r3, #7
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	40022000 	.word	0x40022000

08001f90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f98:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <RCC_Delay+0x34>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a0a      	ldr	r2, [pc, #40]	; (8001fc8 <RCC_Delay+0x38>)
 8001f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa2:	0a5b      	lsrs	r3, r3, #9
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	fb02 f303 	mul.w	r3, r2, r3
 8001faa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fac:	bf00      	nop
  }
  while (Delay --);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	1e5a      	subs	r2, r3, #1
 8001fb2:	60fa      	str	r2, [r7, #12]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1f9      	bne.n	8001fac <RCC_Delay+0x1c>
}
 8001fb8:	bf00      	nop
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	20000024 	.word	0x20000024
 8001fc8:	10624dd3 	.word	0x10624dd3

08001fcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e041      	b.n	8002062 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d106      	bne.n	8001ff8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f839 	bl	800206a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3304      	adds	r3, #4
 8002008:	4619      	mov	r1, r3
 800200a:	4610      	mov	r0, r2
 800200c:	f000 f9b4 	bl	8002378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr

0800207c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b01      	cmp	r3, #1
 800208e:	d001      	beq.n	8002094 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e03a      	b.n	800210a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2202      	movs	r2, #2
 8002098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0201 	orr.w	r2, r2, #1
 80020aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a18      	ldr	r2, [pc, #96]	; (8002114 <HAL_TIM_Base_Start_IT+0x98>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d00e      	beq.n	80020d4 <HAL_TIM_Base_Start_IT+0x58>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020be:	d009      	beq.n	80020d4 <HAL_TIM_Base_Start_IT+0x58>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a14      	ldr	r2, [pc, #80]	; (8002118 <HAL_TIM_Base_Start_IT+0x9c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d004      	beq.n	80020d4 <HAL_TIM_Base_Start_IT+0x58>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a13      	ldr	r2, [pc, #76]	; (800211c <HAL_TIM_Base_Start_IT+0xa0>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d111      	bne.n	80020f8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2b06      	cmp	r3, #6
 80020e4:	d010      	beq.n	8002108 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f042 0201 	orr.w	r2, r2, #1
 80020f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020f6:	e007      	b.n	8002108 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 0201 	orr.w	r2, r2, #1
 8002106:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr
 8002114:	40012c00 	.word	0x40012c00
 8002118:	40000400 	.word	0x40000400
 800211c:	40000800 	.word	0x40000800

08002120 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b02      	cmp	r3, #2
 8002134:	d122      	bne.n	800217c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b02      	cmp	r3, #2
 8002142:	d11b      	bne.n	800217c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f06f 0202 	mvn.w	r2, #2
 800214c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	f003 0303 	and.w	r3, r3, #3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f8ed 	bl	8002342 <HAL_TIM_IC_CaptureCallback>
 8002168:	e005      	b.n	8002176 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f8e0 	bl	8002330 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 f8ef 	bl	8002354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	f003 0304 	and.w	r3, r3, #4
 8002186:	2b04      	cmp	r3, #4
 8002188:	d122      	bne.n	80021d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b04      	cmp	r3, #4
 8002196:	d11b      	bne.n	80021d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f06f 0204 	mvn.w	r2, #4
 80021a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2202      	movs	r2, #2
 80021a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f8c3 	bl	8002342 <HAL_TIM_IC_CaptureCallback>
 80021bc:	e005      	b.n	80021ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 f8b6 	bl	8002330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 f8c5 	bl	8002354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	f003 0308 	and.w	r3, r3, #8
 80021da:	2b08      	cmp	r3, #8
 80021dc:	d122      	bne.n	8002224 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	f003 0308 	and.w	r3, r3, #8
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	d11b      	bne.n	8002224 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f06f 0208 	mvn.w	r2, #8
 80021f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2204      	movs	r2, #4
 80021fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f899 	bl	8002342 <HAL_TIM_IC_CaptureCallback>
 8002210:	e005      	b.n	800221e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f88c 	bl	8002330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 f89b 	bl	8002354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	f003 0310 	and.w	r3, r3, #16
 800222e:	2b10      	cmp	r3, #16
 8002230:	d122      	bne.n	8002278 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	f003 0310 	and.w	r3, r3, #16
 800223c:	2b10      	cmp	r3, #16
 800223e:	d11b      	bne.n	8002278 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f06f 0210 	mvn.w	r2, #16
 8002248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2208      	movs	r2, #8
 800224e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f86f 	bl	8002342 <HAL_TIM_IC_CaptureCallback>
 8002264:	e005      	b.n	8002272 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f862 	bl	8002330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 f871 	bl	8002354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b01      	cmp	r3, #1
 8002284:	d10e      	bne.n	80022a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b01      	cmp	r3, #1
 8002292:	d107      	bne.n	80022a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f06f 0201 	mvn.w	r2, #1
 800229c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7fe fe04 	bl	8000eac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ae:	2b80      	cmp	r3, #128	; 0x80
 80022b0:	d10e      	bne.n	80022d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022bc:	2b80      	cmp	r3, #128	; 0x80
 80022be:	d107      	bne.n	80022d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 f8bf 	bl	800244e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022da:	2b40      	cmp	r3, #64	; 0x40
 80022dc:	d10e      	bne.n	80022fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e8:	2b40      	cmp	r3, #64	; 0x40
 80022ea:	d107      	bne.n	80022fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f835 	bl	8002366 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	f003 0320 	and.w	r3, r3, #32
 8002306:	2b20      	cmp	r3, #32
 8002308:	d10e      	bne.n	8002328 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	f003 0320 	and.w	r3, r3, #32
 8002314:	2b20      	cmp	r3, #32
 8002316:	d107      	bne.n	8002328 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f06f 0220 	mvn.w	r2, #32
 8002320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f88a 	bl	800243c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002328:	bf00      	nop
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr

08002342 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr

08002354 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr

08002366 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002366:	b480      	push	{r7}
 8002368:	b083      	sub	sp, #12
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	bc80      	pop	{r7}
 8002376:	4770      	bx	lr

08002378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a29      	ldr	r2, [pc, #164]	; (8002430 <TIM_Base_SetConfig+0xb8>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d00b      	beq.n	80023a8 <TIM_Base_SetConfig+0x30>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002396:	d007      	beq.n	80023a8 <TIM_Base_SetConfig+0x30>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a26      	ldr	r2, [pc, #152]	; (8002434 <TIM_Base_SetConfig+0xbc>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d003      	beq.n	80023a8 <TIM_Base_SetConfig+0x30>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a25      	ldr	r2, [pc, #148]	; (8002438 <TIM_Base_SetConfig+0xc0>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d108      	bne.n	80023ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a1c      	ldr	r2, [pc, #112]	; (8002430 <TIM_Base_SetConfig+0xb8>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d00b      	beq.n	80023da <TIM_Base_SetConfig+0x62>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023c8:	d007      	beq.n	80023da <TIM_Base_SetConfig+0x62>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a19      	ldr	r2, [pc, #100]	; (8002434 <TIM_Base_SetConfig+0xbc>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d003      	beq.n	80023da <TIM_Base_SetConfig+0x62>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a18      	ldr	r2, [pc, #96]	; (8002438 <TIM_Base_SetConfig+0xc0>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d108      	bne.n	80023ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a07      	ldr	r2, [pc, #28]	; (8002430 <TIM_Base_SetConfig+0xb8>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d103      	bne.n	8002420 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	691a      	ldr	r2, [r3, #16]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	615a      	str	r2, [r3, #20]
}
 8002426:	bf00      	nop
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr
 8002430:	40012c00 	.word	0x40012c00
 8002434:	40000400 	.word	0x40000400
 8002438:	40000800 	.word	0x40000800

0800243c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	bc80      	pop	{r7}
 800244c:	4770      	bx	lr

0800244e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002456:	bf00      	nop
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr

08002460 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e03f      	b.n	80024f2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7fe fd5a 	bl	8000f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2224      	movs	r2, #36	; 0x24
 8002490:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 f9a3 	bl	80027f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	691a      	ldr	r2, [r3, #16]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	695a      	ldr	r2, [r3, #20]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2220      	movs	r2, #32
 80024e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2220      	movs	r2, #32
 80024ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b08a      	sub	sp, #40	; 0x28
 80024fe:	af02      	add	r7, sp, #8
 8002500:	60f8      	str	r0, [r7, #12]
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	603b      	str	r3, [r7, #0]
 8002506:	4613      	mov	r3, r2
 8002508:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800250a:	2300      	movs	r3, #0
 800250c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b20      	cmp	r3, #32
 8002518:	d17c      	bne.n	8002614 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d002      	beq.n	8002526 <HAL_UART_Transmit+0x2c>
 8002520:	88fb      	ldrh	r3, [r7, #6]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e075      	b.n	8002616 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002530:	2b01      	cmp	r3, #1
 8002532:	d101      	bne.n	8002538 <HAL_UART_Transmit+0x3e>
 8002534:	2302      	movs	r3, #2
 8002536:	e06e      	b.n	8002616 <HAL_UART_Transmit+0x11c>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2221      	movs	r2, #33	; 0x21
 800254a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800254e:	f7fe fe59 	bl	8001204 <HAL_GetTick>
 8002552:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	88fa      	ldrh	r2, [r7, #6]
 8002558:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	88fa      	ldrh	r2, [r7, #6]
 800255e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002568:	d108      	bne.n	800257c <HAL_UART_Transmit+0x82>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d104      	bne.n	800257c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002572:	2300      	movs	r3, #0
 8002574:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	61bb      	str	r3, [r7, #24]
 800257a:	e003      	b.n	8002584 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002580:	2300      	movs	r3, #0
 8002582:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800258c:	e02a      	b.n	80025e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	2200      	movs	r2, #0
 8002596:	2180      	movs	r1, #128	; 0x80
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f000 f8df 	bl	800275c <UART_WaitOnFlagUntilTimeout>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e036      	b.n	8002616 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10b      	bne.n	80025c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	461a      	mov	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	3302      	adds	r3, #2
 80025c2:	61bb      	str	r3, [r7, #24]
 80025c4:	e007      	b.n	80025d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	781a      	ldrb	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	3301      	adds	r3, #1
 80025d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025da:	b29b      	uxth	r3, r3
 80025dc:	3b01      	subs	r3, #1
 80025de:	b29a      	uxth	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1cf      	bne.n	800258e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	2200      	movs	r2, #0
 80025f6:	2140      	movs	r1, #64	; 0x40
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f000 f8af 	bl	800275c <UART_WaitOnFlagUntilTimeout>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e006      	b.n	8002616 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2220      	movs	r2, #32
 800260c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002610:	2300      	movs	r3, #0
 8002612:	e000      	b.n	8002616 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002614:	2302      	movs	r3, #2
  }
}
 8002616:	4618      	mov	r0, r3
 8002618:	3720      	adds	r7, #32
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b08a      	sub	sp, #40	; 0x28
 8002622:	af02      	add	r7, sp, #8
 8002624:	60f8      	str	r0, [r7, #12]
 8002626:	60b9      	str	r1, [r7, #8]
 8002628:	603b      	str	r3, [r7, #0]
 800262a:	4613      	mov	r3, r2
 800262c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b20      	cmp	r3, #32
 800263c:	f040 8089 	bne.w	8002752 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d002      	beq.n	800264c <HAL_UART_Receive+0x2e>
 8002646:	88fb      	ldrh	r3, [r7, #6]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d101      	bne.n	8002650 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e081      	b.n	8002754 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002656:	2b01      	cmp	r3, #1
 8002658:	d101      	bne.n	800265e <HAL_UART_Receive+0x40>
 800265a:	2302      	movs	r3, #2
 800265c:	e07a      	b.n	8002754 <HAL_UART_Receive+0x136>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2222      	movs	r2, #34	; 0x22
 8002670:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002674:	f7fe fdc6 	bl	8001204 <HAL_GetTick>
 8002678:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	88fa      	ldrh	r2, [r7, #6]
 800267e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	88fa      	ldrh	r2, [r7, #6]
 8002684:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800268e:	d108      	bne.n	80026a2 <HAL_UART_Receive+0x84>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d104      	bne.n	80026a2 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8002698:	2300      	movs	r3, #0
 800269a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	61bb      	str	r3, [r7, #24]
 80026a0:	e003      	b.n	80026aa <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026a6:	2300      	movs	r3, #0
 80026a8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80026b2:	e043      	b.n	800273c <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	2200      	movs	r2, #0
 80026bc:	2120      	movs	r1, #32
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 f84c 	bl	800275c <UART_WaitOnFlagUntilTimeout>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e042      	b.n	8002754 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10c      	bne.n	80026ee <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	b29b      	uxth	r3, r3
 80026dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	3302      	adds	r3, #2
 80026ea:	61bb      	str	r3, [r7, #24]
 80026ec:	e01f      	b.n	800272e <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026f6:	d007      	beq.n	8002708 <HAL_UART_Receive+0xea>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10a      	bne.n	8002716 <HAL_UART_Receive+0xf8>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d106      	bne.n	8002716 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	b2da      	uxtb	r2, r3
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	701a      	strb	r2, [r3, #0]
 8002714:	e008      	b.n	8002728 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	b2db      	uxtb	r3, r3
 800271e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002722:	b2da      	uxtb	r2, r3
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	3301      	adds	r3, #1
 800272c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002732:	b29b      	uxth	r3, r3
 8002734:	3b01      	subs	r3, #1
 8002736:	b29a      	uxth	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002740:	b29b      	uxth	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1b6      	bne.n	80026b4 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2220      	movs	r2, #32
 800274a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800274e:	2300      	movs	r3, #0
 8002750:	e000      	b.n	8002754 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002752:	2302      	movs	r3, #2
  }
}
 8002754:	4618      	mov	r0, r3
 8002756:	3720      	adds	r7, #32
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	603b      	str	r3, [r7, #0]
 8002768:	4613      	mov	r3, r2
 800276a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800276c:	e02c      	b.n	80027c8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002774:	d028      	beq.n	80027c8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d007      	beq.n	800278c <UART_WaitOnFlagUntilTimeout+0x30>
 800277c:	f7fe fd42 	bl	8001204 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	429a      	cmp	r2, r3
 800278a:	d21d      	bcs.n	80027c8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800279a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695a      	ldr	r2, [r3, #20]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 0201 	bic.w	r2, r2, #1
 80027aa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2220      	movs	r2, #32
 80027b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2220      	movs	r2, #32
 80027b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e00f      	b.n	80027e8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	4013      	ands	r3, r2
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	bf0c      	ite	eq
 80027d8:	2301      	moveq	r3, #1
 80027da:	2300      	movne	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	461a      	mov	r2, r3
 80027e0:	79fb      	ldrb	r3, [r7, #7]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d0c3      	beq.n	800276e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	430a      	orrs	r2, r1
 800280c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	4313      	orrs	r3, r2
 800281e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800282a:	f023 030c 	bic.w	r3, r3, #12
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	6812      	ldr	r2, [r2, #0]
 8002832:	68b9      	ldr	r1, [r7, #8]
 8002834:	430b      	orrs	r3, r1
 8002836:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	699a      	ldr	r2, [r3, #24]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	430a      	orrs	r2, r1
 800284c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a2c      	ldr	r2, [pc, #176]	; (8002904 <UART_SetConfig+0x114>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d103      	bne.n	8002860 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002858:	f7ff fb56 	bl	8001f08 <HAL_RCC_GetPCLK2Freq>
 800285c:	60f8      	str	r0, [r7, #12]
 800285e:	e002      	b.n	8002866 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002860:	f7ff fb3e 	bl	8001ee0 <HAL_RCC_GetPCLK1Freq>
 8002864:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	009a      	lsls	r2, r3, #2
 8002870:	441a      	add	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	fbb2 f3f3 	udiv	r3, r2, r3
 800287c:	4a22      	ldr	r2, [pc, #136]	; (8002908 <UART_SetConfig+0x118>)
 800287e:	fba2 2303 	umull	r2, r3, r2, r3
 8002882:	095b      	lsrs	r3, r3, #5
 8002884:	0119      	lsls	r1, r3, #4
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	4613      	mov	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	009a      	lsls	r2, r3, #2
 8002890:	441a      	add	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	fbb2 f2f3 	udiv	r2, r2, r3
 800289c:	4b1a      	ldr	r3, [pc, #104]	; (8002908 <UART_SetConfig+0x118>)
 800289e:	fba3 0302 	umull	r0, r3, r3, r2
 80028a2:	095b      	lsrs	r3, r3, #5
 80028a4:	2064      	movs	r0, #100	; 0x64
 80028a6:	fb00 f303 	mul.w	r3, r0, r3
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	3332      	adds	r3, #50	; 0x32
 80028b0:	4a15      	ldr	r2, [pc, #84]	; (8002908 <UART_SetConfig+0x118>)
 80028b2:	fba2 2303 	umull	r2, r3, r2, r3
 80028b6:	095b      	lsrs	r3, r3, #5
 80028b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028bc:	4419      	add	r1, r3
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	009a      	lsls	r2, r3, #2
 80028c8:	441a      	add	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80028d4:	4b0c      	ldr	r3, [pc, #48]	; (8002908 <UART_SetConfig+0x118>)
 80028d6:	fba3 0302 	umull	r0, r3, r3, r2
 80028da:	095b      	lsrs	r3, r3, #5
 80028dc:	2064      	movs	r0, #100	; 0x64
 80028de:	fb00 f303 	mul.w	r3, r0, r3
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	3332      	adds	r3, #50	; 0x32
 80028e8:	4a07      	ldr	r2, [pc, #28]	; (8002908 <UART_SetConfig+0x118>)
 80028ea:	fba2 2303 	umull	r2, r3, r2, r3
 80028ee:	095b      	lsrs	r3, r3, #5
 80028f0:	f003 020f 	and.w	r2, r3, #15
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	440a      	add	r2, r1
 80028fa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80028fc:	bf00      	nop
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40013800 	.word	0x40013800
 8002908:	51eb851f 	.word	0x51eb851f

0800290c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002912:	f3ef 8305 	mrs	r3, IPSR
 8002916:	60bb      	str	r3, [r7, #8]
  return(result);
 8002918:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10f      	bne.n	800293e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800291e:	f3ef 8310 	mrs	r3, PRIMASK
 8002922:	607b      	str	r3, [r7, #4]
  return(result);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d109      	bne.n	800293e <osKernelInitialize+0x32>
 800292a:	4b10      	ldr	r3, [pc, #64]	; (800296c <osKernelInitialize+0x60>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2b02      	cmp	r3, #2
 8002930:	d109      	bne.n	8002946 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002932:	f3ef 8311 	mrs	r3, BASEPRI
 8002936:	603b      	str	r3, [r7, #0]
  return(result);
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800293e:	f06f 0305 	mvn.w	r3, #5
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	e00c      	b.n	8002960 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002946:	4b09      	ldr	r3, [pc, #36]	; (800296c <osKernelInitialize+0x60>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d105      	bne.n	800295a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800294e:	4b07      	ldr	r3, [pc, #28]	; (800296c <osKernelInitialize+0x60>)
 8002950:	2201      	movs	r2, #1
 8002952:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002954:	2300      	movs	r3, #0
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	e002      	b.n	8002960 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800295a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800295e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002960:	68fb      	ldr	r3, [r7, #12]
}
 8002962:	4618      	mov	r0, r3
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr
 800296c:	20000224 	.word	0x20000224

08002970 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002976:	f3ef 8305 	mrs	r3, IPSR
 800297a:	60bb      	str	r3, [r7, #8]
  return(result);
 800297c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10f      	bne.n	80029a2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002982:	f3ef 8310 	mrs	r3, PRIMASK
 8002986:	607b      	str	r3, [r7, #4]
  return(result);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d109      	bne.n	80029a2 <osKernelStart+0x32>
 800298e:	4b11      	ldr	r3, [pc, #68]	; (80029d4 <osKernelStart+0x64>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2b02      	cmp	r3, #2
 8002994:	d109      	bne.n	80029aa <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002996:	f3ef 8311 	mrs	r3, BASEPRI
 800299a:	603b      	str	r3, [r7, #0]
  return(result);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <osKernelStart+0x3a>
    stat = osErrorISR;
 80029a2:	f06f 0305 	mvn.w	r3, #5
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	e00e      	b.n	80029c8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80029aa:	4b0a      	ldr	r3, [pc, #40]	; (80029d4 <osKernelStart+0x64>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d107      	bne.n	80029c2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80029b2:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <osKernelStart+0x64>)
 80029b4:	2202      	movs	r2, #2
 80029b6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80029b8:	f001 fa8a 	bl	8003ed0 <vTaskStartScheduler>
      stat = osOK;
 80029bc:	2300      	movs	r3, #0
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	e002      	b.n	80029c8 <osKernelStart+0x58>
    } else {
      stat = osError;
 80029c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029c6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80029c8:	68fb      	ldr	r3, [r7, #12]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20000224 	.word	0x20000224

080029d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80029d8:	b580      	push	{r7, lr}
 80029da:	b092      	sub	sp, #72	; 0x48
 80029dc:	af04      	add	r7, sp, #16
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80029e4:	2300      	movs	r3, #0
 80029e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029e8:	f3ef 8305 	mrs	r3, IPSR
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f040 8094 	bne.w	8002b1e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029f6:	f3ef 8310 	mrs	r3, PRIMASK
 80029fa:	623b      	str	r3, [r7, #32]
  return(result);
 80029fc:	6a3b      	ldr	r3, [r7, #32]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f040 808d 	bne.w	8002b1e <osThreadNew+0x146>
 8002a04:	4b48      	ldr	r3, [pc, #288]	; (8002b28 <osThreadNew+0x150>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d106      	bne.n	8002a1a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002a0c:	f3ef 8311 	mrs	r3, BASEPRI
 8002a10:	61fb      	str	r3, [r7, #28]
  return(result);
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f040 8082 	bne.w	8002b1e <osThreadNew+0x146>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d07e      	beq.n	8002b1e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002a20:	2380      	movs	r3, #128	; 0x80
 8002a22:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002a24:	2318      	movs	r3, #24
 8002a26:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002a28:	2300      	movs	r3, #0
 8002a2a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002a2c:	f107 031b 	add.w	r3, r7, #27
 8002a30:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002a32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a36:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d045      	beq.n	8002aca <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d002      	beq.n	8002a4c <osThreadNew+0x74>
        name = attr->name;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d002      	beq.n	8002a5a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d008      	beq.n	8002a72 <osThreadNew+0x9a>
 8002a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a62:	2b38      	cmp	r3, #56	; 0x38
 8002a64:	d805      	bhi.n	8002a72 <osThreadNew+0x9a>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <osThreadNew+0x9e>
        return (NULL);
 8002a72:	2300      	movs	r3, #0
 8002a74:	e054      	b.n	8002b20 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	089b      	lsrs	r3, r3, #2
 8002a84:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00e      	beq.n	8002aac <osThreadNew+0xd4>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	2b5b      	cmp	r3, #91	; 0x5b
 8002a94:	d90a      	bls.n	8002aac <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d006      	beq.n	8002aac <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d002      	beq.n	8002aac <osThreadNew+0xd4>
        mem = 1;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aaa:	e010      	b.n	8002ace <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10c      	bne.n	8002ace <osThreadNew+0xf6>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d108      	bne.n	8002ace <osThreadNew+0xf6>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d104      	bne.n	8002ace <osThreadNew+0xf6>
          mem = 0;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ac8:	e001      	b.n	8002ace <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002aca:	2300      	movs	r3, #0
 8002acc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d110      	bne.n	8002af6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002adc:	9202      	str	r2, [sp, #8]
 8002ade:	9301      	str	r3, [sp, #4]
 8002ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ae8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f001 f828 	bl	8003b40 <xTaskCreateStatic>
 8002af0:	4603      	mov	r3, r0
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	e013      	b.n	8002b1e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d110      	bne.n	8002b1e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	f107 0314 	add.w	r3, r7, #20
 8002b04:	9301      	str	r3, [sp, #4]
 8002b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f001 f86f 	bl	8003bf2 <xTaskCreate>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d001      	beq.n	8002b1e <osThreadNew+0x146>
          hTask = NULL;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002b1e:	697b      	ldr	r3, [r7, #20]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3738      	adds	r7, #56	; 0x38
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	20000224 	.word	0x20000224

08002b2c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b34:	f3ef 8305 	mrs	r3, IPSR
 8002b38:	613b      	str	r3, [r7, #16]
  return(result);
 8002b3a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10f      	bne.n	8002b60 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b40:	f3ef 8310 	mrs	r3, PRIMASK
 8002b44:	60fb      	str	r3, [r7, #12]
  return(result);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d109      	bne.n	8002b60 <osDelay+0x34>
 8002b4c:	4b0d      	ldr	r3, [pc, #52]	; (8002b84 <osDelay+0x58>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d109      	bne.n	8002b68 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002b54:	f3ef 8311 	mrs	r3, BASEPRI
 8002b58:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <osDelay+0x3c>
    stat = osErrorISR;
 8002b60:	f06f 0305 	mvn.w	r3, #5
 8002b64:	617b      	str	r3, [r7, #20]
 8002b66:	e007      	b.n	8002b78 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d002      	beq.n	8002b78 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f001 f978 	bl	8003e68 <vTaskDelay>
    }
  }

  return (stat);
 8002b78:	697b      	ldr	r3, [r7, #20]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3718      	adds	r7, #24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20000224 	.word	0x20000224

08002b88 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b08c      	sub	sp, #48	; 0x30
 8002b8c:	af02      	add	r7, sp, #8
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002b94:	2300      	movs	r3, #0
 8002b96:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b98:	f3ef 8305 	mrs	r3, IPSR
 8002b9c:	61bb      	str	r3, [r7, #24]
  return(result);
 8002b9e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d170      	bne.n	8002c86 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ba4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ba8:	617b      	str	r3, [r7, #20]
  return(result);
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d16a      	bne.n	8002c86 <osMessageQueueNew+0xfe>
 8002bb0:	4b37      	ldr	r3, [pc, #220]	; (8002c90 <osMessageQueueNew+0x108>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d105      	bne.n	8002bc4 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002bb8:	f3ef 8311 	mrs	r3, BASEPRI
 8002bbc:	613b      	str	r3, [r7, #16]
  return(result);
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d160      	bne.n	8002c86 <osMessageQueueNew+0xfe>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d05d      	beq.n	8002c86 <osMessageQueueNew+0xfe>
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d05a      	beq.n	8002c86 <osMessageQueueNew+0xfe>
    mem = -1;
 8002bd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bd4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d029      	beq.n	8002c30 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d012      	beq.n	8002c0a <osMessageQueueNew+0x82>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	2b4f      	cmp	r3, #79	; 0x4f
 8002bea:	d90e      	bls.n	8002c0a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00a      	beq.n	8002c0a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	695a      	ldr	r2, [r3, #20]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	68b9      	ldr	r1, [r7, #8]
 8002bfc:	fb01 f303 	mul.w	r3, r1, r3
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d302      	bcc.n	8002c0a <osMessageQueueNew+0x82>
        mem = 1;
 8002c04:	2301      	movs	r3, #1
 8002c06:	623b      	str	r3, [r7, #32]
 8002c08:	e014      	b.n	8002c34 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d110      	bne.n	8002c34 <osMessageQueueNew+0xac>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10c      	bne.n	8002c34 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d108      	bne.n	8002c34 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d104      	bne.n	8002c34 <osMessageQueueNew+0xac>
          mem = 0;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	623b      	str	r3, [r7, #32]
 8002c2e:	e001      	b.n	8002c34 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8002c30:	2300      	movs	r3, #0
 8002c32:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d10c      	bne.n	8002c54 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691a      	ldr	r2, [r3, #16]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6899      	ldr	r1, [r3, #8]
 8002c42:	2300      	movs	r3, #0
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	460b      	mov	r3, r1
 8002c48:	68b9      	ldr	r1, [r7, #8]
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 fa52 	bl	80030f4 <xQueueGenericCreateStatic>
 8002c50:	6278      	str	r0, [r7, #36]	; 0x24
 8002c52:	e008      	b.n	8002c66 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8002c54:	6a3b      	ldr	r3, [r7, #32]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d105      	bne.n	8002c66 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	68b9      	ldr	r1, [r7, #8]
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 faba 	bl	80031d8 <xQueueGenericCreate>
 8002c64:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00c      	beq.n	8002c86 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <osMessageQueueNew+0xf2>
        name = attr->name;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	61fb      	str	r3, [r7, #28]
 8002c78:	e001      	b.n	8002c7e <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8002c7e:	69f9      	ldr	r1, [r7, #28]
 8002c80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c82:	f000 ff01 	bl	8003a88 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3728      	adds	r7, #40	; 0x28
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	20000224 	.word	0x20000224

08002c94 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b08a      	sub	sp, #40	; 0x28
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	603b      	str	r3, [r7, #0]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002cac:	f3ef 8305 	mrs	r3, IPSR
 8002cb0:	61fb      	str	r3, [r7, #28]
  return(result);
 8002cb2:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10f      	bne.n	8002cd8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cb8:	f3ef 8310 	mrs	r3, PRIMASK
 8002cbc:	61bb      	str	r3, [r7, #24]
  return(result);
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d109      	bne.n	8002cd8 <osMessageQueuePut+0x44>
 8002cc4:	4b2b      	ldr	r3, [pc, #172]	; (8002d74 <osMessageQueuePut+0xe0>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d12e      	bne.n	8002d2a <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002ccc:	f3ef 8311 	mrs	r3, BASEPRI
 8002cd0:	617b      	str	r3, [r7, #20]
  return(result);
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d028      	beq.n	8002d2a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002cd8:	6a3b      	ldr	r3, [r7, #32]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d005      	beq.n	8002cea <osMessageQueuePut+0x56>
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d002      	beq.n	8002cea <osMessageQueuePut+0x56>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8002cea:	f06f 0303 	mvn.w	r3, #3
 8002cee:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002cf0:	e039      	b.n	8002d66 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8002cf6:	f107 0210 	add.w	r2, r7, #16
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	68b9      	ldr	r1, [r7, #8]
 8002cfe:	6a38      	ldr	r0, [r7, #32]
 8002d00:	f000 fbc4 	bl	800348c <xQueueGenericSendFromISR>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d003      	beq.n	8002d12 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8002d0a:	f06f 0302 	mvn.w	r3, #2
 8002d0e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002d10:	e029      	b.n	8002d66 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d026      	beq.n	8002d66 <osMessageQueuePut+0xd2>
 8002d18:	4b17      	ldr	r3, [pc, #92]	; (8002d78 <osMessageQueuePut+0xe4>)
 8002d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	f3bf 8f4f 	dsb	sy
 8002d24:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002d28:	e01d      	b.n	8002d66 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d002      	beq.n	8002d36 <osMessageQueuePut+0xa2>
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d103      	bne.n	8002d3e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8002d36:	f06f 0303 	mvn.w	r3, #3
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d3c:	e014      	b.n	8002d68 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002d3e:	2300      	movs	r3, #0
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	68b9      	ldr	r1, [r7, #8]
 8002d44:	6a38      	ldr	r0, [r7, #32]
 8002d46:	f000 faa7 	bl	8003298 <xQueueGenericSend>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d00b      	beq.n	8002d68 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8002d56:	f06f 0301 	mvn.w	r3, #1
 8002d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d5c:	e004      	b.n	8002d68 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8002d5e:	f06f 0302 	mvn.w	r3, #2
 8002d62:	627b      	str	r3, [r7, #36]	; 0x24
 8002d64:	e000      	b.n	8002d68 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002d66:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3728      	adds	r7, #40	; 0x28
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	20000224 	.word	0x20000224
 8002d78:	e000ed04 	.word	0xe000ed04

08002d7c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08a      	sub	sp, #40	; 0x28
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
 8002d88:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d92:	f3ef 8305 	mrs	r3, IPSR
 8002d96:	61fb      	str	r3, [r7, #28]
  return(result);
 8002d98:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10f      	bne.n	8002dbe <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d9e:	f3ef 8310 	mrs	r3, PRIMASK
 8002da2:	61bb      	str	r3, [r7, #24]
  return(result);
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d109      	bne.n	8002dbe <osMessageQueueGet+0x42>
 8002daa:	4b2b      	ldr	r3, [pc, #172]	; (8002e58 <osMessageQueueGet+0xdc>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d12e      	bne.n	8002e10 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002db2:	f3ef 8311 	mrs	r3, BASEPRI
 8002db6:	617b      	str	r3, [r7, #20]
  return(result);
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d028      	beq.n	8002e10 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002dbe:	6a3b      	ldr	r3, [r7, #32]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d005      	beq.n	8002dd0 <osMessageQueueGet+0x54>
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <osMessageQueueGet+0x54>
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8002dd0:	f06f 0303 	mvn.w	r3, #3
 8002dd4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002dd6:	e038      	b.n	8002e4a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8002ddc:	f107 0310 	add.w	r3, r7, #16
 8002de0:	461a      	mov	r2, r3
 8002de2:	68b9      	ldr	r1, [r7, #8]
 8002de4:	6a38      	ldr	r0, [r7, #32]
 8002de6:	f000 fcc1 	bl	800376c <xQueueReceiveFromISR>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d003      	beq.n	8002df8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8002df0:	f06f 0302 	mvn.w	r3, #2
 8002df4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002df6:	e028      	b.n	8002e4a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d025      	beq.n	8002e4a <osMessageQueueGet+0xce>
 8002dfe:	4b17      	ldr	r3, [pc, #92]	; (8002e5c <osMessageQueueGet+0xe0>)
 8002e00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	f3bf 8f4f 	dsb	sy
 8002e0a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002e0e:	e01c      	b.n	8002e4a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002e10:	6a3b      	ldr	r3, [r7, #32]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d002      	beq.n	8002e1c <osMessageQueueGet+0xa0>
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d103      	bne.n	8002e24 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8002e1c:	f06f 0303 	mvn.w	r3, #3
 8002e20:	627b      	str	r3, [r7, #36]	; 0x24
 8002e22:	e013      	b.n	8002e4c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	68b9      	ldr	r1, [r7, #8]
 8002e28:	6a38      	ldr	r0, [r7, #32]
 8002e2a:	f000 fbc3 	bl	80035b4 <xQueueReceive>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d00b      	beq.n	8002e4c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8002e3a:	f06f 0301 	mvn.w	r3, #1
 8002e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e40:	e004      	b.n	8002e4c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8002e42:	f06f 0302 	mvn.w	r3, #2
 8002e46:	627b      	str	r3, [r7, #36]	; 0x24
 8002e48:	e000      	b.n	8002e4c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002e4a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3728      	adds	r7, #40	; 0x28
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	20000224 	.word	0x20000224
 8002e5c:	e000ed04 	.word	0xe000ed04

08002e60 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	4a06      	ldr	r2, [pc, #24]	; (8002e88 <vApplicationGetIdleTaskMemory+0x28>)
 8002e70:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	4a05      	ldr	r2, [pc, #20]	; (8002e8c <vApplicationGetIdleTaskMemory+0x2c>)
 8002e76:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2280      	movs	r2, #128	; 0x80
 8002e7c:	601a      	str	r2, [r3, #0]
}
 8002e7e:	bf00      	nop
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr
 8002e88:	20000228 	.word	0x20000228
 8002e8c:	20000284 	.word	0x20000284

08002e90 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4a07      	ldr	r2, [pc, #28]	; (8002ebc <vApplicationGetTimerTaskMemory+0x2c>)
 8002ea0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	4a06      	ldr	r2, [pc, #24]	; (8002ec0 <vApplicationGetTimerTaskMemory+0x30>)
 8002ea6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002eae:	601a      	str	r2, [r3, #0]
}
 8002eb0:	bf00      	nop
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc80      	pop	{r7}
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	20000484 	.word	0x20000484
 8002ec0:	200004e0 	.word	0x200004e0

08002ec4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f103 0208 	add.w	r2, r3, #8
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002edc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f103 0208 	add.w	r2, r3, #8
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f103 0208 	add.w	r2, r3, #8
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr

08002f02 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bc80      	pop	{r7}
 8002f18:	4770      	bx	lr

08002f1a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b085      	sub	sp, #20
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
 8002f22:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	1c5a      	adds	r2, r3, #1
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	601a      	str	r2, [r3, #0]
}
 8002f56:	bf00      	nop
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr

08002f60 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f76:	d103      	bne.n	8002f80 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	e00c      	b.n	8002f9a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3308      	adds	r3, #8
 8002f84:	60fb      	str	r3, [r7, #12]
 8002f86:	e002      	b.n	8002f8e <vListInsert+0x2e>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68ba      	ldr	r2, [r7, #8]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d2f6      	bcs.n	8002f88 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	1c5a      	adds	r2, r3, #1
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	601a      	str	r2, [r3, #0]
}
 8002fc6:	bf00      	nop
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr

08002fd0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	6892      	ldr	r2, [r2, #8]
 8002fe6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6852      	ldr	r2, [r2, #4]
 8002ff0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d103      	bne.n	8003004 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689a      	ldr	r2, [r3, #8]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	1e5a      	subs	r2, r3, #1
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
}
 8003018:	4618      	mov	r0, r3
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	bc80      	pop	{r7}
 8003020:	4770      	bx	lr
	...

08003024 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d109      	bne.n	800304c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303c:	f383 8811 	msr	BASEPRI, r3
 8003040:	f3bf 8f6f 	isb	sy
 8003044:	f3bf 8f4f 	dsb	sy
 8003048:	60bb      	str	r3, [r7, #8]
 800304a:	e7fe      	b.n	800304a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800304c:	f002 f854 	bl	80050f8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003058:	68f9      	ldr	r1, [r7, #12]
 800305a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800305c:	fb01 f303 	mul.w	r3, r1, r3
 8003060:	441a      	add	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800307c:	3b01      	subs	r3, #1
 800307e:	68f9      	ldr	r1, [r7, #12]
 8003080:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003082:	fb01 f303 	mul.w	r3, r1, r3
 8003086:	441a      	add	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	22ff      	movs	r2, #255	; 0xff
 8003090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	22ff      	movs	r2, #255	; 0xff
 8003098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d114      	bne.n	80030cc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d01a      	beq.n	80030e0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	3310      	adds	r3, #16
 80030ae:	4618      	mov	r0, r3
 80030b0:	f001 f992 	bl	80043d8 <xTaskRemoveFromEventList>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d012      	beq.n	80030e0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80030ba:	4b0d      	ldr	r3, [pc, #52]	; (80030f0 <xQueueGenericReset+0xcc>)
 80030bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	f3bf 8f4f 	dsb	sy
 80030c6:	f3bf 8f6f 	isb	sy
 80030ca:	e009      	b.n	80030e0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	3310      	adds	r3, #16
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff fef7 	bl	8002ec4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	3324      	adds	r3, #36	; 0x24
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff fef2 	bl	8002ec4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80030e0:	f002 f838 	bl	8005154 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80030e4:	2301      	movs	r3, #1
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	e000ed04 	.word	0xe000ed04

080030f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08e      	sub	sp, #56	; 0x38
 80030f8:	af02      	add	r7, sp, #8
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
 8003100:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d109      	bne.n	800311c <xQueueGenericCreateStatic+0x28>
 8003108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310c:	f383 8811 	msr	BASEPRI, r3
 8003110:	f3bf 8f6f 	isb	sy
 8003114:	f3bf 8f4f 	dsb	sy
 8003118:	62bb      	str	r3, [r7, #40]	; 0x28
 800311a:	e7fe      	b.n	800311a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d109      	bne.n	8003136 <xQueueGenericCreateStatic+0x42>
 8003122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003126:	f383 8811 	msr	BASEPRI, r3
 800312a:	f3bf 8f6f 	isb	sy
 800312e:	f3bf 8f4f 	dsb	sy
 8003132:	627b      	str	r3, [r7, #36]	; 0x24
 8003134:	e7fe      	b.n	8003134 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d002      	beq.n	8003142 <xQueueGenericCreateStatic+0x4e>
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <xQueueGenericCreateStatic+0x52>
 8003142:	2301      	movs	r3, #1
 8003144:	e000      	b.n	8003148 <xQueueGenericCreateStatic+0x54>
 8003146:	2300      	movs	r3, #0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d109      	bne.n	8003160 <xQueueGenericCreateStatic+0x6c>
 800314c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003150:	f383 8811 	msr	BASEPRI, r3
 8003154:	f3bf 8f6f 	isb	sy
 8003158:	f3bf 8f4f 	dsb	sy
 800315c:	623b      	str	r3, [r7, #32]
 800315e:	e7fe      	b.n	800315e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d102      	bne.n	800316c <xQueueGenericCreateStatic+0x78>
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <xQueueGenericCreateStatic+0x7c>
 800316c:	2301      	movs	r3, #1
 800316e:	e000      	b.n	8003172 <xQueueGenericCreateStatic+0x7e>
 8003170:	2300      	movs	r3, #0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d109      	bne.n	800318a <xQueueGenericCreateStatic+0x96>
 8003176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317a:	f383 8811 	msr	BASEPRI, r3
 800317e:	f3bf 8f6f 	isb	sy
 8003182:	f3bf 8f4f 	dsb	sy
 8003186:	61fb      	str	r3, [r7, #28]
 8003188:	e7fe      	b.n	8003188 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800318a:	2350      	movs	r3, #80	; 0x50
 800318c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	2b50      	cmp	r3, #80	; 0x50
 8003192:	d009      	beq.n	80031a8 <xQueueGenericCreateStatic+0xb4>
 8003194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003198:	f383 8811 	msr	BASEPRI, r3
 800319c:	f3bf 8f6f 	isb	sy
 80031a0:	f3bf 8f4f 	dsb	sy
 80031a4:	61bb      	str	r3, [r7, #24]
 80031a6:	e7fe      	b.n	80031a6 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80031ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00d      	beq.n	80031ce <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80031b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80031ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80031be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	4613      	mov	r3, r2
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	68b9      	ldr	r1, [r7, #8]
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 f842 	bl	8003252 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80031ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3730      	adds	r7, #48	; 0x30
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b08a      	sub	sp, #40	; 0x28
 80031dc:	af02      	add	r7, sp, #8
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	4613      	mov	r3, r2
 80031e4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d109      	bne.n	8003200 <xQueueGenericCreate+0x28>
 80031ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f0:	f383 8811 	msr	BASEPRI, r3
 80031f4:	f3bf 8f6f 	isb	sy
 80031f8:	f3bf 8f4f 	dsb	sy
 80031fc:	613b      	str	r3, [r7, #16]
 80031fe:	e7fe      	b.n	80031fe <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d102      	bne.n	800320c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003206:	2300      	movs	r3, #0
 8003208:	61fb      	str	r3, [r7, #28]
 800320a:	e004      	b.n	8003216 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	fb02 f303 	mul.w	r3, r2, r3
 8003214:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	3350      	adds	r3, #80	; 0x50
 800321a:	4618      	mov	r0, r3
 800321c:	f002 f862 	bl	80052e4 <pvPortMalloc>
 8003220:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00f      	beq.n	8003248 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	3350      	adds	r3, #80	; 0x50
 800322c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003236:	79fa      	ldrb	r2, [r7, #7]
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	4613      	mov	r3, r2
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	68b9      	ldr	r1, [r7, #8]
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 f805 	bl	8003252 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003248:	69bb      	ldr	r3, [r7, #24]
	}
 800324a:	4618      	mov	r0, r3
 800324c:	3720      	adds	r7, #32
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b084      	sub	sp, #16
 8003256:	af00      	add	r7, sp, #0
 8003258:	60f8      	str	r0, [r7, #12]
 800325a:	60b9      	str	r1, [r7, #8]
 800325c:	607a      	str	r2, [r7, #4]
 800325e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d103      	bne.n	800326e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	e002      	b.n	8003274 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003280:	2101      	movs	r1, #1
 8003282:	69b8      	ldr	r0, [r7, #24]
 8003284:	f7ff fece 	bl	8003024 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	78fa      	ldrb	r2, [r7, #3]
 800328c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003290:	bf00      	nop
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b08e      	sub	sp, #56	; 0x38
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
 80032a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80032a6:	2300      	movs	r3, #0
 80032a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80032ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d109      	bne.n	80032c8 <xQueueGenericSend+0x30>
 80032b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b8:	f383 8811 	msr	BASEPRI, r3
 80032bc:	f3bf 8f6f 	isb	sy
 80032c0:	f3bf 8f4f 	dsb	sy
 80032c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80032c6:	e7fe      	b.n	80032c6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d103      	bne.n	80032d6 <xQueueGenericSend+0x3e>
 80032ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <xQueueGenericSend+0x42>
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <xQueueGenericSend+0x44>
 80032da:	2300      	movs	r3, #0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d109      	bne.n	80032f4 <xQueueGenericSend+0x5c>
 80032e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e4:	f383 8811 	msr	BASEPRI, r3
 80032e8:	f3bf 8f6f 	isb	sy
 80032ec:	f3bf 8f4f 	dsb	sy
 80032f0:	627b      	str	r3, [r7, #36]	; 0x24
 80032f2:	e7fe      	b.n	80032f2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d103      	bne.n	8003302 <xQueueGenericSend+0x6a>
 80032fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <xQueueGenericSend+0x6e>
 8003302:	2301      	movs	r3, #1
 8003304:	e000      	b.n	8003308 <xQueueGenericSend+0x70>
 8003306:	2300      	movs	r3, #0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d109      	bne.n	8003320 <xQueueGenericSend+0x88>
 800330c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003310:	f383 8811 	msr	BASEPRI, r3
 8003314:	f3bf 8f6f 	isb	sy
 8003318:	f3bf 8f4f 	dsb	sy
 800331c:	623b      	str	r3, [r7, #32]
 800331e:	e7fe      	b.n	800331e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003320:	f001 fa14 	bl	800474c <xTaskGetSchedulerState>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d102      	bne.n	8003330 <xQueueGenericSend+0x98>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d101      	bne.n	8003334 <xQueueGenericSend+0x9c>
 8003330:	2301      	movs	r3, #1
 8003332:	e000      	b.n	8003336 <xQueueGenericSend+0x9e>
 8003334:	2300      	movs	r3, #0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d109      	bne.n	800334e <xQueueGenericSend+0xb6>
 800333a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333e:	f383 8811 	msr	BASEPRI, r3
 8003342:	f3bf 8f6f 	isb	sy
 8003346:	f3bf 8f4f 	dsb	sy
 800334a:	61fb      	str	r3, [r7, #28]
 800334c:	e7fe      	b.n	800334c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800334e:	f001 fed3 	bl	80050f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800335a:	429a      	cmp	r2, r3
 800335c:	d302      	bcc.n	8003364 <xQueueGenericSend+0xcc>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b02      	cmp	r3, #2
 8003362:	d129      	bne.n	80033b8 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	68b9      	ldr	r1, [r7, #8]
 8003368:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800336a:	f000 fa7c 	bl	8003866 <prvCopyDataToQueue>
 800336e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	2b00      	cmp	r3, #0
 8003376:	d010      	beq.n	800339a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337a:	3324      	adds	r3, #36	; 0x24
 800337c:	4618      	mov	r0, r3
 800337e:	f001 f82b 	bl	80043d8 <xTaskRemoveFromEventList>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d013      	beq.n	80033b0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003388:	4b3f      	ldr	r3, [pc, #252]	; (8003488 <xQueueGenericSend+0x1f0>)
 800338a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	f3bf 8f4f 	dsb	sy
 8003394:	f3bf 8f6f 	isb	sy
 8003398:	e00a      	b.n	80033b0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800339a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800339c:	2b00      	cmp	r3, #0
 800339e:	d007      	beq.n	80033b0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80033a0:	4b39      	ldr	r3, [pc, #228]	; (8003488 <xQueueGenericSend+0x1f0>)
 80033a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	f3bf 8f4f 	dsb	sy
 80033ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80033b0:	f001 fed0 	bl	8005154 <vPortExitCritical>
				return pdPASS;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e063      	b.n	8003480 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d103      	bne.n	80033c6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80033be:	f001 fec9 	bl	8005154 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80033c2:	2300      	movs	r3, #0
 80033c4:	e05c      	b.n	8003480 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80033c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d106      	bne.n	80033da <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80033cc:	f107 0314 	add.w	r3, r7, #20
 80033d0:	4618      	mov	r0, r3
 80033d2:	f001 f863 	bl	800449c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80033d6:	2301      	movs	r3, #1
 80033d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80033da:	f001 febb 	bl	8005154 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80033de:	f000 fddb 	bl	8003f98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80033e2:	f001 fe89 	bl	80050f8 <vPortEnterCritical>
 80033e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033ec:	b25b      	sxtb	r3, r3
 80033ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033f2:	d103      	bne.n	80033fc <xQueueGenericSend+0x164>
 80033f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003402:	b25b      	sxtb	r3, r3
 8003404:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003408:	d103      	bne.n	8003412 <xQueueGenericSend+0x17a>
 800340a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003412:	f001 fe9f 	bl	8005154 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003416:	1d3a      	adds	r2, r7, #4
 8003418:	f107 0314 	add.w	r3, r7, #20
 800341c:	4611      	mov	r1, r2
 800341e:	4618      	mov	r0, r3
 8003420:	f001 f852 	bl	80044c8 <xTaskCheckForTimeOut>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d124      	bne.n	8003474 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800342a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800342c:	f000 fb13 	bl	8003a56 <prvIsQueueFull>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d018      	beq.n	8003468 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003438:	3310      	adds	r3, #16
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	4611      	mov	r1, r2
 800343e:	4618      	mov	r0, r3
 8003440:	f000 ff7c 	bl	800433c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003444:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003446:	f000 fa9e 	bl	8003986 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800344a:	f000 fdb3 	bl	8003fb4 <xTaskResumeAll>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	f47f af7c 	bne.w	800334e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003456:	4b0c      	ldr	r3, [pc, #48]	; (8003488 <xQueueGenericSend+0x1f0>)
 8003458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800345c:	601a      	str	r2, [r3, #0]
 800345e:	f3bf 8f4f 	dsb	sy
 8003462:	f3bf 8f6f 	isb	sy
 8003466:	e772      	b.n	800334e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003468:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800346a:	f000 fa8c 	bl	8003986 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800346e:	f000 fda1 	bl	8003fb4 <xTaskResumeAll>
 8003472:	e76c      	b.n	800334e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003474:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003476:	f000 fa86 	bl	8003986 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800347a:	f000 fd9b 	bl	8003fb4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800347e:	2300      	movs	r3, #0
		}
	}
}
 8003480:	4618      	mov	r0, r3
 8003482:	3738      	adds	r7, #56	; 0x38
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	e000ed04 	.word	0xe000ed04

0800348c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b08e      	sub	sp, #56	; 0x38
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
 8003498:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800349e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d109      	bne.n	80034b8 <xQueueGenericSendFromISR+0x2c>
 80034a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a8:	f383 8811 	msr	BASEPRI, r3
 80034ac:	f3bf 8f6f 	isb	sy
 80034b0:	f3bf 8f4f 	dsb	sy
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
 80034b6:	e7fe      	b.n	80034b6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d103      	bne.n	80034c6 <xQueueGenericSendFromISR+0x3a>
 80034be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <xQueueGenericSendFromISR+0x3e>
 80034c6:	2301      	movs	r3, #1
 80034c8:	e000      	b.n	80034cc <xQueueGenericSendFromISR+0x40>
 80034ca:	2300      	movs	r3, #0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d109      	bne.n	80034e4 <xQueueGenericSendFromISR+0x58>
 80034d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d4:	f383 8811 	msr	BASEPRI, r3
 80034d8:	f3bf 8f6f 	isb	sy
 80034dc:	f3bf 8f4f 	dsb	sy
 80034e0:	623b      	str	r3, [r7, #32]
 80034e2:	e7fe      	b.n	80034e2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d103      	bne.n	80034f2 <xQueueGenericSendFromISR+0x66>
 80034ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d101      	bne.n	80034f6 <xQueueGenericSendFromISR+0x6a>
 80034f2:	2301      	movs	r3, #1
 80034f4:	e000      	b.n	80034f8 <xQueueGenericSendFromISR+0x6c>
 80034f6:	2300      	movs	r3, #0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d109      	bne.n	8003510 <xQueueGenericSendFromISR+0x84>
 80034fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003500:	f383 8811 	msr	BASEPRI, r3
 8003504:	f3bf 8f6f 	isb	sy
 8003508:	f3bf 8f4f 	dsb	sy
 800350c:	61fb      	str	r3, [r7, #28]
 800350e:	e7fe      	b.n	800350e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003510:	f001 feac 	bl	800526c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003514:	f3ef 8211 	mrs	r2, BASEPRI
 8003518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351c:	f383 8811 	msr	BASEPRI, r3
 8003520:	f3bf 8f6f 	isb	sy
 8003524:	f3bf 8f4f 	dsb	sy
 8003528:	61ba      	str	r2, [r7, #24]
 800352a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800352c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800352e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003532:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003538:	429a      	cmp	r2, r3
 800353a:	d302      	bcc.n	8003542 <xQueueGenericSendFromISR+0xb6>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	2b02      	cmp	r3, #2
 8003540:	d12c      	bne.n	800359c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003544:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003548:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	68b9      	ldr	r1, [r7, #8]
 8003550:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003552:	f000 f988 	bl	8003866 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003556:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800355a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800355e:	d112      	bne.n	8003586 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	2b00      	cmp	r3, #0
 8003566:	d016      	beq.n	8003596 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356a:	3324      	adds	r3, #36	; 0x24
 800356c:	4618      	mov	r0, r3
 800356e:	f000 ff33 	bl	80043d8 <xTaskRemoveFromEventList>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00e      	beq.n	8003596 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00b      	beq.n	8003596 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	e007      	b.n	8003596 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003586:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800358a:	3301      	adds	r3, #1
 800358c:	b2db      	uxtb	r3, r3
 800358e:	b25a      	sxtb	r2, r3
 8003590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003592:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003596:	2301      	movs	r3, #1
 8003598:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800359a:	e001      	b.n	80035a0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800359c:	2300      	movs	r3, #0
 800359e:	637b      	str	r3, [r7, #52]	; 0x34
 80035a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80035aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3738      	adds	r7, #56	; 0x38
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b08c      	sub	sp, #48	; 0x30
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80035c0:	2300      	movs	r3, #0
 80035c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80035c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d109      	bne.n	80035e2 <xQueueReceive+0x2e>
	__asm volatile
 80035ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d2:	f383 8811 	msr	BASEPRI, r3
 80035d6:	f3bf 8f6f 	isb	sy
 80035da:	f3bf 8f4f 	dsb	sy
 80035de:	623b      	str	r3, [r7, #32]
 80035e0:	e7fe      	b.n	80035e0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d103      	bne.n	80035f0 <xQueueReceive+0x3c>
 80035e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <xQueueReceive+0x40>
 80035f0:	2301      	movs	r3, #1
 80035f2:	e000      	b.n	80035f6 <xQueueReceive+0x42>
 80035f4:	2300      	movs	r3, #0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d109      	bne.n	800360e <xQueueReceive+0x5a>
 80035fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fe:	f383 8811 	msr	BASEPRI, r3
 8003602:	f3bf 8f6f 	isb	sy
 8003606:	f3bf 8f4f 	dsb	sy
 800360a:	61fb      	str	r3, [r7, #28]
 800360c:	e7fe      	b.n	800360c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800360e:	f001 f89d 	bl	800474c <xTaskGetSchedulerState>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d102      	bne.n	800361e <xQueueReceive+0x6a>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <xQueueReceive+0x6e>
 800361e:	2301      	movs	r3, #1
 8003620:	e000      	b.n	8003624 <xQueueReceive+0x70>
 8003622:	2300      	movs	r3, #0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d109      	bne.n	800363c <xQueueReceive+0x88>
 8003628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800362c:	f383 8811 	msr	BASEPRI, r3
 8003630:	f3bf 8f6f 	isb	sy
 8003634:	f3bf 8f4f 	dsb	sy
 8003638:	61bb      	str	r3, [r7, #24]
 800363a:	e7fe      	b.n	800363a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800363c:	f001 fd5c 	bl	80050f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003644:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003648:	2b00      	cmp	r3, #0
 800364a:	d01f      	beq.n	800368c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800364c:	68b9      	ldr	r1, [r7, #8]
 800364e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003650:	f000 f973 	bl	800393a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	1e5a      	subs	r2, r3, #1
 8003658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800365c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00f      	beq.n	8003684 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003666:	3310      	adds	r3, #16
 8003668:	4618      	mov	r0, r3
 800366a:	f000 feb5 	bl	80043d8 <xTaskRemoveFromEventList>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d007      	beq.n	8003684 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003674:	4b3c      	ldr	r3, [pc, #240]	; (8003768 <xQueueReceive+0x1b4>)
 8003676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	f3bf 8f4f 	dsb	sy
 8003680:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003684:	f001 fd66 	bl	8005154 <vPortExitCritical>
				return pdPASS;
 8003688:	2301      	movs	r3, #1
 800368a:	e069      	b.n	8003760 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d103      	bne.n	800369a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003692:	f001 fd5f 	bl	8005154 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003696:	2300      	movs	r3, #0
 8003698:	e062      	b.n	8003760 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800369a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369c:	2b00      	cmp	r3, #0
 800369e:	d106      	bne.n	80036ae <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80036a0:	f107 0310 	add.w	r3, r7, #16
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 fef9 	bl	800449c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80036aa:	2301      	movs	r3, #1
 80036ac:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80036ae:	f001 fd51 	bl	8005154 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80036b2:	f000 fc71 	bl	8003f98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80036b6:	f001 fd1f 	bl	80050f8 <vPortEnterCritical>
 80036ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036c0:	b25b      	sxtb	r3, r3
 80036c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036c6:	d103      	bne.n	80036d0 <xQueueReceive+0x11c>
 80036c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036d6:	b25b      	sxtb	r3, r3
 80036d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036dc:	d103      	bne.n	80036e6 <xQueueReceive+0x132>
 80036de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036e6:	f001 fd35 	bl	8005154 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80036ea:	1d3a      	adds	r2, r7, #4
 80036ec:	f107 0310 	add.w	r3, r7, #16
 80036f0:	4611      	mov	r1, r2
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 fee8 	bl	80044c8 <xTaskCheckForTimeOut>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d123      	bne.n	8003746 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003700:	f000 f993 	bl	8003a2a <prvIsQueueEmpty>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d017      	beq.n	800373a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800370a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370c:	3324      	adds	r3, #36	; 0x24
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	4611      	mov	r1, r2
 8003712:	4618      	mov	r0, r3
 8003714:	f000 fe12 	bl	800433c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003718:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800371a:	f000 f934 	bl	8003986 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800371e:	f000 fc49 	bl	8003fb4 <xTaskResumeAll>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d189      	bne.n	800363c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003728:	4b0f      	ldr	r3, [pc, #60]	; (8003768 <xQueueReceive+0x1b4>)
 800372a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	f3bf 8f4f 	dsb	sy
 8003734:	f3bf 8f6f 	isb	sy
 8003738:	e780      	b.n	800363c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800373a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800373c:	f000 f923 	bl	8003986 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003740:	f000 fc38 	bl	8003fb4 <xTaskResumeAll>
 8003744:	e77a      	b.n	800363c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003746:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003748:	f000 f91d 	bl	8003986 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800374c:	f000 fc32 	bl	8003fb4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003750:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003752:	f000 f96a 	bl	8003a2a <prvIsQueueEmpty>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	f43f af6f 	beq.w	800363c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800375e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003760:	4618      	mov	r0, r3
 8003762:	3730      	adds	r7, #48	; 0x30
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	e000ed04 	.word	0xe000ed04

0800376c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b08e      	sub	sp, #56	; 0x38
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800377c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377e:	2b00      	cmp	r3, #0
 8003780:	d109      	bne.n	8003796 <xQueueReceiveFromISR+0x2a>
 8003782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003786:	f383 8811 	msr	BASEPRI, r3
 800378a:	f3bf 8f6f 	isb	sy
 800378e:	f3bf 8f4f 	dsb	sy
 8003792:	623b      	str	r3, [r7, #32]
 8003794:	e7fe      	b.n	8003794 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d103      	bne.n	80037a4 <xQueueReceiveFromISR+0x38>
 800379c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <xQueueReceiveFromISR+0x3c>
 80037a4:	2301      	movs	r3, #1
 80037a6:	e000      	b.n	80037aa <xQueueReceiveFromISR+0x3e>
 80037a8:	2300      	movs	r3, #0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d109      	bne.n	80037c2 <xQueueReceiveFromISR+0x56>
 80037ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b2:	f383 8811 	msr	BASEPRI, r3
 80037b6:	f3bf 8f6f 	isb	sy
 80037ba:	f3bf 8f4f 	dsb	sy
 80037be:	61fb      	str	r3, [r7, #28]
 80037c0:	e7fe      	b.n	80037c0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80037c2:	f001 fd53 	bl	800526c <vPortValidateInterruptPriority>
	__asm volatile
 80037c6:	f3ef 8211 	mrs	r2, BASEPRI
 80037ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ce:	f383 8811 	msr	BASEPRI, r3
 80037d2:	f3bf 8f6f 	isb	sy
 80037d6:	f3bf 8f4f 	dsb	sy
 80037da:	61ba      	str	r2, [r7, #24]
 80037dc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80037de:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80037e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d02f      	beq.n	800384e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80037ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80037f8:	68b9      	ldr	r1, [r7, #8]
 80037fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037fc:	f000 f89d 	bl	800393a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003802:	1e5a      	subs	r2, r3, #1
 8003804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003806:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003808:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800380c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003810:	d112      	bne.n	8003838 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d016      	beq.n	8003848 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800381a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381c:	3310      	adds	r3, #16
 800381e:	4618      	mov	r0, r3
 8003820:	f000 fdda 	bl	80043d8 <xTaskRemoveFromEventList>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00e      	beq.n	8003848 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00b      	beq.n	8003848 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	e007      	b.n	8003848 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003838:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800383c:	3301      	adds	r3, #1
 800383e:	b2db      	uxtb	r3, r3
 8003840:	b25a      	sxtb	r2, r3
 8003842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003848:	2301      	movs	r3, #1
 800384a:	637b      	str	r3, [r7, #52]	; 0x34
 800384c:	e001      	b.n	8003852 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800384e:	2300      	movs	r3, #0
 8003850:	637b      	str	r3, [r7, #52]	; 0x34
 8003852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003854:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800385c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800385e:	4618      	mov	r0, r3
 8003860:	3738      	adds	r7, #56	; 0x38
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b086      	sub	sp, #24
 800386a:	af00      	add	r7, sp, #0
 800386c:	60f8      	str	r0, [r7, #12]
 800386e:	60b9      	str	r1, [r7, #8]
 8003870:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003872:	2300      	movs	r3, #0
 8003874:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10d      	bne.n	80038a0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d14d      	bne.n	8003928 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	4618      	mov	r0, r3
 8003892:	f000 ff79 	bl	8004788 <xTaskPriorityDisinherit>
 8003896:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	605a      	str	r2, [r3, #4]
 800389e:	e043      	b.n	8003928 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d119      	bne.n	80038da <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6898      	ldr	r0, [r3, #8]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	461a      	mov	r2, r3
 80038b0:	68b9      	ldr	r1, [r7, #8]
 80038b2:	f001 ff19 	bl	80056e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	689a      	ldr	r2, [r3, #8]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	441a      	add	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d32b      	bcc.n	8003928 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	609a      	str	r2, [r3, #8]
 80038d8:	e026      	b.n	8003928 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	68d8      	ldr	r0, [r3, #12]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	461a      	mov	r2, r3
 80038e4:	68b9      	ldr	r1, [r7, #8]
 80038e6:	f001 feff 	bl	80056e8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	68da      	ldr	r2, [r3, #12]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	425b      	negs	r3, r3
 80038f4:	441a      	add	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d207      	bcs.n	8003916 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	425b      	negs	r3, r3
 8003910:	441a      	add	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b02      	cmp	r3, #2
 800391a:	d105      	bne.n	8003928 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d002      	beq.n	8003928 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	3b01      	subs	r3, #1
 8003926:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	1c5a      	adds	r2, r3, #1
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003930:	697b      	ldr	r3, [r7, #20]
}
 8003932:	4618      	mov	r0, r3
 8003934:	3718      	adds	r7, #24
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b082      	sub	sp, #8
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
 8003942:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003948:	2b00      	cmp	r3, #0
 800394a:	d018      	beq.n	800397e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68da      	ldr	r2, [r3, #12]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003954:	441a      	add	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68da      	ldr	r2, [r3, #12]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	429a      	cmp	r2, r3
 8003964:	d303      	bcc.n	800396e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68d9      	ldr	r1, [r3, #12]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	461a      	mov	r2, r3
 8003978:	6838      	ldr	r0, [r7, #0]
 800397a:	f001 feb5 	bl	80056e8 <memcpy>
	}
}
 800397e:	bf00      	nop
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b084      	sub	sp, #16
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800398e:	f001 fbb3 	bl	80050f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003998:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800399a:	e011      	b.n	80039c0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d012      	beq.n	80039ca <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3324      	adds	r3, #36	; 0x24
 80039a8:	4618      	mov	r0, r3
 80039aa:	f000 fd15 	bl	80043d8 <xTaskRemoveFromEventList>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80039b4:	f000 fde8 	bl	8004588 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80039c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	dce9      	bgt.n	800399c <prvUnlockQueue+0x16>
 80039c8:	e000      	b.n	80039cc <prvUnlockQueue+0x46>
					break;
 80039ca:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	22ff      	movs	r2, #255	; 0xff
 80039d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80039d4:	f001 fbbe 	bl	8005154 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80039d8:	f001 fb8e 	bl	80050f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039e2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039e4:	e011      	b.n	8003a0a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d012      	beq.n	8003a14 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	3310      	adds	r3, #16
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 fcf0 	bl	80043d8 <xTaskRemoveFromEventList>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80039fe:	f000 fdc3 	bl	8004588 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003a02:	7bbb      	ldrb	r3, [r7, #14]
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	dce9      	bgt.n	80039e6 <prvUnlockQueue+0x60>
 8003a12:	e000      	b.n	8003a16 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003a14:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	22ff      	movs	r2, #255	; 0xff
 8003a1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003a1e:	f001 fb99 	bl	8005154 <vPortExitCritical>
}
 8003a22:	bf00      	nop
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b084      	sub	sp, #16
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a32:	f001 fb61 	bl	80050f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d102      	bne.n	8003a44 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	e001      	b.n	8003a48 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003a44:	2300      	movs	r3, #0
 8003a46:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a48:	f001 fb84 	bl	8005154 <vPortExitCritical>

	return xReturn;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b084      	sub	sp, #16
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a5e:	f001 fb4b 	bl	80050f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d102      	bne.n	8003a74 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	60fb      	str	r3, [r7, #12]
 8003a72:	e001      	b.n	8003a78 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003a74:	2300      	movs	r3, #0
 8003a76:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a78:	f001 fb6c 	bl	8005154 <vPortExitCritical>

	return xReturn;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
	...

08003a88 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a92:	2300      	movs	r3, #0
 8003a94:	60fb      	str	r3, [r7, #12]
 8003a96:	e014      	b.n	8003ac2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003a98:	4a0e      	ldr	r2, [pc, #56]	; (8003ad4 <vQueueAddToRegistry+0x4c>)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10b      	bne.n	8003abc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003aa4:	490b      	ldr	r1, [pc, #44]	; (8003ad4 <vQueueAddToRegistry+0x4c>)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003aae:	4a09      	ldr	r2, [pc, #36]	; (8003ad4 <vQueueAddToRegistry+0x4c>)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	4413      	add	r3, r2
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003aba:	e005      	b.n	8003ac8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	60fb      	str	r3, [r7, #12]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2b07      	cmp	r3, #7
 8003ac6:	d9e7      	bls.n	8003a98 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003ac8:	bf00      	nop
 8003aca:	3714      	adds	r7, #20
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bc80      	pop	{r7}
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	20001c44 	.word	0x20001c44

08003ad8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003ae8:	f001 fb06 	bl	80050f8 <vPortEnterCritical>
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003af2:	b25b      	sxtb	r3, r3
 8003af4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003af8:	d103      	bne.n	8003b02 <vQueueWaitForMessageRestricted+0x2a>
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b08:	b25b      	sxtb	r3, r3
 8003b0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b0e:	d103      	bne.n	8003b18 <vQueueWaitForMessageRestricted+0x40>
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b18:	f001 fb1c 	bl	8005154 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d106      	bne.n	8003b32 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	3324      	adds	r3, #36	; 0x24
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	68b9      	ldr	r1, [r7, #8]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f000 fc29 	bl	8004384 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003b32:	6978      	ldr	r0, [r7, #20]
 8003b34:	f7ff ff27 	bl	8003986 <prvUnlockQueue>
	}
 8003b38:	bf00      	nop
 8003b3a:	3718      	adds	r7, #24
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b08e      	sub	sp, #56	; 0x38
 8003b44:	af04      	add	r7, sp, #16
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
 8003b4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d109      	bne.n	8003b68 <xTaskCreateStatic+0x28>
	__asm volatile
 8003b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b58:	f383 8811 	msr	BASEPRI, r3
 8003b5c:	f3bf 8f6f 	isb	sy
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	623b      	str	r3, [r7, #32]
 8003b66:	e7fe      	b.n	8003b66 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d109      	bne.n	8003b82 <xTaskCreateStatic+0x42>
 8003b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b72:	f383 8811 	msr	BASEPRI, r3
 8003b76:	f3bf 8f6f 	isb	sy
 8003b7a:	f3bf 8f4f 	dsb	sy
 8003b7e:	61fb      	str	r3, [r7, #28]
 8003b80:	e7fe      	b.n	8003b80 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003b82:	235c      	movs	r3, #92	; 0x5c
 8003b84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	2b5c      	cmp	r3, #92	; 0x5c
 8003b8a:	d009      	beq.n	8003ba0 <xTaskCreateStatic+0x60>
 8003b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b90:	f383 8811 	msr	BASEPRI, r3
 8003b94:	f3bf 8f6f 	isb	sy
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	61bb      	str	r3, [r7, #24]
 8003b9e:	e7fe      	b.n	8003b9e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d01e      	beq.n	8003be4 <xTaskCreateStatic+0xa4>
 8003ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d01b      	beq.n	8003be4 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bb4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb8:	2202      	movs	r2, #2
 8003bba:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	9303      	str	r3, [sp, #12]
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	9302      	str	r3, [sp, #8]
 8003bc6:	f107 0314 	add.w	r3, r7, #20
 8003bca:	9301      	str	r3, [sp, #4]
 8003bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	68b9      	ldr	r1, [r7, #8]
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f000 f850 	bl	8003c7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003bdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003bde:	f000 f8d3 	bl	8003d88 <prvAddNewTaskToReadyList>
 8003be2:	e001      	b.n	8003be8 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8003be4:	2300      	movs	r3, #0
 8003be6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003be8:	697b      	ldr	r3, [r7, #20]
	}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3728      	adds	r7, #40	; 0x28
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b08c      	sub	sp, #48	; 0x30
 8003bf6:	af04      	add	r7, sp, #16
 8003bf8:	60f8      	str	r0, [r7, #12]
 8003bfa:	60b9      	str	r1, [r7, #8]
 8003bfc:	603b      	str	r3, [r7, #0]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c02:	88fb      	ldrh	r3, [r7, #6]
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4618      	mov	r0, r3
 8003c08:	f001 fb6c 	bl	80052e4 <pvPortMalloc>
 8003c0c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00e      	beq.n	8003c32 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003c14:	205c      	movs	r0, #92	; 0x5c
 8003c16:	f001 fb65 	bl	80052e4 <pvPortMalloc>
 8003c1a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d003      	beq.n	8003c2a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	631a      	str	r2, [r3, #48]	; 0x30
 8003c28:	e005      	b.n	8003c36 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003c2a:	6978      	ldr	r0, [r7, #20]
 8003c2c:	f001 fc1c 	bl	8005468 <vPortFree>
 8003c30:	e001      	b.n	8003c36 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003c32:	2300      	movs	r3, #0
 8003c34:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d017      	beq.n	8003c6c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c44:	88fa      	ldrh	r2, [r7, #6]
 8003c46:	2300      	movs	r3, #0
 8003c48:	9303      	str	r3, [sp, #12]
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	9302      	str	r3, [sp, #8]
 8003c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c50:	9301      	str	r3, [sp, #4]
 8003c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	68b9      	ldr	r1, [r7, #8]
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 f80e 	bl	8003c7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c60:	69f8      	ldr	r0, [r7, #28]
 8003c62:	f000 f891 	bl	8003d88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003c66:	2301      	movs	r3, #1
 8003c68:	61bb      	str	r3, [r7, #24]
 8003c6a:	e002      	b.n	8003c72 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c70:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003c72:	69bb      	ldr	r3, [r7, #24]
	}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3720      	adds	r7, #32
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b088      	sub	sp, #32
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
 8003c88:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	461a      	mov	r2, r3
 8003c94:	21a5      	movs	r1, #165	; 0xa5
 8003c96:	f001 fd32 	bl	80056fe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4413      	add	r3, r2
 8003caa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	f023 0307 	bic.w	r3, r3, #7
 8003cb2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	f003 0307 	and.w	r3, r3, #7
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d009      	beq.n	8003cd2 <prvInitialiseNewTask+0x56>
 8003cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc2:	f383 8811 	msr	BASEPRI, r3
 8003cc6:	f3bf 8f6f 	isb	sy
 8003cca:	f3bf 8f4f 	dsb	sy
 8003cce:	617b      	str	r3, [r7, #20]
 8003cd0:	e7fe      	b.n	8003cd0 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	61fb      	str	r3, [r7, #28]
 8003cd6:	e012      	b.n	8003cfe <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	4413      	add	r3, r2
 8003cde:	7819      	ldrb	r1, [r3, #0]
 8003ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	3334      	adds	r3, #52	; 0x34
 8003ce8:	460a      	mov	r2, r1
 8003cea:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d006      	beq.n	8003d06 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	61fb      	str	r3, [r7, #28]
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	2b0f      	cmp	r3, #15
 8003d02:	d9e9      	bls.n	8003cd8 <prvInitialiseNewTask+0x5c>
 8003d04:	e000      	b.n	8003d08 <prvInitialiseNewTask+0x8c>
		{
			break;
 8003d06:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d12:	2b37      	cmp	r3, #55	; 0x37
 8003d14:	d901      	bls.n	8003d1a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d16:	2337      	movs	r3, #55	; 0x37
 8003d18:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d1e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d24:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d28:	2200      	movs	r2, #0
 8003d2a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2e:	3304      	adds	r3, #4
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7ff f8e6 	bl	8002f02 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d38:	3318      	adds	r3, #24
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7ff f8e1 	bl	8002f02 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d44:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d48:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d54:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d58:	2200      	movs	r2, #0
 8003d5a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	68f9      	ldr	r1, [r7, #12]
 8003d68:	69b8      	ldr	r0, [r7, #24]
 8003d6a:	f001 f8d7 	bl	8004f1c <pxPortInitialiseStack>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d72:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d7e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d80:	bf00      	nop
 8003d82:	3720      	adds	r7, #32
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003d90:	f001 f9b2 	bl	80050f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003d94:	4b2d      	ldr	r3, [pc, #180]	; (8003e4c <prvAddNewTaskToReadyList+0xc4>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	4a2c      	ldr	r2, [pc, #176]	; (8003e4c <prvAddNewTaskToReadyList+0xc4>)
 8003d9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003d9e:	4b2c      	ldr	r3, [pc, #176]	; (8003e50 <prvAddNewTaskToReadyList+0xc8>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d109      	bne.n	8003dba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003da6:	4a2a      	ldr	r2, [pc, #168]	; (8003e50 <prvAddNewTaskToReadyList+0xc8>)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003dac:	4b27      	ldr	r3, [pc, #156]	; (8003e4c <prvAddNewTaskToReadyList+0xc4>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d110      	bne.n	8003dd6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003db4:	f000 fc0c 	bl	80045d0 <prvInitialiseTaskLists>
 8003db8:	e00d      	b.n	8003dd6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003dba:	4b26      	ldr	r3, [pc, #152]	; (8003e54 <prvAddNewTaskToReadyList+0xcc>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d109      	bne.n	8003dd6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003dc2:	4b23      	ldr	r3, [pc, #140]	; (8003e50 <prvAddNewTaskToReadyList+0xc8>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d802      	bhi.n	8003dd6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003dd0:	4a1f      	ldr	r2, [pc, #124]	; (8003e50 <prvAddNewTaskToReadyList+0xc8>)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003dd6:	4b20      	ldr	r3, [pc, #128]	; (8003e58 <prvAddNewTaskToReadyList+0xd0>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	4a1e      	ldr	r2, [pc, #120]	; (8003e58 <prvAddNewTaskToReadyList+0xd0>)
 8003dde:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003de0:	4b1d      	ldr	r3, [pc, #116]	; (8003e58 <prvAddNewTaskToReadyList+0xd0>)
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dec:	4b1b      	ldr	r3, [pc, #108]	; (8003e5c <prvAddNewTaskToReadyList+0xd4>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d903      	bls.n	8003dfc <prvAddNewTaskToReadyList+0x74>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df8:	4a18      	ldr	r2, [pc, #96]	; (8003e5c <prvAddNewTaskToReadyList+0xd4>)
 8003dfa:	6013      	str	r3, [r2, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e00:	4613      	mov	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4a15      	ldr	r2, [pc, #84]	; (8003e60 <prvAddNewTaskToReadyList+0xd8>)
 8003e0a:	441a      	add	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3304      	adds	r3, #4
 8003e10:	4619      	mov	r1, r3
 8003e12:	4610      	mov	r0, r2
 8003e14:	f7ff f881 	bl	8002f1a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003e18:	f001 f99c 	bl	8005154 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003e1c:	4b0d      	ldr	r3, [pc, #52]	; (8003e54 <prvAddNewTaskToReadyList+0xcc>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00e      	beq.n	8003e42 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003e24:	4b0a      	ldr	r3, [pc, #40]	; (8003e50 <prvAddNewTaskToReadyList+0xc8>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d207      	bcs.n	8003e42 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003e32:	4b0c      	ldr	r3, [pc, #48]	; (8003e64 <prvAddNewTaskToReadyList+0xdc>)
 8003e34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	f3bf 8f4f 	dsb	sy
 8003e3e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e42:	bf00      	nop
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	20000db4 	.word	0x20000db4
 8003e50:	200008e0 	.word	0x200008e0
 8003e54:	20000dc0 	.word	0x20000dc0
 8003e58:	20000dd0 	.word	0x20000dd0
 8003e5c:	20000dbc 	.word	0x20000dbc
 8003e60:	200008e4 	.word	0x200008e4
 8003e64:	e000ed04 	.word	0xe000ed04

08003e68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003e70:	2300      	movs	r3, #0
 8003e72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d016      	beq.n	8003ea8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003e7a:	4b13      	ldr	r3, [pc, #76]	; (8003ec8 <vTaskDelay+0x60>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d009      	beq.n	8003e96 <vTaskDelay+0x2e>
 8003e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e86:	f383 8811 	msr	BASEPRI, r3
 8003e8a:	f3bf 8f6f 	isb	sy
 8003e8e:	f3bf 8f4f 	dsb	sy
 8003e92:	60bb      	str	r3, [r7, #8]
 8003e94:	e7fe      	b.n	8003e94 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003e96:	f000 f87f 	bl	8003f98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 fcdf 	bl	8004860 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003ea2:	f000 f887 	bl	8003fb4 <xTaskResumeAll>
 8003ea6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d107      	bne.n	8003ebe <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003eae:	4b07      	ldr	r3, [pc, #28]	; (8003ecc <vTaskDelay+0x64>)
 8003eb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	f3bf 8f4f 	dsb	sy
 8003eba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ebe:	bf00      	nop
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	20000ddc 	.word	0x20000ddc
 8003ecc:	e000ed04 	.word	0xe000ed04

08003ed0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b08a      	sub	sp, #40	; 0x28
 8003ed4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003eda:	2300      	movs	r3, #0
 8003edc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003ede:	463a      	mov	r2, r7
 8003ee0:	1d39      	adds	r1, r7, #4
 8003ee2:	f107 0308 	add.w	r3, r7, #8
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fe ffba 	bl	8002e60 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003eec:	6839      	ldr	r1, [r7, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	9202      	str	r2, [sp, #8]
 8003ef4:	9301      	str	r3, [sp, #4]
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	2300      	movs	r3, #0
 8003efc:	460a      	mov	r2, r1
 8003efe:	4920      	ldr	r1, [pc, #128]	; (8003f80 <vTaskStartScheduler+0xb0>)
 8003f00:	4820      	ldr	r0, [pc, #128]	; (8003f84 <vTaskStartScheduler+0xb4>)
 8003f02:	f7ff fe1d 	bl	8003b40 <xTaskCreateStatic>
 8003f06:	4602      	mov	r2, r0
 8003f08:	4b1f      	ldr	r3, [pc, #124]	; (8003f88 <vTaskStartScheduler+0xb8>)
 8003f0a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003f0c:	4b1e      	ldr	r3, [pc, #120]	; (8003f88 <vTaskStartScheduler+0xb8>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003f14:	2301      	movs	r3, #1
 8003f16:	617b      	str	r3, [r7, #20]
 8003f18:	e001      	b.n	8003f1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d102      	bne.n	8003f2a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003f24:	f000 fcf0 	bl	8004908 <xTimerCreateTimerTask>
 8003f28:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d115      	bne.n	8003f5c <vTaskStartScheduler+0x8c>
 8003f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f34:	f383 8811 	msr	BASEPRI, r3
 8003f38:	f3bf 8f6f 	isb	sy
 8003f3c:	f3bf 8f4f 	dsb	sy
 8003f40:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003f42:	4b12      	ldr	r3, [pc, #72]	; (8003f8c <vTaskStartScheduler+0xbc>)
 8003f44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f48:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003f4a:	4b11      	ldr	r3, [pc, #68]	; (8003f90 <vTaskStartScheduler+0xc0>)
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003f50:	4b10      	ldr	r3, [pc, #64]	; (8003f94 <vTaskStartScheduler+0xc4>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003f56:	f001 f85f 	bl	8005018 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003f5a:	e00d      	b.n	8003f78 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f62:	d109      	bne.n	8003f78 <vTaskStartScheduler+0xa8>
 8003f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f68:	f383 8811 	msr	BASEPRI, r3
 8003f6c:	f3bf 8f6f 	isb	sy
 8003f70:	f3bf 8f4f 	dsb	sy
 8003f74:	60fb      	str	r3, [r7, #12]
 8003f76:	e7fe      	b.n	8003f76 <vTaskStartScheduler+0xa6>
}
 8003f78:	bf00      	nop
 8003f7a:	3718      	adds	r7, #24
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	08005d10 	.word	0x08005d10
 8003f84:	080045a1 	.word	0x080045a1
 8003f88:	20000dd8 	.word	0x20000dd8
 8003f8c:	20000dd4 	.word	0x20000dd4
 8003f90:	20000dc0 	.word	0x20000dc0
 8003f94:	20000db8 	.word	0x20000db8

08003f98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003f98:	b480      	push	{r7}
 8003f9a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003f9c:	4b04      	ldr	r3, [pc, #16]	; (8003fb0 <vTaskSuspendAll+0x18>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	4a03      	ldr	r2, [pc, #12]	; (8003fb0 <vTaskSuspendAll+0x18>)
 8003fa4:	6013      	str	r3, [r2, #0]
}
 8003fa6:	bf00      	nop
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bc80      	pop	{r7}
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	20000ddc 	.word	0x20000ddc

08003fb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003fc2:	4b41      	ldr	r3, [pc, #260]	; (80040c8 <xTaskResumeAll+0x114>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d109      	bne.n	8003fde <xTaskResumeAll+0x2a>
 8003fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fce:	f383 8811 	msr	BASEPRI, r3
 8003fd2:	f3bf 8f6f 	isb	sy
 8003fd6:	f3bf 8f4f 	dsb	sy
 8003fda:	603b      	str	r3, [r7, #0]
 8003fdc:	e7fe      	b.n	8003fdc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003fde:	f001 f88b 	bl	80050f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003fe2:	4b39      	ldr	r3, [pc, #228]	; (80040c8 <xTaskResumeAll+0x114>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	4a37      	ldr	r2, [pc, #220]	; (80040c8 <xTaskResumeAll+0x114>)
 8003fea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fec:	4b36      	ldr	r3, [pc, #216]	; (80040c8 <xTaskResumeAll+0x114>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d162      	bne.n	80040ba <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ff4:	4b35      	ldr	r3, [pc, #212]	; (80040cc <xTaskResumeAll+0x118>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d05e      	beq.n	80040ba <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ffc:	e02f      	b.n	800405e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003ffe:	4b34      	ldr	r3, [pc, #208]	; (80040d0 <xTaskResumeAll+0x11c>)
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	3318      	adds	r3, #24
 800400a:	4618      	mov	r0, r3
 800400c:	f7fe ffe0 	bl	8002fd0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	3304      	adds	r3, #4
 8004014:	4618      	mov	r0, r3
 8004016:	f7fe ffdb 	bl	8002fd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800401e:	4b2d      	ldr	r3, [pc, #180]	; (80040d4 <xTaskResumeAll+0x120>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	429a      	cmp	r2, r3
 8004024:	d903      	bls.n	800402e <xTaskResumeAll+0x7a>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402a:	4a2a      	ldr	r2, [pc, #168]	; (80040d4 <xTaskResumeAll+0x120>)
 800402c:	6013      	str	r3, [r2, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004032:	4613      	mov	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4413      	add	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	4a27      	ldr	r2, [pc, #156]	; (80040d8 <xTaskResumeAll+0x124>)
 800403c:	441a      	add	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	3304      	adds	r3, #4
 8004042:	4619      	mov	r1, r3
 8004044:	4610      	mov	r0, r2
 8004046:	f7fe ff68 	bl	8002f1a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800404e:	4b23      	ldr	r3, [pc, #140]	; (80040dc <xTaskResumeAll+0x128>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004054:	429a      	cmp	r2, r3
 8004056:	d302      	bcc.n	800405e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004058:	4b21      	ldr	r3, [pc, #132]	; (80040e0 <xTaskResumeAll+0x12c>)
 800405a:	2201      	movs	r2, #1
 800405c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800405e:	4b1c      	ldr	r3, [pc, #112]	; (80040d0 <xTaskResumeAll+0x11c>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1cb      	bne.n	8003ffe <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800406c:	f000 fb4a 	bl	8004704 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004070:	4b1c      	ldr	r3, [pc, #112]	; (80040e4 <xTaskResumeAll+0x130>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d010      	beq.n	800409e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800407c:	f000 f844 	bl	8004108 <xTaskIncrementTick>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d002      	beq.n	800408c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004086:	4b16      	ldr	r3, [pc, #88]	; (80040e0 <xTaskResumeAll+0x12c>)
 8004088:	2201      	movs	r2, #1
 800408a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3b01      	subs	r3, #1
 8004090:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1f1      	bne.n	800407c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004098:	4b12      	ldr	r3, [pc, #72]	; (80040e4 <xTaskResumeAll+0x130>)
 800409a:	2200      	movs	r2, #0
 800409c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800409e:	4b10      	ldr	r3, [pc, #64]	; (80040e0 <xTaskResumeAll+0x12c>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d009      	beq.n	80040ba <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80040a6:	2301      	movs	r3, #1
 80040a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80040aa:	4b0f      	ldr	r3, [pc, #60]	; (80040e8 <xTaskResumeAll+0x134>)
 80040ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	f3bf 8f4f 	dsb	sy
 80040b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80040ba:	f001 f84b 	bl	8005154 <vPortExitCritical>

	return xAlreadyYielded;
 80040be:	68bb      	ldr	r3, [r7, #8]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	20000ddc 	.word	0x20000ddc
 80040cc:	20000db4 	.word	0x20000db4
 80040d0:	20000d74 	.word	0x20000d74
 80040d4:	20000dbc 	.word	0x20000dbc
 80040d8:	200008e4 	.word	0x200008e4
 80040dc:	200008e0 	.word	0x200008e0
 80040e0:	20000dc8 	.word	0x20000dc8
 80040e4:	20000dc4 	.word	0x20000dc4
 80040e8:	e000ed04 	.word	0xe000ed04

080040ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80040f2:	4b04      	ldr	r3, [pc, #16]	; (8004104 <xTaskGetTickCount+0x18>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80040f8:	687b      	ldr	r3, [r7, #4]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	bc80      	pop	{r7}
 8004102:	4770      	bx	lr
 8004104:	20000db8 	.word	0x20000db8

08004108 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800410e:	2300      	movs	r3, #0
 8004110:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004112:	4b51      	ldr	r3, [pc, #324]	; (8004258 <xTaskIncrementTick+0x150>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	f040 808d 	bne.w	8004236 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800411c:	4b4f      	ldr	r3, [pc, #316]	; (800425c <xTaskIncrementTick+0x154>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	3301      	adds	r3, #1
 8004122:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004124:	4a4d      	ldr	r2, [pc, #308]	; (800425c <xTaskIncrementTick+0x154>)
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d11f      	bne.n	8004170 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004130:	4b4b      	ldr	r3, [pc, #300]	; (8004260 <xTaskIncrementTick+0x158>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d009      	beq.n	800414e <xTaskIncrementTick+0x46>
 800413a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413e:	f383 8811 	msr	BASEPRI, r3
 8004142:	f3bf 8f6f 	isb	sy
 8004146:	f3bf 8f4f 	dsb	sy
 800414a:	603b      	str	r3, [r7, #0]
 800414c:	e7fe      	b.n	800414c <xTaskIncrementTick+0x44>
 800414e:	4b44      	ldr	r3, [pc, #272]	; (8004260 <xTaskIncrementTick+0x158>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	4b43      	ldr	r3, [pc, #268]	; (8004264 <xTaskIncrementTick+0x15c>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a41      	ldr	r2, [pc, #260]	; (8004260 <xTaskIncrementTick+0x158>)
 800415a:	6013      	str	r3, [r2, #0]
 800415c:	4a41      	ldr	r2, [pc, #260]	; (8004264 <xTaskIncrementTick+0x15c>)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6013      	str	r3, [r2, #0]
 8004162:	4b41      	ldr	r3, [pc, #260]	; (8004268 <xTaskIncrementTick+0x160>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	3301      	adds	r3, #1
 8004168:	4a3f      	ldr	r2, [pc, #252]	; (8004268 <xTaskIncrementTick+0x160>)
 800416a:	6013      	str	r3, [r2, #0]
 800416c:	f000 faca 	bl	8004704 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004170:	4b3e      	ldr	r3, [pc, #248]	; (800426c <xTaskIncrementTick+0x164>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	429a      	cmp	r2, r3
 8004178:	d34e      	bcc.n	8004218 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800417a:	4b39      	ldr	r3, [pc, #228]	; (8004260 <xTaskIncrementTick+0x158>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <xTaskIncrementTick+0x80>
 8004184:	2301      	movs	r3, #1
 8004186:	e000      	b.n	800418a <xTaskIncrementTick+0x82>
 8004188:	2300      	movs	r3, #0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d004      	beq.n	8004198 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800418e:	4b37      	ldr	r3, [pc, #220]	; (800426c <xTaskIncrementTick+0x164>)
 8004190:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004194:	601a      	str	r2, [r3, #0]
					break;
 8004196:	e03f      	b.n	8004218 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004198:	4b31      	ldr	r3, [pc, #196]	; (8004260 <xTaskIncrementTick+0x158>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d203      	bcs.n	80041b8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80041b0:	4a2e      	ldr	r2, [pc, #184]	; (800426c <xTaskIncrementTick+0x164>)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6013      	str	r3, [r2, #0]
						break;
 80041b6:	e02f      	b.n	8004218 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	3304      	adds	r3, #4
 80041bc:	4618      	mov	r0, r3
 80041be:	f7fe ff07 	bl	8002fd0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d004      	beq.n	80041d4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	3318      	adds	r3, #24
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fe fefe 	bl	8002fd0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041d8:	4b25      	ldr	r3, [pc, #148]	; (8004270 <xTaskIncrementTick+0x168>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d903      	bls.n	80041e8 <xTaskIncrementTick+0xe0>
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e4:	4a22      	ldr	r2, [pc, #136]	; (8004270 <xTaskIncrementTick+0x168>)
 80041e6:	6013      	str	r3, [r2, #0]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ec:	4613      	mov	r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	4413      	add	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	4a1f      	ldr	r2, [pc, #124]	; (8004274 <xTaskIncrementTick+0x16c>)
 80041f6:	441a      	add	r2, r3
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	3304      	adds	r3, #4
 80041fc:	4619      	mov	r1, r3
 80041fe:	4610      	mov	r0, r2
 8004200:	f7fe fe8b 	bl	8002f1a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004208:	4b1b      	ldr	r3, [pc, #108]	; (8004278 <xTaskIncrementTick+0x170>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420e:	429a      	cmp	r2, r3
 8004210:	d3b3      	bcc.n	800417a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004212:	2301      	movs	r3, #1
 8004214:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004216:	e7b0      	b.n	800417a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004218:	4b17      	ldr	r3, [pc, #92]	; (8004278 <xTaskIncrementTick+0x170>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800421e:	4915      	ldr	r1, [pc, #84]	; (8004274 <xTaskIncrementTick+0x16c>)
 8004220:	4613      	mov	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	440b      	add	r3, r1
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d907      	bls.n	8004240 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004230:	2301      	movs	r3, #1
 8004232:	617b      	str	r3, [r7, #20]
 8004234:	e004      	b.n	8004240 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004236:	4b11      	ldr	r3, [pc, #68]	; (800427c <xTaskIncrementTick+0x174>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3301      	adds	r3, #1
 800423c:	4a0f      	ldr	r2, [pc, #60]	; (800427c <xTaskIncrementTick+0x174>)
 800423e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004240:	4b0f      	ldr	r3, [pc, #60]	; (8004280 <xTaskIncrementTick+0x178>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004248:	2301      	movs	r3, #1
 800424a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800424c:	697b      	ldr	r3, [r7, #20]
}
 800424e:	4618      	mov	r0, r3
 8004250:	3718      	adds	r7, #24
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	20000ddc 	.word	0x20000ddc
 800425c:	20000db8 	.word	0x20000db8
 8004260:	20000d6c 	.word	0x20000d6c
 8004264:	20000d70 	.word	0x20000d70
 8004268:	20000dcc 	.word	0x20000dcc
 800426c:	20000dd4 	.word	0x20000dd4
 8004270:	20000dbc 	.word	0x20000dbc
 8004274:	200008e4 	.word	0x200008e4
 8004278:	200008e0 	.word	0x200008e0
 800427c:	20000dc4 	.word	0x20000dc4
 8004280:	20000dc8 	.word	0x20000dc8

08004284 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800428a:	4b27      	ldr	r3, [pc, #156]	; (8004328 <vTaskSwitchContext+0xa4>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d003      	beq.n	800429a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004292:	4b26      	ldr	r3, [pc, #152]	; (800432c <vTaskSwitchContext+0xa8>)
 8004294:	2201      	movs	r2, #1
 8004296:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004298:	e040      	b.n	800431c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800429a:	4b24      	ldr	r3, [pc, #144]	; (800432c <vTaskSwitchContext+0xa8>)
 800429c:	2200      	movs	r2, #0
 800429e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80042a0:	4b23      	ldr	r3, [pc, #140]	; (8004330 <vTaskSwitchContext+0xac>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	60fb      	str	r3, [r7, #12]
 80042a6:	e00f      	b.n	80042c8 <vTaskSwitchContext+0x44>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d109      	bne.n	80042c2 <vTaskSwitchContext+0x3e>
 80042ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b2:	f383 8811 	msr	BASEPRI, r3
 80042b6:	f3bf 8f6f 	isb	sy
 80042ba:	f3bf 8f4f 	dsb	sy
 80042be:	607b      	str	r3, [r7, #4]
 80042c0:	e7fe      	b.n	80042c0 <vTaskSwitchContext+0x3c>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	3b01      	subs	r3, #1
 80042c6:	60fb      	str	r3, [r7, #12]
 80042c8:	491a      	ldr	r1, [pc, #104]	; (8004334 <vTaskSwitchContext+0xb0>)
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	4613      	mov	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	440b      	add	r3, r1
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d0e5      	beq.n	80042a8 <vTaskSwitchContext+0x24>
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	4613      	mov	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4413      	add	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4a13      	ldr	r2, [pc, #76]	; (8004334 <vTaskSwitchContext+0xb0>)
 80042e8:	4413      	add	r3, r2
 80042ea:	60bb      	str	r3, [r7, #8]
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	605a      	str	r2, [r3, #4]
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	3308      	adds	r3, #8
 80042fe:	429a      	cmp	r2, r3
 8004300:	d104      	bne.n	800430c <vTaskSwitchContext+0x88>
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	605a      	str	r2, [r3, #4]
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	4a09      	ldr	r2, [pc, #36]	; (8004338 <vTaskSwitchContext+0xb4>)
 8004314:	6013      	str	r3, [r2, #0]
 8004316:	4a06      	ldr	r2, [pc, #24]	; (8004330 <vTaskSwitchContext+0xac>)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6013      	str	r3, [r2, #0]
}
 800431c:	bf00      	nop
 800431e:	3714      	adds	r7, #20
 8004320:	46bd      	mov	sp, r7
 8004322:	bc80      	pop	{r7}
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	20000ddc 	.word	0x20000ddc
 800432c:	20000dc8 	.word	0x20000dc8
 8004330:	20000dbc 	.word	0x20000dbc
 8004334:	200008e4 	.word	0x200008e4
 8004338:	200008e0 	.word	0x200008e0

0800433c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d109      	bne.n	8004360 <vTaskPlaceOnEventList+0x24>
 800434c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004350:	f383 8811 	msr	BASEPRI, r3
 8004354:	f3bf 8f6f 	isb	sy
 8004358:	f3bf 8f4f 	dsb	sy
 800435c:	60fb      	str	r3, [r7, #12]
 800435e:	e7fe      	b.n	800435e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004360:	4b07      	ldr	r3, [pc, #28]	; (8004380 <vTaskPlaceOnEventList+0x44>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	3318      	adds	r3, #24
 8004366:	4619      	mov	r1, r3
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f7fe fdf9 	bl	8002f60 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800436e:	2101      	movs	r1, #1
 8004370:	6838      	ldr	r0, [r7, #0]
 8004372:	f000 fa75 	bl	8004860 <prvAddCurrentTaskToDelayedList>
}
 8004376:	bf00      	nop
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	200008e0 	.word	0x200008e0

08004384 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d109      	bne.n	80043aa <vTaskPlaceOnEventListRestricted+0x26>
 8004396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439a:	f383 8811 	msr	BASEPRI, r3
 800439e:	f3bf 8f6f 	isb	sy
 80043a2:	f3bf 8f4f 	dsb	sy
 80043a6:	617b      	str	r3, [r7, #20]
 80043a8:	e7fe      	b.n	80043a8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043aa:	4b0a      	ldr	r3, [pc, #40]	; (80043d4 <vTaskPlaceOnEventListRestricted+0x50>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	3318      	adds	r3, #24
 80043b0:	4619      	mov	r1, r3
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f7fe fdb1 	bl	8002f1a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d002      	beq.n	80043c4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80043be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043c2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80043c4:	6879      	ldr	r1, [r7, #4]
 80043c6:	68b8      	ldr	r0, [r7, #8]
 80043c8:	f000 fa4a 	bl	8004860 <prvAddCurrentTaskToDelayedList>
	}
 80043cc:	bf00      	nop
 80043ce:	3718      	adds	r7, #24
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	200008e0 	.word	0x200008e0

080043d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d109      	bne.n	8004402 <xTaskRemoveFromEventList+0x2a>
 80043ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f2:	f383 8811 	msr	BASEPRI, r3
 80043f6:	f3bf 8f6f 	isb	sy
 80043fa:	f3bf 8f4f 	dsb	sy
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	e7fe      	b.n	8004400 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	3318      	adds	r3, #24
 8004406:	4618      	mov	r0, r3
 8004408:	f7fe fde2 	bl	8002fd0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800440c:	4b1d      	ldr	r3, [pc, #116]	; (8004484 <xTaskRemoveFromEventList+0xac>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d11d      	bne.n	8004450 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	3304      	adds	r3, #4
 8004418:	4618      	mov	r0, r3
 800441a:	f7fe fdd9 	bl	8002fd0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004422:	4b19      	ldr	r3, [pc, #100]	; (8004488 <xTaskRemoveFromEventList+0xb0>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d903      	bls.n	8004432 <xTaskRemoveFromEventList+0x5a>
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442e:	4a16      	ldr	r2, [pc, #88]	; (8004488 <xTaskRemoveFromEventList+0xb0>)
 8004430:	6013      	str	r3, [r2, #0]
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004436:	4613      	mov	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4413      	add	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	4a13      	ldr	r2, [pc, #76]	; (800448c <xTaskRemoveFromEventList+0xb4>)
 8004440:	441a      	add	r2, r3
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	3304      	adds	r3, #4
 8004446:	4619      	mov	r1, r3
 8004448:	4610      	mov	r0, r2
 800444a:	f7fe fd66 	bl	8002f1a <vListInsertEnd>
 800444e:	e005      	b.n	800445c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	3318      	adds	r3, #24
 8004454:	4619      	mov	r1, r3
 8004456:	480e      	ldr	r0, [pc, #56]	; (8004490 <xTaskRemoveFromEventList+0xb8>)
 8004458:	f7fe fd5f 	bl	8002f1a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004460:	4b0c      	ldr	r3, [pc, #48]	; (8004494 <xTaskRemoveFromEventList+0xbc>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004466:	429a      	cmp	r2, r3
 8004468:	d905      	bls.n	8004476 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800446a:	2301      	movs	r3, #1
 800446c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800446e:	4b0a      	ldr	r3, [pc, #40]	; (8004498 <xTaskRemoveFromEventList+0xc0>)
 8004470:	2201      	movs	r2, #1
 8004472:	601a      	str	r2, [r3, #0]
 8004474:	e001      	b.n	800447a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004476:	2300      	movs	r3, #0
 8004478:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800447a:	697b      	ldr	r3, [r7, #20]
}
 800447c:	4618      	mov	r0, r3
 800447e:	3718      	adds	r7, #24
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	20000ddc 	.word	0x20000ddc
 8004488:	20000dbc 	.word	0x20000dbc
 800448c:	200008e4 	.word	0x200008e4
 8004490:	20000d74 	.word	0x20000d74
 8004494:	200008e0 	.word	0x200008e0
 8004498:	20000dc8 	.word	0x20000dc8

0800449c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80044a4:	4b06      	ldr	r3, [pc, #24]	; (80044c0 <vTaskInternalSetTimeOutState+0x24>)
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80044ac:	4b05      	ldr	r3, [pc, #20]	; (80044c4 <vTaskInternalSetTimeOutState+0x28>)
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	605a      	str	r2, [r3, #4]
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bc80      	pop	{r7}
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	20000dcc 	.word	0x20000dcc
 80044c4:	20000db8 	.word	0x20000db8

080044c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b088      	sub	sp, #32
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d109      	bne.n	80044ec <xTaskCheckForTimeOut+0x24>
 80044d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044dc:	f383 8811 	msr	BASEPRI, r3
 80044e0:	f3bf 8f6f 	isb	sy
 80044e4:	f3bf 8f4f 	dsb	sy
 80044e8:	613b      	str	r3, [r7, #16]
 80044ea:	e7fe      	b.n	80044ea <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d109      	bne.n	8004506 <xTaskCheckForTimeOut+0x3e>
 80044f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f6:	f383 8811 	msr	BASEPRI, r3
 80044fa:	f3bf 8f6f 	isb	sy
 80044fe:	f3bf 8f4f 	dsb	sy
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	e7fe      	b.n	8004504 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004506:	f000 fdf7 	bl	80050f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800450a:	4b1d      	ldr	r3, [pc, #116]	; (8004580 <xTaskCheckForTimeOut+0xb8>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004522:	d102      	bne.n	800452a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004524:	2300      	movs	r3, #0
 8004526:	61fb      	str	r3, [r7, #28]
 8004528:	e023      	b.n	8004572 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	4b15      	ldr	r3, [pc, #84]	; (8004584 <xTaskCheckForTimeOut+0xbc>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	429a      	cmp	r2, r3
 8004534:	d007      	beq.n	8004546 <xTaskCheckForTimeOut+0x7e>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	429a      	cmp	r2, r3
 800453e:	d302      	bcc.n	8004546 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004540:	2301      	movs	r3, #1
 8004542:	61fb      	str	r3, [r7, #28]
 8004544:	e015      	b.n	8004572 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	429a      	cmp	r2, r3
 800454e:	d20b      	bcs.n	8004568 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	1ad2      	subs	r2, r2, r3
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f7ff ff9d 	bl	800449c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004562:	2300      	movs	r3, #0
 8004564:	61fb      	str	r3, [r7, #28]
 8004566:	e004      	b.n	8004572 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	2200      	movs	r2, #0
 800456c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800456e:	2301      	movs	r3, #1
 8004570:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004572:	f000 fdef 	bl	8005154 <vPortExitCritical>

	return xReturn;
 8004576:	69fb      	ldr	r3, [r7, #28]
}
 8004578:	4618      	mov	r0, r3
 800457a:	3720      	adds	r7, #32
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	20000db8 	.word	0x20000db8
 8004584:	20000dcc 	.word	0x20000dcc

08004588 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800458c:	4b03      	ldr	r3, [pc, #12]	; (800459c <vTaskMissedYield+0x14>)
 800458e:	2201      	movs	r2, #1
 8004590:	601a      	str	r2, [r3, #0]
}
 8004592:	bf00      	nop
 8004594:	46bd      	mov	sp, r7
 8004596:	bc80      	pop	{r7}
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	20000dc8 	.word	0x20000dc8

080045a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80045a8:	f000 f852 	bl	8004650 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80045ac:	4b06      	ldr	r3, [pc, #24]	; (80045c8 <prvIdleTask+0x28>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d9f9      	bls.n	80045a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80045b4:	4b05      	ldr	r3, [pc, #20]	; (80045cc <prvIdleTask+0x2c>)
 80045b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	f3bf 8f4f 	dsb	sy
 80045c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80045c4:	e7f0      	b.n	80045a8 <prvIdleTask+0x8>
 80045c6:	bf00      	nop
 80045c8:	200008e4 	.word	0x200008e4
 80045cc:	e000ed04 	.word	0xe000ed04

080045d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045d6:	2300      	movs	r3, #0
 80045d8:	607b      	str	r3, [r7, #4]
 80045da:	e00c      	b.n	80045f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	4613      	mov	r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4413      	add	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4a12      	ldr	r2, [pc, #72]	; (8004630 <prvInitialiseTaskLists+0x60>)
 80045e8:	4413      	add	r3, r2
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fe fc6a 	bl	8002ec4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	3301      	adds	r3, #1
 80045f4:	607b      	str	r3, [r7, #4]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2b37      	cmp	r3, #55	; 0x37
 80045fa:	d9ef      	bls.n	80045dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80045fc:	480d      	ldr	r0, [pc, #52]	; (8004634 <prvInitialiseTaskLists+0x64>)
 80045fe:	f7fe fc61 	bl	8002ec4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004602:	480d      	ldr	r0, [pc, #52]	; (8004638 <prvInitialiseTaskLists+0x68>)
 8004604:	f7fe fc5e 	bl	8002ec4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004608:	480c      	ldr	r0, [pc, #48]	; (800463c <prvInitialiseTaskLists+0x6c>)
 800460a:	f7fe fc5b 	bl	8002ec4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800460e:	480c      	ldr	r0, [pc, #48]	; (8004640 <prvInitialiseTaskLists+0x70>)
 8004610:	f7fe fc58 	bl	8002ec4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004614:	480b      	ldr	r0, [pc, #44]	; (8004644 <prvInitialiseTaskLists+0x74>)
 8004616:	f7fe fc55 	bl	8002ec4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800461a:	4b0b      	ldr	r3, [pc, #44]	; (8004648 <prvInitialiseTaskLists+0x78>)
 800461c:	4a05      	ldr	r2, [pc, #20]	; (8004634 <prvInitialiseTaskLists+0x64>)
 800461e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004620:	4b0a      	ldr	r3, [pc, #40]	; (800464c <prvInitialiseTaskLists+0x7c>)
 8004622:	4a05      	ldr	r2, [pc, #20]	; (8004638 <prvInitialiseTaskLists+0x68>)
 8004624:	601a      	str	r2, [r3, #0]
}
 8004626:	bf00      	nop
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	200008e4 	.word	0x200008e4
 8004634:	20000d44 	.word	0x20000d44
 8004638:	20000d58 	.word	0x20000d58
 800463c:	20000d74 	.word	0x20000d74
 8004640:	20000d88 	.word	0x20000d88
 8004644:	20000da0 	.word	0x20000da0
 8004648:	20000d6c 	.word	0x20000d6c
 800464c:	20000d70 	.word	0x20000d70

08004650 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004656:	e019      	b.n	800468c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004658:	f000 fd4e 	bl	80050f8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800465c:	4b0f      	ldr	r3, [pc, #60]	; (800469c <prvCheckTasksWaitingTermination+0x4c>)
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3304      	adds	r3, #4
 8004668:	4618      	mov	r0, r3
 800466a:	f7fe fcb1 	bl	8002fd0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800466e:	4b0c      	ldr	r3, [pc, #48]	; (80046a0 <prvCheckTasksWaitingTermination+0x50>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	3b01      	subs	r3, #1
 8004674:	4a0a      	ldr	r2, [pc, #40]	; (80046a0 <prvCheckTasksWaitingTermination+0x50>)
 8004676:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004678:	4b0a      	ldr	r3, [pc, #40]	; (80046a4 <prvCheckTasksWaitingTermination+0x54>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	3b01      	subs	r3, #1
 800467e:	4a09      	ldr	r2, [pc, #36]	; (80046a4 <prvCheckTasksWaitingTermination+0x54>)
 8004680:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004682:	f000 fd67 	bl	8005154 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 f80e 	bl	80046a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800468c:	4b05      	ldr	r3, [pc, #20]	; (80046a4 <prvCheckTasksWaitingTermination+0x54>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1e1      	bne.n	8004658 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004694:	bf00      	nop
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	20000d88 	.word	0x20000d88
 80046a0:	20000db4 	.word	0x20000db4
 80046a4:	20000d9c 	.word	0x20000d9c

080046a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d108      	bne.n	80046cc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 fed2 	bl	8005468 <vPortFree>
				vPortFree( pxTCB );
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 fecf 	bl	8005468 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80046ca:	e017      	b.n	80046fc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d103      	bne.n	80046de <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 fec6 	bl	8005468 <vPortFree>
	}
 80046dc:	e00e      	b.n	80046fc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d009      	beq.n	80046fc <prvDeleteTCB+0x54>
 80046e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ec:	f383 8811 	msr	BASEPRI, r3
 80046f0:	f3bf 8f6f 	isb	sy
 80046f4:	f3bf 8f4f 	dsb	sy
 80046f8:	60fb      	str	r3, [r7, #12]
 80046fa:	e7fe      	b.n	80046fa <prvDeleteTCB+0x52>
	}
 80046fc:	bf00      	nop
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800470a:	4b0e      	ldr	r3, [pc, #56]	; (8004744 <prvResetNextTaskUnblockTime+0x40>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d101      	bne.n	8004718 <prvResetNextTaskUnblockTime+0x14>
 8004714:	2301      	movs	r3, #1
 8004716:	e000      	b.n	800471a <prvResetNextTaskUnblockTime+0x16>
 8004718:	2300      	movs	r3, #0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d004      	beq.n	8004728 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800471e:	4b0a      	ldr	r3, [pc, #40]	; (8004748 <prvResetNextTaskUnblockTime+0x44>)
 8004720:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004724:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004726:	e008      	b.n	800473a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004728:	4b06      	ldr	r3, [pc, #24]	; (8004744 <prvResetNextTaskUnblockTime+0x40>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	4a04      	ldr	r2, [pc, #16]	; (8004748 <prvResetNextTaskUnblockTime+0x44>)
 8004738:	6013      	str	r3, [r2, #0]
}
 800473a:	bf00      	nop
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	bc80      	pop	{r7}
 8004742:	4770      	bx	lr
 8004744:	20000d6c 	.word	0x20000d6c
 8004748:	20000dd4 	.word	0x20000dd4

0800474c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004752:	4b0b      	ldr	r3, [pc, #44]	; (8004780 <xTaskGetSchedulerState+0x34>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d102      	bne.n	8004760 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800475a:	2301      	movs	r3, #1
 800475c:	607b      	str	r3, [r7, #4]
 800475e:	e008      	b.n	8004772 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004760:	4b08      	ldr	r3, [pc, #32]	; (8004784 <xTaskGetSchedulerState+0x38>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d102      	bne.n	800476e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004768:	2302      	movs	r3, #2
 800476a:	607b      	str	r3, [r7, #4]
 800476c:	e001      	b.n	8004772 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800476e:	2300      	movs	r3, #0
 8004770:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004772:	687b      	ldr	r3, [r7, #4]
	}
 8004774:	4618      	mov	r0, r3
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	bc80      	pop	{r7}
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	20000dc0 	.word	0x20000dc0
 8004784:	20000ddc 	.word	0x20000ddc

08004788 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004794:	2300      	movs	r3, #0
 8004796:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d054      	beq.n	8004848 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800479e:	4b2d      	ldr	r3, [pc, #180]	; (8004854 <xTaskPriorityDisinherit+0xcc>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d009      	beq.n	80047bc <xTaskPriorityDisinherit+0x34>
 80047a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ac:	f383 8811 	msr	BASEPRI, r3
 80047b0:	f3bf 8f6f 	isb	sy
 80047b4:	f3bf 8f4f 	dsb	sy
 80047b8:	60fb      	str	r3, [r7, #12]
 80047ba:	e7fe      	b.n	80047ba <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d109      	bne.n	80047d8 <xTaskPriorityDisinherit+0x50>
 80047c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c8:	f383 8811 	msr	BASEPRI, r3
 80047cc:	f3bf 8f6f 	isb	sy
 80047d0:	f3bf 8f4f 	dsb	sy
 80047d4:	60bb      	str	r3, [r7, #8]
 80047d6:	e7fe      	b.n	80047d6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047dc:	1e5a      	subs	r2, r3, #1
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d02c      	beq.n	8004848 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d128      	bne.n	8004848 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	3304      	adds	r3, #4
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fe fbe8 	bl	8002fd0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004818:	4b0f      	ldr	r3, [pc, #60]	; (8004858 <xTaskPriorityDisinherit+0xd0>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	429a      	cmp	r2, r3
 800481e:	d903      	bls.n	8004828 <xTaskPriorityDisinherit+0xa0>
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004824:	4a0c      	ldr	r2, [pc, #48]	; (8004858 <xTaskPriorityDisinherit+0xd0>)
 8004826:	6013      	str	r3, [r2, #0]
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800482c:	4613      	mov	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4413      	add	r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4a09      	ldr	r2, [pc, #36]	; (800485c <xTaskPriorityDisinherit+0xd4>)
 8004836:	441a      	add	r2, r3
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	3304      	adds	r3, #4
 800483c:	4619      	mov	r1, r3
 800483e:	4610      	mov	r0, r2
 8004840:	f7fe fb6b 	bl	8002f1a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004844:	2301      	movs	r3, #1
 8004846:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004848:	697b      	ldr	r3, [r7, #20]
	}
 800484a:	4618      	mov	r0, r3
 800484c:	3718      	adds	r7, #24
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	200008e0 	.word	0x200008e0
 8004858:	20000dbc 	.word	0x20000dbc
 800485c:	200008e4 	.word	0x200008e4

08004860 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800486a:	4b21      	ldr	r3, [pc, #132]	; (80048f0 <prvAddCurrentTaskToDelayedList+0x90>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004870:	4b20      	ldr	r3, [pc, #128]	; (80048f4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	3304      	adds	r3, #4
 8004876:	4618      	mov	r0, r3
 8004878:	f7fe fbaa 	bl	8002fd0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004882:	d10a      	bne.n	800489a <prvAddCurrentTaskToDelayedList+0x3a>
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d007      	beq.n	800489a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800488a:	4b1a      	ldr	r3, [pc, #104]	; (80048f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	3304      	adds	r3, #4
 8004890:	4619      	mov	r1, r3
 8004892:	4819      	ldr	r0, [pc, #100]	; (80048f8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004894:	f7fe fb41 	bl	8002f1a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004898:	e026      	b.n	80048e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4413      	add	r3, r2
 80048a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80048a2:	4b14      	ldr	r3, [pc, #80]	; (80048f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d209      	bcs.n	80048c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048b2:	4b12      	ldr	r3, [pc, #72]	; (80048fc <prvAddCurrentTaskToDelayedList+0x9c>)
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	4b0f      	ldr	r3, [pc, #60]	; (80048f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	3304      	adds	r3, #4
 80048bc:	4619      	mov	r1, r3
 80048be:	4610      	mov	r0, r2
 80048c0:	f7fe fb4e 	bl	8002f60 <vListInsert>
}
 80048c4:	e010      	b.n	80048e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048c6:	4b0e      	ldr	r3, [pc, #56]	; (8004900 <prvAddCurrentTaskToDelayedList+0xa0>)
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	4b0a      	ldr	r3, [pc, #40]	; (80048f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	3304      	adds	r3, #4
 80048d0:	4619      	mov	r1, r3
 80048d2:	4610      	mov	r0, r2
 80048d4:	f7fe fb44 	bl	8002f60 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80048d8:	4b0a      	ldr	r3, [pc, #40]	; (8004904 <prvAddCurrentTaskToDelayedList+0xa4>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68ba      	ldr	r2, [r7, #8]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d202      	bcs.n	80048e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80048e2:	4a08      	ldr	r2, [pc, #32]	; (8004904 <prvAddCurrentTaskToDelayedList+0xa4>)
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	6013      	str	r3, [r2, #0]
}
 80048e8:	bf00      	nop
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	20000db8 	.word	0x20000db8
 80048f4:	200008e0 	.word	0x200008e0
 80048f8:	20000da0 	.word	0x20000da0
 80048fc:	20000d70 	.word	0x20000d70
 8004900:	20000d6c 	.word	0x20000d6c
 8004904:	20000dd4 	.word	0x20000dd4

08004908 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b08a      	sub	sp, #40	; 0x28
 800490c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800490e:	2300      	movs	r3, #0
 8004910:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004912:	f000 fac3 	bl	8004e9c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004916:	4b1c      	ldr	r3, [pc, #112]	; (8004988 <xTimerCreateTimerTask+0x80>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d021      	beq.n	8004962 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800491e:	2300      	movs	r3, #0
 8004920:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004922:	2300      	movs	r3, #0
 8004924:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004926:	1d3a      	adds	r2, r7, #4
 8004928:	f107 0108 	add.w	r1, r7, #8
 800492c:	f107 030c 	add.w	r3, r7, #12
 8004930:	4618      	mov	r0, r3
 8004932:	f7fe faad 	bl	8002e90 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004936:	6879      	ldr	r1, [r7, #4]
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	9202      	str	r2, [sp, #8]
 800493e:	9301      	str	r3, [sp, #4]
 8004940:	2302      	movs	r3, #2
 8004942:	9300      	str	r3, [sp, #0]
 8004944:	2300      	movs	r3, #0
 8004946:	460a      	mov	r2, r1
 8004948:	4910      	ldr	r1, [pc, #64]	; (800498c <xTimerCreateTimerTask+0x84>)
 800494a:	4811      	ldr	r0, [pc, #68]	; (8004990 <xTimerCreateTimerTask+0x88>)
 800494c:	f7ff f8f8 	bl	8003b40 <xTaskCreateStatic>
 8004950:	4602      	mov	r2, r0
 8004952:	4b10      	ldr	r3, [pc, #64]	; (8004994 <xTimerCreateTimerTask+0x8c>)
 8004954:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004956:	4b0f      	ldr	r3, [pc, #60]	; (8004994 <xTimerCreateTimerTask+0x8c>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800495e:	2301      	movs	r3, #1
 8004960:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d109      	bne.n	800497c <xTimerCreateTimerTask+0x74>
 8004968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496c:	f383 8811 	msr	BASEPRI, r3
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	f3bf 8f4f 	dsb	sy
 8004978:	613b      	str	r3, [r7, #16]
 800497a:	e7fe      	b.n	800497a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800497c:	697b      	ldr	r3, [r7, #20]
}
 800497e:	4618      	mov	r0, r3
 8004980:	3718      	adds	r7, #24
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	20000e10 	.word	0x20000e10
 800498c:	08005d18 	.word	0x08005d18
 8004990:	08004ab1 	.word	0x08004ab1
 8004994:	20000e14 	.word	0x20000e14

08004998 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b08a      	sub	sp, #40	; 0x28
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
 80049a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80049a6:	2300      	movs	r3, #0
 80049a8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d109      	bne.n	80049c4 <xTimerGenericCommand+0x2c>
 80049b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	623b      	str	r3, [r7, #32]
 80049c2:	e7fe      	b.n	80049c2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80049c4:	4b19      	ldr	r3, [pc, #100]	; (8004a2c <xTimerGenericCommand+0x94>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d02a      	beq.n	8004a22 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	2b05      	cmp	r3, #5
 80049dc:	dc18      	bgt.n	8004a10 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80049de:	f7ff feb5 	bl	800474c <xTaskGetSchedulerState>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d109      	bne.n	80049fc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80049e8:	4b10      	ldr	r3, [pc, #64]	; (8004a2c <xTimerGenericCommand+0x94>)
 80049ea:	6818      	ldr	r0, [r3, #0]
 80049ec:	f107 0110 	add.w	r1, r7, #16
 80049f0:	2300      	movs	r3, #0
 80049f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049f4:	f7fe fc50 	bl	8003298 <xQueueGenericSend>
 80049f8:	6278      	str	r0, [r7, #36]	; 0x24
 80049fa:	e012      	b.n	8004a22 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80049fc:	4b0b      	ldr	r3, [pc, #44]	; (8004a2c <xTimerGenericCommand+0x94>)
 80049fe:	6818      	ldr	r0, [r3, #0]
 8004a00:	f107 0110 	add.w	r1, r7, #16
 8004a04:	2300      	movs	r3, #0
 8004a06:	2200      	movs	r2, #0
 8004a08:	f7fe fc46 	bl	8003298 <xQueueGenericSend>
 8004a0c:	6278      	str	r0, [r7, #36]	; 0x24
 8004a0e:	e008      	b.n	8004a22 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004a10:	4b06      	ldr	r3, [pc, #24]	; (8004a2c <xTimerGenericCommand+0x94>)
 8004a12:	6818      	ldr	r0, [r3, #0]
 8004a14:	f107 0110 	add.w	r1, r7, #16
 8004a18:	2300      	movs	r3, #0
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	f7fe fd36 	bl	800348c <xQueueGenericSendFromISR>
 8004a20:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3728      	adds	r7, #40	; 0x28
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	20000e10 	.word	0x20000e10

08004a30 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b088      	sub	sp, #32
 8004a34:	af02      	add	r7, sp, #8
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a3a:	4b1c      	ldr	r3, [pc, #112]	; (8004aac <prvProcessExpiredTimer+0x7c>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	3304      	adds	r3, #4
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7fe fac1 	bl	8002fd0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d121      	bne.n	8004a9a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	699a      	ldr	r2, [r3, #24]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	18d1      	adds	r1, r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	6978      	ldr	r0, [r7, #20]
 8004a64:	f000 f8c8 	bl	8004bf8 <prvInsertTimerInActiveList>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d015      	beq.n	8004a9a <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a6e:	2300      	movs	r3, #0
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	2300      	movs	r3, #0
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	2100      	movs	r1, #0
 8004a78:	6978      	ldr	r0, [r7, #20]
 8004a7a:	f7ff ff8d 	bl	8004998 <xTimerGenericCommand>
 8004a7e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d109      	bne.n	8004a9a <prvProcessExpiredTimer+0x6a>
 8004a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8a:	f383 8811 	msr	BASEPRI, r3
 8004a8e:	f3bf 8f6f 	isb	sy
 8004a92:	f3bf 8f4f 	dsb	sy
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	e7fe      	b.n	8004a98 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	6978      	ldr	r0, [r7, #20]
 8004aa0:	4798      	blx	r3
}
 8004aa2:	bf00      	nop
 8004aa4:	3718      	adds	r7, #24
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	20000e08 	.word	0x20000e08

08004ab0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ab8:	f107 0308 	add.w	r3, r7, #8
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 f857 	bl	8004b70 <prvGetNextExpireTime>
 8004ac2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f000 f803 	bl	8004ad4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004ace:	f000 f8d5 	bl	8004c7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ad2:	e7f1      	b.n	8004ab8 <prvTimerTask+0x8>

08004ad4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004ade:	f7ff fa5b 	bl	8003f98 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ae2:	f107 0308 	add.w	r3, r7, #8
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 f866 	bl	8004bb8 <prvSampleTimeNow>
 8004aec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d130      	bne.n	8004b56 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10a      	bne.n	8004b10 <prvProcessTimerOrBlockTask+0x3c>
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d806      	bhi.n	8004b10 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004b02:	f7ff fa57 	bl	8003fb4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004b06:	68f9      	ldr	r1, [r7, #12]
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7ff ff91 	bl	8004a30 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004b0e:	e024      	b.n	8004b5a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d008      	beq.n	8004b28 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004b16:	4b13      	ldr	r3, [pc, #76]	; (8004b64 <prvProcessTimerOrBlockTask+0x90>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	bf0c      	ite	eq
 8004b20:	2301      	moveq	r3, #1
 8004b22:	2300      	movne	r3, #0
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004b28:	4b0f      	ldr	r3, [pc, #60]	; (8004b68 <prvProcessTimerOrBlockTask+0x94>)
 8004b2a:	6818      	ldr	r0, [r3, #0]
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	4619      	mov	r1, r3
 8004b36:	f7fe ffcf 	bl	8003ad8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004b3a:	f7ff fa3b 	bl	8003fb4 <xTaskResumeAll>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10a      	bne.n	8004b5a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004b44:	4b09      	ldr	r3, [pc, #36]	; (8004b6c <prvProcessTimerOrBlockTask+0x98>)
 8004b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b4a:	601a      	str	r2, [r3, #0]
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	f3bf 8f6f 	isb	sy
}
 8004b54:	e001      	b.n	8004b5a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004b56:	f7ff fa2d 	bl	8003fb4 <xTaskResumeAll>
}
 8004b5a:	bf00      	nop
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	20000e0c 	.word	0x20000e0c
 8004b68:	20000e10 	.word	0x20000e10
 8004b6c:	e000ed04 	.word	0xe000ed04

08004b70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004b78:	4b0e      	ldr	r3, [pc, #56]	; (8004bb4 <prvGetNextExpireTime+0x44>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	bf0c      	ite	eq
 8004b82:	2301      	moveq	r3, #1
 8004b84:	2300      	movne	r3, #0
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	461a      	mov	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d105      	bne.n	8004ba2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b96:	4b07      	ldr	r3, [pc, #28]	; (8004bb4 <prvGetNextExpireTime+0x44>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	60fb      	str	r3, [r7, #12]
 8004ba0:	e001      	b.n	8004ba6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3714      	adds	r7, #20
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bc80      	pop	{r7}
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	20000e08 	.word	0x20000e08

08004bb8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004bc0:	f7ff fa94 	bl	80040ec <xTaskGetTickCount>
 8004bc4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004bc6:	4b0b      	ldr	r3, [pc, #44]	; (8004bf4 <prvSampleTimeNow+0x3c>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d205      	bcs.n	8004bdc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004bd0:	f000 f904 	bl	8004ddc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	e002      	b.n	8004be2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004be2:	4a04      	ldr	r2, [pc, #16]	; (8004bf4 <prvSampleTimeNow+0x3c>)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004be8:	68fb      	ldr	r3, [r7, #12]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	20000e18 	.word	0x20000e18

08004bf8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
 8004c04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004c06:	2300      	movs	r3, #0
 8004c08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d812      	bhi.n	8004c44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	1ad2      	subs	r2, r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d302      	bcc.n	8004c32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	617b      	str	r3, [r7, #20]
 8004c30:	e01b      	b.n	8004c6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004c32:	4b10      	ldr	r3, [pc, #64]	; (8004c74 <prvInsertTimerInActiveList+0x7c>)
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	3304      	adds	r3, #4
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	4610      	mov	r0, r2
 8004c3e:	f7fe f98f 	bl	8002f60 <vListInsert>
 8004c42:	e012      	b.n	8004c6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d206      	bcs.n	8004c5a <prvInsertTimerInActiveList+0x62>
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d302      	bcc.n	8004c5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004c54:	2301      	movs	r3, #1
 8004c56:	617b      	str	r3, [r7, #20]
 8004c58:	e007      	b.n	8004c6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c5a:	4b07      	ldr	r3, [pc, #28]	; (8004c78 <prvInsertTimerInActiveList+0x80>)
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	3304      	adds	r3, #4
 8004c62:	4619      	mov	r1, r3
 8004c64:	4610      	mov	r0, r2
 8004c66:	f7fe f97b 	bl	8002f60 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004c6a:	697b      	ldr	r3, [r7, #20]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3718      	adds	r7, #24
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	20000e0c 	.word	0x20000e0c
 8004c78:	20000e08 	.word	0x20000e08

08004c7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b08e      	sub	sp, #56	; 0x38
 8004c80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c82:	e099      	b.n	8004db8 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	da17      	bge.n	8004cba <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004c8a:	1d3b      	adds	r3, r7, #4
 8004c8c:	3304      	adds	r3, #4
 8004c8e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d109      	bne.n	8004caa <prvProcessReceivedCommands+0x2e>
 8004c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9a:	f383 8811 	msr	BASEPRI, r3
 8004c9e:	f3bf 8f6f 	isb	sy
 8004ca2:	f3bf 8f4f 	dsb	sy
 8004ca6:	61fb      	str	r3, [r7, #28]
 8004ca8:	e7fe      	b.n	8004ca8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cb0:	6850      	ldr	r0, [r2, #4]
 8004cb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cb4:	6892      	ldr	r2, [r2, #8]
 8004cb6:	4611      	mov	r1, r2
 8004cb8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	db7a      	blt.n	8004db6 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc6:	695b      	ldr	r3, [r3, #20]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d004      	beq.n	8004cd6 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cce:	3304      	adds	r3, #4
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7fe f97d 	bl	8002fd0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004cd6:	463b      	mov	r3, r7
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7ff ff6d 	bl	8004bb8 <prvSampleTimeNow>
 8004cde:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b09      	cmp	r3, #9
 8004ce4:	d868      	bhi.n	8004db8 <prvProcessReceivedCommands+0x13c>
 8004ce6:	a201      	add	r2, pc, #4	; (adr r2, 8004cec <prvProcessReceivedCommands+0x70>)
 8004ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cec:	08004d15 	.word	0x08004d15
 8004cf0:	08004d15 	.word	0x08004d15
 8004cf4:	08004d15 	.word	0x08004d15
 8004cf8:	08004db9 	.word	0x08004db9
 8004cfc:	08004d6f 	.word	0x08004d6f
 8004d00:	08004da5 	.word	0x08004da5
 8004d04:	08004d15 	.word	0x08004d15
 8004d08:	08004d15 	.word	0x08004d15
 8004d0c:	08004db9 	.word	0x08004db9
 8004d10:	08004d6f 	.word	0x08004d6f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	18d1      	adds	r1, r2, r3
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d22:	f7ff ff69 	bl	8004bf8 <prvInsertTimerInActiveList>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d045      	beq.n	8004db8 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d32:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d36:	69db      	ldr	r3, [r3, #28]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d13d      	bne.n	8004db8 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	441a      	add	r2, r3
 8004d44:	2300      	movs	r3, #0
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	2300      	movs	r3, #0
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d4e:	f7ff fe23 	bl	8004998 <xTimerGenericCommand>
 8004d52:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004d54:	6a3b      	ldr	r3, [r7, #32]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d12e      	bne.n	8004db8 <prvProcessReceivedCommands+0x13c>
 8004d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5e:	f383 8811 	msr	BASEPRI, r3
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	61bb      	str	r3, [r7, #24]
 8004d6c:	e7fe      	b.n	8004d6c <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d72:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d109      	bne.n	8004d90 <prvProcessReceivedCommands+0x114>
 8004d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d80:	f383 8811 	msr	BASEPRI, r3
 8004d84:	f3bf 8f6f 	isb	sy
 8004d88:	f3bf 8f4f 	dsb	sy
 8004d8c:	617b      	str	r3, [r7, #20]
 8004d8e:	e7fe      	b.n	8004d8e <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d92:	699a      	ldr	r2, [r3, #24]
 8004d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d96:	18d1      	adds	r1, r2, r3
 8004d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d9e:	f7ff ff2b 	bl	8004bf8 <prvInsertTimerInActiveList>
					break;
 8004da2:	e009      	b.n	8004db8 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d104      	bne.n	8004db8 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8004dae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004db0:	f000 fb5a 	bl	8005468 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004db4:	e000      	b.n	8004db8 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004db6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004db8:	4b07      	ldr	r3, [pc, #28]	; (8004dd8 <prvProcessReceivedCommands+0x15c>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	1d39      	adds	r1, r7, #4
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7fe fbf7 	bl	80035b4 <xQueueReceive>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f47f af5b 	bne.w	8004c84 <prvProcessReceivedCommands+0x8>
	}
}
 8004dce:	bf00      	nop
 8004dd0:	3730      	adds	r7, #48	; 0x30
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	20000e10 	.word	0x20000e10

08004ddc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b088      	sub	sp, #32
 8004de0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004de2:	e044      	b.n	8004e6e <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004de4:	4b2b      	ldr	r3, [pc, #172]	; (8004e94 <prvSwitchTimerLists+0xb8>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004dee:	4b29      	ldr	r3, [pc, #164]	; (8004e94 <prvSwitchTimerLists+0xb8>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	3304      	adds	r3, #4
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7fe f8e7 	bl	8002fd0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	69db      	ldr	r3, [r3, #28]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d12d      	bne.n	8004e6e <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	4413      	add	r3, r2
 8004e1a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d90e      	bls.n	8004e42 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e30:	4b18      	ldr	r3, [pc, #96]	; (8004e94 <prvSwitchTimerLists+0xb8>)
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	3304      	adds	r3, #4
 8004e38:	4619      	mov	r1, r3
 8004e3a:	4610      	mov	r0, r2
 8004e3c:	f7fe f890 	bl	8002f60 <vListInsert>
 8004e40:	e015      	b.n	8004e6e <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e42:	2300      	movs	r3, #0
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	2300      	movs	r3, #0
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f7ff fda3 	bl	8004998 <xTimerGenericCommand>
 8004e52:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d109      	bne.n	8004e6e <prvSwitchTimerLists+0x92>
 8004e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5e:	f383 8811 	msr	BASEPRI, r3
 8004e62:	f3bf 8f6f 	isb	sy
 8004e66:	f3bf 8f4f 	dsb	sy
 8004e6a:	603b      	str	r3, [r7, #0]
 8004e6c:	e7fe      	b.n	8004e6c <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e6e:	4b09      	ldr	r3, [pc, #36]	; (8004e94 <prvSwitchTimerLists+0xb8>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1b5      	bne.n	8004de4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004e78:	4b06      	ldr	r3, [pc, #24]	; (8004e94 <prvSwitchTimerLists+0xb8>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004e7e:	4b06      	ldr	r3, [pc, #24]	; (8004e98 <prvSwitchTimerLists+0xbc>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a04      	ldr	r2, [pc, #16]	; (8004e94 <prvSwitchTimerLists+0xb8>)
 8004e84:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004e86:	4a04      	ldr	r2, [pc, #16]	; (8004e98 <prvSwitchTimerLists+0xbc>)
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	6013      	str	r3, [r2, #0]
}
 8004e8c:	bf00      	nop
 8004e8e:	3718      	adds	r7, #24
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	20000e08 	.word	0x20000e08
 8004e98:	20000e0c 	.word	0x20000e0c

08004e9c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004ea2:	f000 f929 	bl	80050f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004ea6:	4b15      	ldr	r3, [pc, #84]	; (8004efc <prvCheckForValidListAndQueue+0x60>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d120      	bne.n	8004ef0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004eae:	4814      	ldr	r0, [pc, #80]	; (8004f00 <prvCheckForValidListAndQueue+0x64>)
 8004eb0:	f7fe f808 	bl	8002ec4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004eb4:	4813      	ldr	r0, [pc, #76]	; (8004f04 <prvCheckForValidListAndQueue+0x68>)
 8004eb6:	f7fe f805 	bl	8002ec4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004eba:	4b13      	ldr	r3, [pc, #76]	; (8004f08 <prvCheckForValidListAndQueue+0x6c>)
 8004ebc:	4a10      	ldr	r2, [pc, #64]	; (8004f00 <prvCheckForValidListAndQueue+0x64>)
 8004ebe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004ec0:	4b12      	ldr	r3, [pc, #72]	; (8004f0c <prvCheckForValidListAndQueue+0x70>)
 8004ec2:	4a10      	ldr	r2, [pc, #64]	; (8004f04 <prvCheckForValidListAndQueue+0x68>)
 8004ec4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	4b11      	ldr	r3, [pc, #68]	; (8004f10 <prvCheckForValidListAndQueue+0x74>)
 8004ecc:	4a11      	ldr	r2, [pc, #68]	; (8004f14 <prvCheckForValidListAndQueue+0x78>)
 8004ece:	2110      	movs	r1, #16
 8004ed0:	200a      	movs	r0, #10
 8004ed2:	f7fe f90f 	bl	80030f4 <xQueueGenericCreateStatic>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	4b08      	ldr	r3, [pc, #32]	; (8004efc <prvCheckForValidListAndQueue+0x60>)
 8004eda:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004edc:	4b07      	ldr	r3, [pc, #28]	; (8004efc <prvCheckForValidListAndQueue+0x60>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d005      	beq.n	8004ef0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004ee4:	4b05      	ldr	r3, [pc, #20]	; (8004efc <prvCheckForValidListAndQueue+0x60>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	490b      	ldr	r1, [pc, #44]	; (8004f18 <prvCheckForValidListAndQueue+0x7c>)
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7fe fdcc 	bl	8003a88 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ef0:	f000 f930 	bl	8005154 <vPortExitCritical>
}
 8004ef4:	bf00      	nop
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	20000e10 	.word	0x20000e10
 8004f00:	20000de0 	.word	0x20000de0
 8004f04:	20000df4 	.word	0x20000df4
 8004f08:	20000e08 	.word	0x20000e08
 8004f0c:	20000e0c 	.word	0x20000e0c
 8004f10:	20000ebc 	.word	0x20000ebc
 8004f14:	20000e1c 	.word	0x20000e1c
 8004f18:	08005d20 	.word	0x08005d20

08004f1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	3b04      	subs	r3, #4
 8004f2c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	3b04      	subs	r3, #4
 8004f3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	f023 0201 	bic.w	r2, r3, #1
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	3b04      	subs	r3, #4
 8004f4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f4c:	4a08      	ldr	r2, [pc, #32]	; (8004f70 <pxPortInitialiseStack+0x54>)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	3b14      	subs	r3, #20
 8004f56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	3b20      	subs	r3, #32
 8004f62:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f64:	68fb      	ldr	r3, [r7, #12]
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3714      	adds	r7, #20
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bc80      	pop	{r7}
 8004f6e:	4770      	bx	lr
 8004f70:	08004f75 	.word	0x08004f75

08004f74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f7e:	4b10      	ldr	r3, [pc, #64]	; (8004fc0 <prvTaskExitError+0x4c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f86:	d009      	beq.n	8004f9c <prvTaskExitError+0x28>
 8004f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8c:	f383 8811 	msr	BASEPRI, r3
 8004f90:	f3bf 8f6f 	isb	sy
 8004f94:	f3bf 8f4f 	dsb	sy
 8004f98:	60fb      	str	r3, [r7, #12]
 8004f9a:	e7fe      	b.n	8004f9a <prvTaskExitError+0x26>
 8004f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa0:	f383 8811 	msr	BASEPRI, r3
 8004fa4:	f3bf 8f6f 	isb	sy
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004fae:	bf00      	nop
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d0fc      	beq.n	8004fb0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004fb6:	bf00      	nop
 8004fb8:	3714      	adds	r7, #20
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bc80      	pop	{r7}
 8004fbe:	4770      	bx	lr
 8004fc0:	20000030 	.word	0x20000030
	...

08004fd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004fd0:	4b07      	ldr	r3, [pc, #28]	; (8004ff0 <pxCurrentTCBConst2>)
 8004fd2:	6819      	ldr	r1, [r3, #0]
 8004fd4:	6808      	ldr	r0, [r1, #0]
 8004fd6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004fda:	f380 8809 	msr	PSP, r0
 8004fde:	f3bf 8f6f 	isb	sy
 8004fe2:	f04f 0000 	mov.w	r0, #0
 8004fe6:	f380 8811 	msr	BASEPRI, r0
 8004fea:	f04e 0e0d 	orr.w	lr, lr, #13
 8004fee:	4770      	bx	lr

08004ff0 <pxCurrentTCBConst2>:
 8004ff0:	200008e0 	.word	0x200008e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ff4:	bf00      	nop
 8004ff6:	bf00      	nop

08004ff8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004ff8:	4806      	ldr	r0, [pc, #24]	; (8005014 <prvPortStartFirstTask+0x1c>)
 8004ffa:	6800      	ldr	r0, [r0, #0]
 8004ffc:	6800      	ldr	r0, [r0, #0]
 8004ffe:	f380 8808 	msr	MSP, r0
 8005002:	b662      	cpsie	i
 8005004:	b661      	cpsie	f
 8005006:	f3bf 8f4f 	dsb	sy
 800500a:	f3bf 8f6f 	isb	sy
 800500e:	df00      	svc	0
 8005010:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005012:	bf00      	nop
 8005014:	e000ed08 	.word	0xe000ed08

08005018 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800501e:	4b31      	ldr	r3, [pc, #196]	; (80050e4 <xPortStartScheduler+0xcc>)
 8005020:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	b2db      	uxtb	r3, r3
 8005028:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	22ff      	movs	r2, #255	; 0xff
 800502e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	b2db      	uxtb	r3, r3
 8005036:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005038:	78fb      	ldrb	r3, [r7, #3]
 800503a:	b2db      	uxtb	r3, r3
 800503c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005040:	b2da      	uxtb	r2, r3
 8005042:	4b29      	ldr	r3, [pc, #164]	; (80050e8 <xPortStartScheduler+0xd0>)
 8005044:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005046:	4b29      	ldr	r3, [pc, #164]	; (80050ec <xPortStartScheduler+0xd4>)
 8005048:	2207      	movs	r2, #7
 800504a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800504c:	e009      	b.n	8005062 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800504e:	4b27      	ldr	r3, [pc, #156]	; (80050ec <xPortStartScheduler+0xd4>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	3b01      	subs	r3, #1
 8005054:	4a25      	ldr	r2, [pc, #148]	; (80050ec <xPortStartScheduler+0xd4>)
 8005056:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005058:	78fb      	ldrb	r3, [r7, #3]
 800505a:	b2db      	uxtb	r3, r3
 800505c:	005b      	lsls	r3, r3, #1
 800505e:	b2db      	uxtb	r3, r3
 8005060:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005062:	78fb      	ldrb	r3, [r7, #3]
 8005064:	b2db      	uxtb	r3, r3
 8005066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800506a:	2b80      	cmp	r3, #128	; 0x80
 800506c:	d0ef      	beq.n	800504e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800506e:	4b1f      	ldr	r3, [pc, #124]	; (80050ec <xPortStartScheduler+0xd4>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f1c3 0307 	rsb	r3, r3, #7
 8005076:	2b04      	cmp	r3, #4
 8005078:	d009      	beq.n	800508e <xPortStartScheduler+0x76>
 800507a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507e:	f383 8811 	msr	BASEPRI, r3
 8005082:	f3bf 8f6f 	isb	sy
 8005086:	f3bf 8f4f 	dsb	sy
 800508a:	60bb      	str	r3, [r7, #8]
 800508c:	e7fe      	b.n	800508c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800508e:	4b17      	ldr	r3, [pc, #92]	; (80050ec <xPortStartScheduler+0xd4>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	021b      	lsls	r3, r3, #8
 8005094:	4a15      	ldr	r2, [pc, #84]	; (80050ec <xPortStartScheduler+0xd4>)
 8005096:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005098:	4b14      	ldr	r3, [pc, #80]	; (80050ec <xPortStartScheduler+0xd4>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050a0:	4a12      	ldr	r2, [pc, #72]	; (80050ec <xPortStartScheduler+0xd4>)
 80050a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	b2da      	uxtb	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80050ac:	4b10      	ldr	r3, [pc, #64]	; (80050f0 <xPortStartScheduler+0xd8>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a0f      	ldr	r2, [pc, #60]	; (80050f0 <xPortStartScheduler+0xd8>)
 80050b2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80050b8:	4b0d      	ldr	r3, [pc, #52]	; (80050f0 <xPortStartScheduler+0xd8>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a0c      	ldr	r2, [pc, #48]	; (80050f0 <xPortStartScheduler+0xd8>)
 80050be:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80050c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80050c4:	f000 f8b0 	bl	8005228 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80050c8:	4b0a      	ldr	r3, [pc, #40]	; (80050f4 <xPortStartScheduler+0xdc>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80050ce:	f7ff ff93 	bl	8004ff8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80050d2:	f7ff f8d7 	bl	8004284 <vTaskSwitchContext>
	prvTaskExitError();
 80050d6:	f7ff ff4d 	bl	8004f74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	e000e400 	.word	0xe000e400
 80050e8:	20000f0c 	.word	0x20000f0c
 80050ec:	20000f10 	.word	0x20000f10
 80050f0:	e000ed20 	.word	0xe000ed20
 80050f4:	20000030 	.word	0x20000030

080050f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005102:	f383 8811 	msr	BASEPRI, r3
 8005106:	f3bf 8f6f 	isb	sy
 800510a:	f3bf 8f4f 	dsb	sy
 800510e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005110:	4b0e      	ldr	r3, [pc, #56]	; (800514c <vPortEnterCritical+0x54>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	3301      	adds	r3, #1
 8005116:	4a0d      	ldr	r2, [pc, #52]	; (800514c <vPortEnterCritical+0x54>)
 8005118:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800511a:	4b0c      	ldr	r3, [pc, #48]	; (800514c <vPortEnterCritical+0x54>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d10e      	bne.n	8005140 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005122:	4b0b      	ldr	r3, [pc, #44]	; (8005150 <vPortEnterCritical+0x58>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	b2db      	uxtb	r3, r3
 8005128:	2b00      	cmp	r3, #0
 800512a:	d009      	beq.n	8005140 <vPortEnterCritical+0x48>
 800512c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005130:	f383 8811 	msr	BASEPRI, r3
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	f3bf 8f4f 	dsb	sy
 800513c:	603b      	str	r3, [r7, #0]
 800513e:	e7fe      	b.n	800513e <vPortEnterCritical+0x46>
	}
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	bc80      	pop	{r7}
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	20000030 	.word	0x20000030
 8005150:	e000ed04 	.word	0xe000ed04

08005154 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800515a:	4b10      	ldr	r3, [pc, #64]	; (800519c <vPortExitCritical+0x48>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d109      	bne.n	8005176 <vPortExitCritical+0x22>
 8005162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005166:	f383 8811 	msr	BASEPRI, r3
 800516a:	f3bf 8f6f 	isb	sy
 800516e:	f3bf 8f4f 	dsb	sy
 8005172:	607b      	str	r3, [r7, #4]
 8005174:	e7fe      	b.n	8005174 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005176:	4b09      	ldr	r3, [pc, #36]	; (800519c <vPortExitCritical+0x48>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	3b01      	subs	r3, #1
 800517c:	4a07      	ldr	r2, [pc, #28]	; (800519c <vPortExitCritical+0x48>)
 800517e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005180:	4b06      	ldr	r3, [pc, #24]	; (800519c <vPortExitCritical+0x48>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d104      	bne.n	8005192 <vPortExitCritical+0x3e>
 8005188:	2300      	movs	r3, #0
 800518a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005192:	bf00      	nop
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	bc80      	pop	{r7}
 800519a:	4770      	bx	lr
 800519c:	20000030 	.word	0x20000030

080051a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80051a0:	f3ef 8009 	mrs	r0, PSP
 80051a4:	f3bf 8f6f 	isb	sy
 80051a8:	4b0d      	ldr	r3, [pc, #52]	; (80051e0 <pxCurrentTCBConst>)
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80051b0:	6010      	str	r0, [r2, #0]
 80051b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80051b6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80051ba:	f380 8811 	msr	BASEPRI, r0
 80051be:	f7ff f861 	bl	8004284 <vTaskSwitchContext>
 80051c2:	f04f 0000 	mov.w	r0, #0
 80051c6:	f380 8811 	msr	BASEPRI, r0
 80051ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80051ce:	6819      	ldr	r1, [r3, #0]
 80051d0:	6808      	ldr	r0, [r1, #0]
 80051d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80051d6:	f380 8809 	msr	PSP, r0
 80051da:	f3bf 8f6f 	isb	sy
 80051de:	4770      	bx	lr

080051e0 <pxCurrentTCBConst>:
 80051e0:	200008e0 	.word	0x200008e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80051e4:	bf00      	nop
 80051e6:	bf00      	nop

080051e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
	__asm volatile
 80051ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f2:	f383 8811 	msr	BASEPRI, r3
 80051f6:	f3bf 8f6f 	isb	sy
 80051fa:	f3bf 8f4f 	dsb	sy
 80051fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005200:	f7fe ff82 	bl	8004108 <xTaskIncrementTick>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d003      	beq.n	8005212 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800520a:	4b06      	ldr	r3, [pc, #24]	; (8005224 <SysTick_Handler+0x3c>)
 800520c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005210:	601a      	str	r2, [r3, #0]
 8005212:	2300      	movs	r3, #0
 8005214:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800521c:	bf00      	nop
 800521e:	3708      	adds	r7, #8
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	e000ed04 	.word	0xe000ed04

08005228 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005228:	b480      	push	{r7}
 800522a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800522c:	4b0a      	ldr	r3, [pc, #40]	; (8005258 <vPortSetupTimerInterrupt+0x30>)
 800522e:	2200      	movs	r2, #0
 8005230:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005232:	4b0a      	ldr	r3, [pc, #40]	; (800525c <vPortSetupTimerInterrupt+0x34>)
 8005234:	2200      	movs	r2, #0
 8005236:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005238:	4b09      	ldr	r3, [pc, #36]	; (8005260 <vPortSetupTimerInterrupt+0x38>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a09      	ldr	r2, [pc, #36]	; (8005264 <vPortSetupTimerInterrupt+0x3c>)
 800523e:	fba2 2303 	umull	r2, r3, r2, r3
 8005242:	099b      	lsrs	r3, r3, #6
 8005244:	4a08      	ldr	r2, [pc, #32]	; (8005268 <vPortSetupTimerInterrupt+0x40>)
 8005246:	3b01      	subs	r3, #1
 8005248:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800524a:	4b03      	ldr	r3, [pc, #12]	; (8005258 <vPortSetupTimerInterrupt+0x30>)
 800524c:	2207      	movs	r2, #7
 800524e:	601a      	str	r2, [r3, #0]
}
 8005250:	bf00      	nop
 8005252:	46bd      	mov	sp, r7
 8005254:	bc80      	pop	{r7}
 8005256:	4770      	bx	lr
 8005258:	e000e010 	.word	0xe000e010
 800525c:	e000e018 	.word	0xe000e018
 8005260:	20000024 	.word	0x20000024
 8005264:	10624dd3 	.word	0x10624dd3
 8005268:	e000e014 	.word	0xe000e014

0800526c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005272:	f3ef 8305 	mrs	r3, IPSR
 8005276:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2b0f      	cmp	r3, #15
 800527c:	d913      	bls.n	80052a6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800527e:	4a15      	ldr	r2, [pc, #84]	; (80052d4 <vPortValidateInterruptPriority+0x68>)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4413      	add	r3, r2
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005288:	4b13      	ldr	r3, [pc, #76]	; (80052d8 <vPortValidateInterruptPriority+0x6c>)
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	7afa      	ldrb	r2, [r7, #11]
 800528e:	429a      	cmp	r2, r3
 8005290:	d209      	bcs.n	80052a6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005296:	f383 8811 	msr	BASEPRI, r3
 800529a:	f3bf 8f6f 	isb	sy
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	607b      	str	r3, [r7, #4]
 80052a4:	e7fe      	b.n	80052a4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80052a6:	4b0d      	ldr	r3, [pc, #52]	; (80052dc <vPortValidateInterruptPriority+0x70>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80052ae:	4b0c      	ldr	r3, [pc, #48]	; (80052e0 <vPortValidateInterruptPriority+0x74>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d909      	bls.n	80052ca <vPortValidateInterruptPriority+0x5e>
 80052b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ba:	f383 8811 	msr	BASEPRI, r3
 80052be:	f3bf 8f6f 	isb	sy
 80052c2:	f3bf 8f4f 	dsb	sy
 80052c6:	603b      	str	r3, [r7, #0]
 80052c8:	e7fe      	b.n	80052c8 <vPortValidateInterruptPriority+0x5c>
	}
 80052ca:	bf00      	nop
 80052cc:	3714      	adds	r7, #20
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bc80      	pop	{r7}
 80052d2:	4770      	bx	lr
 80052d4:	e000e3f0 	.word	0xe000e3f0
 80052d8:	20000f0c 	.word	0x20000f0c
 80052dc:	e000ed0c 	.word	0xe000ed0c
 80052e0:	20000f10 	.word	0x20000f10

080052e4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b08a      	sub	sp, #40	; 0x28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80052ec:	2300      	movs	r3, #0
 80052ee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80052f0:	f7fe fe52 	bl	8003f98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80052f4:	4b57      	ldr	r3, [pc, #348]	; (8005454 <pvPortMalloc+0x170>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d101      	bne.n	8005300 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80052fc:	f000 f90c 	bl	8005518 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005300:	4b55      	ldr	r3, [pc, #340]	; (8005458 <pvPortMalloc+0x174>)
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4013      	ands	r3, r2
 8005308:	2b00      	cmp	r3, #0
 800530a:	f040 808c 	bne.w	8005426 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d01c      	beq.n	800534e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005314:	2208      	movs	r2, #8
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4413      	add	r3, r2
 800531a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f003 0307 	and.w	r3, r3, #7
 8005322:	2b00      	cmp	r3, #0
 8005324:	d013      	beq.n	800534e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f023 0307 	bic.w	r3, r3, #7
 800532c:	3308      	adds	r3, #8
 800532e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f003 0307 	and.w	r3, r3, #7
 8005336:	2b00      	cmp	r3, #0
 8005338:	d009      	beq.n	800534e <pvPortMalloc+0x6a>
 800533a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533e:	f383 8811 	msr	BASEPRI, r3
 8005342:	f3bf 8f6f 	isb	sy
 8005346:	f3bf 8f4f 	dsb	sy
 800534a:	617b      	str	r3, [r7, #20]
 800534c:	e7fe      	b.n	800534c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d068      	beq.n	8005426 <pvPortMalloc+0x142>
 8005354:	4b41      	ldr	r3, [pc, #260]	; (800545c <pvPortMalloc+0x178>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	429a      	cmp	r2, r3
 800535c:	d863      	bhi.n	8005426 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800535e:	4b40      	ldr	r3, [pc, #256]	; (8005460 <pvPortMalloc+0x17c>)
 8005360:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005362:	4b3f      	ldr	r3, [pc, #252]	; (8005460 <pvPortMalloc+0x17c>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005368:	e004      	b.n	8005374 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	429a      	cmp	r2, r3
 800537c:	d903      	bls.n	8005386 <pvPortMalloc+0xa2>
 800537e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1f1      	bne.n	800536a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005386:	4b33      	ldr	r3, [pc, #204]	; (8005454 <pvPortMalloc+0x170>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800538c:	429a      	cmp	r2, r3
 800538e:	d04a      	beq.n	8005426 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005390:	6a3b      	ldr	r3, [r7, #32]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2208      	movs	r2, #8
 8005396:	4413      	add	r3, r2
 8005398:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	6a3b      	ldr	r3, [r7, #32]
 80053a0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	685a      	ldr	r2, [r3, #4]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	1ad2      	subs	r2, r2, r3
 80053aa:	2308      	movs	r3, #8
 80053ac:	005b      	lsls	r3, r3, #1
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d91e      	bls.n	80053f0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80053b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4413      	add	r3, r2
 80053b8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	f003 0307 	and.w	r3, r3, #7
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d009      	beq.n	80053d8 <pvPortMalloc+0xf4>
 80053c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c8:	f383 8811 	msr	BASEPRI, r3
 80053cc:	f3bf 8f6f 	isb	sy
 80053d0:	f3bf 8f4f 	dsb	sy
 80053d4:	613b      	str	r3, [r7, #16]
 80053d6:	e7fe      	b.n	80053d6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80053d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053da:	685a      	ldr	r2, [r3, #4]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	1ad2      	subs	r2, r2, r3
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80053e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80053ea:	69b8      	ldr	r0, [r7, #24]
 80053ec:	f000 f8f6 	bl	80055dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80053f0:	4b1a      	ldr	r3, [pc, #104]	; (800545c <pvPortMalloc+0x178>)
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	4a18      	ldr	r2, [pc, #96]	; (800545c <pvPortMalloc+0x178>)
 80053fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80053fe:	4b17      	ldr	r3, [pc, #92]	; (800545c <pvPortMalloc+0x178>)
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	4b18      	ldr	r3, [pc, #96]	; (8005464 <pvPortMalloc+0x180>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	429a      	cmp	r2, r3
 8005408:	d203      	bcs.n	8005412 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800540a:	4b14      	ldr	r3, [pc, #80]	; (800545c <pvPortMalloc+0x178>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a15      	ldr	r2, [pc, #84]	; (8005464 <pvPortMalloc+0x180>)
 8005410:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005414:	685a      	ldr	r2, [r3, #4]
 8005416:	4b10      	ldr	r3, [pc, #64]	; (8005458 <pvPortMalloc+0x174>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	431a      	orrs	r2, r3
 800541c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005422:	2200      	movs	r2, #0
 8005424:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005426:	f7fe fdc5 	bl	8003fb4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	f003 0307 	and.w	r3, r3, #7
 8005430:	2b00      	cmp	r3, #0
 8005432:	d009      	beq.n	8005448 <pvPortMalloc+0x164>
 8005434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005438:	f383 8811 	msr	BASEPRI, r3
 800543c:	f3bf 8f6f 	isb	sy
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	60fb      	str	r3, [r7, #12]
 8005446:	e7fe      	b.n	8005446 <pvPortMalloc+0x162>
	return pvReturn;
 8005448:	69fb      	ldr	r3, [r7, #28]
}
 800544a:	4618      	mov	r0, r3
 800544c:	3728      	adds	r7, #40	; 0x28
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	20001b1c 	.word	0x20001b1c
 8005458:	20001b28 	.word	0x20001b28
 800545c:	20001b20 	.word	0x20001b20
 8005460:	20001b14 	.word	0x20001b14
 8005464:	20001b24 	.word	0x20001b24

08005468 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b086      	sub	sp, #24
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d046      	beq.n	8005508 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800547a:	2308      	movs	r3, #8
 800547c:	425b      	negs	r3, r3
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	4413      	add	r3, r2
 8005482:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	685a      	ldr	r2, [r3, #4]
 800548c:	4b20      	ldr	r3, [pc, #128]	; (8005510 <vPortFree+0xa8>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4013      	ands	r3, r2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d109      	bne.n	80054aa <vPortFree+0x42>
 8005496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549a:	f383 8811 	msr	BASEPRI, r3
 800549e:	f3bf 8f6f 	isb	sy
 80054a2:	f3bf 8f4f 	dsb	sy
 80054a6:	60fb      	str	r3, [r7, #12]
 80054a8:	e7fe      	b.n	80054a8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d009      	beq.n	80054c6 <vPortFree+0x5e>
 80054b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b6:	f383 8811 	msr	BASEPRI, r3
 80054ba:	f3bf 8f6f 	isb	sy
 80054be:	f3bf 8f4f 	dsb	sy
 80054c2:	60bb      	str	r3, [r7, #8]
 80054c4:	e7fe      	b.n	80054c4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	4b11      	ldr	r3, [pc, #68]	; (8005510 <vPortFree+0xa8>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4013      	ands	r3, r2
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d019      	beq.n	8005508 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d115      	bne.n	8005508 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	685a      	ldr	r2, [r3, #4]
 80054e0:	4b0b      	ldr	r3, [pc, #44]	; (8005510 <vPortFree+0xa8>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	43db      	mvns	r3, r3
 80054e6:	401a      	ands	r2, r3
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80054ec:	f7fe fd54 	bl	8003f98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	4b07      	ldr	r3, [pc, #28]	; (8005514 <vPortFree+0xac>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4413      	add	r3, r2
 80054fa:	4a06      	ldr	r2, [pc, #24]	; (8005514 <vPortFree+0xac>)
 80054fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80054fe:	6938      	ldr	r0, [r7, #16]
 8005500:	f000 f86c 	bl	80055dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005504:	f7fe fd56 	bl	8003fb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005508:	bf00      	nop
 800550a:	3718      	adds	r7, #24
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	20001b28 	.word	0x20001b28
 8005514:	20001b20 	.word	0x20001b20

08005518 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800551e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005522:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005524:	4b27      	ldr	r3, [pc, #156]	; (80055c4 <prvHeapInit+0xac>)
 8005526:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f003 0307 	and.w	r3, r3, #7
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00c      	beq.n	800554c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	3307      	adds	r3, #7
 8005536:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f023 0307 	bic.w	r3, r3, #7
 800553e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	4a1f      	ldr	r2, [pc, #124]	; (80055c4 <prvHeapInit+0xac>)
 8005548:	4413      	add	r3, r2
 800554a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005550:	4a1d      	ldr	r2, [pc, #116]	; (80055c8 <prvHeapInit+0xb0>)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005556:	4b1c      	ldr	r3, [pc, #112]	; (80055c8 <prvHeapInit+0xb0>)
 8005558:	2200      	movs	r2, #0
 800555a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	68ba      	ldr	r2, [r7, #8]
 8005560:	4413      	add	r3, r2
 8005562:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005564:	2208      	movs	r2, #8
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	1a9b      	subs	r3, r3, r2
 800556a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f023 0307 	bic.w	r3, r3, #7
 8005572:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	4a15      	ldr	r2, [pc, #84]	; (80055cc <prvHeapInit+0xb4>)
 8005578:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800557a:	4b14      	ldr	r3, [pc, #80]	; (80055cc <prvHeapInit+0xb4>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2200      	movs	r2, #0
 8005580:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005582:	4b12      	ldr	r3, [pc, #72]	; (80055cc <prvHeapInit+0xb4>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2200      	movs	r2, #0
 8005588:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	1ad2      	subs	r2, r2, r3
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005598:	4b0c      	ldr	r3, [pc, #48]	; (80055cc <prvHeapInit+0xb4>)
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	4a0a      	ldr	r2, [pc, #40]	; (80055d0 <prvHeapInit+0xb8>)
 80055a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	4a09      	ldr	r2, [pc, #36]	; (80055d4 <prvHeapInit+0xbc>)
 80055ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80055b0:	4b09      	ldr	r3, [pc, #36]	; (80055d8 <prvHeapInit+0xc0>)
 80055b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80055b6:	601a      	str	r2, [r3, #0]
}
 80055b8:	bf00      	nop
 80055ba:	3714      	adds	r7, #20
 80055bc:	46bd      	mov	sp, r7
 80055be:	bc80      	pop	{r7}
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	20000f14 	.word	0x20000f14
 80055c8:	20001b14 	.word	0x20001b14
 80055cc:	20001b1c 	.word	0x20001b1c
 80055d0:	20001b24 	.word	0x20001b24
 80055d4:	20001b20 	.word	0x20001b20
 80055d8:	20001b28 	.word	0x20001b28

080055dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80055e4:	4b27      	ldr	r3, [pc, #156]	; (8005684 <prvInsertBlockIntoFreeList+0xa8>)
 80055e6:	60fb      	str	r3, [r7, #12]
 80055e8:	e002      	b.n	80055f0 <prvInsertBlockIntoFreeList+0x14>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d8f7      	bhi.n	80055ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	68ba      	ldr	r2, [r7, #8]
 8005604:	4413      	add	r3, r2
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	429a      	cmp	r2, r3
 800560a:	d108      	bne.n	800561e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	685a      	ldr	r2, [r3, #4]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	441a      	add	r2, r3
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	441a      	add	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	429a      	cmp	r2, r3
 8005630:	d118      	bne.n	8005664 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	4b14      	ldr	r3, [pc, #80]	; (8005688 <prvInsertBlockIntoFreeList+0xac>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	429a      	cmp	r2, r3
 800563c:	d00d      	beq.n	800565a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685a      	ldr	r2, [r3, #4]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	441a      	add	r2, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	601a      	str	r2, [r3, #0]
 8005658:	e008      	b.n	800566c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800565a:	4b0b      	ldr	r3, [pc, #44]	; (8005688 <prvInsertBlockIntoFreeList+0xac>)
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	601a      	str	r2, [r3, #0]
 8005662:	e003      	b.n	800566c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	429a      	cmp	r2, r3
 8005672:	d002      	beq.n	800567a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800567a:	bf00      	nop
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	bc80      	pop	{r7}
 8005682:	4770      	bx	lr
 8005684:	20001b14 	.word	0x20001b14
 8005688:	20001b1c 	.word	0x20001b1c

0800568c <atoi>:
 800568c:	220a      	movs	r2, #10
 800568e:	2100      	movs	r1, #0
 8005690:	f000 b916 	b.w	80058c0 <strtol>

08005694 <__errno>:
 8005694:	4b01      	ldr	r3, [pc, #4]	; (800569c <__errno+0x8>)
 8005696:	6818      	ldr	r0, [r3, #0]
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	20000034 	.word	0x20000034

080056a0 <__libc_init_array>:
 80056a0:	b570      	push	{r4, r5, r6, lr}
 80056a2:	2500      	movs	r5, #0
 80056a4:	4e0c      	ldr	r6, [pc, #48]	; (80056d8 <__libc_init_array+0x38>)
 80056a6:	4c0d      	ldr	r4, [pc, #52]	; (80056dc <__libc_init_array+0x3c>)
 80056a8:	1ba4      	subs	r4, r4, r6
 80056aa:	10a4      	asrs	r4, r4, #2
 80056ac:	42a5      	cmp	r5, r4
 80056ae:	d109      	bne.n	80056c4 <__libc_init_array+0x24>
 80056b0:	f000 f9b4 	bl	8005a1c <_init>
 80056b4:	2500      	movs	r5, #0
 80056b6:	4e0a      	ldr	r6, [pc, #40]	; (80056e0 <__libc_init_array+0x40>)
 80056b8:	4c0a      	ldr	r4, [pc, #40]	; (80056e4 <__libc_init_array+0x44>)
 80056ba:	1ba4      	subs	r4, r4, r6
 80056bc:	10a4      	asrs	r4, r4, #2
 80056be:	42a5      	cmp	r5, r4
 80056c0:	d105      	bne.n	80056ce <__libc_init_array+0x2e>
 80056c2:	bd70      	pop	{r4, r5, r6, pc}
 80056c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056c8:	4798      	blx	r3
 80056ca:	3501      	adds	r5, #1
 80056cc:	e7ee      	b.n	80056ac <__libc_init_array+0xc>
 80056ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056d2:	4798      	blx	r3
 80056d4:	3501      	adds	r5, #1
 80056d6:	e7f2      	b.n	80056be <__libc_init_array+0x1e>
 80056d8:	08005ee8 	.word	0x08005ee8
 80056dc:	08005ee8 	.word	0x08005ee8
 80056e0:	08005ee8 	.word	0x08005ee8
 80056e4:	08005eec 	.word	0x08005eec

080056e8 <memcpy>:
 80056e8:	b510      	push	{r4, lr}
 80056ea:	1e43      	subs	r3, r0, #1
 80056ec:	440a      	add	r2, r1
 80056ee:	4291      	cmp	r1, r2
 80056f0:	d100      	bne.n	80056f4 <memcpy+0xc>
 80056f2:	bd10      	pop	{r4, pc}
 80056f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056fc:	e7f7      	b.n	80056ee <memcpy+0x6>

080056fe <memset>:
 80056fe:	4603      	mov	r3, r0
 8005700:	4402      	add	r2, r0
 8005702:	4293      	cmp	r3, r2
 8005704:	d100      	bne.n	8005708 <memset+0xa>
 8005706:	4770      	bx	lr
 8005708:	f803 1b01 	strb.w	r1, [r3], #1
 800570c:	e7f9      	b.n	8005702 <memset+0x4>

0800570e <strcpy>:
 800570e:	4603      	mov	r3, r0
 8005710:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005714:	f803 2b01 	strb.w	r2, [r3], #1
 8005718:	2a00      	cmp	r2, #0
 800571a:	d1f9      	bne.n	8005710 <strcpy+0x2>
 800571c:	4770      	bx	lr
	...

08005720 <strtok>:
 8005720:	4b13      	ldr	r3, [pc, #76]	; (8005770 <strtok+0x50>)
 8005722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005726:	681d      	ldr	r5, [r3, #0]
 8005728:	4606      	mov	r6, r0
 800572a:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800572c:	460f      	mov	r7, r1
 800572e:	b9b4      	cbnz	r4, 800575e <strtok+0x3e>
 8005730:	2050      	movs	r0, #80	; 0x50
 8005732:	f000 f8df 	bl	80058f4 <malloc>
 8005736:	65a8      	str	r0, [r5, #88]	; 0x58
 8005738:	e9c0 4400 	strd	r4, r4, [r0]
 800573c:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005740:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005744:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005748:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800574c:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005750:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005754:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005758:	6184      	str	r4, [r0, #24]
 800575a:	7704      	strb	r4, [r0, #28]
 800575c:	6244      	str	r4, [r0, #36]	; 0x24
 800575e:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8005760:	4639      	mov	r1, r7
 8005762:	4630      	mov	r0, r6
 8005764:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005768:	2301      	movs	r3, #1
 800576a:	f000 b803 	b.w	8005774 <__strtok_r>
 800576e:	bf00      	nop
 8005770:	20000034 	.word	0x20000034

08005774 <__strtok_r>:
 8005774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005776:	b918      	cbnz	r0, 8005780 <__strtok_r+0xc>
 8005778:	6810      	ldr	r0, [r2, #0]
 800577a:	b908      	cbnz	r0, 8005780 <__strtok_r+0xc>
 800577c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800577e:	4620      	mov	r0, r4
 8005780:	4604      	mov	r4, r0
 8005782:	460f      	mov	r7, r1
 8005784:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005788:	f817 6b01 	ldrb.w	r6, [r7], #1
 800578c:	b91e      	cbnz	r6, 8005796 <__strtok_r+0x22>
 800578e:	b96d      	cbnz	r5, 80057ac <__strtok_r+0x38>
 8005790:	6015      	str	r5, [r2, #0]
 8005792:	4628      	mov	r0, r5
 8005794:	e7f2      	b.n	800577c <__strtok_r+0x8>
 8005796:	42b5      	cmp	r5, r6
 8005798:	d1f6      	bne.n	8005788 <__strtok_r+0x14>
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1ef      	bne.n	800577e <__strtok_r+0xa>
 800579e:	6014      	str	r4, [r2, #0]
 80057a0:	7003      	strb	r3, [r0, #0]
 80057a2:	e7eb      	b.n	800577c <__strtok_r+0x8>
 80057a4:	462b      	mov	r3, r5
 80057a6:	e00d      	b.n	80057c4 <__strtok_r+0x50>
 80057a8:	b926      	cbnz	r6, 80057b4 <__strtok_r+0x40>
 80057aa:	461c      	mov	r4, r3
 80057ac:	4623      	mov	r3, r4
 80057ae:	460f      	mov	r7, r1
 80057b0:	f813 5b01 	ldrb.w	r5, [r3], #1
 80057b4:	f817 6b01 	ldrb.w	r6, [r7], #1
 80057b8:	42b5      	cmp	r5, r6
 80057ba:	d1f5      	bne.n	80057a8 <__strtok_r+0x34>
 80057bc:	2d00      	cmp	r5, #0
 80057be:	d0f1      	beq.n	80057a4 <__strtok_r+0x30>
 80057c0:	2100      	movs	r1, #0
 80057c2:	7021      	strb	r1, [r4, #0]
 80057c4:	6013      	str	r3, [r2, #0]
 80057c6:	e7d9      	b.n	800577c <__strtok_r+0x8>

080057c8 <_strtol_l.isra.0>:
 80057c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057cc:	4680      	mov	r8, r0
 80057ce:	4689      	mov	r9, r1
 80057d0:	4692      	mov	sl, r2
 80057d2:	461e      	mov	r6, r3
 80057d4:	460f      	mov	r7, r1
 80057d6:	463d      	mov	r5, r7
 80057d8:	9808      	ldr	r0, [sp, #32]
 80057da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80057de:	f000 f885 	bl	80058ec <__locale_ctype_ptr_l>
 80057e2:	4420      	add	r0, r4
 80057e4:	7843      	ldrb	r3, [r0, #1]
 80057e6:	f013 0308 	ands.w	r3, r3, #8
 80057ea:	d132      	bne.n	8005852 <_strtol_l.isra.0+0x8a>
 80057ec:	2c2d      	cmp	r4, #45	; 0x2d
 80057ee:	d132      	bne.n	8005856 <_strtol_l.isra.0+0x8e>
 80057f0:	2201      	movs	r2, #1
 80057f2:	787c      	ldrb	r4, [r7, #1]
 80057f4:	1cbd      	adds	r5, r7, #2
 80057f6:	2e00      	cmp	r6, #0
 80057f8:	d05d      	beq.n	80058b6 <_strtol_l.isra.0+0xee>
 80057fa:	2e10      	cmp	r6, #16
 80057fc:	d109      	bne.n	8005812 <_strtol_l.isra.0+0x4a>
 80057fe:	2c30      	cmp	r4, #48	; 0x30
 8005800:	d107      	bne.n	8005812 <_strtol_l.isra.0+0x4a>
 8005802:	782b      	ldrb	r3, [r5, #0]
 8005804:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005808:	2b58      	cmp	r3, #88	; 0x58
 800580a:	d14f      	bne.n	80058ac <_strtol_l.isra.0+0xe4>
 800580c:	2610      	movs	r6, #16
 800580e:	786c      	ldrb	r4, [r5, #1]
 8005810:	3502      	adds	r5, #2
 8005812:	2a00      	cmp	r2, #0
 8005814:	bf14      	ite	ne
 8005816:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800581a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800581e:	2700      	movs	r7, #0
 8005820:	fbb1 fcf6 	udiv	ip, r1, r6
 8005824:	4638      	mov	r0, r7
 8005826:	fb06 1e1c 	mls	lr, r6, ip, r1
 800582a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800582e:	2b09      	cmp	r3, #9
 8005830:	d817      	bhi.n	8005862 <_strtol_l.isra.0+0x9a>
 8005832:	461c      	mov	r4, r3
 8005834:	42a6      	cmp	r6, r4
 8005836:	dd23      	ble.n	8005880 <_strtol_l.isra.0+0xb8>
 8005838:	1c7b      	adds	r3, r7, #1
 800583a:	d007      	beq.n	800584c <_strtol_l.isra.0+0x84>
 800583c:	4584      	cmp	ip, r0
 800583e:	d31c      	bcc.n	800587a <_strtol_l.isra.0+0xb2>
 8005840:	d101      	bne.n	8005846 <_strtol_l.isra.0+0x7e>
 8005842:	45a6      	cmp	lr, r4
 8005844:	db19      	blt.n	800587a <_strtol_l.isra.0+0xb2>
 8005846:	2701      	movs	r7, #1
 8005848:	fb00 4006 	mla	r0, r0, r6, r4
 800584c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005850:	e7eb      	b.n	800582a <_strtol_l.isra.0+0x62>
 8005852:	462f      	mov	r7, r5
 8005854:	e7bf      	b.n	80057d6 <_strtol_l.isra.0+0xe>
 8005856:	2c2b      	cmp	r4, #43	; 0x2b
 8005858:	bf04      	itt	eq
 800585a:	1cbd      	addeq	r5, r7, #2
 800585c:	787c      	ldrbeq	r4, [r7, #1]
 800585e:	461a      	mov	r2, r3
 8005860:	e7c9      	b.n	80057f6 <_strtol_l.isra.0+0x2e>
 8005862:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005866:	2b19      	cmp	r3, #25
 8005868:	d801      	bhi.n	800586e <_strtol_l.isra.0+0xa6>
 800586a:	3c37      	subs	r4, #55	; 0x37
 800586c:	e7e2      	b.n	8005834 <_strtol_l.isra.0+0x6c>
 800586e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005872:	2b19      	cmp	r3, #25
 8005874:	d804      	bhi.n	8005880 <_strtol_l.isra.0+0xb8>
 8005876:	3c57      	subs	r4, #87	; 0x57
 8005878:	e7dc      	b.n	8005834 <_strtol_l.isra.0+0x6c>
 800587a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800587e:	e7e5      	b.n	800584c <_strtol_l.isra.0+0x84>
 8005880:	1c7b      	adds	r3, r7, #1
 8005882:	d108      	bne.n	8005896 <_strtol_l.isra.0+0xce>
 8005884:	2322      	movs	r3, #34	; 0x22
 8005886:	4608      	mov	r0, r1
 8005888:	f8c8 3000 	str.w	r3, [r8]
 800588c:	f1ba 0f00 	cmp.w	sl, #0
 8005890:	d107      	bne.n	80058a2 <_strtol_l.isra.0+0xda>
 8005892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005896:	b102      	cbz	r2, 800589a <_strtol_l.isra.0+0xd2>
 8005898:	4240      	negs	r0, r0
 800589a:	f1ba 0f00 	cmp.w	sl, #0
 800589e:	d0f8      	beq.n	8005892 <_strtol_l.isra.0+0xca>
 80058a0:	b10f      	cbz	r7, 80058a6 <_strtol_l.isra.0+0xde>
 80058a2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80058a6:	f8ca 9000 	str.w	r9, [sl]
 80058aa:	e7f2      	b.n	8005892 <_strtol_l.isra.0+0xca>
 80058ac:	2430      	movs	r4, #48	; 0x30
 80058ae:	2e00      	cmp	r6, #0
 80058b0:	d1af      	bne.n	8005812 <_strtol_l.isra.0+0x4a>
 80058b2:	2608      	movs	r6, #8
 80058b4:	e7ad      	b.n	8005812 <_strtol_l.isra.0+0x4a>
 80058b6:	2c30      	cmp	r4, #48	; 0x30
 80058b8:	d0a3      	beq.n	8005802 <_strtol_l.isra.0+0x3a>
 80058ba:	260a      	movs	r6, #10
 80058bc:	e7a9      	b.n	8005812 <_strtol_l.isra.0+0x4a>
	...

080058c0 <strtol>:
 80058c0:	4b08      	ldr	r3, [pc, #32]	; (80058e4 <strtol+0x24>)
 80058c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058c4:	681c      	ldr	r4, [r3, #0]
 80058c6:	4d08      	ldr	r5, [pc, #32]	; (80058e8 <strtol+0x28>)
 80058c8:	6a23      	ldr	r3, [r4, #32]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	bf08      	it	eq
 80058ce:	462b      	moveq	r3, r5
 80058d0:	9300      	str	r3, [sp, #0]
 80058d2:	4613      	mov	r3, r2
 80058d4:	460a      	mov	r2, r1
 80058d6:	4601      	mov	r1, r0
 80058d8:	4620      	mov	r0, r4
 80058da:	f7ff ff75 	bl	80057c8 <_strtol_l.isra.0>
 80058de:	b003      	add	sp, #12
 80058e0:	bd30      	pop	{r4, r5, pc}
 80058e2:	bf00      	nop
 80058e4:	20000034 	.word	0x20000034
 80058e8:	20000098 	.word	0x20000098

080058ec <__locale_ctype_ptr_l>:
 80058ec:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80058f0:	4770      	bx	lr
	...

080058f4 <malloc>:
 80058f4:	4b02      	ldr	r3, [pc, #8]	; (8005900 <malloc+0xc>)
 80058f6:	4601      	mov	r1, r0
 80058f8:	6818      	ldr	r0, [r3, #0]
 80058fa:	f000 b815 	b.w	8005928 <_malloc_r>
 80058fe:	bf00      	nop
 8005900:	20000034 	.word	0x20000034

08005904 <__ascii_mbtowc>:
 8005904:	b082      	sub	sp, #8
 8005906:	b901      	cbnz	r1, 800590a <__ascii_mbtowc+0x6>
 8005908:	a901      	add	r1, sp, #4
 800590a:	b142      	cbz	r2, 800591e <__ascii_mbtowc+0x1a>
 800590c:	b14b      	cbz	r3, 8005922 <__ascii_mbtowc+0x1e>
 800590e:	7813      	ldrb	r3, [r2, #0]
 8005910:	600b      	str	r3, [r1, #0]
 8005912:	7812      	ldrb	r2, [r2, #0]
 8005914:	1c10      	adds	r0, r2, #0
 8005916:	bf18      	it	ne
 8005918:	2001      	movne	r0, #1
 800591a:	b002      	add	sp, #8
 800591c:	4770      	bx	lr
 800591e:	4610      	mov	r0, r2
 8005920:	e7fb      	b.n	800591a <__ascii_mbtowc+0x16>
 8005922:	f06f 0001 	mvn.w	r0, #1
 8005926:	e7f8      	b.n	800591a <__ascii_mbtowc+0x16>

08005928 <_malloc_r>:
 8005928:	b570      	push	{r4, r5, r6, lr}
 800592a:	1ccd      	adds	r5, r1, #3
 800592c:	f025 0503 	bic.w	r5, r5, #3
 8005930:	3508      	adds	r5, #8
 8005932:	2d0c      	cmp	r5, #12
 8005934:	bf38      	it	cc
 8005936:	250c      	movcc	r5, #12
 8005938:	2d00      	cmp	r5, #0
 800593a:	4606      	mov	r6, r0
 800593c:	db01      	blt.n	8005942 <_malloc_r+0x1a>
 800593e:	42a9      	cmp	r1, r5
 8005940:	d903      	bls.n	800594a <_malloc_r+0x22>
 8005942:	230c      	movs	r3, #12
 8005944:	6033      	str	r3, [r6, #0]
 8005946:	2000      	movs	r0, #0
 8005948:	bd70      	pop	{r4, r5, r6, pc}
 800594a:	f000 f864 	bl	8005a16 <__malloc_lock>
 800594e:	4a21      	ldr	r2, [pc, #132]	; (80059d4 <_malloc_r+0xac>)
 8005950:	6814      	ldr	r4, [r2, #0]
 8005952:	4621      	mov	r1, r4
 8005954:	b991      	cbnz	r1, 800597c <_malloc_r+0x54>
 8005956:	4c20      	ldr	r4, [pc, #128]	; (80059d8 <_malloc_r+0xb0>)
 8005958:	6823      	ldr	r3, [r4, #0]
 800595a:	b91b      	cbnz	r3, 8005964 <_malloc_r+0x3c>
 800595c:	4630      	mov	r0, r6
 800595e:	f000 f83d 	bl	80059dc <_sbrk_r>
 8005962:	6020      	str	r0, [r4, #0]
 8005964:	4629      	mov	r1, r5
 8005966:	4630      	mov	r0, r6
 8005968:	f000 f838 	bl	80059dc <_sbrk_r>
 800596c:	1c43      	adds	r3, r0, #1
 800596e:	d124      	bne.n	80059ba <_malloc_r+0x92>
 8005970:	230c      	movs	r3, #12
 8005972:	4630      	mov	r0, r6
 8005974:	6033      	str	r3, [r6, #0]
 8005976:	f000 f84f 	bl	8005a18 <__malloc_unlock>
 800597a:	e7e4      	b.n	8005946 <_malloc_r+0x1e>
 800597c:	680b      	ldr	r3, [r1, #0]
 800597e:	1b5b      	subs	r3, r3, r5
 8005980:	d418      	bmi.n	80059b4 <_malloc_r+0x8c>
 8005982:	2b0b      	cmp	r3, #11
 8005984:	d90f      	bls.n	80059a6 <_malloc_r+0x7e>
 8005986:	600b      	str	r3, [r1, #0]
 8005988:	18cc      	adds	r4, r1, r3
 800598a:	50cd      	str	r5, [r1, r3]
 800598c:	4630      	mov	r0, r6
 800598e:	f000 f843 	bl	8005a18 <__malloc_unlock>
 8005992:	f104 000b 	add.w	r0, r4, #11
 8005996:	1d23      	adds	r3, r4, #4
 8005998:	f020 0007 	bic.w	r0, r0, #7
 800599c:	1ac3      	subs	r3, r0, r3
 800599e:	d0d3      	beq.n	8005948 <_malloc_r+0x20>
 80059a0:	425a      	negs	r2, r3
 80059a2:	50e2      	str	r2, [r4, r3]
 80059a4:	e7d0      	b.n	8005948 <_malloc_r+0x20>
 80059a6:	684b      	ldr	r3, [r1, #4]
 80059a8:	428c      	cmp	r4, r1
 80059aa:	bf16      	itet	ne
 80059ac:	6063      	strne	r3, [r4, #4]
 80059ae:	6013      	streq	r3, [r2, #0]
 80059b0:	460c      	movne	r4, r1
 80059b2:	e7eb      	b.n	800598c <_malloc_r+0x64>
 80059b4:	460c      	mov	r4, r1
 80059b6:	6849      	ldr	r1, [r1, #4]
 80059b8:	e7cc      	b.n	8005954 <_malloc_r+0x2c>
 80059ba:	1cc4      	adds	r4, r0, #3
 80059bc:	f024 0403 	bic.w	r4, r4, #3
 80059c0:	42a0      	cmp	r0, r4
 80059c2:	d005      	beq.n	80059d0 <_malloc_r+0xa8>
 80059c4:	1a21      	subs	r1, r4, r0
 80059c6:	4630      	mov	r0, r6
 80059c8:	f000 f808 	bl	80059dc <_sbrk_r>
 80059cc:	3001      	adds	r0, #1
 80059ce:	d0cf      	beq.n	8005970 <_malloc_r+0x48>
 80059d0:	6025      	str	r5, [r4, #0]
 80059d2:	e7db      	b.n	800598c <_malloc_r+0x64>
 80059d4:	20001b2c 	.word	0x20001b2c
 80059d8:	20001b30 	.word	0x20001b30

080059dc <_sbrk_r>:
 80059dc:	b538      	push	{r3, r4, r5, lr}
 80059de:	2300      	movs	r3, #0
 80059e0:	4c05      	ldr	r4, [pc, #20]	; (80059f8 <_sbrk_r+0x1c>)
 80059e2:	4605      	mov	r5, r0
 80059e4:	4608      	mov	r0, r1
 80059e6:	6023      	str	r3, [r4, #0]
 80059e8:	f7fb fb82 	bl	80010f0 <_sbrk>
 80059ec:	1c43      	adds	r3, r0, #1
 80059ee:	d102      	bne.n	80059f6 <_sbrk_r+0x1a>
 80059f0:	6823      	ldr	r3, [r4, #0]
 80059f2:	b103      	cbz	r3, 80059f6 <_sbrk_r+0x1a>
 80059f4:	602b      	str	r3, [r5, #0]
 80059f6:	bd38      	pop	{r3, r4, r5, pc}
 80059f8:	20001c84 	.word	0x20001c84

080059fc <__ascii_wctomb>:
 80059fc:	b149      	cbz	r1, 8005a12 <__ascii_wctomb+0x16>
 80059fe:	2aff      	cmp	r2, #255	; 0xff
 8005a00:	bf8b      	itete	hi
 8005a02:	238a      	movhi	r3, #138	; 0x8a
 8005a04:	700a      	strbls	r2, [r1, #0]
 8005a06:	6003      	strhi	r3, [r0, #0]
 8005a08:	2001      	movls	r0, #1
 8005a0a:	bf88      	it	hi
 8005a0c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005a10:	4770      	bx	lr
 8005a12:	4608      	mov	r0, r1
 8005a14:	4770      	bx	lr

08005a16 <__malloc_lock>:
 8005a16:	4770      	bx	lr

08005a18 <__malloc_unlock>:
 8005a18:	4770      	bx	lr
	...

08005a1c <_init>:
 8005a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a1e:	bf00      	nop
 8005a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a22:	bc08      	pop	{r3}
 8005a24:	469e      	mov	lr, r3
 8005a26:	4770      	bx	lr

08005a28 <_fini>:
 8005a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a2a:	bf00      	nop
 8005a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a2e:	bc08      	pop	{r3}
 8005a30:	469e      	mov	lr, r3
 8005a32:	4770      	bx	lr
