
LabProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c10  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  08005d20  08005d20  00015d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fdc  08005fdc  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  08005fdc  08005fdc  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005fdc  08005fdc  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fdc  08005fdc  00015fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fe0  08005fe0  00015fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08005fe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a90  2000009c  08006080  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b2c  08006080  00021b2c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000180d3  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003001  00000000  00000000  00038198  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001308  00000000  00000000  0003b1a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011a0  00000000  00000000  0003c4a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000193cb  00000000  00000000  0003d648  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010657  00000000  00000000  00056a13  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009411d  00000000  00000000  0006706a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fb187  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005260  00000000  00000000  000fb204  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000009c 	.word	0x2000009c
 800012c:	00000000 	.word	0x00000000
 8000130:	08005d08 	.word	0x08005d08

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000a0 	.word	0x200000a0
 800014c:	08005d08 	.word	0x08005d08

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <isCompleteLine>:
 */

#include "CLI.h"

bool isCompleteLine(char recBuffer[10])
{
 8000164:	b480      	push	{r7}
 8000166:	b083      	sub	sp, #12
 8000168:	af00      	add	r7, sp, #0
 800016a:	6078      	str	r0, [r7, #4]
	//if enter was hit, then it is a complete line, else it isnt
	if(recBuffer[0] == '\r')
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	781b      	ldrb	r3, [r3, #0]
 8000170:	2b0d      	cmp	r3, #13
 8000172:	d101      	bne.n	8000178 <isCompleteLine+0x14>
	{
		return true;
 8000174:	2301      	movs	r3, #1
 8000176:	e000      	b.n	800017a <isCompleteLine+0x16>
	}
	else
	{
		return false;
 8000178:	2300      	movs	r3, #0
	}
}
 800017a:	4618      	mov	r0, r3
 800017c:	370c      	adds	r7, #12
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr

08000184 <copyCharTo>:

void copyCharTo(char recBuffer[10], char s[40], int coun)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b084      	sub	sp, #16
 8000188:	af00      	add	r7, sp, #0
 800018a:	60f8      	str	r0, [r7, #12]
 800018c:	60b9      	str	r1, [r7, #8]
 800018e:	607a      	str	r2, [r7, #4]

		  if(recBuffer[0] == '\b')
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	781b      	ldrb	r3, [r3, #0]
 8000194:	2b08      	cmp	r3, #8
 8000196:	d103      	bne.n	80001a0 <copyCharTo+0x1c>
		  {
			  printString("\b \b");
 8000198:	4808      	ldr	r0, [pc, #32]	; (80001bc <copyCharTo+0x38>)
 800019a:	f000 f811 	bl	80001c0 <printString>
		  {
			  s[coun] = recBuffer[0];
			  printString(recBuffer);

		  }
}
 800019e:	e008      	b.n	80001b2 <copyCharTo+0x2e>
			  s[coun] = recBuffer[0];
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	68ba      	ldr	r2, [r7, #8]
 80001a4:	4413      	add	r3, r2
 80001a6:	68fa      	ldr	r2, [r7, #12]
 80001a8:	7812      	ldrb	r2, [r2, #0]
 80001aa:	701a      	strb	r2, [r3, #0]
			  printString(recBuffer);
 80001ac:	68f8      	ldr	r0, [r7, #12]
 80001ae:	f000 f807 	bl	80001c0 <printString>
}
 80001b2:	bf00      	nop
 80001b4:	3710      	adds	r7, #16
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bd80      	pop	{r7, pc}
 80001ba:	bf00      	nop
 80001bc:	08005d20 	.word	0x08005d20

080001c0 <printString>:
//		  HAL_UART_Transmit(&huart3, (char *)recBuffer, strlen((char *)recBuffer), 1000);
//	  }
//}

void printString(const char* mess)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b086      	sub	sp, #24
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	6078      	str	r0, [r7, #4]
	int i = 0;
 80001c8:	2300      	movs	r3, #0
 80001ca:	617b      	str	r3, [r7, #20]
	HAL_StatusTypeDef  st;

	while(huart3.gState == HAL_UART_STATE_BUSY_TX){}
 80001cc:	bf00      	nop
 80001ce:	4b16      	ldr	r3, [pc, #88]	; (8000228 <printString+0x68>)
 80001d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80001d4:	b2db      	uxtb	r3, r3
 80001d6:	2b21      	cmp	r3, #33	; 0x21
 80001d8:	d0f9      	beq.n	80001ce <printString+0xe>

	for(const char* p = mess; *p; ++p)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	613b      	str	r3, [r7, #16]
 80001de:	e00c      	b.n	80001fa <printString+0x3a>
	{
		cliBufferTX[i] = *p;
 80001e0:	693b      	ldr	r3, [r7, #16]
 80001e2:	7819      	ldrb	r1, [r3, #0]
 80001e4:	4a11      	ldr	r2, [pc, #68]	; (800022c <printString+0x6c>)
 80001e6:	697b      	ldr	r3, [r7, #20]
 80001e8:	4413      	add	r3, r2
 80001ea:	460a      	mov	r2, r1
 80001ec:	701a      	strb	r2, [r3, #0]
		i++;
 80001ee:	697b      	ldr	r3, [r7, #20]
 80001f0:	3301      	adds	r3, #1
 80001f2:	617b      	str	r3, [r7, #20]
	for(const char* p = mess; *p; ++p)
 80001f4:	693b      	ldr	r3, [r7, #16]
 80001f6:	3301      	adds	r3, #1
 80001f8:	613b      	str	r3, [r7, #16]
 80001fa:	693b      	ldr	r3, [r7, #16]
 80001fc:	781b      	ldrb	r3, [r3, #0]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d1ee      	bne.n	80001e0 <printString+0x20>
	}

	st = HAL_UART_Transmit(&huart3, cliBufferTX, i, 1000);
 8000202:	697b      	ldr	r3, [r7, #20]
 8000204:	b29a      	uxth	r2, r3
 8000206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800020a:	4908      	ldr	r1, [pc, #32]	; (800022c <printString+0x6c>)
 800020c:	4806      	ldr	r0, [pc, #24]	; (8000228 <printString+0x68>)
 800020e:	f002 f872 	bl	80022f6 <HAL_UART_Transmit>
 8000212:	4603      	mov	r3, r0
 8000214:	73fb      	strb	r3, [r7, #15]
	if(st != HAL_OK)
 8000216:	7bfb      	ldrb	r3, [r7, #15]
 8000218:	2b00      	cmp	r3, #0
 800021a:	d001      	beq.n	8000220 <printString+0x60>
	{
		Error_Handler();
 800021c:	f000 fd56 	bl	8000ccc <Error_Handler>
	}

}
 8000220:	bf00      	nop
 8000222:	3718      	adds	r7, #24
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	200019e0 	.word	0x200019e0
 800022c:	20001a20 	.word	0x20001a20

08000230 <lightState>:

#include "TrafficLight.h"


char lightState(char st)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	4603      	mov	r3, r0
 8000238:	71fb      	strb	r3, [r7, #7]
	switch(st){
 800023a:	79fb      	ldrb	r3, [r7, #7]
 800023c:	3b61      	subs	r3, #97	; 0x61
 800023e:	2b18      	cmp	r3, #24
 8000240:	f200 81fc 	bhi.w	800063c <lightState+0x40c>
 8000244:	a201      	add	r2, pc, #4	; (adr r2, 800024c <lightState+0x1c>)
 8000246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800024a:	bf00      	nop
 800024c:	080002b1 	.word	0x080002b1
 8000250:	08000313 	.word	0x08000313
 8000254:	08000375 	.word	0x08000375
 8000258:	080003d7 	.word	0x080003d7
 800025c:	08000439 	.word	0x08000439
 8000260:	0800049b 	.word	0x0800049b
 8000264:	080004fd 	.word	0x080004fd
 8000268:	0800055f 	.word	0x0800055f
 800026c:	0800063d 	.word	0x0800063d
 8000270:	0800063d 	.word	0x0800063d
 8000274:	0800063d 	.word	0x0800063d
 8000278:	0800063d 	.word	0x0800063d
 800027c:	0800063d 	.word	0x0800063d
 8000280:	0800063d 	.word	0x0800063d
 8000284:	0800063d 	.word	0x0800063d
 8000288:	0800063d 	.word	0x0800063d
 800028c:	0800063d 	.word	0x0800063d
 8000290:	0800063d 	.word	0x0800063d
 8000294:	0800063d 	.word	0x0800063d
 8000298:	0800063d 	.word	0x0800063d
 800029c:	0800063d 	.word	0x0800063d
 80002a0:	0800063d 	.word	0x0800063d
 80002a4:	0800063d 	.word	0x0800063d
 80002a8:	080005c9 	.word	0x080005c9
 80002ac:	0800062b 	.word	0x0800062b

	case 'a':
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_RESET);
 80002b0:	2200      	movs	r2, #0
 80002b2:	2140      	movs	r1, #64	; 0x40
 80002b4:	48c2      	ldr	r0, [pc, #776]	; (80005c0 <lightState+0x390>)
 80002b6:	f001 f909 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Y1_Pin, GPIO_PIN_SET);
 80002ba:	2201      	movs	r2, #1
 80002bc:	2180      	movs	r1, #128	; 0x80
 80002be:	48c0      	ldr	r0, [pc, #768]	; (80005c0 <lightState+0x390>)
 80002c0:	f001 f904 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, G1_Pin, GPIO_PIN_SET);
 80002c4:	2201      	movs	r2, #1
 80002c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ca:	48bd      	ldr	r0, [pc, #756]	; (80005c0 <lightState+0x390>)
 80002cc:	f001 f8fe 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, B1_Pin, GPIO_PIN_SET);
 80002d0:	2201      	movs	r2, #1
 80002d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002d6:	48ba      	ldr	r0, [pc, #744]	; (80005c0 <lightState+0x390>)
 80002d8:	f001 f8f8 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, R2_Pin, GPIO_PIN_RESET);
 80002dc:	2200      	movs	r2, #0
 80002de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002e2:	48b8      	ldr	r0, [pc, #736]	; (80005c4 <lightState+0x394>)
 80002e4:	f001 f8f2 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_SET);
 80002e8:	2201      	movs	r2, #1
 80002ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002ee:	48b5      	ldr	r0, [pc, #724]	; (80005c4 <lightState+0x394>)
 80002f0:	f001 f8ec 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_SET);
 80002f4:	2201      	movs	r2, #1
 80002f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002fa:	48b2      	ldr	r0, [pc, #712]	; (80005c4 <lightState+0x394>)
 80002fc:	f001 f8e6 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, B2_Pin, GPIO_PIN_SET);
 8000300:	2201      	movs	r2, #1
 8000302:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000306:	48af      	ldr	r0, [pc, #700]	; (80005c4 <lightState+0x394>)
 8000308:	f001 f8e0 	bl	80014cc <HAL_GPIO_WritePin>
		st = 'b';
 800030c:	2362      	movs	r3, #98	; 0x62
 800030e:	71fb      	strb	r3, [r7, #7]
		break;
 8000310:	e197      	b.n	8000642 <lightState+0x412>

	case 'b':
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_SET);
 8000312:	2201      	movs	r2, #1
 8000314:	2140      	movs	r1, #64	; 0x40
 8000316:	48aa      	ldr	r0, [pc, #680]	; (80005c0 <lightState+0x390>)
 8000318:	f001 f8d8 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Y1_Pin, GPIO_PIN_SET);
 800031c:	2201      	movs	r2, #1
 800031e:	2180      	movs	r1, #128	; 0x80
 8000320:	48a7      	ldr	r0, [pc, #668]	; (80005c0 <lightState+0x390>)
 8000322:	f001 f8d3 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, G1_Pin, GPIO_PIN_RESET);
 8000326:	2200      	movs	r2, #0
 8000328:	f44f 7180 	mov.w	r1, #256	; 0x100
 800032c:	48a4      	ldr	r0, [pc, #656]	; (80005c0 <lightState+0x390>)
 800032e:	f001 f8cd 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, B1_Pin, GPIO_PIN_RESET);
 8000332:	2200      	movs	r2, #0
 8000334:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000338:	48a1      	ldr	r0, [pc, #644]	; (80005c0 <lightState+0x390>)
 800033a:	f001 f8c7 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, R2_Pin, GPIO_PIN_RESET);
 800033e:	2200      	movs	r2, #0
 8000340:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000344:	489f      	ldr	r0, [pc, #636]	; (80005c4 <lightState+0x394>)
 8000346:	f001 f8c1 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_SET);
 800034a:	2201      	movs	r2, #1
 800034c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000350:	489c      	ldr	r0, [pc, #624]	; (80005c4 <lightState+0x394>)
 8000352:	f001 f8bb 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_SET);
 8000356:	2201      	movs	r2, #1
 8000358:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800035c:	4899      	ldr	r0, [pc, #612]	; (80005c4 <lightState+0x394>)
 800035e:	f001 f8b5 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, B2_Pin, GPIO_PIN_SET);
 8000362:	2201      	movs	r2, #1
 8000364:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000368:	4896      	ldr	r0, [pc, #600]	; (80005c4 <lightState+0x394>)
 800036a:	f001 f8af 	bl	80014cc <HAL_GPIO_WritePin>
		st = 'c';
 800036e:	2363      	movs	r3, #99	; 0x63
 8000370:	71fb      	strb	r3, [r7, #7]
		break;
 8000372:	e166      	b.n	8000642 <lightState+0x412>

	case 'c':
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_SET);
 8000374:	2201      	movs	r2, #1
 8000376:	2140      	movs	r1, #64	; 0x40
 8000378:	4891      	ldr	r0, [pc, #580]	; (80005c0 <lightState+0x390>)
 800037a:	f001 f8a7 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Y1_Pin, GPIO_PIN_SET);
 800037e:	2201      	movs	r2, #1
 8000380:	2180      	movs	r1, #128	; 0x80
 8000382:	488f      	ldr	r0, [pc, #572]	; (80005c0 <lightState+0x390>)
 8000384:	f001 f8a2 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, G1_Pin, GPIO_PIN_RESET);
 8000388:	2200      	movs	r2, #0
 800038a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800038e:	488c      	ldr	r0, [pc, #560]	; (80005c0 <lightState+0x390>)
 8000390:	f001 f89c 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, B1_Pin, GPIO_PIN_SET);
 8000394:	2201      	movs	r2, #1
 8000396:	f44f 7100 	mov.w	r1, #512	; 0x200
 800039a:	4889      	ldr	r0, [pc, #548]	; (80005c0 <lightState+0x390>)
 800039c:	f001 f896 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, R2_Pin, GPIO_PIN_RESET);
 80003a0:	2200      	movs	r2, #0
 80003a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003a6:	4887      	ldr	r0, [pc, #540]	; (80005c4 <lightState+0x394>)
 80003a8:	f001 f890 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_SET);
 80003ac:	2201      	movs	r2, #1
 80003ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003b2:	4884      	ldr	r0, [pc, #528]	; (80005c4 <lightState+0x394>)
 80003b4:	f001 f88a 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_SET);
 80003b8:	2201      	movs	r2, #1
 80003ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003be:	4881      	ldr	r0, [pc, #516]	; (80005c4 <lightState+0x394>)
 80003c0:	f001 f884 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, B2_Pin, GPIO_PIN_SET);
 80003c4:	2201      	movs	r2, #1
 80003c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003ca:	487e      	ldr	r0, [pc, #504]	; (80005c4 <lightState+0x394>)
 80003cc:	f001 f87e 	bl	80014cc <HAL_GPIO_WritePin>
		st = 'd';
 80003d0:	2364      	movs	r3, #100	; 0x64
 80003d2:	71fb      	strb	r3, [r7, #7]
		break;
 80003d4:	e135      	b.n	8000642 <lightState+0x412>

	case 'd':
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_SET);
 80003d6:	2201      	movs	r2, #1
 80003d8:	2140      	movs	r1, #64	; 0x40
 80003da:	4879      	ldr	r0, [pc, #484]	; (80005c0 <lightState+0x390>)
 80003dc:	f001 f876 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Y1_Pin, GPIO_PIN_RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2180      	movs	r1, #128	; 0x80
 80003e4:	4876      	ldr	r0, [pc, #472]	; (80005c0 <lightState+0x390>)
 80003e6:	f001 f871 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, G1_Pin, GPIO_PIN_SET);
 80003ea:	2201      	movs	r2, #1
 80003ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003f0:	4873      	ldr	r0, [pc, #460]	; (80005c0 <lightState+0x390>)
 80003f2:	f001 f86b 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, B1_Pin, GPIO_PIN_SET);
 80003f6:	2201      	movs	r2, #1
 80003f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003fc:	4870      	ldr	r0, [pc, #448]	; (80005c0 <lightState+0x390>)
 80003fe:	f001 f865 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, R2_Pin, GPIO_PIN_RESET);
 8000402:	2200      	movs	r2, #0
 8000404:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000408:	486e      	ldr	r0, [pc, #440]	; (80005c4 <lightState+0x394>)
 800040a:	f001 f85f 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_SET);
 800040e:	2201      	movs	r2, #1
 8000410:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000414:	486b      	ldr	r0, [pc, #428]	; (80005c4 <lightState+0x394>)
 8000416:	f001 f859 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_SET);
 800041a:	2201      	movs	r2, #1
 800041c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000420:	4868      	ldr	r0, [pc, #416]	; (80005c4 <lightState+0x394>)
 8000422:	f001 f853 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, B2_Pin, GPIO_PIN_SET);
 8000426:	2201      	movs	r2, #1
 8000428:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800042c:	4865      	ldr	r0, [pc, #404]	; (80005c4 <lightState+0x394>)
 800042e:	f001 f84d 	bl	80014cc <HAL_GPIO_WritePin>
		st = 'e';
 8000432:	2365      	movs	r3, #101	; 0x65
 8000434:	71fb      	strb	r3, [r7, #7]
		break;
 8000436:	e104      	b.n	8000642 <lightState+0x412>

	case 'e':
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_RESET);
 8000438:	2200      	movs	r2, #0
 800043a:	2140      	movs	r1, #64	; 0x40
 800043c:	4860      	ldr	r0, [pc, #384]	; (80005c0 <lightState+0x390>)
 800043e:	f001 f845 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Y1_Pin, GPIO_PIN_SET);
 8000442:	2201      	movs	r2, #1
 8000444:	2180      	movs	r1, #128	; 0x80
 8000446:	485e      	ldr	r0, [pc, #376]	; (80005c0 <lightState+0x390>)
 8000448:	f001 f840 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, G1_Pin, GPIO_PIN_SET);
 800044c:	2201      	movs	r2, #1
 800044e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000452:	485b      	ldr	r0, [pc, #364]	; (80005c0 <lightState+0x390>)
 8000454:	f001 f83a 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, B1_Pin, GPIO_PIN_SET);
 8000458:	2201      	movs	r2, #1
 800045a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800045e:	4858      	ldr	r0, [pc, #352]	; (80005c0 <lightState+0x390>)
 8000460:	f001 f834 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, R2_Pin, GPIO_PIN_RESET);
 8000464:	2200      	movs	r2, #0
 8000466:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800046a:	4856      	ldr	r0, [pc, #344]	; (80005c4 <lightState+0x394>)
 800046c:	f001 f82e 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_SET);
 8000470:	2201      	movs	r2, #1
 8000472:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000476:	4853      	ldr	r0, [pc, #332]	; (80005c4 <lightState+0x394>)
 8000478:	f001 f828 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_SET);
 800047c:	2201      	movs	r2, #1
 800047e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000482:	4850      	ldr	r0, [pc, #320]	; (80005c4 <lightState+0x394>)
 8000484:	f001 f822 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, B2_Pin, GPIO_PIN_SET);
 8000488:	2201      	movs	r2, #1
 800048a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800048e:	484d      	ldr	r0, [pc, #308]	; (80005c4 <lightState+0x394>)
 8000490:	f001 f81c 	bl	80014cc <HAL_GPIO_WritePin>
		st = 'f';
 8000494:	2366      	movs	r3, #102	; 0x66
 8000496:	71fb      	strb	r3, [r7, #7]
		break;
 8000498:	e0d3      	b.n	8000642 <lightState+0x412>

	case 'f':
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	2140      	movs	r1, #64	; 0x40
 800049e:	4848      	ldr	r0, [pc, #288]	; (80005c0 <lightState+0x390>)
 80004a0:	f001 f814 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Y1_Pin, GPIO_PIN_SET);
 80004a4:	2201      	movs	r2, #1
 80004a6:	2180      	movs	r1, #128	; 0x80
 80004a8:	4845      	ldr	r0, [pc, #276]	; (80005c0 <lightState+0x390>)
 80004aa:	f001 f80f 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, G1_Pin, GPIO_PIN_SET);
 80004ae:	2201      	movs	r2, #1
 80004b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004b4:	4842      	ldr	r0, [pc, #264]	; (80005c0 <lightState+0x390>)
 80004b6:	f001 f809 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, B1_Pin, GPIO_PIN_SET);
 80004ba:	2201      	movs	r2, #1
 80004bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004c0:	483f      	ldr	r0, [pc, #252]	; (80005c0 <lightState+0x390>)
 80004c2:	f001 f803 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, R2_Pin, GPIO_PIN_SET);
 80004c6:	2201      	movs	r2, #1
 80004c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004cc:	483d      	ldr	r0, [pc, #244]	; (80005c4 <lightState+0x394>)
 80004ce:	f000 fffd 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_SET);
 80004d2:	2201      	movs	r2, #1
 80004d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004d8:	483a      	ldr	r0, [pc, #232]	; (80005c4 <lightState+0x394>)
 80004da:	f000 fff7 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_RESET);
 80004de:	2200      	movs	r2, #0
 80004e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004e4:	4837      	ldr	r0, [pc, #220]	; (80005c4 <lightState+0x394>)
 80004e6:	f000 fff1 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, B2_Pin, GPIO_PIN_RESET);
 80004ea:	2200      	movs	r2, #0
 80004ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004f0:	4834      	ldr	r0, [pc, #208]	; (80005c4 <lightState+0x394>)
 80004f2:	f000 ffeb 	bl	80014cc <HAL_GPIO_WritePin>
		st = 'g';
 80004f6:	2367      	movs	r3, #103	; 0x67
 80004f8:	71fb      	strb	r3, [r7, #7]
		break;
 80004fa:	e0a2      	b.n	8000642 <lightState+0x412>

	case 'g':
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_RESET);
 80004fc:	2200      	movs	r2, #0
 80004fe:	2140      	movs	r1, #64	; 0x40
 8000500:	482f      	ldr	r0, [pc, #188]	; (80005c0 <lightState+0x390>)
 8000502:	f000 ffe3 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Y1_Pin, GPIO_PIN_SET);
 8000506:	2201      	movs	r2, #1
 8000508:	2180      	movs	r1, #128	; 0x80
 800050a:	482d      	ldr	r0, [pc, #180]	; (80005c0 <lightState+0x390>)
 800050c:	f000 ffde 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, G1_Pin, GPIO_PIN_SET);
 8000510:	2201      	movs	r2, #1
 8000512:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000516:	482a      	ldr	r0, [pc, #168]	; (80005c0 <lightState+0x390>)
 8000518:	f000 ffd8 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, B1_Pin, GPIO_PIN_SET);
 800051c:	2201      	movs	r2, #1
 800051e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000522:	4827      	ldr	r0, [pc, #156]	; (80005c0 <lightState+0x390>)
 8000524:	f000 ffd2 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, R2_Pin, GPIO_PIN_SET);
 8000528:	2201      	movs	r2, #1
 800052a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800052e:	4825      	ldr	r0, [pc, #148]	; (80005c4 <lightState+0x394>)
 8000530:	f000 ffcc 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_SET);
 8000534:	2201      	movs	r2, #1
 8000536:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800053a:	4822      	ldr	r0, [pc, #136]	; (80005c4 <lightState+0x394>)
 800053c:	f000 ffc6 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000546:	481f      	ldr	r0, [pc, #124]	; (80005c4 <lightState+0x394>)
 8000548:	f000 ffc0 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, B2_Pin, GPIO_PIN_SET);
 800054c:	2201      	movs	r2, #1
 800054e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000552:	481c      	ldr	r0, [pc, #112]	; (80005c4 <lightState+0x394>)
 8000554:	f000 ffba 	bl	80014cc <HAL_GPIO_WritePin>
		st = 'h';
 8000558:	2368      	movs	r3, #104	; 0x68
 800055a:	71fb      	strb	r3, [r7, #7]
		break;
 800055c:	e071      	b.n	8000642 <lightState+0x412>

	case 'h':
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	2140      	movs	r1, #64	; 0x40
 8000562:	4817      	ldr	r0, [pc, #92]	; (80005c0 <lightState+0x390>)
 8000564:	f000 ffb2 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Y1_Pin, GPIO_PIN_SET);
 8000568:	2201      	movs	r2, #1
 800056a:	2180      	movs	r1, #128	; 0x80
 800056c:	4814      	ldr	r0, [pc, #80]	; (80005c0 <lightState+0x390>)
 800056e:	f000 ffad 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, G1_Pin, GPIO_PIN_SET);
 8000572:	2201      	movs	r2, #1
 8000574:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000578:	4811      	ldr	r0, [pc, #68]	; (80005c0 <lightState+0x390>)
 800057a:	f000 ffa7 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, B1_Pin, GPIO_PIN_SET);
 800057e:	2201      	movs	r2, #1
 8000580:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000584:	480e      	ldr	r0, [pc, #56]	; (80005c0 <lightState+0x390>)
 8000586:	f000 ffa1 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, R2_Pin, GPIO_PIN_SET);
 800058a:	2201      	movs	r2, #1
 800058c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000590:	480c      	ldr	r0, [pc, #48]	; (80005c4 <lightState+0x394>)
 8000592:	f000 ff9b 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800059c:	4809      	ldr	r0, [pc, #36]	; (80005c4 <lightState+0x394>)
 800059e:	f000 ff95 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005a8:	4806      	ldr	r0, [pc, #24]	; (80005c4 <lightState+0x394>)
 80005aa:	f000 ff8f 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, B2_Pin, GPIO_PIN_SET);
 80005ae:	2201      	movs	r2, #1
 80005b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005b4:	4803      	ldr	r0, [pc, #12]	; (80005c4 <lightState+0x394>)
 80005b6:	f000 ff89 	bl	80014cc <HAL_GPIO_WritePin>
		st = 'a';
 80005ba:	2361      	movs	r3, #97	; 0x61
 80005bc:	71fb      	strb	r3, [r7, #7]
		break;
 80005be:	e040      	b.n	8000642 <lightState+0x412>
 80005c0:	40010800 	.word	0x40010800
 80005c4:	40010c00 	.word	0x40010c00

	case 'x':
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	2140      	movs	r1, #64	; 0x40
 80005cc:	481f      	ldr	r0, [pc, #124]	; (800064c <lightState+0x41c>)
 80005ce:	f000 ff7d 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Y1_Pin, GPIO_PIN_SET);
 80005d2:	2201      	movs	r2, #1
 80005d4:	2180      	movs	r1, #128	; 0x80
 80005d6:	481d      	ldr	r0, [pc, #116]	; (800064c <lightState+0x41c>)
 80005d8:	f000 ff78 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, G1_Pin, GPIO_PIN_SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e2:	481a      	ldr	r0, [pc, #104]	; (800064c <lightState+0x41c>)
 80005e4:	f000 ff72 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, B1_Pin, GPIO_PIN_SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ee:	4817      	ldr	r0, [pc, #92]	; (800064c <lightState+0x41c>)
 80005f0:	f000 ff6c 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, R2_Pin, GPIO_PIN_SET);
 80005f4:	2201      	movs	r2, #1
 80005f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005fa:	4815      	ldr	r0, [pc, #84]	; (8000650 <lightState+0x420>)
 80005fc:	f000 ff66 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_SET);
 8000600:	2201      	movs	r2, #1
 8000602:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000606:	4812      	ldr	r0, [pc, #72]	; (8000650 <lightState+0x420>)
 8000608:	f000 ff60 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000612:	480f      	ldr	r0, [pc, #60]	; (8000650 <lightState+0x420>)
 8000614:	f000 ff5a 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, B2_Pin, GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800061e:	480c      	ldr	r0, [pc, #48]	; (8000650 <lightState+0x420>)
 8000620:	f000 ff54 	bl	80014cc <HAL_GPIO_WritePin>
		st = 'y';
 8000624:	2379      	movs	r3, #121	; 0x79
 8000626:	71fb      	strb	r3, [r7, #7]
		break;
 8000628:	e00b      	b.n	8000642 <lightState+0x412>

	case 'y':
		HAL_GPIO_TogglePin(GPIOA, R1_Pin);
 800062a:	2140      	movs	r1, #64	; 0x40
 800062c:	4807      	ldr	r0, [pc, #28]	; (800064c <lightState+0x41c>)
 800062e:	f000 ff65 	bl	80014fc <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, R2_Pin);
 8000632:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000636:	4806      	ldr	r0, [pc, #24]	; (8000650 <lightState+0x420>)
 8000638:	f000 ff60 	bl	80014fc <HAL_GPIO_TogglePin>

	default:
		st = 'x';
 800063c:	2378      	movs	r3, #120	; 0x78
 800063e:	71fb      	strb	r3, [r7, #7]
		break;
 8000640:	bf00      	nop
	}

	return st;
 8000642:	79fb      	ldrb	r3, [r7, #7]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40010800 	.word	0x40010800
 8000650:	40010c00 	.word	0x40010c00

08000654 <periodState>:

int periodState(char st, int pd)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	6039      	str	r1, [r7, #0]
 800065e:	71fb      	strb	r3, [r7, #7]

	switch(st){
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	3b61      	subs	r3, #97	; 0x61
 8000664:	2b18      	cmp	r3, #24
 8000666:	d85c      	bhi.n	8000722 <periodState+0xce>
 8000668:	a201      	add	r2, pc, #4	; (adr r2, 8000670 <periodState+0x1c>)
 800066a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800066e:	bf00      	nop
 8000670:	080006d5 	.word	0x080006d5
 8000674:	080006dd 	.word	0x080006dd
 8000678:	080006e5 	.word	0x080006e5
 800067c:	080006ed 	.word	0x080006ed
 8000680:	080006f5 	.word	0x080006f5
 8000684:	080006fd 	.word	0x080006fd
 8000688:	08000705 	.word	0x08000705
 800068c:	0800070d 	.word	0x0800070d
 8000690:	08000723 	.word	0x08000723
 8000694:	08000723 	.word	0x08000723
 8000698:	08000723 	.word	0x08000723
 800069c:	08000723 	.word	0x08000723
 80006a0:	08000723 	.word	0x08000723
 80006a4:	08000723 	.word	0x08000723
 80006a8:	08000723 	.word	0x08000723
 80006ac:	08000723 	.word	0x08000723
 80006b0:	08000723 	.word	0x08000723
 80006b4:	08000723 	.word	0x08000723
 80006b8:	08000723 	.word	0x08000723
 80006bc:	08000723 	.word	0x08000723
 80006c0:	08000723 	.word	0x08000723
 80006c4:	08000723 	.word	0x08000723
 80006c8:	08000723 	.word	0x08000723
 80006cc:	08000715 	.word	0x08000715
 80006d0:	0800071d 	.word	0x0800071d

	case 'a':
		pd = 600;
 80006d4:	f44f 7316 	mov.w	r3, #600	; 0x258
 80006d8:	603b      	str	r3, [r7, #0]
		break;
 80006da:	e023      	b.n	8000724 <periodState+0xd0>

	case 'b':
		pd = 7050;
 80006dc:	f641 338a 	movw	r3, #7050	; 0x1b8a
 80006e0:	603b      	str	r3, [r7, #0]
		break;
 80006e2:	e01f      	b.n	8000724 <periodState+0xd0>

	case 'c':
		pd = 1350;
 80006e4:	f240 5346 	movw	r3, #1350	; 0x546
 80006e8:	603b      	str	r3, [r7, #0]
		break;
 80006ea:	e01b      	b.n	8000724 <periodState+0xd0>

	case 'd':
		pd = 350;
 80006ec:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80006f0:	603b      	str	r3, [r7, #0]
		break;
 80006f2:	e017      	b.n	8000724 <periodState+0xd0>

	case 'e':
		pd = 600;
 80006f4:	f44f 7316 	mov.w	r3, #600	; 0x258
 80006f8:	603b      	str	r3, [r7, #0]
		break;
 80006fa:	e013      	b.n	8000724 <periodState+0xd0>

	case 'f':
		pd = 2000;
 80006fc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000700:	603b      	str	r3, [r7, #0]
		break;
 8000702:	e00f      	b.n	8000724 <periodState+0xd0>

	case 'g':
		pd = 800;
 8000704:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000708:	603b      	str	r3, [r7, #0]
		break;
 800070a:	e00b      	b.n	8000724 <periodState+0xd0>

	case 'h':
		pd = 350;
 800070c:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8000710:	603b      	str	r3, [r7, #0]
		break;
 8000712:	e007      	b.n	8000724 <periodState+0xd0>

	case 'x':
		pd = 600;
 8000714:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000718:	603b      	str	r3, [r7, #0]
		break;
 800071a:	e003      	b.n	8000724 <periodState+0xd0>

	case 'y':
		pd = 600;
 800071c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000720:	603b      	str	r3, [r7, #0]

	default:

		break;
 8000722:	bf00      	nop
	}
}
 8000724:	bf00      	nop
 8000726:	4618      	mov	r0, r3
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr

08000730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000734:	f000 fc3c 	bl	8000fb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000738:	f000 f89a 	bl	8000870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800073c:	f000 f8fe 	bl	800093c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000740:	f000 f8d2 	bl	80008e8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  printString(CLEAR_SCREEN);
 8000744:	4b32      	ldr	r3, [pc, #200]	; (8000810 <main+0xe0>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff fd39 	bl	80001c0 <printString>
  printString(GO_TO_TOP);
 800074e:	4b31      	ldr	r3, [pc, #196]	; (8000814 <main+0xe4>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff fd34 	bl	80001c0 <printString>
  printString("Welcome to the CLI!\r\n");
 8000758:	482f      	ldr	r0, [pc, #188]	; (8000818 <main+0xe8>)
 800075a:	f7ff fd31 	bl	80001c0 <printString>
  HAL_Delay(2000);
 800075e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000762:	f000 fc57 	bl	8001014 <HAL_Delay>

  //Formats the screen to show counter and create a scroll window
  printString(CLEAR_SCREEN);
 8000766:	4b2a      	ldr	r3, [pc, #168]	; (8000810 <main+0xe0>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff fd28 	bl	80001c0 <printString>
  printString(GO_TO_TOP);
 8000770:	4b28      	ldr	r3, [pc, #160]	; (8000814 <main+0xe4>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff fd23 	bl	80001c0 <printString>
  printString("period: ");
 800077a:	4828      	ldr	r0, [pc, #160]	; (800081c <main+0xec>)
 800077c:	f7ff fd20 	bl	80001c0 <printString>
  printString("400");
 8000780:	4827      	ldr	r0, [pc, #156]	; (8000820 <main+0xf0>)
 8000782:	f7ff fd1d 	bl	80001c0 <printString>
  printString("\x1b[9;0H");
 8000786:	4827      	ldr	r0, [pc, #156]	; (8000824 <main+0xf4>)
 8000788:	f7ff fd1a 	bl	80001c0 <printString>
  printString("Enter \"period x\" to change the period of the LED flash, where x > 0");
 800078c:	4826      	ldr	r0, [pc, #152]	; (8000828 <main+0xf8>)
 800078e:	f7ff fd17 	bl	80001c0 <printString>
  printString(SCROLL_WINDOW);
 8000792:	4b26      	ldr	r3, [pc, #152]	; (800082c <main+0xfc>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff fd12 	bl	80001c0 <printString>
  printString(GO_TO_SCROLL);
 800079c:	4b24      	ldr	r3, [pc, #144]	; (8000830 <main+0x100>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff fd0d 	bl	80001c0 <printString>

  printString("\n~>$ ");
 80007a6:	4823      	ldr	r0, [pc, #140]	; (8000834 <main+0x104>)
 80007a8:	f7ff fd0a 	bl	80001c0 <printString>
  printString(SAVE_CURS);
 80007ac:	4b22      	ldr	r3, [pc, #136]	; (8000838 <main+0x108>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff fd05 	bl	80001c0 <printString>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007b6:	f001 ffa7 	bl	8002708 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Command_Queue */
  Command_QueueHandle = osMessageQueueNew (1, sizeof(uint16_t), &Command_Queue_attributes);
 80007ba:	4a20      	ldr	r2, [pc, #128]	; (800083c <main+0x10c>)
 80007bc:	2102      	movs	r1, #2
 80007be:	2001      	movs	r0, #1
 80007c0:	f002 f8e0 	bl	8002984 <osMessageQueueNew>
 80007c4:	4602      	mov	r2, r0
 80007c6:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <main+0x110>)
 80007c8:	601a      	str	r2, [r3, #0]

  /* creation of Message_Queue */
  Message_QueueHandle = osMessageQueueNew (1, sizeof(uint16_t), &Message_Queue_attributes);
 80007ca:	4a1e      	ldr	r2, [pc, #120]	; (8000844 <main+0x114>)
 80007cc:	2102      	movs	r1, #2
 80007ce:	2001      	movs	r0, #1
 80007d0:	f002 f8d8 	bl	8002984 <osMessageQueueNew>
 80007d4:	4602      	mov	r2, r0
 80007d6:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <main+0x118>)
 80007d8:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LightController */
  LightControllerHandle = osThreadNew(StartLightController, NULL, &LightController_attributes);
 80007da:	4a1c      	ldr	r2, [pc, #112]	; (800084c <main+0x11c>)
 80007dc:	2100      	movs	r1, #0
 80007de:	481c      	ldr	r0, [pc, #112]	; (8000850 <main+0x120>)
 80007e0:	f001 fff8 	bl	80027d4 <osThreadNew>
 80007e4:	4602      	mov	r2, r0
 80007e6:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <main+0x124>)
 80007e8:	601a      	str	r2, [r3, #0]

  /* creation of RX_CLI */
  RX_CLIHandle = osThreadNew(StartRX_CLI, NULL, &RX_CLI_attributes);
 80007ea:	4a1b      	ldr	r2, [pc, #108]	; (8000858 <main+0x128>)
 80007ec:	2100      	movs	r1, #0
 80007ee:	481b      	ldr	r0, [pc, #108]	; (800085c <main+0x12c>)
 80007f0:	f001 fff0 	bl	80027d4 <osThreadNew>
 80007f4:	4602      	mov	r2, r0
 80007f6:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <main+0x130>)
 80007f8:	601a      	str	r2, [r3, #0]

  /* creation of Status_CLI */
  Status_CLIHandle = osThreadNew(StartStatus_CLI, NULL, &Status_CLI_attributes);
 80007fa:	4a1a      	ldr	r2, [pc, #104]	; (8000864 <main+0x134>)
 80007fc:	2100      	movs	r1, #0
 80007fe:	481a      	ldr	r0, [pc, #104]	; (8000868 <main+0x138>)
 8000800:	f001 ffe8 	bl	80027d4 <osThreadNew>
 8000804:	4602      	mov	r2, r0
 8000806:	4b19      	ldr	r3, [pc, #100]	; (800086c <main+0x13c>)
 8000808:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800080a:	f001 ffaf 	bl	800276c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800080e:	e7fe      	b.n	800080e <main+0xde>
 8000810:	20000004 	.word	0x20000004
 8000814:	20000010 	.word	0x20000010
 8000818:	08005da8 	.word	0x08005da8
 800081c:	08005dc0 	.word	0x08005dc0
 8000820:	08005dcc 	.word	0x08005dcc
 8000824:	08005dd0 	.word	0x08005dd0
 8000828:	08005dd8 	.word	0x08005dd8
 800082c:	20000008 	.word	0x20000008
 8000830:	2000000c 	.word	0x2000000c
 8000834:	08005e1c 	.word	0x08005e1c
 8000838:	20000020 	.word	0x20000020
 800083c:	08005f60 	.word	0x08005f60
 8000840:	20001a5c 	.word	0x20001a5c
 8000844:	08005f78 	.word	0x08005f78
 8000848:	200019d0 	.word	0x200019d0
 800084c:	08005ef4 	.word	0x08005ef4
 8000850:	08000a01 	.word	0x08000a01
 8000854:	20001a98 	.word	0x20001a98
 8000858:	08005f18 	.word	0x08005f18
 800085c:	08000aa5 	.word	0x08000aa5
 8000860:	20001a60 	.word	0x20001a60
 8000864:	08005f3c 	.word	0x08005f3c
 8000868:	08000c35 	.word	0x08000c35
 800086c:	20001a58 	.word	0x20001a58

08000870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b090      	sub	sp, #64	; 0x40
 8000874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000876:	f107 0318 	add.w	r3, r7, #24
 800087a:	2228      	movs	r2, #40	; 0x28
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f004 fe31 	bl	80054e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000892:	2302      	movs	r3, #2
 8000894:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000896:	2301      	movs	r3, #1
 8000898:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800089a:	2310      	movs	r3, #16
 800089c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800089e:	2300      	movs	r3, #0
 80008a0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a2:	f107 0318 	add.w	r3, r7, #24
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 fe42 	bl	8001530 <HAL_RCC_OscConfig>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80008b2:	f000 fa0b 	bl	8000ccc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b6:	230f      	movs	r3, #15
 80008b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f001 f8ae 	bl	8001a30 <HAL_RCC_ClockConfig>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80008da:	f000 f9f7 	bl	8000ccc <Error_Handler>
  }
}
 80008de:	bf00      	nop
 80008e0:	3740      	adds	r7, #64	; 0x40
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008ec:	4b11      	ldr	r3, [pc, #68]	; (8000934 <MX_USART3_UART_Init+0x4c>)
 80008ee:	4a12      	ldr	r2, [pc, #72]	; (8000938 <MX_USART3_UART_Init+0x50>)
 80008f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008f2:	4b10      	ldr	r3, [pc, #64]	; (8000934 <MX_USART3_UART_Init+0x4c>)
 80008f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <MX_USART3_UART_Init+0x4c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000900:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <MX_USART3_UART_Init+0x4c>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <MX_USART3_UART_Init+0x4c>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_USART3_UART_Init+0x4c>)
 800090e:	220c      	movs	r2, #12
 8000910:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <MX_USART3_UART_Init+0x4c>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_USART3_UART_Init+0x4c>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800091e:	4805      	ldr	r0, [pc, #20]	; (8000934 <MX_USART3_UART_Init+0x4c>)
 8000920:	f001 fc9c 	bl	800225c <HAL_UART_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800092a:	f000 f9cf 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	200019e0 	.word	0x200019e0
 8000938:	40004800 	.word	0x40004800

0800093c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000942:	f107 0310 	add.w	r3, r7, #16
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000950:	4b28      	ldr	r3, [pc, #160]	; (80009f4 <MX_GPIO_Init+0xb8>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	4a27      	ldr	r2, [pc, #156]	; (80009f4 <MX_GPIO_Init+0xb8>)
 8000956:	f043 0304 	orr.w	r3, r3, #4
 800095a:	6193      	str	r3, [r2, #24]
 800095c:	4b25      	ldr	r3, [pc, #148]	; (80009f4 <MX_GPIO_Init+0xb8>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	f003 0304 	and.w	r3, r3, #4
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000968:	4b22      	ldr	r3, [pc, #136]	; (80009f4 <MX_GPIO_Init+0xb8>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	4a21      	ldr	r2, [pc, #132]	; (80009f4 <MX_GPIO_Init+0xb8>)
 800096e:	f043 0308 	orr.w	r3, r3, #8
 8000972:	6193      	str	r3, [r2, #24]
 8000974:	4b1f      	ldr	r3, [pc, #124]	; (80009f4 <MX_GPIO_Init+0xb8>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	f003 0308 	and.w	r3, r3, #8
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000980:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <MX_GPIO_Init+0xb8>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	4a1b      	ldr	r2, [pc, #108]	; (80009f4 <MX_GPIO_Init+0xb8>)
 8000986:	f043 0310 	orr.w	r3, r3, #16
 800098a:	6193      	str	r3, [r2, #24]
 800098c:	4b19      	ldr	r3, [pc, #100]	; (80009f4 <MX_GPIO_Init+0xb8>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	f003 0310 	and.w	r3, r3, #16
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R1_Pin|Y1_Pin|G1_Pin|B1_Pin, GPIO_PIN_SET);
 8000998:	2201      	movs	r2, #1
 800099a:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800099e:	4816      	ldr	r0, [pc, #88]	; (80009f8 <MX_GPIO_Init+0xbc>)
 80009a0:	f000 fd94 	bl	80014cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R2_Pin|Y2_Pin|G2_Pin|B2_Pin, GPIO_PIN_SET);
 80009a4:	2201      	movs	r2, #1
 80009a6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80009aa:	4814      	ldr	r0, [pc, #80]	; (80009fc <MX_GPIO_Init+0xc0>)
 80009ac:	f000 fd8e 	bl	80014cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : R1_Pin Y1_Pin G1_Pin B1_Pin */
  GPIO_InitStruct.Pin = R1_Pin|Y1_Pin|G1_Pin|B1_Pin;
 80009b0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80009b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b6:	2301      	movs	r3, #1
 80009b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2302      	movs	r3, #2
 80009c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c2:	f107 0310 	add.w	r3, r7, #16
 80009c6:	4619      	mov	r1, r3
 80009c8:	480b      	ldr	r0, [pc, #44]	; (80009f8 <MX_GPIO_Init+0xbc>)
 80009ca:	f000 fc25 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pins : R2_Pin Y2_Pin G2_Pin B2_Pin */
  GPIO_InitStruct.Pin = R2_Pin|Y2_Pin|G2_Pin|B2_Pin;
 80009ce:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80009d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d4:	2301      	movs	r3, #1
 80009d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2302      	movs	r3, #2
 80009de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e0:	f107 0310 	add.w	r3, r7, #16
 80009e4:	4619      	mov	r1, r3
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_GPIO_Init+0xc0>)
 80009e8:	f000 fc16 	bl	8001218 <HAL_GPIO_Init>

}
 80009ec:	bf00      	nop
 80009ee:	3720      	adds	r7, #32
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40021000 	.word	0x40021000
 80009f8:	40010800 	.word	0x40010800
 80009fc:	40010c00 	.word	0x40010c00

08000a00 <StartLightController>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLightController */
void StartLightController(void *argument)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint16_t cmd = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	817b      	strh	r3, [r7, #10]
	uint16_t msg = cmd;
 8000a0c:	897b      	ldrh	r3, [r7, #10]
 8000a0e:	813b      	strh	r3, [r7, #8]
	int period = 400;
 8000a10:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000a14:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for(;;)
	{

		if(osMessageQueueGet(Command_QueueHandle, &cmd, NULL, 0U) == osOK)
 8000a16:	4b20      	ldr	r3, [pc, #128]	; (8000a98 <StartLightController+0x98>)
 8000a18:	6818      	ldr	r0, [r3, #0]
 8000a1a:	f107 010a 	add.w	r1, r7, #10
 8000a1e:	2300      	movs	r3, #0
 8000a20:	2200      	movs	r2, #0
 8000a22:	f002 f8a9 	bl	8002b78 <osMessageQueueGet>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d112      	bne.n	8000a52 <StartLightController+0x52>
		{
			if(cmd != msg)
 8000a2c:	897a      	ldrh	r2, [r7, #10]
 8000a2e:	893b      	ldrh	r3, [r7, #8]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d00e      	beq.n	8000a52 <StartLightController+0x52>
			{
				msg = cmd;
 8000a34:	897b      	ldrh	r3, [r7, #10]
 8000a36:	813b      	strh	r3, [r7, #8]
				if(msg == 1)
 8000a38:	893b      	ldrh	r3, [r7, #8]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d103      	bne.n	8000a46 <StartLightController+0x46>
				{
					state = 'x';
 8000a3e:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <StartLightController+0x9c>)
 8000a40:	2278      	movs	r2, #120	; 0x78
 8000a42:	701a      	strb	r2, [r3, #0]
 8000a44:	e005      	b.n	8000a52 <StartLightController+0x52>
				}
				else if(msg == 0)
 8000a46:	893b      	ldrh	r3, [r7, #8]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d102      	bne.n	8000a52 <StartLightController+0x52>
				{
					state = 'a';
 8000a4c:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <StartLightController+0x9c>)
 8000a4e:	2261      	movs	r2, #97	; 0x61
 8000a50:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		if(osMessageQueuePut(Message_QueueHandle, &msg, 1U, 0U)!= osOK)
 8000a52:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <StartLightController+0xa0>)
 8000a54:	6818      	ldr	r0, [r3, #0]
 8000a56:	f107 0108 	add.w	r1, r7, #8
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	f002 f817 	bl	8002a90 <osMessageQueuePut>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <StartLightController+0x6c>
		{
			Error_Handler();
 8000a68:	f000 f930 	bl	8000ccc <Error_Handler>
		}
		period = periodState(state, period);
 8000a6c:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <StartLightController+0x9c>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	68f9      	ldr	r1, [r7, #12]
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff fdee 	bl	8000654 <periodState>
 8000a78:	60f8      	str	r0, [r7, #12]
		state = lightState(state);
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <StartLightController+0x9c>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff fbd6 	bl	8000230 <lightState>
 8000a84:	4603      	mov	r3, r0
 8000a86:	461a      	mov	r2, r3
 8000a88:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <StartLightController+0x9c>)
 8000a8a:	701a      	strb	r2, [r3, #0]



		osDelay(period);
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f001 ff4a 	bl	8002928 <osDelay>
		if(osMessageQueueGet(Command_QueueHandle, &cmd, NULL, 0U) == osOK)
 8000a94:	e7bf      	b.n	8000a16 <StartLightController+0x16>
 8000a96:	bf00      	nop
 8000a98:	20001a5c 	.word	0x20001a5c
 8000a9c:	20000000 	.word	0x20000000
 8000aa0:	200019d0 	.word	0x200019d0

08000aa4 <StartRX_CLI>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRX_CLI */
void StartRX_CLI(void *argument)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRX_CLI */
	uint16_t cmd = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	817b      	strh	r3, [r7, #10]
  /* Infinite loop */
	for(;;)
	{
		if(HAL_UART_Receive(&huart3, cliBufferRX, 1, 300) == HAL_OK)
 8000ab0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	494e      	ldr	r1, [pc, #312]	; (8000bf0 <StartRX_CLI+0x14c>)
 8000ab8:	484e      	ldr	r0, [pc, #312]	; (8000bf4 <StartRX_CLI+0x150>)
 8000aba:	f001 fcae 	bl	800241a <HAL_UART_Receive>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d1f5      	bne.n	8000ab0 <StartRX_CLI+0xc>
		{
			printString(RETURN_CURS);
 8000ac4:	4b4c      	ldr	r3, [pc, #304]	; (8000bf8 <StartRX_CLI+0x154>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fb79 	bl	80001c0 <printString>
			printString(SHOW_CURS);
 8000ace:	4b4b      	ldr	r3, [pc, #300]	; (8000bfc <StartRX_CLI+0x158>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fb74 	bl	80001c0 <printString>

			copyCharTo((char *)cliBufferRX, (char *)save, j);
 8000ad8:	4b49      	ldr	r3, [pc, #292]	; (8000c00 <StartRX_CLI+0x15c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	461a      	mov	r2, r3
 8000ade:	4949      	ldr	r1, [pc, #292]	; (8000c04 <StartRX_CLI+0x160>)
 8000ae0:	4843      	ldr	r0, [pc, #268]	; (8000bf0 <StartRX_CLI+0x14c>)
 8000ae2:	f7ff fb4f 	bl	8000184 <copyCharTo>
			printString(SAVE_CURS);
 8000ae6:	4b48      	ldr	r3, [pc, #288]	; (8000c08 <StartRX_CLI+0x164>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fb68 	bl	80001c0 <printString>
			//backspace incidence
			if(cliBufferRX[0] == '\b')
 8000af0:	4b3f      	ldr	r3, [pc, #252]	; (8000bf0 <StartRX_CLI+0x14c>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b08      	cmp	r3, #8
 8000af6:	d105      	bne.n	8000b04 <StartRX_CLI+0x60>
			{
				j--;
 8000af8:	4b41      	ldr	r3, [pc, #260]	; (8000c00 <StartRX_CLI+0x15c>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	3b01      	subs	r3, #1
 8000afe:	4a40      	ldr	r2, [pc, #256]	; (8000c00 <StartRX_CLI+0x15c>)
 8000b00:	6013      	str	r3, [r2, #0]
 8000b02:	e004      	b.n	8000b0e <StartRX_CLI+0x6a>
			}
			else
			{
				j++;
 8000b04:	4b3e      	ldr	r3, [pc, #248]	; (8000c00 <StartRX_CLI+0x15c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	4a3d      	ldr	r2, [pc, #244]	; (8000c00 <StartRX_CLI+0x15c>)
 8000b0c:	6013      	str	r3, [r2, #0]
			}

			//when enter is hit execute the command
			if(isCompleteLine((char *)cliBufferRX))
 8000b0e:	4838      	ldr	r0, [pc, #224]	; (8000bf0 <StartRX_CLI+0x14c>)
 8000b10:	f7ff fb28 	bl	8000164 <isCompleteLine>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d0ca      	beq.n	8000ab0 <StartRX_CLI+0xc>
			{
				//				char *cmd;
				//				char *token;

				printString("\r\n");
 8000b1a:	483c      	ldr	r0, [pc, #240]	; (8000c0c <StartRX_CLI+0x168>)
 8000b1c:	f7ff fb50 	bl	80001c0 <printString>
				while(j < 20 && save[j] != '\0')
 8000b20:	e009      	b.n	8000b36 <StartRX_CLI+0x92>
				{
					save[j] = '\0';
 8000b22:	4b37      	ldr	r3, [pc, #220]	; (8000c00 <StartRX_CLI+0x15c>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a37      	ldr	r2, [pc, #220]	; (8000c04 <StartRX_CLI+0x160>)
 8000b28:	2100      	movs	r1, #0
 8000b2a:	54d1      	strb	r1, [r2, r3]
					j++;
 8000b2c:	4b34      	ldr	r3, [pc, #208]	; (8000c00 <StartRX_CLI+0x15c>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	3301      	adds	r3, #1
 8000b32:	4a33      	ldr	r2, [pc, #204]	; (8000c00 <StartRX_CLI+0x15c>)
 8000b34:	6013      	str	r3, [r2, #0]
				while(j < 20 && save[j] != '\0')
 8000b36:	4b32      	ldr	r3, [pc, #200]	; (8000c00 <StartRX_CLI+0x15c>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	2b13      	cmp	r3, #19
 8000b3c:	dc05      	bgt.n	8000b4a <StartRX_CLI+0xa6>
 8000b3e:	4b30      	ldr	r3, [pc, #192]	; (8000c00 <StartRX_CLI+0x15c>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a30      	ldr	r2, [pc, #192]	; (8000c04 <StartRX_CLI+0x160>)
 8000b44:	5cd3      	ldrb	r3, [r2, r3]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d1eb      	bne.n	8000b22 <StartRX_CLI+0x7e>
				}

				if(strcmp((char *)save, "staticcycle\r") == 0)
 8000b4a:	4931      	ldr	r1, [pc, #196]	; (8000c10 <StartRX_CLI+0x16c>)
 8000b4c:	482d      	ldr	r0, [pc, #180]	; (8000c04 <StartRX_CLI+0x160>)
 8000b4e:	f7ff faff 	bl	8000150 <strcmp>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d105      	bne.n	8000b64 <StartRX_CLI+0xc0>
				{
					cmd = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	817b      	strh	r3, [r7, #10]
					printString("Command read.\r");
 8000b5c:	482d      	ldr	r0, [pc, #180]	; (8000c14 <StartRX_CLI+0x170>)
 8000b5e:	f7ff fb2f 	bl	80001c0 <printString>
 8000b62:	e01a      	b.n	8000b9a <StartRX_CLI+0xf6>
//					if(osMessageQueuePut(Command_QueueHandle, &cmd, 1U, 0U)!= osOK)
//					{
//						Error_Handler();
//					}
				}
				else if(strcmp((char *)save, "failsafe\r") == 0)
 8000b64:	492c      	ldr	r1, [pc, #176]	; (8000c18 <StartRX_CLI+0x174>)
 8000b66:	4827      	ldr	r0, [pc, #156]	; (8000c04 <StartRX_CLI+0x160>)
 8000b68:	f7ff faf2 	bl	8000150 <strcmp>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d105      	bne.n	8000b7e <StartRX_CLI+0xda>
				{
					cmd = 1;
 8000b72:	2301      	movs	r3, #1
 8000b74:	817b      	strh	r3, [r7, #10]
					printString("Command read.");
 8000b76:	4829      	ldr	r0, [pc, #164]	; (8000c1c <StartRX_CLI+0x178>)
 8000b78:	f7ff fb22 	bl	80001c0 <printString>
 8000b7c:	e00d      	b.n	8000b9a <StartRX_CLI+0xf6>
//					if(osMessageQueuePut(Command_QueueHandle, &cmd, 1U, 0U)!= osOK)
//					{
//						Error_Handler();
//					}
				}
				else if(strcmp((char *)save, "help\r") == 0)
 8000b7e:	4928      	ldr	r1, [pc, #160]	; (8000c20 <StartRX_CLI+0x17c>)
 8000b80:	4820      	ldr	r0, [pc, #128]	; (8000c04 <StartRX_CLI+0x160>)
 8000b82:	f7ff fae5 	bl	8000150 <strcmp>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d103      	bne.n	8000b94 <StartRX_CLI+0xf0>
				{
					printString("Help list************");
 8000b8c:	4825      	ldr	r0, [pc, #148]	; (8000c24 <StartRX_CLI+0x180>)
 8000b8e:	f7ff fb17 	bl	80001c0 <printString>
 8000b92:	e002      	b.n	8000b9a <StartRX_CLI+0xf6>
				}
				else
				{
					printString("Error message************");
 8000b94:	4824      	ldr	r0, [pc, #144]	; (8000c28 <StartRX_CLI+0x184>)
 8000b96:	f7ff fb13 	bl	80001c0 <printString>
				}

				if(osMessageQueuePut(Command_QueueHandle, &cmd, 1U, 0U)!= osOK)
 8000b9a:	4b24      	ldr	r3, [pc, #144]	; (8000c2c <StartRX_CLI+0x188>)
 8000b9c:	6818      	ldr	r0, [r3, #0]
 8000b9e:	f107 010a 	add.w	r1, r7, #10
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	f001 ff73 	bl	8002a90 <osMessageQueuePut>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <StartRX_CLI+0x110>
				{
					Error_Handler();
 8000bb0:	f000 f88c 	bl	8000ccc <Error_Handler>
				//				{
				//					printString("Invalid input. Try again.");
				//				}
				//				printString("\r\n");

				j = 0;
 8000bb4:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <StartRX_CLI+0x15c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < 20; i++)
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	e007      	b.n	8000bd0 <StartRX_CLI+0x12c>
				{
					save[i] = '\0';
 8000bc0:	4a10      	ldr	r2, [pc, #64]	; (8000c04 <StartRX_CLI+0x160>)
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 20; i++)
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	2b13      	cmp	r3, #19
 8000bd4:	ddf4      	ble.n	8000bc0 <StartRX_CLI+0x11c>
				}
				printString("\r\n~>$ ");
 8000bd6:	4816      	ldr	r0, [pc, #88]	; (8000c30 <StartRX_CLI+0x18c>)
 8000bd8:	f7ff faf2 	bl	80001c0 <printString>

				printString(SAVE_CURS);
 8000bdc:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <StartRX_CLI+0x164>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff faed 	bl	80001c0 <printString>
				osDelay(10);
 8000be6:	200a      	movs	r0, #10
 8000be8:	f001 fe9e 	bl	8002928 <osDelay>
		if(HAL_UART_Receive(&huart3, cliBufferRX, 1, 300) == HAL_OK)
 8000bec:	e760      	b.n	8000ab0 <StartRX_CLI+0xc>
 8000bee:	bf00      	nop
 8000bf0:	20001a8c 	.word	0x20001a8c
 8000bf4:	200019e0 	.word	0x200019e0
 8000bf8:	20000024 	.word	0x20000024
 8000bfc:	2000001c 	.word	0x2000001c
 8000c00:	200000b8 	.word	0x200000b8
 8000c04:	20001a64 	.word	0x20001a64
 8000c08:	20000020 	.word	0x20000020
 8000c0c:	08005e24 	.word	0x08005e24
 8000c10:	08005e28 	.word	0x08005e28
 8000c14:	08005e38 	.word	0x08005e38
 8000c18:	08005e48 	.word	0x08005e48
 8000c1c:	08005e54 	.word	0x08005e54
 8000c20:	08005e64 	.word	0x08005e64
 8000c24:	08005e6c 	.word	0x08005e6c
 8000c28:	08005e84 	.word	0x08005e84
 8000c2c:	20001a5c 	.word	0x20001a5c
 8000c30:	08005ea0 	.word	0x08005ea0

08000c34 <StartStatus_CLI>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStatus_CLI */
void StartStatus_CLI(void *argument)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStatus_CLI */
	uint16_t msg;
  /* Infinite loop */
	for(;;)
	{
		if(osMessageQueueGet(Message_QueueHandle, &msg, NULL, 0U ))
 8000c3c:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <StartStatus_CLI+0x5c>)
 8000c3e:	6818      	ldr	r0, [r3, #0]
 8000c40:	f107 010e 	add.w	r1, r7, #14
 8000c44:	2300      	movs	r3, #0
 8000c46:	2200      	movs	r2, #0
 8000c48:	f001 ff96 	bl	8002b78 <osMessageQueueGet>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d01a      	beq.n	8000c88 <StartStatus_CLI+0x54>
		{
			sprintf((char *)period_str, "%d", msg);
 8000c52:	89fb      	ldrh	r3, [r7, #14]
 8000c54:	461a      	mov	r2, r3
 8000c56:	490f      	ldr	r1, [pc, #60]	; (8000c94 <StartStatus_CLI+0x60>)
 8000c58:	480f      	ldr	r0, [pc, #60]	; (8000c98 <StartStatus_CLI+0x64>)
 8000c5a:	f004 fc4d 	bl	80054f8 <siprintf>
			printString(HIDE_CURS);
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <StartStatus_CLI+0x68>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff faac 	bl	80001c0 <printString>
			printString(GO_TO_COUNT);
 8000c68:	4b0d      	ldr	r3, [pc, #52]	; (8000ca0 <StartStatus_CLI+0x6c>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff faa7 	bl	80001c0 <printString>
			printString("                           ");
 8000c72:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <StartStatus_CLI+0x70>)
 8000c74:	f7ff faa4 	bl	80001c0 <printString>
			printString(GO_TO_COUNT);
 8000c78:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <StartStatus_CLI+0x6c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fa9f 	bl	80001c0 <printString>
			printString((const char *)period_str);
 8000c82:	4805      	ldr	r0, [pc, #20]	; (8000c98 <StartStatus_CLI+0x64>)
 8000c84:	f7ff fa9c 	bl	80001c0 <printString>

		}

		osDelay(5);
 8000c88:	2005      	movs	r0, #5
 8000c8a:	f001 fe4d 	bl	8002928 <osDelay>
		if(osMessageQueueGet(Message_QueueHandle, &msg, NULL, 0U ))
 8000c8e:	e7d5      	b.n	8000c3c <StartStatus_CLI+0x8>
 8000c90:	200019d0 	.word	0x200019d0
 8000c94:	08005ea8 	.word	0x08005ea8
 8000c98:	200019d4 	.word	0x200019d4
 8000c9c:	20000018 	.word	0x20000018
 8000ca0:	20000014 	.word	0x20000014
 8000ca4:	08005eac 	.word	0x08005eac

08000ca8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d101      	bne.n	8000cbe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cba:	f000 f98f 	bl	8000fdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40000800 	.word	0x40000800

08000ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr

08000cd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <HAL_MspInit+0x5c>)
 8000ce0:	699b      	ldr	r3, [r3, #24]
 8000ce2:	4a14      	ldr	r2, [pc, #80]	; (8000d34 <HAL_MspInit+0x5c>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6193      	str	r3, [r2, #24]
 8000cea:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <HAL_MspInit+0x5c>)
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <HAL_MspInit+0x5c>)
 8000cf8:	69db      	ldr	r3, [r3, #28]
 8000cfa:	4a0e      	ldr	r2, [pc, #56]	; (8000d34 <HAL_MspInit+0x5c>)
 8000cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d00:	61d3      	str	r3, [r2, #28]
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <HAL_MspInit+0x5c>)
 8000d04:	69db      	ldr	r3, [r3, #28]
 8000d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <HAL_MspInit+0x60>)
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <HAL_MspInit+0x60>)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr
 8000d34:	40021000 	.word	0x40021000
 8000d38:	40010000 	.word	0x40010000

08000d3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	; 0x28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a25      	ldr	r2, [pc, #148]	; (8000dec <HAL_UART_MspInit+0xb0>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d143      	bne.n	8000de4 <HAL_UART_MspInit+0xa8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d5c:	4b24      	ldr	r3, [pc, #144]	; (8000df0 <HAL_UART_MspInit+0xb4>)
 8000d5e:	69db      	ldr	r3, [r3, #28]
 8000d60:	4a23      	ldr	r2, [pc, #140]	; (8000df0 <HAL_UART_MspInit+0xb4>)
 8000d62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d66:	61d3      	str	r3, [r2, #28]
 8000d68:	4b21      	ldr	r3, [pc, #132]	; (8000df0 <HAL_UART_MspInit+0xb4>)
 8000d6a:	69db      	ldr	r3, [r3, #28]
 8000d6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d70:	613b      	str	r3, [r7, #16]
 8000d72:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d74:	4b1e      	ldr	r3, [pc, #120]	; (8000df0 <HAL_UART_MspInit+0xb4>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	4a1d      	ldr	r2, [pc, #116]	; (8000df0 <HAL_UART_MspInit+0xb4>)
 8000d7a:	f043 0310 	orr.w	r3, r3, #16
 8000d7e:	6193      	str	r3, [r2, #24]
 8000d80:	4b1b      	ldr	r3, [pc, #108]	; (8000df0 <HAL_UART_MspInit+0xb4>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	f003 0310 	and.w	r3, r3, #16
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d96:	2303      	movs	r3, #3
 8000d98:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4814      	ldr	r0, [pc, #80]	; (8000df4 <HAL_UART_MspInit+0xb8>)
 8000da2:	f000 fa39 	bl	8001218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000da6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000daa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	4619      	mov	r1, r3
 8000dba:	480e      	ldr	r0, [pc, #56]	; (8000df4 <HAL_UART_MspInit+0xb8>)
 8000dbc:	f000 fa2c 	bl	8001218 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8000dc0:	4b0d      	ldr	r3, [pc, #52]	; (8000df8 <HAL_UART_MspInit+0xbc>)
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8000dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8000dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8000dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd8:	f043 0310 	orr.w	r3, r3, #16
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8000dde:	4a06      	ldr	r2, [pc, #24]	; (8000df8 <HAL_UART_MspInit+0xbc>)
 8000de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de2:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000de4:	bf00      	nop
 8000de6:	3728      	adds	r7, #40	; 0x28
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40004800 	.word	0x40004800
 8000df0:	40021000 	.word	0x40021000
 8000df4:	40011000 	.word	0x40011000
 8000df8:	40010000 	.word	0x40010000

08000dfc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08c      	sub	sp, #48	; 0x30
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	6879      	ldr	r1, [r7, #4]
 8000e10:	201e      	movs	r0, #30
 8000e12:	f000 f9d6 	bl	80011c2 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000e16:	201e      	movs	r0, #30
 8000e18:	f000 f9ef 	bl	80011fa <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000e1c:	4b1e      	ldr	r3, [pc, #120]	; (8000e98 <HAL_InitTick+0x9c>)
 8000e1e:	69db      	ldr	r3, [r3, #28]
 8000e20:	4a1d      	ldr	r2, [pc, #116]	; (8000e98 <HAL_InitTick+0x9c>)
 8000e22:	f043 0304 	orr.w	r3, r3, #4
 8000e26:	61d3      	str	r3, [r2, #28]
 8000e28:	4b1b      	ldr	r3, [pc, #108]	; (8000e98 <HAL_InitTick+0x9c>)
 8000e2a:	69db      	ldr	r3, [r3, #28]
 8000e2c:	f003 0304 	and.w	r3, r3, #4
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e34:	f107 0210 	add.w	r2, r7, #16
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 ff74 	bl	8001d2c <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e44:	f000 ff4a 	bl	8001cdc <HAL_RCC_GetPCLK1Freq>
 8000e48:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e4c:	4a13      	ldr	r2, [pc, #76]	; (8000e9c <HAL_InitTick+0xa0>)
 8000e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e52:	0c9b      	lsrs	r3, r3, #18
 8000e54:	3b01      	subs	r3, #1
 8000e56:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000e58:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <HAL_InitTick+0xa4>)
 8000e5a:	4a12      	ldr	r2, [pc, #72]	; (8000ea4 <HAL_InitTick+0xa8>)
 8000e5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8000e5e:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <HAL_InitTick+0xa4>)
 8000e60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e64:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000e66:	4a0e      	ldr	r2, [pc, #56]	; (8000ea0 <HAL_InitTick+0xa4>)
 8000e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e6a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <HAL_InitTick+0xa4>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e72:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <HAL_InitTick+0xa4>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000e78:	4809      	ldr	r0, [pc, #36]	; (8000ea0 <HAL_InitTick+0xa4>)
 8000e7a:	f000 ffa5 	bl	8001dc8 <HAL_TIM_Base_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d104      	bne.n	8000e8e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000e84:	4806      	ldr	r0, [pc, #24]	; (8000ea0 <HAL_InitTick+0xa4>)
 8000e86:	f000 fff7 	bl	8001e78 <HAL_TIM_Base_Start_IT>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	e000      	b.n	8000e90 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3730      	adds	r7, #48	; 0x30
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	431bde83 	.word	0x431bde83
 8000ea0:	20001a9c 	.word	0x20001a9c
 8000ea4:	40000800 	.word	0x40000800

08000ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr

08000eb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <HardFault_Handler+0x4>

08000eba <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <MemManage_Handler+0x4>

08000ec0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <BusFault_Handler+0x4>

08000ec6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eca:	e7fe      	b.n	8000eca <UsageFault_Handler+0x4>

08000ecc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr

08000ed8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000edc:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <TIM4_IRQHandler+0x10>)
 8000ede:	f001 f81d 	bl	8001f1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20001a9c 	.word	0x20001a9c

08000eec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ef4:	4a14      	ldr	r2, [pc, #80]	; (8000f48 <_sbrk+0x5c>)
 8000ef6:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <_sbrk+0x60>)
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f00:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <_sbrk+0x64>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d102      	bne.n	8000f0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <_sbrk+0x64>)
 8000f0a:	4a12      	ldr	r2, [pc, #72]	; (8000f54 <_sbrk+0x68>)
 8000f0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f0e:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <_sbrk+0x64>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4413      	add	r3, r2
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d207      	bcs.n	8000f2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f1c:	f004 faae 	bl	800547c <__errno>
 8000f20:	4602      	mov	r2, r0
 8000f22:	230c      	movs	r3, #12
 8000f24:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000f26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f2a:	e009      	b.n	8000f40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f2c:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <_sbrk+0x64>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f32:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <_sbrk+0x64>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4413      	add	r3, r2
 8000f3a:	4a05      	ldr	r2, [pc, #20]	; (8000f50 <_sbrk+0x64>)
 8000f3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3718      	adds	r7, #24
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20005000 	.word	0x20005000
 8000f4c:	00000400 	.word	0x00000400
 8000f50:	200000bc 	.word	0x200000bc
 8000f54:	20001b30 	.word	0x20001b30

08000f58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr

08000f64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000f64:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000f66:	e003      	b.n	8000f70 <LoopCopyDataInit>

08000f68 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000f68:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000f6a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000f6c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000f6e:	3104      	adds	r1, #4

08000f70 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f70:	480a      	ldr	r0, [pc, #40]	; (8000f9c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000f72:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000f74:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000f76:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000f78:	d3f6      	bcc.n	8000f68 <CopyDataInit>
  ldr r2, =_sbss
 8000f7a:	4a0a      	ldr	r2, [pc, #40]	; (8000fa4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000f7c:	e002      	b.n	8000f84 <LoopFillZerobss>

08000f7e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000f80:	f842 3b04 	str.w	r3, [r2], #4

08000f84 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000f84:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000f86:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f88:	d3f9      	bcc.n	8000f7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f8a:	f7ff ffe5 	bl	8000f58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f8e:	f004 fa7b 	bl	8005488 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f92:	f7ff fbcd 	bl	8000730 <main>
  bx lr
 8000f96:	4770      	bx	lr
  ldr r3, =_sidata
 8000f98:	08005fe4 	.word	0x08005fe4
  ldr r0, =_sdata
 8000f9c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000fa0:	2000009c 	.word	0x2000009c
  ldr r2, =_sbss
 8000fa4:	2000009c 	.word	0x2000009c
  ldr r3, = _ebss
 8000fa8:	20001b2c 	.word	0x20001b2c

08000fac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fac:	e7fe      	b.n	8000fac <ADC1_2_IRQHandler>
	...

08000fb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <HAL_Init+0x28>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <HAL_Init+0x28>)
 8000fba:	f043 0310 	orr.w	r3, r3, #16
 8000fbe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc0:	2003      	movs	r0, #3
 8000fc2:	f000 f8f3 	bl	80011ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f7ff ff18 	bl	8000dfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fcc:	f7ff fe84 	bl	8000cd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40022000 	.word	0x40022000

08000fdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <HAL_IncTick+0x1c>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <HAL_IncTick+0x20>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	4a03      	ldr	r2, [pc, #12]	; (8000ffc <HAL_IncTick+0x20>)
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr
 8000ff8:	20000030 	.word	0x20000030
 8000ffc:	20001ae4 	.word	0x20001ae4

08001000 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return uwTick;
 8001004:	4b02      	ldr	r3, [pc, #8]	; (8001010 <HAL_GetTick+0x10>)
 8001006:	681b      	ldr	r3, [r3, #0]
}
 8001008:	4618      	mov	r0, r3
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr
 8001010:	20001ae4 	.word	0x20001ae4

08001014 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800101c:	f7ff fff0 	bl	8001000 <HAL_GetTick>
 8001020:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800102c:	d005      	beq.n	800103a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <HAL_Delay+0x40>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	461a      	mov	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4413      	add	r3, r2
 8001038:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800103a:	bf00      	nop
 800103c:	f7ff ffe0 	bl	8001000 <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	429a      	cmp	r2, r3
 800104a:	d8f7      	bhi.n	800103c <HAL_Delay+0x28>
  {
  }
}
 800104c:	bf00      	nop
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000030 	.word	0x20000030

08001058 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001068:	4b0c      	ldr	r3, [pc, #48]	; (800109c <__NVIC_SetPriorityGrouping+0x44>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800106e:	68ba      	ldr	r2, [r7, #8]
 8001070:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001074:	4013      	ands	r3, r2
 8001076:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001080:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001088:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800108a:	4a04      	ldr	r2, [pc, #16]	; (800109c <__NVIC_SetPriorityGrouping+0x44>)
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	60d3      	str	r3, [r2, #12]
}
 8001090:	bf00      	nop
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a4:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <__NVIC_GetPriorityGrouping+0x18>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	0a1b      	lsrs	r3, r3, #8
 80010aa:	f003 0307 	and.w	r3, r3, #7
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	db0b      	blt.n	80010e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	f003 021f 	and.w	r2, r3, #31
 80010d4:	4906      	ldr	r1, [pc, #24]	; (80010f0 <__NVIC_EnableIRQ+0x34>)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	095b      	lsrs	r3, r3, #5
 80010dc:	2001      	movs	r0, #1
 80010de:	fa00 f202 	lsl.w	r2, r0, r2
 80010e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr
 80010f0:	e000e100 	.word	0xe000e100

080010f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	6039      	str	r1, [r7, #0]
 80010fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	2b00      	cmp	r3, #0
 8001106:	db0a      	blt.n	800111e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	b2da      	uxtb	r2, r3
 800110c:	490c      	ldr	r1, [pc, #48]	; (8001140 <__NVIC_SetPriority+0x4c>)
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	0112      	lsls	r2, r2, #4
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	440b      	add	r3, r1
 8001118:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800111c:	e00a      	b.n	8001134 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	b2da      	uxtb	r2, r3
 8001122:	4908      	ldr	r1, [pc, #32]	; (8001144 <__NVIC_SetPriority+0x50>)
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	f003 030f 	and.w	r3, r3, #15
 800112a:	3b04      	subs	r3, #4
 800112c:	0112      	lsls	r2, r2, #4
 800112e:	b2d2      	uxtb	r2, r2
 8001130:	440b      	add	r3, r1
 8001132:	761a      	strb	r2, [r3, #24]
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000e100 	.word	0xe000e100
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001148:	b480      	push	{r7}
 800114a:	b089      	sub	sp, #36	; 0x24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f1c3 0307 	rsb	r3, r3, #7
 8001162:	2b04      	cmp	r3, #4
 8001164:	bf28      	it	cs
 8001166:	2304      	movcs	r3, #4
 8001168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3304      	adds	r3, #4
 800116e:	2b06      	cmp	r3, #6
 8001170:	d902      	bls.n	8001178 <NVIC_EncodePriority+0x30>
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3b03      	subs	r3, #3
 8001176:	e000      	b.n	800117a <NVIC_EncodePriority+0x32>
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43da      	mvns	r2, r3
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	401a      	ands	r2, r3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001190:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	fa01 f303 	lsl.w	r3, r1, r3
 800119a:	43d9      	mvns	r1, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	4313      	orrs	r3, r2
         );
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3724      	adds	r7, #36	; 0x24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr

080011ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ff4f 	bl	8001058 <__NVIC_SetPriorityGrouping>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b086      	sub	sp, #24
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	4603      	mov	r3, r0
 80011ca:	60b9      	str	r1, [r7, #8]
 80011cc:	607a      	str	r2, [r7, #4]
 80011ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d4:	f7ff ff64 	bl	80010a0 <__NVIC_GetPriorityGrouping>
 80011d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	68b9      	ldr	r1, [r7, #8]
 80011de:	6978      	ldr	r0, [r7, #20]
 80011e0:	f7ff ffb2 	bl	8001148 <NVIC_EncodePriority>
 80011e4:	4602      	mov	r2, r0
 80011e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ea:	4611      	mov	r1, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff81 	bl	80010f4 <__NVIC_SetPriority>
}
 80011f2:	bf00      	nop
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	4603      	mov	r3, r0
 8001202:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff57 	bl	80010bc <__NVIC_EnableIRQ>
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001218:	b480      	push	{r7}
 800121a:	b08b      	sub	sp, #44	; 0x2c
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001222:	2300      	movs	r3, #0
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800122a:	e127      	b.n	800147c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800122c:	2201      	movs	r2, #1
 800122e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	69fa      	ldr	r2, [r7, #28]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	429a      	cmp	r2, r3
 8001246:	f040 8116 	bne.w	8001476 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2b12      	cmp	r3, #18
 8001250:	d034      	beq.n	80012bc <HAL_GPIO_Init+0xa4>
 8001252:	2b12      	cmp	r3, #18
 8001254:	d80d      	bhi.n	8001272 <HAL_GPIO_Init+0x5a>
 8001256:	2b02      	cmp	r3, #2
 8001258:	d02b      	beq.n	80012b2 <HAL_GPIO_Init+0x9a>
 800125a:	2b02      	cmp	r3, #2
 800125c:	d804      	bhi.n	8001268 <HAL_GPIO_Init+0x50>
 800125e:	2b00      	cmp	r3, #0
 8001260:	d031      	beq.n	80012c6 <HAL_GPIO_Init+0xae>
 8001262:	2b01      	cmp	r3, #1
 8001264:	d01c      	beq.n	80012a0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001266:	e048      	b.n	80012fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001268:	2b03      	cmp	r3, #3
 800126a:	d043      	beq.n	80012f4 <HAL_GPIO_Init+0xdc>
 800126c:	2b11      	cmp	r3, #17
 800126e:	d01b      	beq.n	80012a8 <HAL_GPIO_Init+0x90>
          break;
 8001270:	e043      	b.n	80012fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001272:	4a89      	ldr	r2, [pc, #548]	; (8001498 <HAL_GPIO_Init+0x280>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d026      	beq.n	80012c6 <HAL_GPIO_Init+0xae>
 8001278:	4a87      	ldr	r2, [pc, #540]	; (8001498 <HAL_GPIO_Init+0x280>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d806      	bhi.n	800128c <HAL_GPIO_Init+0x74>
 800127e:	4a87      	ldr	r2, [pc, #540]	; (800149c <HAL_GPIO_Init+0x284>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d020      	beq.n	80012c6 <HAL_GPIO_Init+0xae>
 8001284:	4a86      	ldr	r2, [pc, #536]	; (80014a0 <HAL_GPIO_Init+0x288>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d01d      	beq.n	80012c6 <HAL_GPIO_Init+0xae>
          break;
 800128a:	e036      	b.n	80012fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800128c:	4a85      	ldr	r2, [pc, #532]	; (80014a4 <HAL_GPIO_Init+0x28c>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d019      	beq.n	80012c6 <HAL_GPIO_Init+0xae>
 8001292:	4a85      	ldr	r2, [pc, #532]	; (80014a8 <HAL_GPIO_Init+0x290>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d016      	beq.n	80012c6 <HAL_GPIO_Init+0xae>
 8001298:	4a84      	ldr	r2, [pc, #528]	; (80014ac <HAL_GPIO_Init+0x294>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d013      	beq.n	80012c6 <HAL_GPIO_Init+0xae>
          break;
 800129e:	e02c      	b.n	80012fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	623b      	str	r3, [r7, #32]
          break;
 80012a6:	e028      	b.n	80012fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	3304      	adds	r3, #4
 80012ae:	623b      	str	r3, [r7, #32]
          break;
 80012b0:	e023      	b.n	80012fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	3308      	adds	r3, #8
 80012b8:	623b      	str	r3, [r7, #32]
          break;
 80012ba:	e01e      	b.n	80012fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	330c      	adds	r3, #12
 80012c2:	623b      	str	r3, [r7, #32]
          break;
 80012c4:	e019      	b.n	80012fa <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d102      	bne.n	80012d4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012ce:	2304      	movs	r3, #4
 80012d0:	623b      	str	r3, [r7, #32]
          break;
 80012d2:	e012      	b.n	80012fa <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d105      	bne.n	80012e8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012dc:	2308      	movs	r3, #8
 80012de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	69fa      	ldr	r2, [r7, #28]
 80012e4:	611a      	str	r2, [r3, #16]
          break;
 80012e6:	e008      	b.n	80012fa <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012e8:	2308      	movs	r3, #8
 80012ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	69fa      	ldr	r2, [r7, #28]
 80012f0:	615a      	str	r2, [r3, #20]
          break;
 80012f2:	e002      	b.n	80012fa <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012f4:	2300      	movs	r3, #0
 80012f6:	623b      	str	r3, [r7, #32]
          break;
 80012f8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	2bff      	cmp	r3, #255	; 0xff
 80012fe:	d801      	bhi.n	8001304 <HAL_GPIO_Init+0xec>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	e001      	b.n	8001308 <HAL_GPIO_Init+0xf0>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3304      	adds	r3, #4
 8001308:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	2bff      	cmp	r3, #255	; 0xff
 800130e:	d802      	bhi.n	8001316 <HAL_GPIO_Init+0xfe>
 8001310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	e002      	b.n	800131c <HAL_GPIO_Init+0x104>
 8001316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001318:	3b08      	subs	r3, #8
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	210f      	movs	r1, #15
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	fa01 f303 	lsl.w	r3, r1, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	401a      	ands	r2, r3
 800132e:	6a39      	ldr	r1, [r7, #32]
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	fa01 f303 	lsl.w	r3, r1, r3
 8001336:	431a      	orrs	r2, r3
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001344:	2b00      	cmp	r3, #0
 8001346:	f000 8096 	beq.w	8001476 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800134a:	4b59      	ldr	r3, [pc, #356]	; (80014b0 <HAL_GPIO_Init+0x298>)
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	4a58      	ldr	r2, [pc, #352]	; (80014b0 <HAL_GPIO_Init+0x298>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6193      	str	r3, [r2, #24]
 8001356:	4b56      	ldr	r3, [pc, #344]	; (80014b0 <HAL_GPIO_Init+0x298>)
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001362:	4a54      	ldr	r2, [pc, #336]	; (80014b4 <HAL_GPIO_Init+0x29c>)
 8001364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001366:	089b      	lsrs	r3, r3, #2
 8001368:	3302      	adds	r3, #2
 800136a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001372:	f003 0303 	and.w	r3, r3, #3
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	220f      	movs	r2, #15
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	43db      	mvns	r3, r3
 8001380:	68fa      	ldr	r2, [r7, #12]
 8001382:	4013      	ands	r3, r2
 8001384:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a4b      	ldr	r2, [pc, #300]	; (80014b8 <HAL_GPIO_Init+0x2a0>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d013      	beq.n	80013b6 <HAL_GPIO_Init+0x19e>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a4a      	ldr	r2, [pc, #296]	; (80014bc <HAL_GPIO_Init+0x2a4>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d00d      	beq.n	80013b2 <HAL_GPIO_Init+0x19a>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a49      	ldr	r2, [pc, #292]	; (80014c0 <HAL_GPIO_Init+0x2a8>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d007      	beq.n	80013ae <HAL_GPIO_Init+0x196>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a48      	ldr	r2, [pc, #288]	; (80014c4 <HAL_GPIO_Init+0x2ac>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d101      	bne.n	80013aa <HAL_GPIO_Init+0x192>
 80013a6:	2303      	movs	r3, #3
 80013a8:	e006      	b.n	80013b8 <HAL_GPIO_Init+0x1a0>
 80013aa:	2304      	movs	r3, #4
 80013ac:	e004      	b.n	80013b8 <HAL_GPIO_Init+0x1a0>
 80013ae:	2302      	movs	r3, #2
 80013b0:	e002      	b.n	80013b8 <HAL_GPIO_Init+0x1a0>
 80013b2:	2301      	movs	r3, #1
 80013b4:	e000      	b.n	80013b8 <HAL_GPIO_Init+0x1a0>
 80013b6:	2300      	movs	r3, #0
 80013b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ba:	f002 0203 	and.w	r2, r2, #3
 80013be:	0092      	lsls	r2, r2, #2
 80013c0:	4093      	lsls	r3, r2
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013c8:	493a      	ldr	r1, [pc, #232]	; (80014b4 <HAL_GPIO_Init+0x29c>)
 80013ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013cc:	089b      	lsrs	r3, r3, #2
 80013ce:	3302      	adds	r3, #2
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d006      	beq.n	80013f0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013e2:	4b39      	ldr	r3, [pc, #228]	; (80014c8 <HAL_GPIO_Init+0x2b0>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	4938      	ldr	r1, [pc, #224]	; (80014c8 <HAL_GPIO_Init+0x2b0>)
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	600b      	str	r3, [r1, #0]
 80013ee:	e006      	b.n	80013fe <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013f0:	4b35      	ldr	r3, [pc, #212]	; (80014c8 <HAL_GPIO_Init+0x2b0>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	4933      	ldr	r1, [pc, #204]	; (80014c8 <HAL_GPIO_Init+0x2b0>)
 80013fa:	4013      	ands	r3, r2
 80013fc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d006      	beq.n	8001418 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800140a:	4b2f      	ldr	r3, [pc, #188]	; (80014c8 <HAL_GPIO_Init+0x2b0>)
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	492e      	ldr	r1, [pc, #184]	; (80014c8 <HAL_GPIO_Init+0x2b0>)
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	4313      	orrs	r3, r2
 8001414:	604b      	str	r3, [r1, #4]
 8001416:	e006      	b.n	8001426 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001418:	4b2b      	ldr	r3, [pc, #172]	; (80014c8 <HAL_GPIO_Init+0x2b0>)
 800141a:	685a      	ldr	r2, [r3, #4]
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	43db      	mvns	r3, r3
 8001420:	4929      	ldr	r1, [pc, #164]	; (80014c8 <HAL_GPIO_Init+0x2b0>)
 8001422:	4013      	ands	r3, r2
 8001424:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d006      	beq.n	8001440 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001432:	4b25      	ldr	r3, [pc, #148]	; (80014c8 <HAL_GPIO_Init+0x2b0>)
 8001434:	689a      	ldr	r2, [r3, #8]
 8001436:	4924      	ldr	r1, [pc, #144]	; (80014c8 <HAL_GPIO_Init+0x2b0>)
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	4313      	orrs	r3, r2
 800143c:	608b      	str	r3, [r1, #8]
 800143e:	e006      	b.n	800144e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001440:	4b21      	ldr	r3, [pc, #132]	; (80014c8 <HAL_GPIO_Init+0x2b0>)
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	43db      	mvns	r3, r3
 8001448:	491f      	ldr	r1, [pc, #124]	; (80014c8 <HAL_GPIO_Init+0x2b0>)
 800144a:	4013      	ands	r3, r2
 800144c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d006      	beq.n	8001468 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800145a:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <HAL_GPIO_Init+0x2b0>)
 800145c:	68da      	ldr	r2, [r3, #12]
 800145e:	491a      	ldr	r1, [pc, #104]	; (80014c8 <HAL_GPIO_Init+0x2b0>)
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	4313      	orrs	r3, r2
 8001464:	60cb      	str	r3, [r1, #12]
 8001466:	e006      	b.n	8001476 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001468:	4b17      	ldr	r3, [pc, #92]	; (80014c8 <HAL_GPIO_Init+0x2b0>)
 800146a:	68da      	ldr	r2, [r3, #12]
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	43db      	mvns	r3, r3
 8001470:	4915      	ldr	r1, [pc, #84]	; (80014c8 <HAL_GPIO_Init+0x2b0>)
 8001472:	4013      	ands	r3, r2
 8001474:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001478:	3301      	adds	r3, #1
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001482:	fa22 f303 	lsr.w	r3, r2, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	f47f aed0 	bne.w	800122c <HAL_GPIO_Init+0x14>
  }
}
 800148c:	bf00      	nop
 800148e:	372c      	adds	r7, #44	; 0x2c
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	10210000 	.word	0x10210000
 800149c:	10110000 	.word	0x10110000
 80014a0:	10120000 	.word	0x10120000
 80014a4:	10310000 	.word	0x10310000
 80014a8:	10320000 	.word	0x10320000
 80014ac:	10220000 	.word	0x10220000
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40010000 	.word	0x40010000
 80014b8:	40010800 	.word	0x40010800
 80014bc:	40010c00 	.word	0x40010c00
 80014c0:	40011000 	.word	0x40011000
 80014c4:	40011400 	.word	0x40011400
 80014c8:	40010400 	.word	0x40010400

080014cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	460b      	mov	r3, r1
 80014d6:	807b      	strh	r3, [r7, #2]
 80014d8:	4613      	mov	r3, r2
 80014da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014dc:	787b      	ldrb	r3, [r7, #1]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014e2:	887a      	ldrh	r2, [r7, #2]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014e8:	e003      	b.n	80014f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014ea:	887b      	ldrh	r3, [r7, #2]
 80014ec:	041a      	lsls	r2, r3, #16
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	611a      	str	r2, [r3, #16]
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr

080014fc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	460b      	mov	r3, r1
 8001506:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800150e:	887a      	ldrh	r2, [r7, #2]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4013      	ands	r3, r2
 8001514:	041a      	lsls	r2, r3, #16
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	43d9      	mvns	r1, r3
 800151a:	887b      	ldrh	r3, [r7, #2]
 800151c:	400b      	ands	r3, r1
 800151e:	431a      	orrs	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	611a      	str	r2, [r3, #16]
}
 8001524:	bf00      	nop
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr
	...

08001530 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e26c      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	2b00      	cmp	r3, #0
 800154c:	f000 8087 	beq.w	800165e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001550:	4b92      	ldr	r3, [pc, #584]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 030c 	and.w	r3, r3, #12
 8001558:	2b04      	cmp	r3, #4
 800155a:	d00c      	beq.n	8001576 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800155c:	4b8f      	ldr	r3, [pc, #572]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 030c 	and.w	r3, r3, #12
 8001564:	2b08      	cmp	r3, #8
 8001566:	d112      	bne.n	800158e <HAL_RCC_OscConfig+0x5e>
 8001568:	4b8c      	ldr	r3, [pc, #560]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001574:	d10b      	bne.n	800158e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001576:	4b89      	ldr	r3, [pc, #548]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d06c      	beq.n	800165c <HAL_RCC_OscConfig+0x12c>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d168      	bne.n	800165c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e246      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001596:	d106      	bne.n	80015a6 <HAL_RCC_OscConfig+0x76>
 8001598:	4b80      	ldr	r3, [pc, #512]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a7f      	ldr	r2, [pc, #508]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 800159e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a2:	6013      	str	r3, [r2, #0]
 80015a4:	e02e      	b.n	8001604 <HAL_RCC_OscConfig+0xd4>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d10c      	bne.n	80015c8 <HAL_RCC_OscConfig+0x98>
 80015ae:	4b7b      	ldr	r3, [pc, #492]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a7a      	ldr	r2, [pc, #488]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80015b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	4b78      	ldr	r3, [pc, #480]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a77      	ldr	r2, [pc, #476]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80015c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	e01d      	b.n	8001604 <HAL_RCC_OscConfig+0xd4>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015d0:	d10c      	bne.n	80015ec <HAL_RCC_OscConfig+0xbc>
 80015d2:	4b72      	ldr	r3, [pc, #456]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a71      	ldr	r2, [pc, #452]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80015d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	4b6f      	ldr	r3, [pc, #444]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a6e      	ldr	r2, [pc, #440]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80015e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	e00b      	b.n	8001604 <HAL_RCC_OscConfig+0xd4>
 80015ec:	4b6b      	ldr	r3, [pc, #428]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a6a      	ldr	r2, [pc, #424]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80015f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	4b68      	ldr	r3, [pc, #416]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a67      	ldr	r2, [pc, #412]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80015fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001602:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d013      	beq.n	8001634 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160c:	f7ff fcf8 	bl	8001000 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001614:	f7ff fcf4 	bl	8001000 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b64      	cmp	r3, #100	; 0x64
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e1fa      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001626:	4b5d      	ldr	r3, [pc, #372]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0f0      	beq.n	8001614 <HAL_RCC_OscConfig+0xe4>
 8001632:	e014      	b.n	800165e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001634:	f7ff fce4 	bl	8001000 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800163c:	f7ff fce0 	bl	8001000 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b64      	cmp	r3, #100	; 0x64
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e1e6      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800164e:	4b53      	ldr	r3, [pc, #332]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1f0      	bne.n	800163c <HAL_RCC_OscConfig+0x10c>
 800165a:	e000      	b.n	800165e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800165c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d063      	beq.n	8001732 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800166a:	4b4c      	ldr	r3, [pc, #304]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f003 030c 	and.w	r3, r3, #12
 8001672:	2b00      	cmp	r3, #0
 8001674:	d00b      	beq.n	800168e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001676:	4b49      	ldr	r3, [pc, #292]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 030c 	and.w	r3, r3, #12
 800167e:	2b08      	cmp	r3, #8
 8001680:	d11c      	bne.n	80016bc <HAL_RCC_OscConfig+0x18c>
 8001682:	4b46      	ldr	r3, [pc, #280]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d116      	bne.n	80016bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800168e:	4b43      	ldr	r3, [pc, #268]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d005      	beq.n	80016a6 <HAL_RCC_OscConfig+0x176>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d001      	beq.n	80016a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e1ba      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a6:	4b3d      	ldr	r3, [pc, #244]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	4939      	ldr	r1, [pc, #228]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ba:	e03a      	b.n	8001732 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d020      	beq.n	8001706 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016c4:	4b36      	ldr	r3, [pc, #216]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ca:	f7ff fc99 	bl	8001000 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016d2:	f7ff fc95 	bl	8001000 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e19b      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e4:	4b2d      	ldr	r3, [pc, #180]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0f0      	beq.n	80016d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f0:	4b2a      	ldr	r3, [pc, #168]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	695b      	ldr	r3, [r3, #20]
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	4927      	ldr	r1, [pc, #156]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 8001700:	4313      	orrs	r3, r2
 8001702:	600b      	str	r3, [r1, #0]
 8001704:	e015      	b.n	8001732 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001706:	4b26      	ldr	r3, [pc, #152]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170c:	f7ff fc78 	bl	8001000 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001714:	f7ff fc74 	bl	8001000 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e17a      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001726:	4b1d      	ldr	r3, [pc, #116]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1f0      	bne.n	8001714 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0308 	and.w	r3, r3, #8
 800173a:	2b00      	cmp	r3, #0
 800173c:	d03a      	beq.n	80017b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d019      	beq.n	800177a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001746:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <HAL_RCC_OscConfig+0x274>)
 8001748:	2201      	movs	r2, #1
 800174a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174c:	f7ff fc58 	bl	8001000 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001754:	f7ff fc54 	bl	8001000 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e15a      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001766:	4b0d      	ldr	r3, [pc, #52]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 8001768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0f0      	beq.n	8001754 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001772:	2001      	movs	r0, #1
 8001774:	f000 fb0a 	bl	8001d8c <RCC_Delay>
 8001778:	e01c      	b.n	80017b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800177a:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <HAL_RCC_OscConfig+0x274>)
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001780:	f7ff fc3e 	bl	8001000 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001786:	e00f      	b.n	80017a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001788:	f7ff fc3a 	bl	8001000 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d908      	bls.n	80017a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e140      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
 800179a:	bf00      	nop
 800179c:	40021000 	.word	0x40021000
 80017a0:	42420000 	.word	0x42420000
 80017a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a8:	4b9e      	ldr	r3, [pc, #632]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 80017aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1e9      	bne.n	8001788 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f000 80a6 	beq.w	800190e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017c2:	2300      	movs	r3, #0
 80017c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017c6:	4b97      	ldr	r3, [pc, #604]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d10d      	bne.n	80017ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017d2:	4b94      	ldr	r3, [pc, #592]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	4a93      	ldr	r2, [pc, #588]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 80017d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017dc:	61d3      	str	r3, [r2, #28]
 80017de:	4b91      	ldr	r3, [pc, #580]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ea:	2301      	movs	r3, #1
 80017ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ee:	4b8e      	ldr	r3, [pc, #568]	; (8001a28 <HAL_RCC_OscConfig+0x4f8>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d118      	bne.n	800182c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017fa:	4b8b      	ldr	r3, [pc, #556]	; (8001a28 <HAL_RCC_OscConfig+0x4f8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a8a      	ldr	r2, [pc, #552]	; (8001a28 <HAL_RCC_OscConfig+0x4f8>)
 8001800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001804:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001806:	f7ff fbfb 	bl	8001000 <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800180e:	f7ff fbf7 	bl	8001000 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b64      	cmp	r3, #100	; 0x64
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e0fd      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001820:	4b81      	ldr	r3, [pc, #516]	; (8001a28 <HAL_RCC_OscConfig+0x4f8>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0f0      	beq.n	800180e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d106      	bne.n	8001842 <HAL_RCC_OscConfig+0x312>
 8001834:	4b7b      	ldr	r3, [pc, #492]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	4a7a      	ldr	r2, [pc, #488]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 800183a:	f043 0301 	orr.w	r3, r3, #1
 800183e:	6213      	str	r3, [r2, #32]
 8001840:	e02d      	b.n	800189e <HAL_RCC_OscConfig+0x36e>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10c      	bne.n	8001864 <HAL_RCC_OscConfig+0x334>
 800184a:	4b76      	ldr	r3, [pc, #472]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 800184c:	6a1b      	ldr	r3, [r3, #32]
 800184e:	4a75      	ldr	r2, [pc, #468]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 8001850:	f023 0301 	bic.w	r3, r3, #1
 8001854:	6213      	str	r3, [r2, #32]
 8001856:	4b73      	ldr	r3, [pc, #460]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 8001858:	6a1b      	ldr	r3, [r3, #32]
 800185a:	4a72      	ldr	r2, [pc, #456]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 800185c:	f023 0304 	bic.w	r3, r3, #4
 8001860:	6213      	str	r3, [r2, #32]
 8001862:	e01c      	b.n	800189e <HAL_RCC_OscConfig+0x36e>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	2b05      	cmp	r3, #5
 800186a:	d10c      	bne.n	8001886 <HAL_RCC_OscConfig+0x356>
 800186c:	4b6d      	ldr	r3, [pc, #436]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	4a6c      	ldr	r2, [pc, #432]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 8001872:	f043 0304 	orr.w	r3, r3, #4
 8001876:	6213      	str	r3, [r2, #32]
 8001878:	4b6a      	ldr	r3, [pc, #424]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 800187a:	6a1b      	ldr	r3, [r3, #32]
 800187c:	4a69      	ldr	r2, [pc, #420]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	6213      	str	r3, [r2, #32]
 8001884:	e00b      	b.n	800189e <HAL_RCC_OscConfig+0x36e>
 8001886:	4b67      	ldr	r3, [pc, #412]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	4a66      	ldr	r2, [pc, #408]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 800188c:	f023 0301 	bic.w	r3, r3, #1
 8001890:	6213      	str	r3, [r2, #32]
 8001892:	4b64      	ldr	r3, [pc, #400]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 8001894:	6a1b      	ldr	r3, [r3, #32]
 8001896:	4a63      	ldr	r2, [pc, #396]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 8001898:	f023 0304 	bic.w	r3, r3, #4
 800189c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d015      	beq.n	80018d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a6:	f7ff fbab 	bl	8001000 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ac:	e00a      	b.n	80018c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ae:	f7ff fba7 	bl	8001000 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018bc:	4293      	cmp	r3, r2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e0ab      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c4:	4b57      	ldr	r3, [pc, #348]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d0ee      	beq.n	80018ae <HAL_RCC_OscConfig+0x37e>
 80018d0:	e014      	b.n	80018fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d2:	f7ff fb95 	bl	8001000 <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018d8:	e00a      	b.n	80018f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018da:	f7ff fb91 	bl	8001000 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e095      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f0:	4b4c      	ldr	r3, [pc, #304]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1ee      	bne.n	80018da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018fc:	7dfb      	ldrb	r3, [r7, #23]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d105      	bne.n	800190e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001902:	4b48      	ldr	r3, [pc, #288]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	4a47      	ldr	r2, [pc, #284]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 8001908:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800190c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 8081 	beq.w	8001a1a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001918:	4b42      	ldr	r3, [pc, #264]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 030c 	and.w	r3, r3, #12
 8001920:	2b08      	cmp	r3, #8
 8001922:	d061      	beq.n	80019e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69db      	ldr	r3, [r3, #28]
 8001928:	2b02      	cmp	r3, #2
 800192a:	d146      	bne.n	80019ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800192c:	4b3f      	ldr	r3, [pc, #252]	; (8001a2c <HAL_RCC_OscConfig+0x4fc>)
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001932:	f7ff fb65 	bl	8001000 <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800193a:	f7ff fb61 	bl	8001000 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e067      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800194c:	4b35      	ldr	r3, [pc, #212]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1f0      	bne.n	800193a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001960:	d108      	bne.n	8001974 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001962:	4b30      	ldr	r3, [pc, #192]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	492d      	ldr	r1, [pc, #180]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 8001970:	4313      	orrs	r3, r2
 8001972:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001974:	4b2b      	ldr	r3, [pc, #172]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a19      	ldr	r1, [r3, #32]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001984:	430b      	orrs	r3, r1
 8001986:	4927      	ldr	r1, [pc, #156]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 8001988:	4313      	orrs	r3, r2
 800198a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800198c:	4b27      	ldr	r3, [pc, #156]	; (8001a2c <HAL_RCC_OscConfig+0x4fc>)
 800198e:	2201      	movs	r2, #1
 8001990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001992:	f7ff fb35 	bl	8001000 <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001998:	e008      	b.n	80019ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199a:	f7ff fb31 	bl	8001000 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e037      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019ac:	4b1d      	ldr	r3, [pc, #116]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0f0      	beq.n	800199a <HAL_RCC_OscConfig+0x46a>
 80019b8:	e02f      	b.n	8001a1a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ba:	4b1c      	ldr	r3, [pc, #112]	; (8001a2c <HAL_RCC_OscConfig+0x4fc>)
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c0:	f7ff fb1e 	bl	8001000 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c8:	f7ff fb1a 	bl	8001000 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e020      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019da:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1f0      	bne.n	80019c8 <HAL_RCC_OscConfig+0x498>
 80019e6:	e018      	b.n	8001a1a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	69db      	ldr	r3, [r3, #28]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d101      	bne.n	80019f4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e013      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d106      	bne.n	8001a16 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d001      	beq.n	8001a1a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e000      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40007000 	.word	0x40007000
 8001a2c:	42420060 	.word	0x42420060

08001a30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e0d0      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a44:	4b6a      	ldr	r3, [pc, #424]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d910      	bls.n	8001a74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a52:	4b67      	ldr	r3, [pc, #412]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f023 0207 	bic.w	r2, r3, #7
 8001a5a:	4965      	ldr	r1, [pc, #404]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a62:	4b63      	ldr	r3, [pc, #396]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d001      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e0b8      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d020      	beq.n	8001ac2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d005      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a8c:	4b59      	ldr	r3, [pc, #356]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	4a58      	ldr	r2, [pc, #352]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0308 	and.w	r3, r3, #8
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d005      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aa4:	4b53      	ldr	r3, [pc, #332]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	4a52      	ldr	r2, [pc, #328]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001aaa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001aae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab0:	4b50      	ldr	r3, [pc, #320]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	494d      	ldr	r1, [pc, #308]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d040      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d107      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad6:	4b47      	ldr	r3, [pc, #284]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d115      	bne.n	8001b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e07f      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d107      	bne.n	8001afe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aee:	4b41      	ldr	r3, [pc, #260]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d109      	bne.n	8001b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e073      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001afe:	4b3d      	ldr	r3, [pc, #244]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e06b      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b0e:	4b39      	ldr	r3, [pc, #228]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f023 0203 	bic.w	r2, r3, #3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	4936      	ldr	r1, [pc, #216]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b20:	f7ff fa6e 	bl	8001000 <HAL_GetTick>
 8001b24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b26:	e00a      	b.n	8001b3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b28:	f7ff fa6a 	bl	8001000 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e053      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b3e:	4b2d      	ldr	r3, [pc, #180]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f003 020c 	and.w	r2, r3, #12
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d1eb      	bne.n	8001b28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b50:	4b27      	ldr	r3, [pc, #156]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d210      	bcs.n	8001b80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b5e:	4b24      	ldr	r3, [pc, #144]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f023 0207 	bic.w	r2, r3, #7
 8001b66:	4922      	ldr	r1, [pc, #136]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6e:	4b20      	ldr	r3, [pc, #128]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d001      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e032      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d008      	beq.n	8001b9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b8c:	4b19      	ldr	r3, [pc, #100]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	4916      	ldr	r1, [pc, #88]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d009      	beq.n	8001bbe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001baa:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	490e      	ldr	r1, [pc, #56]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bbe:	f000 f821 	bl	8001c04 <HAL_RCC_GetSysClockFreq>
 8001bc2:	4601      	mov	r1, r0
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	091b      	lsrs	r3, r3, #4
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001bd0:	5cd3      	ldrb	r3, [r2, r3]
 8001bd2:	fa21 f303 	lsr.w	r3, r1, r3
 8001bd6:	4a09      	ldr	r2, [pc, #36]	; (8001bfc <HAL_RCC_ClockConfig+0x1cc>)
 8001bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bda:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <HAL_RCC_ClockConfig+0x1d0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff f90c 	bl	8000dfc <HAL_InitTick>

  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40022000 	.word	0x40022000
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	08005f90 	.word	0x08005f90
 8001bfc:	20000028 	.word	0x20000028
 8001c00:	2000002c 	.word	0x2000002c

08001c04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c04:	b490      	push	{r4, r7}
 8001c06:	b08a      	sub	sp, #40	; 0x28
 8001c08:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c0a:	4b2a      	ldr	r3, [pc, #168]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c0c:	1d3c      	adds	r4, r7, #4
 8001c0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c14:	4b28      	ldr	r3, [pc, #160]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61fb      	str	r3, [r7, #28]
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61bb      	str	r3, [r7, #24]
 8001c22:	2300      	movs	r3, #0
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c2e:	4b23      	ldr	r3, [pc, #140]	; (8001cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f003 030c 	and.w	r3, r3, #12
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	d002      	beq.n	8001c44 <HAL_RCC_GetSysClockFreq+0x40>
 8001c3e:	2b08      	cmp	r3, #8
 8001c40:	d003      	beq.n	8001c4a <HAL_RCC_GetSysClockFreq+0x46>
 8001c42:	e02d      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c44:	4b1e      	ldr	r3, [pc, #120]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c46:	623b      	str	r3, [r7, #32]
      break;
 8001c48:	e02d      	b.n	8001ca6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	0c9b      	lsrs	r3, r3, #18
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c56:	4413      	add	r3, r2
 8001c58:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c5c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d013      	beq.n	8001c90 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c68:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	0c5b      	lsrs	r3, r3, #17
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c76:	4413      	add	r3, r2
 8001c78:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c7c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	4a0f      	ldr	r2, [pc, #60]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c82:	fb02 f203 	mul.w	r2, r2, r3
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c8e:	e004      	b.n	8001c9a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	4a0c      	ldr	r2, [pc, #48]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c94:	fb02 f303 	mul.w	r3, r2, r3
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	623b      	str	r3, [r7, #32]
      break;
 8001c9e:	e002      	b.n	8001ca6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ca0:	4b07      	ldr	r3, [pc, #28]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ca2:	623b      	str	r3, [r7, #32]
      break;
 8001ca4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ca6:	6a3b      	ldr	r3, [r7, #32]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3728      	adds	r7, #40	; 0x28
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc90      	pop	{r4, r7}
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	08005ec8 	.word	0x08005ec8
 8001cb8:	08005ed8 	.word	0x08005ed8
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	007a1200 	.word	0x007a1200
 8001cc4:	003d0900 	.word	0x003d0900

08001cc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ccc:	4b02      	ldr	r3, [pc, #8]	; (8001cd8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cce:	681b      	ldr	r3, [r3, #0]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr
 8001cd8:	20000028 	.word	0x20000028

08001cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ce0:	f7ff fff2 	bl	8001cc8 <HAL_RCC_GetHCLKFreq>
 8001ce4:	4601      	mov	r1, r0
 8001ce6:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	0a1b      	lsrs	r3, r3, #8
 8001cec:	f003 0307 	and.w	r3, r3, #7
 8001cf0:	4a03      	ldr	r2, [pc, #12]	; (8001d00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cf2:	5cd3      	ldrb	r3, [r2, r3]
 8001cf4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	08005fa0 	.word	0x08005fa0

08001d04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d08:	f7ff ffde 	bl	8001cc8 <HAL_RCC_GetHCLKFreq>
 8001d0c:	4601      	mov	r1, r0
 8001d0e:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	0adb      	lsrs	r3, r3, #11
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	4a03      	ldr	r2, [pc, #12]	; (8001d28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d1a:	5cd3      	ldrb	r3, [r2, r3]
 8001d1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40021000 	.word	0x40021000
 8001d28:	08005fa0 	.word	0x08005fa0

08001d2c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	220f      	movs	r2, #15
 8001d3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d3c:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <HAL_RCC_GetClockConfig+0x58>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 0203 	and.w	r2, r3, #3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d48:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <HAL_RCC_GetClockConfig+0x58>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d54:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <HAL_RCC_GetClockConfig+0x58>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001d60:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <HAL_RCC_GetClockConfig+0x58>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	08db      	lsrs	r3, r3, #3
 8001d66:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d6e:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <HAL_RCC_GetClockConfig+0x5c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0207 	and.w	r2, r3, #7
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40022000 	.word	0x40022000

08001d8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d94:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <RCC_Delay+0x34>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a0a      	ldr	r2, [pc, #40]	; (8001dc4 <RCC_Delay+0x38>)
 8001d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9e:	0a5b      	lsrs	r3, r3, #9
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	fb02 f303 	mul.w	r3, r2, r3
 8001da6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001da8:	bf00      	nop
  }
  while (Delay --);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	1e5a      	subs	r2, r3, #1
 8001dae:	60fa      	str	r2, [r7, #12]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1f9      	bne.n	8001da8 <RCC_Delay+0x1c>
}
 8001db4:	bf00      	nop
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	20000028 	.word	0x20000028
 8001dc4:	10624dd3 	.word	0x10624dd3

08001dc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e041      	b.n	8001e5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d106      	bne.n	8001df4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f839 	bl	8001e66 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2202      	movs	r2, #2
 8001df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3304      	adds	r3, #4
 8001e04:	4619      	mov	r1, r3
 8001e06:	4610      	mov	r0, r2
 8001e08:	f000 f9b4 	bl	8002174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr

08001e78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d001      	beq.n	8001e90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e03a      	b.n	8001f06 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2202      	movs	r2, #2
 8001e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68da      	ldr	r2, [r3, #12]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0201 	orr.w	r2, r2, #1
 8001ea6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a18      	ldr	r2, [pc, #96]	; (8001f10 <HAL_TIM_Base_Start_IT+0x98>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d00e      	beq.n	8001ed0 <HAL_TIM_Base_Start_IT+0x58>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eba:	d009      	beq.n	8001ed0 <HAL_TIM_Base_Start_IT+0x58>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a14      	ldr	r2, [pc, #80]	; (8001f14 <HAL_TIM_Base_Start_IT+0x9c>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d004      	beq.n	8001ed0 <HAL_TIM_Base_Start_IT+0x58>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a13      	ldr	r2, [pc, #76]	; (8001f18 <HAL_TIM_Base_Start_IT+0xa0>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d111      	bne.n	8001ef4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2b06      	cmp	r3, #6
 8001ee0:	d010      	beq.n	8001f04 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f042 0201 	orr.w	r2, r2, #1
 8001ef0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ef2:	e007      	b.n	8001f04 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0201 	orr.w	r2, r2, #1
 8001f02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr
 8001f10:	40012c00 	.word	0x40012c00
 8001f14:	40000400 	.word	0x40000400
 8001f18:	40000800 	.word	0x40000800

08001f1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d122      	bne.n	8001f78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d11b      	bne.n	8001f78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f06f 0202 	mvn.w	r2, #2
 8001f48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f8ed 	bl	800213e <HAL_TIM_IC_CaptureCallback>
 8001f64:	e005      	b.n	8001f72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f8e0 	bl	800212c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 f8ef 	bl	8002150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	f003 0304 	and.w	r3, r3, #4
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	d122      	bne.n	8001fcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	2b04      	cmp	r3, #4
 8001f92:	d11b      	bne.n	8001fcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f06f 0204 	mvn.w	r2, #4
 8001f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f8c3 	bl	800213e <HAL_TIM_IC_CaptureCallback>
 8001fb8:	e005      	b.n	8001fc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f8b6 	bl	800212c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 f8c5 	bl	8002150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	2b08      	cmp	r3, #8
 8001fd8:	d122      	bne.n	8002020 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	f003 0308 	and.w	r3, r3, #8
 8001fe4:	2b08      	cmp	r3, #8
 8001fe6:	d11b      	bne.n	8002020 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f06f 0208 	mvn.w	r2, #8
 8001ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2204      	movs	r2, #4
 8001ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f899 	bl	800213e <HAL_TIM_IC_CaptureCallback>
 800200c:	e005      	b.n	800201a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f88c 	bl	800212c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f89b 	bl	8002150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	f003 0310 	and.w	r3, r3, #16
 800202a:	2b10      	cmp	r3, #16
 800202c:	d122      	bne.n	8002074 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	f003 0310 	and.w	r3, r3, #16
 8002038:	2b10      	cmp	r3, #16
 800203a:	d11b      	bne.n	8002074 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f06f 0210 	mvn.w	r2, #16
 8002044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2208      	movs	r2, #8
 800204a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f86f 	bl	800213e <HAL_TIM_IC_CaptureCallback>
 8002060:	e005      	b.n	800206e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f862 	bl	800212c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 f871 	bl	8002150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b01      	cmp	r3, #1
 8002080:	d10e      	bne.n	80020a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	2b01      	cmp	r3, #1
 800208e:	d107      	bne.n	80020a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f06f 0201 	mvn.w	r2, #1
 8002098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7fe fe04 	bl	8000ca8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020aa:	2b80      	cmp	r3, #128	; 0x80
 80020ac:	d10e      	bne.n	80020cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b8:	2b80      	cmp	r3, #128	; 0x80
 80020ba:	d107      	bne.n	80020cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f8bf 	bl	800224a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d6:	2b40      	cmp	r3, #64	; 0x40
 80020d8:	d10e      	bne.n	80020f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e4:	2b40      	cmp	r3, #64	; 0x40
 80020e6:	d107      	bne.n	80020f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f835 	bl	8002162 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	f003 0320 	and.w	r3, r3, #32
 8002102:	2b20      	cmp	r3, #32
 8002104:	d10e      	bne.n	8002124 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	f003 0320 	and.w	r3, r3, #32
 8002110:	2b20      	cmp	r3, #32
 8002112:	d107      	bne.n	8002124 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f06f 0220 	mvn.w	r2, #32
 800211c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 f88a 	bl	8002238 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002124:	bf00      	nop
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr

0800213e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr

08002150 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr

08002162 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr

08002174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a29      	ldr	r2, [pc, #164]	; (800222c <TIM_Base_SetConfig+0xb8>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d00b      	beq.n	80021a4 <TIM_Base_SetConfig+0x30>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002192:	d007      	beq.n	80021a4 <TIM_Base_SetConfig+0x30>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a26      	ldr	r2, [pc, #152]	; (8002230 <TIM_Base_SetConfig+0xbc>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d003      	beq.n	80021a4 <TIM_Base_SetConfig+0x30>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a25      	ldr	r2, [pc, #148]	; (8002234 <TIM_Base_SetConfig+0xc0>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d108      	bne.n	80021b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a1c      	ldr	r2, [pc, #112]	; (800222c <TIM_Base_SetConfig+0xb8>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d00b      	beq.n	80021d6 <TIM_Base_SetConfig+0x62>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021c4:	d007      	beq.n	80021d6 <TIM_Base_SetConfig+0x62>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a19      	ldr	r2, [pc, #100]	; (8002230 <TIM_Base_SetConfig+0xbc>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d003      	beq.n	80021d6 <TIM_Base_SetConfig+0x62>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a18      	ldr	r2, [pc, #96]	; (8002234 <TIM_Base_SetConfig+0xc0>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d108      	bne.n	80021e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a07      	ldr	r2, [pc, #28]	; (800222c <TIM_Base_SetConfig+0xb8>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d103      	bne.n	800221c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	691a      	ldr	r2, [r3, #16]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	615a      	str	r2, [r3, #20]
}
 8002222:	bf00      	nop
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr
 800222c:	40012c00 	.word	0x40012c00
 8002230:	40000400 	.word	0x40000400
 8002234:	40000800 	.word	0x40000800

08002238 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr

0800224a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr

0800225c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e03f      	b.n	80022ee <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d106      	bne.n	8002288 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7fe fd5a 	bl	8000d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2224      	movs	r2, #36	; 0x24
 800228c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68da      	ldr	r2, [r3, #12]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800229e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 f9a3 	bl	80025ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	691a      	ldr	r2, [r3, #16]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	695a      	ldr	r2, [r3, #20]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68da      	ldr	r2, [r3, #12]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2220      	movs	r2, #32
 80022e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2220      	movs	r2, #32
 80022e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b08a      	sub	sp, #40	; 0x28
 80022fa:	af02      	add	r7, sp, #8
 80022fc:	60f8      	str	r0, [r7, #12]
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	603b      	str	r3, [r7, #0]
 8002302:	4613      	mov	r3, r2
 8002304:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b20      	cmp	r3, #32
 8002314:	d17c      	bne.n	8002410 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d002      	beq.n	8002322 <HAL_UART_Transmit+0x2c>
 800231c:	88fb      	ldrh	r3, [r7, #6]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e075      	b.n	8002412 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800232c:	2b01      	cmp	r3, #1
 800232e:	d101      	bne.n	8002334 <HAL_UART_Transmit+0x3e>
 8002330:	2302      	movs	r3, #2
 8002332:	e06e      	b.n	8002412 <HAL_UART_Transmit+0x11c>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2221      	movs	r2, #33	; 0x21
 8002346:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800234a:	f7fe fe59 	bl	8001000 <HAL_GetTick>
 800234e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	88fa      	ldrh	r2, [r7, #6]
 8002354:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	88fa      	ldrh	r2, [r7, #6]
 800235a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002364:	d108      	bne.n	8002378 <HAL_UART_Transmit+0x82>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d104      	bne.n	8002378 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800236e:	2300      	movs	r3, #0
 8002370:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	61bb      	str	r3, [r7, #24]
 8002376:	e003      	b.n	8002380 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800237c:	2300      	movs	r3, #0
 800237e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002388:	e02a      	b.n	80023e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	2200      	movs	r2, #0
 8002392:	2180      	movs	r1, #128	; 0x80
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f000 f8df 	bl	8002558 <UART_WaitOnFlagUntilTimeout>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e036      	b.n	8002412 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10b      	bne.n	80023c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	461a      	mov	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	3302      	adds	r3, #2
 80023be:	61bb      	str	r3, [r7, #24]
 80023c0:	e007      	b.n	80023d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	781a      	ldrb	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	3301      	adds	r3, #1
 80023d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	3b01      	subs	r3, #1
 80023da:	b29a      	uxth	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1cf      	bne.n	800238a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	2200      	movs	r2, #0
 80023f2:	2140      	movs	r1, #64	; 0x40
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f000 f8af 	bl	8002558 <UART_WaitOnFlagUntilTimeout>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e006      	b.n	8002412 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2220      	movs	r2, #32
 8002408:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800240c:	2300      	movs	r3, #0
 800240e:	e000      	b.n	8002412 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002410:	2302      	movs	r3, #2
  }
}
 8002412:	4618      	mov	r0, r3
 8002414:	3720      	adds	r7, #32
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b08a      	sub	sp, #40	; 0x28
 800241e:	af02      	add	r7, sp, #8
 8002420:	60f8      	str	r0, [r7, #12]
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	603b      	str	r3, [r7, #0]
 8002426:	4613      	mov	r3, r2
 8002428:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800242a:	2300      	movs	r3, #0
 800242c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b20      	cmp	r3, #32
 8002438:	f040 8089 	bne.w	800254e <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <HAL_UART_Receive+0x2e>
 8002442:	88fb      	ldrh	r3, [r7, #6]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e081      	b.n	8002550 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002452:	2b01      	cmp	r3, #1
 8002454:	d101      	bne.n	800245a <HAL_UART_Receive+0x40>
 8002456:	2302      	movs	r3, #2
 8002458:	e07a      	b.n	8002550 <HAL_UART_Receive+0x136>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2222      	movs	r2, #34	; 0x22
 800246c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002470:	f7fe fdc6 	bl	8001000 <HAL_GetTick>
 8002474:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	88fa      	ldrh	r2, [r7, #6]
 800247a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	88fa      	ldrh	r2, [r7, #6]
 8002480:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800248a:	d108      	bne.n	800249e <HAL_UART_Receive+0x84>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d104      	bne.n	800249e <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8002494:	2300      	movs	r3, #0
 8002496:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	61bb      	str	r3, [r7, #24]
 800249c:	e003      	b.n	80024a6 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80024ae:	e043      	b.n	8002538 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	2200      	movs	r2, #0
 80024b8:	2120      	movs	r1, #32
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f000 f84c 	bl	8002558 <UART_WaitOnFlagUntilTimeout>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e042      	b.n	8002550 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10c      	bne.n	80024ea <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024dc:	b29a      	uxth	r2, r3
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	3302      	adds	r3, #2
 80024e6:	61bb      	str	r3, [r7, #24]
 80024e8:	e01f      	b.n	800252a <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024f2:	d007      	beq.n	8002504 <HAL_UART_Receive+0xea>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10a      	bne.n	8002512 <HAL_UART_Receive+0xf8>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d106      	bne.n	8002512 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	b2da      	uxtb	r2, r3
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	701a      	strb	r2, [r3, #0]
 8002510:	e008      	b.n	8002524 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	b2db      	uxtb	r3, r3
 800251a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800251e:	b2da      	uxtb	r2, r3
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	3301      	adds	r3, #1
 8002528:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800252e:	b29b      	uxth	r3, r3
 8002530:	3b01      	subs	r3, #1
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800253c:	b29b      	uxth	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1b6      	bne.n	80024b0 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2220      	movs	r2, #32
 8002546:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800254a:	2300      	movs	r3, #0
 800254c:	e000      	b.n	8002550 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 800254e:	2302      	movs	r3, #2
  }
}
 8002550:	4618      	mov	r0, r3
 8002552:	3720      	adds	r7, #32
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	603b      	str	r3, [r7, #0]
 8002564:	4613      	mov	r3, r2
 8002566:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002568:	e02c      	b.n	80025c4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002570:	d028      	beq.n	80025c4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d007      	beq.n	8002588 <UART_WaitOnFlagUntilTimeout+0x30>
 8002578:	f7fe fd42 	bl	8001000 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	429a      	cmp	r2, r3
 8002586:	d21d      	bcs.n	80025c4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002596:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	695a      	ldr	r2, [r3, #20]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 0201 	bic.w	r2, r2, #1
 80025a6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2220      	movs	r2, #32
 80025ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2220      	movs	r2, #32
 80025b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e00f      	b.n	80025e4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	4013      	ands	r3, r2
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	bf0c      	ite	eq
 80025d4:	2301      	moveq	r3, #1
 80025d6:	2300      	movne	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	461a      	mov	r2, r3
 80025dc:	79fb      	ldrb	r3, [r7, #7]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d0c3      	beq.n	800256a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68da      	ldr	r2, [r3, #12]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	4313      	orrs	r3, r2
 800261a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002626:	f023 030c 	bic.w	r3, r3, #12
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	6812      	ldr	r2, [r2, #0]
 800262e:	68b9      	ldr	r1, [r7, #8]
 8002630:	430b      	orrs	r3, r1
 8002632:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	699a      	ldr	r2, [r3, #24]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	430a      	orrs	r2, r1
 8002648:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a2c      	ldr	r2, [pc, #176]	; (8002700 <UART_SetConfig+0x114>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d103      	bne.n	800265c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002654:	f7ff fb56 	bl	8001d04 <HAL_RCC_GetPCLK2Freq>
 8002658:	60f8      	str	r0, [r7, #12]
 800265a:	e002      	b.n	8002662 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800265c:	f7ff fb3e 	bl	8001cdc <HAL_RCC_GetPCLK1Freq>
 8002660:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	009a      	lsls	r2, r3, #2
 800266c:	441a      	add	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	fbb2 f3f3 	udiv	r3, r2, r3
 8002678:	4a22      	ldr	r2, [pc, #136]	; (8002704 <UART_SetConfig+0x118>)
 800267a:	fba2 2303 	umull	r2, r3, r2, r3
 800267e:	095b      	lsrs	r3, r3, #5
 8002680:	0119      	lsls	r1, r3, #4
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	4613      	mov	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	009a      	lsls	r2, r3, #2
 800268c:	441a      	add	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	fbb2 f2f3 	udiv	r2, r2, r3
 8002698:	4b1a      	ldr	r3, [pc, #104]	; (8002704 <UART_SetConfig+0x118>)
 800269a:	fba3 0302 	umull	r0, r3, r3, r2
 800269e:	095b      	lsrs	r3, r3, #5
 80026a0:	2064      	movs	r0, #100	; 0x64
 80026a2:	fb00 f303 	mul.w	r3, r0, r3
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	011b      	lsls	r3, r3, #4
 80026aa:	3332      	adds	r3, #50	; 0x32
 80026ac:	4a15      	ldr	r2, [pc, #84]	; (8002704 <UART_SetConfig+0x118>)
 80026ae:	fba2 2303 	umull	r2, r3, r2, r3
 80026b2:	095b      	lsrs	r3, r3, #5
 80026b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026b8:	4419      	add	r1, r3
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	4613      	mov	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	009a      	lsls	r2, r3, #2
 80026c4:	441a      	add	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80026d0:	4b0c      	ldr	r3, [pc, #48]	; (8002704 <UART_SetConfig+0x118>)
 80026d2:	fba3 0302 	umull	r0, r3, r3, r2
 80026d6:	095b      	lsrs	r3, r3, #5
 80026d8:	2064      	movs	r0, #100	; 0x64
 80026da:	fb00 f303 	mul.w	r3, r0, r3
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	011b      	lsls	r3, r3, #4
 80026e2:	3332      	adds	r3, #50	; 0x32
 80026e4:	4a07      	ldr	r2, [pc, #28]	; (8002704 <UART_SetConfig+0x118>)
 80026e6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ea:	095b      	lsrs	r3, r3, #5
 80026ec:	f003 020f 	and.w	r2, r3, #15
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	440a      	add	r2, r1
 80026f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80026f8:	bf00      	nop
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40013800 	.word	0x40013800
 8002704:	51eb851f 	.word	0x51eb851f

08002708 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800270e:	f3ef 8305 	mrs	r3, IPSR
 8002712:	60bb      	str	r3, [r7, #8]
  return(result);
 8002714:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10f      	bne.n	800273a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800271a:	f3ef 8310 	mrs	r3, PRIMASK
 800271e:	607b      	str	r3, [r7, #4]
  return(result);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d109      	bne.n	800273a <osKernelInitialize+0x32>
 8002726:	4b10      	ldr	r3, [pc, #64]	; (8002768 <osKernelInitialize+0x60>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2b02      	cmp	r3, #2
 800272c:	d109      	bne.n	8002742 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800272e:	f3ef 8311 	mrs	r3, BASEPRI
 8002732:	603b      	str	r3, [r7, #0]
  return(result);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800273a:	f06f 0305 	mvn.w	r3, #5
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	e00c      	b.n	800275c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002742:	4b09      	ldr	r3, [pc, #36]	; (8002768 <osKernelInitialize+0x60>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d105      	bne.n	8002756 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800274a:	4b07      	ldr	r3, [pc, #28]	; (8002768 <osKernelInitialize+0x60>)
 800274c:	2201      	movs	r2, #1
 800274e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002750:	2300      	movs	r3, #0
 8002752:	60fb      	str	r3, [r7, #12]
 8002754:	e002      	b.n	800275c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002756:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800275a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800275c:	68fb      	ldr	r3, [r7, #12]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3714      	adds	r7, #20
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr
 8002768:	200000c0 	.word	0x200000c0

0800276c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002772:	f3ef 8305 	mrs	r3, IPSR
 8002776:	60bb      	str	r3, [r7, #8]
  return(result);
 8002778:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10f      	bne.n	800279e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800277e:	f3ef 8310 	mrs	r3, PRIMASK
 8002782:	607b      	str	r3, [r7, #4]
  return(result);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d109      	bne.n	800279e <osKernelStart+0x32>
 800278a:	4b11      	ldr	r3, [pc, #68]	; (80027d0 <osKernelStart+0x64>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2b02      	cmp	r3, #2
 8002790:	d109      	bne.n	80027a6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002792:	f3ef 8311 	mrs	r3, BASEPRI
 8002796:	603b      	str	r3, [r7, #0]
  return(result);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <osKernelStart+0x3a>
    stat = osErrorISR;
 800279e:	f06f 0305 	mvn.w	r3, #5
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	e00e      	b.n	80027c4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80027a6:	4b0a      	ldr	r3, [pc, #40]	; (80027d0 <osKernelStart+0x64>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d107      	bne.n	80027be <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80027ae:	4b08      	ldr	r3, [pc, #32]	; (80027d0 <osKernelStart+0x64>)
 80027b0:	2202      	movs	r2, #2
 80027b2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80027b4:	f001 fa8a 	bl	8003ccc <vTaskStartScheduler>
      stat = osOK;
 80027b8:	2300      	movs	r3, #0
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	e002      	b.n	80027c4 <osKernelStart+0x58>
    } else {
      stat = osError;
 80027be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027c2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80027c4:	68fb      	ldr	r3, [r7, #12]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	200000c0 	.word	0x200000c0

080027d4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b092      	sub	sp, #72	; 0x48
 80027d8:	af04      	add	r7, sp, #16
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027e4:	f3ef 8305 	mrs	r3, IPSR
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f040 8094 	bne.w	800291a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027f2:	f3ef 8310 	mrs	r3, PRIMASK
 80027f6:	623b      	str	r3, [r7, #32]
  return(result);
 80027f8:	6a3b      	ldr	r3, [r7, #32]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f040 808d 	bne.w	800291a <osThreadNew+0x146>
 8002800:	4b48      	ldr	r3, [pc, #288]	; (8002924 <osThreadNew+0x150>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2b02      	cmp	r3, #2
 8002806:	d106      	bne.n	8002816 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002808:	f3ef 8311 	mrs	r3, BASEPRI
 800280c:	61fb      	str	r3, [r7, #28]
  return(result);
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	2b00      	cmp	r3, #0
 8002812:	f040 8082 	bne.w	800291a <osThreadNew+0x146>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d07e      	beq.n	800291a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800281c:	2380      	movs	r3, #128	; 0x80
 800281e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002820:	2318      	movs	r3, #24
 8002822:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002824:	2300      	movs	r3, #0
 8002826:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002828:	f107 031b 	add.w	r3, r7, #27
 800282c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800282e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002832:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d045      	beq.n	80028c6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d002      	beq.n	8002848 <osThreadNew+0x74>
        name = attr->name;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d002      	beq.n	8002856 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002858:	2b00      	cmp	r3, #0
 800285a:	d008      	beq.n	800286e <osThreadNew+0x9a>
 800285c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800285e:	2b38      	cmp	r3, #56	; 0x38
 8002860:	d805      	bhi.n	800286e <osThreadNew+0x9a>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <osThreadNew+0x9e>
        return (NULL);
 800286e:	2300      	movs	r3, #0
 8002870:	e054      	b.n	800291c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	089b      	lsrs	r3, r3, #2
 8002880:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00e      	beq.n	80028a8 <osThreadNew+0xd4>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	2b5b      	cmp	r3, #91	; 0x5b
 8002890:	d90a      	bls.n	80028a8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002896:	2b00      	cmp	r3, #0
 8002898:	d006      	beq.n	80028a8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d002      	beq.n	80028a8 <osThreadNew+0xd4>
        mem = 1;
 80028a2:	2301      	movs	r3, #1
 80028a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80028a6:	e010      	b.n	80028ca <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d10c      	bne.n	80028ca <osThreadNew+0xf6>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d108      	bne.n	80028ca <osThreadNew+0xf6>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d104      	bne.n	80028ca <osThreadNew+0xf6>
          mem = 0;
 80028c0:	2300      	movs	r3, #0
 80028c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80028c4:	e001      	b.n	80028ca <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80028c6:	2300      	movs	r3, #0
 80028c8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80028ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d110      	bne.n	80028f2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80028d8:	9202      	str	r2, [sp, #8]
 80028da:	9301      	str	r3, [sp, #4]
 80028dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f001 f828 	bl	800393c <xTaskCreateStatic>
 80028ec:	4603      	mov	r3, r0
 80028ee:	617b      	str	r3, [r7, #20]
 80028f0:	e013      	b.n	800291a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80028f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d110      	bne.n	800291a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80028f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	f107 0314 	add.w	r3, r7, #20
 8002900:	9301      	str	r3, [sp, #4]
 8002902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f001 f86f 	bl	80039ee <xTaskCreate>
 8002910:	4603      	mov	r3, r0
 8002912:	2b01      	cmp	r3, #1
 8002914:	d001      	beq.n	800291a <osThreadNew+0x146>
          hTask = NULL;
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800291a:	697b      	ldr	r3, [r7, #20]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3738      	adds	r7, #56	; 0x38
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	200000c0 	.word	0x200000c0

08002928 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002930:	f3ef 8305 	mrs	r3, IPSR
 8002934:	613b      	str	r3, [r7, #16]
  return(result);
 8002936:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10f      	bne.n	800295c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800293c:	f3ef 8310 	mrs	r3, PRIMASK
 8002940:	60fb      	str	r3, [r7, #12]
  return(result);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d109      	bne.n	800295c <osDelay+0x34>
 8002948:	4b0d      	ldr	r3, [pc, #52]	; (8002980 <osDelay+0x58>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2b02      	cmp	r3, #2
 800294e:	d109      	bne.n	8002964 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002950:	f3ef 8311 	mrs	r3, BASEPRI
 8002954:	60bb      	str	r3, [r7, #8]
  return(result);
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d003      	beq.n	8002964 <osDelay+0x3c>
    stat = osErrorISR;
 800295c:	f06f 0305 	mvn.w	r3, #5
 8002960:	617b      	str	r3, [r7, #20]
 8002962:	e007      	b.n	8002974 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d002      	beq.n	8002974 <osDelay+0x4c>
      vTaskDelay(ticks);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f001 f978 	bl	8003c64 <vTaskDelay>
    }
  }

  return (stat);
 8002974:	697b      	ldr	r3, [r7, #20]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	200000c0 	.word	0x200000c0

08002984 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002984:	b580      	push	{r7, lr}
 8002986:	b08c      	sub	sp, #48	; 0x30
 8002988:	af02      	add	r7, sp, #8
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002990:	2300      	movs	r3, #0
 8002992:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002994:	f3ef 8305 	mrs	r3, IPSR
 8002998:	61bb      	str	r3, [r7, #24]
  return(result);
 800299a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800299c:	2b00      	cmp	r3, #0
 800299e:	d170      	bne.n	8002a82 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029a0:	f3ef 8310 	mrs	r3, PRIMASK
 80029a4:	617b      	str	r3, [r7, #20]
  return(result);
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d16a      	bne.n	8002a82 <osMessageQueueNew+0xfe>
 80029ac:	4b37      	ldr	r3, [pc, #220]	; (8002a8c <osMessageQueueNew+0x108>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d105      	bne.n	80029c0 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80029b4:	f3ef 8311 	mrs	r3, BASEPRI
 80029b8:	613b      	str	r3, [r7, #16]
  return(result);
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d160      	bne.n	8002a82 <osMessageQueueNew+0xfe>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d05d      	beq.n	8002a82 <osMessageQueueNew+0xfe>
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d05a      	beq.n	8002a82 <osMessageQueueNew+0xfe>
    mem = -1;
 80029cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029d0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d029      	beq.n	8002a2c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d012      	beq.n	8002a06 <osMessageQueueNew+0x82>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	2b4f      	cmp	r3, #79	; 0x4f
 80029e6:	d90e      	bls.n	8002a06 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00a      	beq.n	8002a06 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	695a      	ldr	r2, [r3, #20]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	68b9      	ldr	r1, [r7, #8]
 80029f8:	fb01 f303 	mul.w	r3, r1, r3
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d302      	bcc.n	8002a06 <osMessageQueueNew+0x82>
        mem = 1;
 8002a00:	2301      	movs	r3, #1
 8002a02:	623b      	str	r3, [r7, #32]
 8002a04:	e014      	b.n	8002a30 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d110      	bne.n	8002a30 <osMessageQueueNew+0xac>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10c      	bne.n	8002a30 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d108      	bne.n	8002a30 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d104      	bne.n	8002a30 <osMessageQueueNew+0xac>
          mem = 0;
 8002a26:	2300      	movs	r3, #0
 8002a28:	623b      	str	r3, [r7, #32]
 8002a2a:	e001      	b.n	8002a30 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002a30:	6a3b      	ldr	r3, [r7, #32]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d10c      	bne.n	8002a50 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691a      	ldr	r2, [r3, #16]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6899      	ldr	r1, [r3, #8]
 8002a3e:	2300      	movs	r3, #0
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	460b      	mov	r3, r1
 8002a44:	68b9      	ldr	r1, [r7, #8]
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 fa52 	bl	8002ef0 <xQueueGenericCreateStatic>
 8002a4c:	6278      	str	r0, [r7, #36]	; 0x24
 8002a4e:	e008      	b.n	8002a62 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8002a50:	6a3b      	ldr	r3, [r7, #32]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d105      	bne.n	8002a62 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8002a56:	2200      	movs	r2, #0
 8002a58:	68b9      	ldr	r1, [r7, #8]
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 faba 	bl	8002fd4 <xQueueGenericCreate>
 8002a60:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00c      	beq.n	8002a82 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <osMessageQueueNew+0xf2>
        name = attr->name;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	61fb      	str	r3, [r7, #28]
 8002a74:	e001      	b.n	8002a7a <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8002a7a:	69f9      	ldr	r1, [r7, #28]
 8002a7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a7e:	f000 ff01 	bl	8003884 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3728      	adds	r7, #40	; 0x28
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	200000c0 	.word	0x200000c0

08002a90 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08a      	sub	sp, #40	; 0x28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	603b      	str	r3, [r7, #0]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002aa8:	f3ef 8305 	mrs	r3, IPSR
 8002aac:	61fb      	str	r3, [r7, #28]
  return(result);
 8002aae:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10f      	bne.n	8002ad4 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ab4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ab8:	61bb      	str	r3, [r7, #24]
  return(result);
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d109      	bne.n	8002ad4 <osMessageQueuePut+0x44>
 8002ac0:	4b2b      	ldr	r3, [pc, #172]	; (8002b70 <osMessageQueuePut+0xe0>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d12e      	bne.n	8002b26 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002ac8:	f3ef 8311 	mrs	r3, BASEPRI
 8002acc:	617b      	str	r3, [r7, #20]
  return(result);
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d028      	beq.n	8002b26 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002ad4:	6a3b      	ldr	r3, [r7, #32]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d005      	beq.n	8002ae6 <osMessageQueuePut+0x56>
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d002      	beq.n	8002ae6 <osMessageQueuePut+0x56>
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8002ae6:	f06f 0303 	mvn.w	r3, #3
 8002aea:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002aec:	e039      	b.n	8002b62 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8002aee:	2300      	movs	r3, #0
 8002af0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8002af2:	f107 0210 	add.w	r2, r7, #16
 8002af6:	2300      	movs	r3, #0
 8002af8:	68b9      	ldr	r1, [r7, #8]
 8002afa:	6a38      	ldr	r0, [r7, #32]
 8002afc:	f000 fbc4 	bl	8003288 <xQueueGenericSendFromISR>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d003      	beq.n	8002b0e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8002b06:	f06f 0302 	mvn.w	r3, #2
 8002b0a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002b0c:	e029      	b.n	8002b62 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d026      	beq.n	8002b62 <osMessageQueuePut+0xd2>
 8002b14:	4b17      	ldr	r3, [pc, #92]	; (8002b74 <osMessageQueuePut+0xe4>)
 8002b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	f3bf 8f4f 	dsb	sy
 8002b20:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002b24:	e01d      	b.n	8002b62 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d002      	beq.n	8002b32 <osMessageQueuePut+0xa2>
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d103      	bne.n	8002b3a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8002b32:	f06f 0303 	mvn.w	r3, #3
 8002b36:	627b      	str	r3, [r7, #36]	; 0x24
 8002b38:	e014      	b.n	8002b64 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	68b9      	ldr	r1, [r7, #8]
 8002b40:	6a38      	ldr	r0, [r7, #32]
 8002b42:	f000 faa7 	bl	8003094 <xQueueGenericSend>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d00b      	beq.n	8002b64 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8002b52:	f06f 0301 	mvn.w	r3, #1
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
 8002b58:	e004      	b.n	8002b64 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8002b5a:	f06f 0302 	mvn.w	r3, #2
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b60:	e000      	b.n	8002b64 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002b62:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3728      	adds	r7, #40	; 0x28
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	200000c0 	.word	0x200000c0
 8002b74:	e000ed04 	.word	0xe000ed04

08002b78 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b08a      	sub	sp, #40	; 0x28
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
 8002b84:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b8e:	f3ef 8305 	mrs	r3, IPSR
 8002b92:	61fb      	str	r3, [r7, #28]
  return(result);
 8002b94:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10f      	bne.n	8002bba <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b9a:	f3ef 8310 	mrs	r3, PRIMASK
 8002b9e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d109      	bne.n	8002bba <osMessageQueueGet+0x42>
 8002ba6:	4b2b      	ldr	r3, [pc, #172]	; (8002c54 <osMessageQueueGet+0xdc>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d12e      	bne.n	8002c0c <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002bae:	f3ef 8311 	mrs	r3, BASEPRI
 8002bb2:	617b      	str	r3, [r7, #20]
  return(result);
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d028      	beq.n	8002c0c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002bba:	6a3b      	ldr	r3, [r7, #32]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d005      	beq.n	8002bcc <osMessageQueueGet+0x54>
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d002      	beq.n	8002bcc <osMessageQueueGet+0x54>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d003      	beq.n	8002bd4 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8002bcc:	f06f 0303 	mvn.w	r3, #3
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002bd2:	e038      	b.n	8002c46 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8002bd8:	f107 0310 	add.w	r3, r7, #16
 8002bdc:	461a      	mov	r2, r3
 8002bde:	68b9      	ldr	r1, [r7, #8]
 8002be0:	6a38      	ldr	r0, [r7, #32]
 8002be2:	f000 fcc1 	bl	8003568 <xQueueReceiveFromISR>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d003      	beq.n	8002bf4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8002bec:	f06f 0302 	mvn.w	r3, #2
 8002bf0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002bf2:	e028      	b.n	8002c46 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d025      	beq.n	8002c46 <osMessageQueueGet+0xce>
 8002bfa:	4b17      	ldr	r3, [pc, #92]	; (8002c58 <osMessageQueueGet+0xe0>)
 8002bfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	f3bf 8f4f 	dsb	sy
 8002c06:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002c0a:	e01c      	b.n	8002c46 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <osMessageQueueGet+0xa0>
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d103      	bne.n	8002c20 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8002c18:	f06f 0303 	mvn.w	r3, #3
 8002c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c1e:	e013      	b.n	8002c48 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	68b9      	ldr	r1, [r7, #8]
 8002c24:	6a38      	ldr	r0, [r7, #32]
 8002c26:	f000 fbc3 	bl	80033b0 <xQueueReceive>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d00b      	beq.n	8002c48 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8002c36:	f06f 0301 	mvn.w	r3, #1
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c3c:	e004      	b.n	8002c48 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8002c3e:	f06f 0302 	mvn.w	r3, #2
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24
 8002c44:	e000      	b.n	8002c48 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002c46:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8002c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3728      	adds	r7, #40	; 0x28
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	200000c0 	.word	0x200000c0
 8002c58:	e000ed04 	.word	0xe000ed04

08002c5c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4a06      	ldr	r2, [pc, #24]	; (8002c84 <vApplicationGetIdleTaskMemory+0x28>)
 8002c6c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	4a05      	ldr	r2, [pc, #20]	; (8002c88 <vApplicationGetIdleTaskMemory+0x2c>)
 8002c72:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2280      	movs	r2, #128	; 0x80
 8002c78:	601a      	str	r2, [r3, #0]
}
 8002c7a:	bf00      	nop
 8002c7c:	3714      	adds	r7, #20
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr
 8002c84:	200000c4 	.word	0x200000c4
 8002c88:	20000120 	.word	0x20000120

08002c8c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4a07      	ldr	r2, [pc, #28]	; (8002cb8 <vApplicationGetTimerTaskMemory+0x2c>)
 8002c9c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	4a06      	ldr	r2, [pc, #24]	; (8002cbc <vApplicationGetTimerTaskMemory+0x30>)
 8002ca2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002caa:	601a      	str	r2, [r3, #0]
}
 8002cac:	bf00      	nop
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bc80      	pop	{r7}
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	20000320 	.word	0x20000320
 8002cbc:	2000037c 	.word	0x2000037c

08002cc0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f103 0208 	add.w	r2, r3, #8
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cd8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f103 0208 	add.w	r2, r3, #8
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f103 0208 	add.w	r2, r3, #8
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr

08002cfe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bc80      	pop	{r7}
 8002d14:	4770      	bx	lr

08002d16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d16:	b480      	push	{r7}
 8002d18:	b085      	sub	sp, #20
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
 8002d1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	1c5a      	adds	r2, r3, #1
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	601a      	str	r2, [r3, #0]
}
 8002d52:	bf00      	nop
 8002d54:	3714      	adds	r7, #20
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr

08002d5c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d72:	d103      	bne.n	8002d7c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	e00c      	b.n	8002d96 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3308      	adds	r3, #8
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	e002      	b.n	8002d8a <vListInsert+0x2e>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	60fb      	str	r3, [r7, #12]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d2f6      	bcs.n	8002d84 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	1c5a      	adds	r2, r3, #1
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	601a      	str	r2, [r3, #0]
}
 8002dc2:	bf00      	nop
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr

08002dcc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6892      	ldr	r2, [r2, #8]
 8002de2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6852      	ldr	r2, [r2, #4]
 8002dec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d103      	bne.n	8002e00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	1e5a      	subs	r2, r3, #1
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bc80      	pop	{r7}
 8002e1c:	4770      	bx	lr
	...

08002e20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d109      	bne.n	8002e48 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e38:	f383 8811 	msr	BASEPRI, r3
 8002e3c:	f3bf 8f6f 	isb	sy
 8002e40:	f3bf 8f4f 	dsb	sy
 8002e44:	60bb      	str	r3, [r7, #8]
 8002e46:	e7fe      	b.n	8002e46 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002e48:	f002 f84e 	bl	8004ee8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e54:	68f9      	ldr	r1, [r7, #12]
 8002e56:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e58:	fb01 f303 	mul.w	r3, r1, r3
 8002e5c:	441a      	add	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	68f9      	ldr	r1, [r7, #12]
 8002e7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e7e:	fb01 f303 	mul.w	r3, r1, r3
 8002e82:	441a      	add	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	22ff      	movs	r2, #255	; 0xff
 8002e8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	22ff      	movs	r2, #255	; 0xff
 8002e94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d114      	bne.n	8002ec8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d01a      	beq.n	8002edc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	3310      	adds	r3, #16
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f001 f992 	bl	80041d4 <xTaskRemoveFromEventList>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d012      	beq.n	8002edc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002eb6:	4b0d      	ldr	r3, [pc, #52]	; (8002eec <xQueueGenericReset+0xcc>)
 8002eb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	f3bf 8f4f 	dsb	sy
 8002ec2:	f3bf 8f6f 	isb	sy
 8002ec6:	e009      	b.n	8002edc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	3310      	adds	r3, #16
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff fef7 	bl	8002cc0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	3324      	adds	r3, #36	; 0x24
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff fef2 	bl	8002cc0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002edc:	f002 f832 	bl	8004f44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002ee0:	2301      	movs	r3, #1
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	e000ed04 	.word	0xe000ed04

08002ef0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08e      	sub	sp, #56	; 0x38
 8002ef4:	af02      	add	r7, sp, #8
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
 8002efc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d109      	bne.n	8002f18 <xQueueGenericCreateStatic+0x28>
 8002f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f08:	f383 8811 	msr	BASEPRI, r3
 8002f0c:	f3bf 8f6f 	isb	sy
 8002f10:	f3bf 8f4f 	dsb	sy
 8002f14:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f16:	e7fe      	b.n	8002f16 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d109      	bne.n	8002f32 <xQueueGenericCreateStatic+0x42>
 8002f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f22:	f383 8811 	msr	BASEPRI, r3
 8002f26:	f3bf 8f6f 	isb	sy
 8002f2a:	f3bf 8f4f 	dsb	sy
 8002f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f30:	e7fe      	b.n	8002f30 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d002      	beq.n	8002f3e <xQueueGenericCreateStatic+0x4e>
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <xQueueGenericCreateStatic+0x52>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <xQueueGenericCreateStatic+0x54>
 8002f42:	2300      	movs	r3, #0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d109      	bne.n	8002f5c <xQueueGenericCreateStatic+0x6c>
 8002f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4c:	f383 8811 	msr	BASEPRI, r3
 8002f50:	f3bf 8f6f 	isb	sy
 8002f54:	f3bf 8f4f 	dsb	sy
 8002f58:	623b      	str	r3, [r7, #32]
 8002f5a:	e7fe      	b.n	8002f5a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d102      	bne.n	8002f68 <xQueueGenericCreateStatic+0x78>
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <xQueueGenericCreateStatic+0x7c>
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e000      	b.n	8002f6e <xQueueGenericCreateStatic+0x7e>
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d109      	bne.n	8002f86 <xQueueGenericCreateStatic+0x96>
 8002f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f76:	f383 8811 	msr	BASEPRI, r3
 8002f7a:	f3bf 8f6f 	isb	sy
 8002f7e:	f3bf 8f4f 	dsb	sy
 8002f82:	61fb      	str	r3, [r7, #28]
 8002f84:	e7fe      	b.n	8002f84 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002f86:	2350      	movs	r3, #80	; 0x50
 8002f88:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2b50      	cmp	r3, #80	; 0x50
 8002f8e:	d009      	beq.n	8002fa4 <xQueueGenericCreateStatic+0xb4>
 8002f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f94:	f383 8811 	msr	BASEPRI, r3
 8002f98:	f3bf 8f6f 	isb	sy
 8002f9c:	f3bf 8f4f 	dsb	sy
 8002fa0:	61bb      	str	r3, [r7, #24]
 8002fa2:	e7fe      	b.n	8002fa2 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00d      	beq.n	8002fca <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002fb6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	68b9      	ldr	r1, [r7, #8]
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f000 f842 	bl	800304e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3730      	adds	r7, #48	; 0x30
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b08a      	sub	sp, #40	; 0x28
 8002fd8:	af02      	add	r7, sp, #8
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d109      	bne.n	8002ffc <xQueueGenericCreate+0x28>
 8002fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fec:	f383 8811 	msr	BASEPRI, r3
 8002ff0:	f3bf 8f6f 	isb	sy
 8002ff4:	f3bf 8f4f 	dsb	sy
 8002ff8:	613b      	str	r3, [r7, #16]
 8002ffa:	e7fe      	b.n	8002ffa <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d102      	bne.n	8003008 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003002:	2300      	movs	r3, #0
 8003004:	61fb      	str	r3, [r7, #28]
 8003006:	e004      	b.n	8003012 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	fb02 f303 	mul.w	r3, r2, r3
 8003010:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	3350      	adds	r3, #80	; 0x50
 8003016:	4618      	mov	r0, r3
 8003018:	f002 f85c 	bl	80050d4 <pvPortMalloc>
 800301c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00f      	beq.n	8003044 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	3350      	adds	r3, #80	; 0x50
 8003028:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003032:	79fa      	ldrb	r2, [r7, #7]
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	4613      	mov	r3, r2
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	68b9      	ldr	r1, [r7, #8]
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 f805 	bl	800304e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003044:	69bb      	ldr	r3, [r7, #24]
	}
 8003046:	4618      	mov	r0, r3
 8003048:	3720      	adds	r7, #32
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b084      	sub	sp, #16
 8003052:	af00      	add	r7, sp, #0
 8003054:	60f8      	str	r0, [r7, #12]
 8003056:	60b9      	str	r1, [r7, #8]
 8003058:	607a      	str	r2, [r7, #4]
 800305a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d103      	bne.n	800306a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	e002      	b.n	8003070 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800307c:	2101      	movs	r1, #1
 800307e:	69b8      	ldr	r0, [r7, #24]
 8003080:	f7ff fece 	bl	8002e20 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	78fa      	ldrb	r2, [r7, #3]
 8003088:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800308c:	bf00      	nop
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b08e      	sub	sp, #56	; 0x38
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
 80030a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80030a2:	2300      	movs	r3, #0
 80030a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80030aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d109      	bne.n	80030c4 <xQueueGenericSend+0x30>
 80030b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b4:	f383 8811 	msr	BASEPRI, r3
 80030b8:	f3bf 8f6f 	isb	sy
 80030bc:	f3bf 8f4f 	dsb	sy
 80030c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80030c2:	e7fe      	b.n	80030c2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d103      	bne.n	80030d2 <xQueueGenericSend+0x3e>
 80030ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <xQueueGenericSend+0x42>
 80030d2:	2301      	movs	r3, #1
 80030d4:	e000      	b.n	80030d8 <xQueueGenericSend+0x44>
 80030d6:	2300      	movs	r3, #0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d109      	bne.n	80030f0 <xQueueGenericSend+0x5c>
 80030dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e0:	f383 8811 	msr	BASEPRI, r3
 80030e4:	f3bf 8f6f 	isb	sy
 80030e8:	f3bf 8f4f 	dsb	sy
 80030ec:	627b      	str	r3, [r7, #36]	; 0x24
 80030ee:	e7fe      	b.n	80030ee <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d103      	bne.n	80030fe <xQueueGenericSend+0x6a>
 80030f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d101      	bne.n	8003102 <xQueueGenericSend+0x6e>
 80030fe:	2301      	movs	r3, #1
 8003100:	e000      	b.n	8003104 <xQueueGenericSend+0x70>
 8003102:	2300      	movs	r3, #0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d109      	bne.n	800311c <xQueueGenericSend+0x88>
 8003108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310c:	f383 8811 	msr	BASEPRI, r3
 8003110:	f3bf 8f6f 	isb	sy
 8003114:	f3bf 8f4f 	dsb	sy
 8003118:	623b      	str	r3, [r7, #32]
 800311a:	e7fe      	b.n	800311a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800311c:	f001 fa14 	bl	8004548 <xTaskGetSchedulerState>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d102      	bne.n	800312c <xQueueGenericSend+0x98>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d101      	bne.n	8003130 <xQueueGenericSend+0x9c>
 800312c:	2301      	movs	r3, #1
 800312e:	e000      	b.n	8003132 <xQueueGenericSend+0x9e>
 8003130:	2300      	movs	r3, #0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d109      	bne.n	800314a <xQueueGenericSend+0xb6>
 8003136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313a:	f383 8811 	msr	BASEPRI, r3
 800313e:	f3bf 8f6f 	isb	sy
 8003142:	f3bf 8f4f 	dsb	sy
 8003146:	61fb      	str	r3, [r7, #28]
 8003148:	e7fe      	b.n	8003148 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800314a:	f001 fecd 	bl	8004ee8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800314e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003150:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003156:	429a      	cmp	r2, r3
 8003158:	d302      	bcc.n	8003160 <xQueueGenericSend+0xcc>
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	2b02      	cmp	r3, #2
 800315e:	d129      	bne.n	80031b4 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	68b9      	ldr	r1, [r7, #8]
 8003164:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003166:	f000 fa7c 	bl	8003662 <prvCopyDataToQueue>
 800316a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800316c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003170:	2b00      	cmp	r3, #0
 8003172:	d010      	beq.n	8003196 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003176:	3324      	adds	r3, #36	; 0x24
 8003178:	4618      	mov	r0, r3
 800317a:	f001 f82b 	bl	80041d4 <xTaskRemoveFromEventList>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d013      	beq.n	80031ac <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003184:	4b3f      	ldr	r3, [pc, #252]	; (8003284 <xQueueGenericSend+0x1f0>)
 8003186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	f3bf 8f4f 	dsb	sy
 8003190:	f3bf 8f6f 	isb	sy
 8003194:	e00a      	b.n	80031ac <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003198:	2b00      	cmp	r3, #0
 800319a:	d007      	beq.n	80031ac <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800319c:	4b39      	ldr	r3, [pc, #228]	; (8003284 <xQueueGenericSend+0x1f0>)
 800319e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	f3bf 8f4f 	dsb	sy
 80031a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80031ac:	f001 feca 	bl	8004f44 <vPortExitCritical>
				return pdPASS;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e063      	b.n	800327c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d103      	bne.n	80031c2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80031ba:	f001 fec3 	bl	8004f44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80031be:	2300      	movs	r3, #0
 80031c0:	e05c      	b.n	800327c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80031c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d106      	bne.n	80031d6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80031c8:	f107 0314 	add.w	r3, r7, #20
 80031cc:	4618      	mov	r0, r3
 80031ce:	f001 f863 	bl	8004298 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80031d2:	2301      	movs	r3, #1
 80031d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80031d6:	f001 feb5 	bl	8004f44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80031da:	f000 fddb 	bl	8003d94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80031de:	f001 fe83 	bl	8004ee8 <vPortEnterCritical>
 80031e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031e8:	b25b      	sxtb	r3, r3
 80031ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031ee:	d103      	bne.n	80031f8 <xQueueGenericSend+0x164>
 80031f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031fe:	b25b      	sxtb	r3, r3
 8003200:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003204:	d103      	bne.n	800320e <xQueueGenericSend+0x17a>
 8003206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800320e:	f001 fe99 	bl	8004f44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003212:	1d3a      	adds	r2, r7, #4
 8003214:	f107 0314 	add.w	r3, r7, #20
 8003218:	4611      	mov	r1, r2
 800321a:	4618      	mov	r0, r3
 800321c:	f001 f852 	bl	80042c4 <xTaskCheckForTimeOut>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d124      	bne.n	8003270 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003226:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003228:	f000 fb13 	bl	8003852 <prvIsQueueFull>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d018      	beq.n	8003264 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003234:	3310      	adds	r3, #16
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	4611      	mov	r1, r2
 800323a:	4618      	mov	r0, r3
 800323c:	f000 ff7c 	bl	8004138 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003240:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003242:	f000 fa9e 	bl	8003782 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003246:	f000 fdb3 	bl	8003db0 <xTaskResumeAll>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	f47f af7c 	bne.w	800314a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003252:	4b0c      	ldr	r3, [pc, #48]	; (8003284 <xQueueGenericSend+0x1f0>)
 8003254:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	f3bf 8f4f 	dsb	sy
 800325e:	f3bf 8f6f 	isb	sy
 8003262:	e772      	b.n	800314a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003264:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003266:	f000 fa8c 	bl	8003782 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800326a:	f000 fda1 	bl	8003db0 <xTaskResumeAll>
 800326e:	e76c      	b.n	800314a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003270:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003272:	f000 fa86 	bl	8003782 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003276:	f000 fd9b 	bl	8003db0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800327a:	2300      	movs	r3, #0
		}
	}
}
 800327c:	4618      	mov	r0, r3
 800327e:	3738      	adds	r7, #56	; 0x38
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	e000ed04 	.word	0xe000ed04

08003288 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b08e      	sub	sp, #56	; 0x38
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
 8003294:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800329a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329c:	2b00      	cmp	r3, #0
 800329e:	d109      	bne.n	80032b4 <xQueueGenericSendFromISR+0x2c>
 80032a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a4:	f383 8811 	msr	BASEPRI, r3
 80032a8:	f3bf 8f6f 	isb	sy
 80032ac:	f3bf 8f4f 	dsb	sy
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24
 80032b2:	e7fe      	b.n	80032b2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d103      	bne.n	80032c2 <xQueueGenericSendFromISR+0x3a>
 80032ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <xQueueGenericSendFromISR+0x3e>
 80032c2:	2301      	movs	r3, #1
 80032c4:	e000      	b.n	80032c8 <xQueueGenericSendFromISR+0x40>
 80032c6:	2300      	movs	r3, #0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d109      	bne.n	80032e0 <xQueueGenericSendFromISR+0x58>
 80032cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d0:	f383 8811 	msr	BASEPRI, r3
 80032d4:	f3bf 8f6f 	isb	sy
 80032d8:	f3bf 8f4f 	dsb	sy
 80032dc:	623b      	str	r3, [r7, #32]
 80032de:	e7fe      	b.n	80032de <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d103      	bne.n	80032ee <xQueueGenericSendFromISR+0x66>
 80032e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d101      	bne.n	80032f2 <xQueueGenericSendFromISR+0x6a>
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <xQueueGenericSendFromISR+0x6c>
 80032f2:	2300      	movs	r3, #0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d109      	bne.n	800330c <xQueueGenericSendFromISR+0x84>
 80032f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fc:	f383 8811 	msr	BASEPRI, r3
 8003300:	f3bf 8f6f 	isb	sy
 8003304:	f3bf 8f4f 	dsb	sy
 8003308:	61fb      	str	r3, [r7, #28]
 800330a:	e7fe      	b.n	800330a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800330c:	f001 fea6 	bl	800505c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003310:	f3ef 8211 	mrs	r2, BASEPRI
 8003314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003318:	f383 8811 	msr	BASEPRI, r3
 800331c:	f3bf 8f6f 	isb	sy
 8003320:	f3bf 8f4f 	dsb	sy
 8003324:	61ba      	str	r2, [r7, #24]
 8003326:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003328:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800332a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800332c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003334:	429a      	cmp	r2, r3
 8003336:	d302      	bcc.n	800333e <xQueueGenericSendFromISR+0xb6>
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	2b02      	cmp	r3, #2
 800333c:	d12c      	bne.n	8003398 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800333e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003340:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003344:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	68b9      	ldr	r1, [r7, #8]
 800334c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800334e:	f000 f988 	bl	8003662 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003352:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003356:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800335a:	d112      	bne.n	8003382 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800335c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	2b00      	cmp	r3, #0
 8003362:	d016      	beq.n	8003392 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003366:	3324      	adds	r3, #36	; 0x24
 8003368:	4618      	mov	r0, r3
 800336a:	f000 ff33 	bl	80041d4 <xTaskRemoveFromEventList>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00e      	beq.n	8003392 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00b      	beq.n	8003392 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	e007      	b.n	8003392 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003382:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003386:	3301      	adds	r3, #1
 8003388:	b2db      	uxtb	r3, r3
 800338a:	b25a      	sxtb	r2, r3
 800338c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003392:	2301      	movs	r3, #1
 8003394:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003396:	e001      	b.n	800339c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003398:	2300      	movs	r3, #0
 800339a:	637b      	str	r3, [r7, #52]	; 0x34
 800339c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800339e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80033a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3738      	adds	r7, #56	; 0x38
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b08c      	sub	sp, #48	; 0x30
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80033bc:	2300      	movs	r3, #0
 80033be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80033c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d109      	bne.n	80033de <xQueueReceive+0x2e>
	__asm volatile
 80033ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ce:	f383 8811 	msr	BASEPRI, r3
 80033d2:	f3bf 8f6f 	isb	sy
 80033d6:	f3bf 8f4f 	dsb	sy
 80033da:	623b      	str	r3, [r7, #32]
 80033dc:	e7fe      	b.n	80033dc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d103      	bne.n	80033ec <xQueueReceive+0x3c>
 80033e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <xQueueReceive+0x40>
 80033ec:	2301      	movs	r3, #1
 80033ee:	e000      	b.n	80033f2 <xQueueReceive+0x42>
 80033f0:	2300      	movs	r3, #0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d109      	bne.n	800340a <xQueueReceive+0x5a>
 80033f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fa:	f383 8811 	msr	BASEPRI, r3
 80033fe:	f3bf 8f6f 	isb	sy
 8003402:	f3bf 8f4f 	dsb	sy
 8003406:	61fb      	str	r3, [r7, #28]
 8003408:	e7fe      	b.n	8003408 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800340a:	f001 f89d 	bl	8004548 <xTaskGetSchedulerState>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d102      	bne.n	800341a <xQueueReceive+0x6a>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <xQueueReceive+0x6e>
 800341a:	2301      	movs	r3, #1
 800341c:	e000      	b.n	8003420 <xQueueReceive+0x70>
 800341e:	2300      	movs	r3, #0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d109      	bne.n	8003438 <xQueueReceive+0x88>
 8003424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003428:	f383 8811 	msr	BASEPRI, r3
 800342c:	f3bf 8f6f 	isb	sy
 8003430:	f3bf 8f4f 	dsb	sy
 8003434:	61bb      	str	r3, [r7, #24]
 8003436:	e7fe      	b.n	8003436 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003438:	f001 fd56 	bl	8004ee8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800343c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003440:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	2b00      	cmp	r3, #0
 8003446:	d01f      	beq.n	8003488 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003448:	68b9      	ldr	r1, [r7, #8]
 800344a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800344c:	f000 f973 	bl	8003736 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	1e5a      	subs	r2, r3, #1
 8003454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003456:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00f      	beq.n	8003480 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003462:	3310      	adds	r3, #16
 8003464:	4618      	mov	r0, r3
 8003466:	f000 feb5 	bl	80041d4 <xTaskRemoveFromEventList>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d007      	beq.n	8003480 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003470:	4b3c      	ldr	r3, [pc, #240]	; (8003564 <xQueueReceive+0x1b4>)
 8003472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	f3bf 8f4f 	dsb	sy
 800347c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003480:	f001 fd60 	bl	8004f44 <vPortExitCritical>
				return pdPASS;
 8003484:	2301      	movs	r3, #1
 8003486:	e069      	b.n	800355c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d103      	bne.n	8003496 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800348e:	f001 fd59 	bl	8004f44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003492:	2300      	movs	r3, #0
 8003494:	e062      	b.n	800355c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003498:	2b00      	cmp	r3, #0
 800349a:	d106      	bne.n	80034aa <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800349c:	f107 0310 	add.w	r3, r7, #16
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 fef9 	bl	8004298 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80034a6:	2301      	movs	r3, #1
 80034a8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80034aa:	f001 fd4b 	bl	8004f44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80034ae:	f000 fc71 	bl	8003d94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034b2:	f001 fd19 	bl	8004ee8 <vPortEnterCritical>
 80034b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034bc:	b25b      	sxtb	r3, r3
 80034be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034c2:	d103      	bne.n	80034cc <xQueueReceive+0x11c>
 80034c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034d2:	b25b      	sxtb	r3, r3
 80034d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034d8:	d103      	bne.n	80034e2 <xQueueReceive+0x132>
 80034da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034e2:	f001 fd2f 	bl	8004f44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034e6:	1d3a      	adds	r2, r7, #4
 80034e8:	f107 0310 	add.w	r3, r7, #16
 80034ec:	4611      	mov	r1, r2
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 fee8 	bl	80042c4 <xTaskCheckForTimeOut>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d123      	bne.n	8003542 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034fc:	f000 f993 	bl	8003826 <prvIsQueueEmpty>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d017      	beq.n	8003536 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003508:	3324      	adds	r3, #36	; 0x24
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	4611      	mov	r1, r2
 800350e:	4618      	mov	r0, r3
 8003510:	f000 fe12 	bl	8004138 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003514:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003516:	f000 f934 	bl	8003782 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800351a:	f000 fc49 	bl	8003db0 <xTaskResumeAll>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d189      	bne.n	8003438 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003524:	4b0f      	ldr	r3, [pc, #60]	; (8003564 <xQueueReceive+0x1b4>)
 8003526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	f3bf 8f4f 	dsb	sy
 8003530:	f3bf 8f6f 	isb	sy
 8003534:	e780      	b.n	8003438 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003536:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003538:	f000 f923 	bl	8003782 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800353c:	f000 fc38 	bl	8003db0 <xTaskResumeAll>
 8003540:	e77a      	b.n	8003438 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003542:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003544:	f000 f91d 	bl	8003782 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003548:	f000 fc32 	bl	8003db0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800354c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800354e:	f000 f96a 	bl	8003826 <prvIsQueueEmpty>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	f43f af6f 	beq.w	8003438 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800355a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800355c:	4618      	mov	r0, r3
 800355e:	3730      	adds	r7, #48	; 0x30
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	e000ed04 	.word	0xe000ed04

08003568 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b08e      	sub	sp, #56	; 0x38
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357a:	2b00      	cmp	r3, #0
 800357c:	d109      	bne.n	8003592 <xQueueReceiveFromISR+0x2a>
 800357e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003582:	f383 8811 	msr	BASEPRI, r3
 8003586:	f3bf 8f6f 	isb	sy
 800358a:	f3bf 8f4f 	dsb	sy
 800358e:	623b      	str	r3, [r7, #32]
 8003590:	e7fe      	b.n	8003590 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d103      	bne.n	80035a0 <xQueueReceiveFromISR+0x38>
 8003598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <xQueueReceiveFromISR+0x3c>
 80035a0:	2301      	movs	r3, #1
 80035a2:	e000      	b.n	80035a6 <xQueueReceiveFromISR+0x3e>
 80035a4:	2300      	movs	r3, #0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d109      	bne.n	80035be <xQueueReceiveFromISR+0x56>
 80035aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ae:	f383 8811 	msr	BASEPRI, r3
 80035b2:	f3bf 8f6f 	isb	sy
 80035b6:	f3bf 8f4f 	dsb	sy
 80035ba:	61fb      	str	r3, [r7, #28]
 80035bc:	e7fe      	b.n	80035bc <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80035be:	f001 fd4d 	bl	800505c <vPortValidateInterruptPriority>
	__asm volatile
 80035c2:	f3ef 8211 	mrs	r2, BASEPRI
 80035c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ca:	f383 8811 	msr	BASEPRI, r3
 80035ce:	f3bf 8f6f 	isb	sy
 80035d2:	f3bf 8f4f 	dsb	sy
 80035d6:	61ba      	str	r2, [r7, #24]
 80035d8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80035da:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80035dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80035e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d02f      	beq.n	800364a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80035ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80035f4:	68b9      	ldr	r1, [r7, #8]
 80035f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035f8:	f000 f89d 	bl	8003736 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80035fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fe:	1e5a      	subs	r2, r3, #1
 8003600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003602:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003604:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003608:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800360c:	d112      	bne.n	8003634 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800360e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d016      	beq.n	8003644 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003618:	3310      	adds	r3, #16
 800361a:	4618      	mov	r0, r3
 800361c:	f000 fdda 	bl	80041d4 <xTaskRemoveFromEventList>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00e      	beq.n	8003644 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00b      	beq.n	8003644 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	e007      	b.n	8003644 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003638:	3301      	adds	r3, #1
 800363a:	b2db      	uxtb	r3, r3
 800363c:	b25a      	sxtb	r2, r3
 800363e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003644:	2301      	movs	r3, #1
 8003646:	637b      	str	r3, [r7, #52]	; 0x34
 8003648:	e001      	b.n	800364e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800364a:	2300      	movs	r3, #0
 800364c:	637b      	str	r3, [r7, #52]	; 0x34
 800364e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003650:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800365a:	4618      	mov	r0, r3
 800365c:	3738      	adds	r7, #56	; 0x38
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b086      	sub	sp, #24
 8003666:	af00      	add	r7, sp, #0
 8003668:	60f8      	str	r0, [r7, #12]
 800366a:	60b9      	str	r1, [r7, #8]
 800366c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800366e:	2300      	movs	r3, #0
 8003670:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003676:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10d      	bne.n	800369c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d14d      	bne.n	8003724 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	4618      	mov	r0, r3
 800368e:	f000 ff79 	bl	8004584 <xTaskPriorityDisinherit>
 8003692:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	605a      	str	r2, [r3, #4]
 800369a:	e043      	b.n	8003724 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d119      	bne.n	80036d6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6898      	ldr	r0, [r3, #8]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	461a      	mov	r2, r3
 80036ac:	68b9      	ldr	r1, [r7, #8]
 80036ae:	f001 ff0f 	bl	80054d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	441a      	add	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d32b      	bcc.n	8003724 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	609a      	str	r2, [r3, #8]
 80036d4:	e026      	b.n	8003724 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	68d8      	ldr	r0, [r3, #12]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	461a      	mov	r2, r3
 80036e0:	68b9      	ldr	r1, [r7, #8]
 80036e2:	f001 fef5 	bl	80054d0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	425b      	negs	r3, r3
 80036f0:	441a      	add	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	68da      	ldr	r2, [r3, #12]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d207      	bcs.n	8003712 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	425b      	negs	r3, r3
 800370c:	441a      	add	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b02      	cmp	r3, #2
 8003716:	d105      	bne.n	8003724 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d002      	beq.n	8003724 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	3b01      	subs	r3, #1
 8003722:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1c5a      	adds	r2, r3, #1
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800372c:	697b      	ldr	r3, [r7, #20]
}
 800372e:	4618      	mov	r0, r3
 8003730:	3718      	adds	r7, #24
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b082      	sub	sp, #8
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
 800373e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	2b00      	cmp	r3, #0
 8003746:	d018      	beq.n	800377a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68da      	ldr	r2, [r3, #12]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003750:	441a      	add	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	429a      	cmp	r2, r3
 8003760:	d303      	bcc.n	800376a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68d9      	ldr	r1, [r3, #12]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	461a      	mov	r2, r3
 8003774:	6838      	ldr	r0, [r7, #0]
 8003776:	f001 feab 	bl	80054d0 <memcpy>
	}
}
 800377a:	bf00      	nop
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b084      	sub	sp, #16
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800378a:	f001 fbad 	bl	8004ee8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003794:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003796:	e011      	b.n	80037bc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	2b00      	cmp	r3, #0
 800379e:	d012      	beq.n	80037c6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	3324      	adds	r3, #36	; 0x24
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 fd15 	bl	80041d4 <xTaskRemoveFromEventList>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80037b0:	f000 fde8 	bl	8004384 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80037b4:	7bfb      	ldrb	r3, [r7, #15]
 80037b6:	3b01      	subs	r3, #1
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	dce9      	bgt.n	8003798 <prvUnlockQueue+0x16>
 80037c4:	e000      	b.n	80037c8 <prvUnlockQueue+0x46>
					break;
 80037c6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	22ff      	movs	r2, #255	; 0xff
 80037cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80037d0:	f001 fbb8 	bl	8004f44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80037d4:	f001 fb88 	bl	8004ee8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037de:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037e0:	e011      	b.n	8003806 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d012      	beq.n	8003810 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	3310      	adds	r3, #16
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 fcf0 	bl	80041d4 <xTaskRemoveFromEventList>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80037fa:	f000 fdc3 	bl	8004384 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80037fe:	7bbb      	ldrb	r3, [r7, #14]
 8003800:	3b01      	subs	r3, #1
 8003802:	b2db      	uxtb	r3, r3
 8003804:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003806:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800380a:	2b00      	cmp	r3, #0
 800380c:	dce9      	bgt.n	80037e2 <prvUnlockQueue+0x60>
 800380e:	e000      	b.n	8003812 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003810:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	22ff      	movs	r2, #255	; 0xff
 8003816:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800381a:	f001 fb93 	bl	8004f44 <vPortExitCritical>
}
 800381e:	bf00      	nop
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b084      	sub	sp, #16
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800382e:	f001 fb5b 	bl	8004ee8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003836:	2b00      	cmp	r3, #0
 8003838:	d102      	bne.n	8003840 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800383a:	2301      	movs	r3, #1
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	e001      	b.n	8003844 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003840:	2300      	movs	r3, #0
 8003842:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003844:	f001 fb7e 	bl	8004f44 <vPortExitCritical>

	return xReturn;
 8003848:	68fb      	ldr	r3, [r7, #12]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b084      	sub	sp, #16
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800385a:	f001 fb45 	bl	8004ee8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003866:	429a      	cmp	r2, r3
 8003868:	d102      	bne.n	8003870 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800386a:	2301      	movs	r3, #1
 800386c:	60fb      	str	r3, [r7, #12]
 800386e:	e001      	b.n	8003874 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003870:	2300      	movs	r3, #0
 8003872:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003874:	f001 fb66 	bl	8004f44 <vPortExitCritical>

	return xReturn;
 8003878:	68fb      	ldr	r3, [r7, #12]
}
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
	...

08003884 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800388e:	2300      	movs	r3, #0
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	e014      	b.n	80038be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003894:	4a0e      	ldr	r2, [pc, #56]	; (80038d0 <vQueueAddToRegistry+0x4c>)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10b      	bne.n	80038b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80038a0:	490b      	ldr	r1, [pc, #44]	; (80038d0 <vQueueAddToRegistry+0x4c>)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80038aa:	4a09      	ldr	r2, [pc, #36]	; (80038d0 <vQueueAddToRegistry+0x4c>)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	4413      	add	r3, r2
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80038b6:	e005      	b.n	80038c4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	3301      	adds	r3, #1
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2b07      	cmp	r3, #7
 80038c2:	d9e7      	bls.n	8003894 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80038c4:	bf00      	nop
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bc80      	pop	{r7}
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	20001ae8 	.word	0x20001ae8

080038d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80038e4:	f001 fb00 	bl	8004ee8 <vPortEnterCritical>
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038ee:	b25b      	sxtb	r3, r3
 80038f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038f4:	d103      	bne.n	80038fe <vQueueWaitForMessageRestricted+0x2a>
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003904:	b25b      	sxtb	r3, r3
 8003906:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800390a:	d103      	bne.n	8003914 <vQueueWaitForMessageRestricted+0x40>
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003914:	f001 fb16 	bl	8004f44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391c:	2b00      	cmp	r3, #0
 800391e:	d106      	bne.n	800392e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	3324      	adds	r3, #36	; 0x24
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	68b9      	ldr	r1, [r7, #8]
 8003928:	4618      	mov	r0, r3
 800392a:	f000 fc29 	bl	8004180 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800392e:	6978      	ldr	r0, [r7, #20]
 8003930:	f7ff ff27 	bl	8003782 <prvUnlockQueue>
	}
 8003934:	bf00      	nop
 8003936:	3718      	adds	r7, #24
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800393c:	b580      	push	{r7, lr}
 800393e:	b08e      	sub	sp, #56	; 0x38
 8003940:	af04      	add	r7, sp, #16
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
 8003948:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800394a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800394c:	2b00      	cmp	r3, #0
 800394e:	d109      	bne.n	8003964 <xTaskCreateStatic+0x28>
	__asm volatile
 8003950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003954:	f383 8811 	msr	BASEPRI, r3
 8003958:	f3bf 8f6f 	isb	sy
 800395c:	f3bf 8f4f 	dsb	sy
 8003960:	623b      	str	r3, [r7, #32]
 8003962:	e7fe      	b.n	8003962 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003966:	2b00      	cmp	r3, #0
 8003968:	d109      	bne.n	800397e <xTaskCreateStatic+0x42>
 800396a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396e:	f383 8811 	msr	BASEPRI, r3
 8003972:	f3bf 8f6f 	isb	sy
 8003976:	f3bf 8f4f 	dsb	sy
 800397a:	61fb      	str	r3, [r7, #28]
 800397c:	e7fe      	b.n	800397c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800397e:	235c      	movs	r3, #92	; 0x5c
 8003980:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	2b5c      	cmp	r3, #92	; 0x5c
 8003986:	d009      	beq.n	800399c <xTaskCreateStatic+0x60>
 8003988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398c:	f383 8811 	msr	BASEPRI, r3
 8003990:	f3bf 8f6f 	isb	sy
 8003994:	f3bf 8f4f 	dsb	sy
 8003998:	61bb      	str	r3, [r7, #24]
 800399a:	e7fe      	b.n	800399a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800399c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d01e      	beq.n	80039e0 <xTaskCreateStatic+0xa4>
 80039a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d01b      	beq.n	80039e0 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80039b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b4:	2202      	movs	r2, #2
 80039b6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80039ba:	2300      	movs	r3, #0
 80039bc:	9303      	str	r3, [sp, #12]
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	9302      	str	r3, [sp, #8]
 80039c2:	f107 0314 	add.w	r3, r7, #20
 80039c6:	9301      	str	r3, [sp, #4]
 80039c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ca:	9300      	str	r3, [sp, #0]
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	68b9      	ldr	r1, [r7, #8]
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 f850 	bl	8003a78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039da:	f000 f8d3 	bl	8003b84 <prvAddNewTaskToReadyList>
 80039de:	e001      	b.n	80039e4 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80039e0:	2300      	movs	r3, #0
 80039e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80039e4:	697b      	ldr	r3, [r7, #20]
	}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3728      	adds	r7, #40	; 0x28
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b08c      	sub	sp, #48	; 0x30
 80039f2:	af04      	add	r7, sp, #16
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	603b      	str	r3, [r7, #0]
 80039fa:	4613      	mov	r3, r2
 80039fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039fe:	88fb      	ldrh	r3, [r7, #6]
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4618      	mov	r0, r3
 8003a04:	f001 fb66 	bl	80050d4 <pvPortMalloc>
 8003a08:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00e      	beq.n	8003a2e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003a10:	205c      	movs	r0, #92	; 0x5c
 8003a12:	f001 fb5f 	bl	80050d4 <pvPortMalloc>
 8003a16:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	631a      	str	r2, [r3, #48]	; 0x30
 8003a24:	e005      	b.n	8003a32 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a26:	6978      	ldr	r0, [r7, #20]
 8003a28:	f001 fc16 	bl	8005258 <vPortFree>
 8003a2c:	e001      	b.n	8003a32 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d017      	beq.n	8003a68 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a40:	88fa      	ldrh	r2, [r7, #6]
 8003a42:	2300      	movs	r3, #0
 8003a44:	9303      	str	r3, [sp, #12]
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	9302      	str	r3, [sp, #8]
 8003a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a4c:	9301      	str	r3, [sp, #4]
 8003a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	68b9      	ldr	r1, [r7, #8]
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f000 f80e 	bl	8003a78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a5c:	69f8      	ldr	r0, [r7, #28]
 8003a5e:	f000 f891 	bl	8003b84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a62:	2301      	movs	r3, #1
 8003a64:	61bb      	str	r3, [r7, #24]
 8003a66:	e002      	b.n	8003a6e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a6c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a6e:	69bb      	ldr	r3, [r7, #24]
	}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3720      	adds	r7, #32
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b088      	sub	sp, #32
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
 8003a84:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a88:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	461a      	mov	r2, r3
 8003a90:	21a5      	movs	r1, #165	; 0xa5
 8003a92:	f001 fd28 	bl	80054e6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4413      	add	r3, r2
 8003aa6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	f023 0307 	bic.w	r3, r3, #7
 8003aae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d009      	beq.n	8003ace <prvInitialiseNewTask+0x56>
 8003aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003abe:	f383 8811 	msr	BASEPRI, r3
 8003ac2:	f3bf 8f6f 	isb	sy
 8003ac6:	f3bf 8f4f 	dsb	sy
 8003aca:	617b      	str	r3, [r7, #20]
 8003acc:	e7fe      	b.n	8003acc <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ace:	2300      	movs	r3, #0
 8003ad0:	61fb      	str	r3, [r7, #28]
 8003ad2:	e012      	b.n	8003afa <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	4413      	add	r3, r2
 8003ada:	7819      	ldrb	r1, [r3, #0]
 8003adc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	3334      	adds	r3, #52	; 0x34
 8003ae4:	460a      	mov	r2, r1
 8003ae6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	4413      	add	r3, r2
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d006      	beq.n	8003b02 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	3301      	adds	r3, #1
 8003af8:	61fb      	str	r3, [r7, #28]
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	2b0f      	cmp	r3, #15
 8003afe:	d9e9      	bls.n	8003ad4 <prvInitialiseNewTask+0x5c>
 8003b00:	e000      	b.n	8003b04 <prvInitialiseNewTask+0x8c>
		{
			break;
 8003b02:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0e:	2b37      	cmp	r3, #55	; 0x37
 8003b10:	d901      	bls.n	8003b16 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b12:	2337      	movs	r3, #55	; 0x37
 8003b14:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b1a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b20:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b24:	2200      	movs	r2, #0
 8003b26:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2a:	3304      	adds	r3, #4
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7ff f8e6 	bl	8002cfe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b34:	3318      	adds	r3, #24
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7ff f8e1 	bl	8002cfe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b40:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b44:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b50:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b54:	2200      	movs	r2, #0
 8003b56:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	68f9      	ldr	r1, [r7, #12]
 8003b64:	69b8      	ldr	r0, [r7, #24]
 8003b66:	f001 f8d7 	bl	8004d18 <pxPortInitialiseStack>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d002      	beq.n	8003b7c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b7a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b7c:	bf00      	nop
 8003b7e:	3720      	adds	r7, #32
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b8c:	f001 f9ac 	bl	8004ee8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b90:	4b2d      	ldr	r3, [pc, #180]	; (8003c48 <prvAddNewTaskToReadyList+0xc4>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	3301      	adds	r3, #1
 8003b96:	4a2c      	ldr	r2, [pc, #176]	; (8003c48 <prvAddNewTaskToReadyList+0xc4>)
 8003b98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b9a:	4b2c      	ldr	r3, [pc, #176]	; (8003c4c <prvAddNewTaskToReadyList+0xc8>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d109      	bne.n	8003bb6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003ba2:	4a2a      	ldr	r2, [pc, #168]	; (8003c4c <prvAddNewTaskToReadyList+0xc8>)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ba8:	4b27      	ldr	r3, [pc, #156]	; (8003c48 <prvAddNewTaskToReadyList+0xc4>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d110      	bne.n	8003bd2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003bb0:	f000 fc0c 	bl	80043cc <prvInitialiseTaskLists>
 8003bb4:	e00d      	b.n	8003bd2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003bb6:	4b26      	ldr	r3, [pc, #152]	; (8003c50 <prvAddNewTaskToReadyList+0xcc>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d109      	bne.n	8003bd2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003bbe:	4b23      	ldr	r3, [pc, #140]	; (8003c4c <prvAddNewTaskToReadyList+0xc8>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d802      	bhi.n	8003bd2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003bcc:	4a1f      	ldr	r2, [pc, #124]	; (8003c4c <prvAddNewTaskToReadyList+0xc8>)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003bd2:	4b20      	ldr	r3, [pc, #128]	; (8003c54 <prvAddNewTaskToReadyList+0xd0>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	4a1e      	ldr	r2, [pc, #120]	; (8003c54 <prvAddNewTaskToReadyList+0xd0>)
 8003bda:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003bdc:	4b1d      	ldr	r3, [pc, #116]	; (8003c54 <prvAddNewTaskToReadyList+0xd0>)
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be8:	4b1b      	ldr	r3, [pc, #108]	; (8003c58 <prvAddNewTaskToReadyList+0xd4>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d903      	bls.n	8003bf8 <prvAddNewTaskToReadyList+0x74>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf4:	4a18      	ldr	r2, [pc, #96]	; (8003c58 <prvAddNewTaskToReadyList+0xd4>)
 8003bf6:	6013      	str	r3, [r2, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4a15      	ldr	r2, [pc, #84]	; (8003c5c <prvAddNewTaskToReadyList+0xd8>)
 8003c06:	441a      	add	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3304      	adds	r3, #4
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4610      	mov	r0, r2
 8003c10:	f7ff f881 	bl	8002d16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c14:	f001 f996 	bl	8004f44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c18:	4b0d      	ldr	r3, [pc, #52]	; (8003c50 <prvAddNewTaskToReadyList+0xcc>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00e      	beq.n	8003c3e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c20:	4b0a      	ldr	r3, [pc, #40]	; (8003c4c <prvAddNewTaskToReadyList+0xc8>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d207      	bcs.n	8003c3e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c2e:	4b0c      	ldr	r3, [pc, #48]	; (8003c60 <prvAddNewTaskToReadyList+0xdc>)
 8003c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	f3bf 8f4f 	dsb	sy
 8003c3a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c3e:	bf00      	nop
 8003c40:	3708      	adds	r7, #8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	20000c50 	.word	0x20000c50
 8003c4c:	2000077c 	.word	0x2000077c
 8003c50:	20000c5c 	.word	0x20000c5c
 8003c54:	20000c6c 	.word	0x20000c6c
 8003c58:	20000c58 	.word	0x20000c58
 8003c5c:	20000780 	.word	0x20000780
 8003c60:	e000ed04 	.word	0xe000ed04

08003c64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d016      	beq.n	8003ca4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003c76:	4b13      	ldr	r3, [pc, #76]	; (8003cc4 <vTaskDelay+0x60>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d009      	beq.n	8003c92 <vTaskDelay+0x2e>
 8003c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c82:	f383 8811 	msr	BASEPRI, r3
 8003c86:	f3bf 8f6f 	isb	sy
 8003c8a:	f3bf 8f4f 	dsb	sy
 8003c8e:	60bb      	str	r3, [r7, #8]
 8003c90:	e7fe      	b.n	8003c90 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003c92:	f000 f87f 	bl	8003d94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c96:	2100      	movs	r1, #0
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 fcdf 	bl	800465c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003c9e:	f000 f887 	bl	8003db0 <xTaskResumeAll>
 8003ca2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d107      	bne.n	8003cba <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003caa:	4b07      	ldr	r3, [pc, #28]	; (8003cc8 <vTaskDelay+0x64>)
 8003cac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	f3bf 8f4f 	dsb	sy
 8003cb6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003cba:	bf00      	nop
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	20000c78 	.word	0x20000c78
 8003cc8:	e000ed04 	.word	0xe000ed04

08003ccc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b08a      	sub	sp, #40	; 0x28
 8003cd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003cda:	463a      	mov	r2, r7
 8003cdc:	1d39      	adds	r1, r7, #4
 8003cde:	f107 0308 	add.w	r3, r7, #8
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fe ffba 	bl	8002c5c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ce8:	6839      	ldr	r1, [r7, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	9202      	str	r2, [sp, #8]
 8003cf0:	9301      	str	r3, [sp, #4]
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	460a      	mov	r2, r1
 8003cfa:	4920      	ldr	r1, [pc, #128]	; (8003d7c <vTaskStartScheduler+0xb0>)
 8003cfc:	4820      	ldr	r0, [pc, #128]	; (8003d80 <vTaskStartScheduler+0xb4>)
 8003cfe:	f7ff fe1d 	bl	800393c <xTaskCreateStatic>
 8003d02:	4602      	mov	r2, r0
 8003d04:	4b1f      	ldr	r3, [pc, #124]	; (8003d84 <vTaskStartScheduler+0xb8>)
 8003d06:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d08:	4b1e      	ldr	r3, [pc, #120]	; (8003d84 <vTaskStartScheduler+0xb8>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d10:	2301      	movs	r3, #1
 8003d12:	617b      	str	r3, [r7, #20]
 8003d14:	e001      	b.n	8003d1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d16:	2300      	movs	r3, #0
 8003d18:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d102      	bne.n	8003d26 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003d20:	f000 fcf0 	bl	8004704 <xTimerCreateTimerTask>
 8003d24:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d115      	bne.n	8003d58 <vTaskStartScheduler+0x8c>
 8003d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d30:	f383 8811 	msr	BASEPRI, r3
 8003d34:	f3bf 8f6f 	isb	sy
 8003d38:	f3bf 8f4f 	dsb	sy
 8003d3c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d3e:	4b12      	ldr	r3, [pc, #72]	; (8003d88 <vTaskStartScheduler+0xbc>)
 8003d40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d44:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d46:	4b11      	ldr	r3, [pc, #68]	; (8003d8c <vTaskStartScheduler+0xc0>)
 8003d48:	2201      	movs	r2, #1
 8003d4a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003d4c:	4b10      	ldr	r3, [pc, #64]	; (8003d90 <vTaskStartScheduler+0xc4>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d52:	f001 f859 	bl	8004e08 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d56:	e00d      	b.n	8003d74 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d5e:	d109      	bne.n	8003d74 <vTaskStartScheduler+0xa8>
 8003d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d64:	f383 8811 	msr	BASEPRI, r3
 8003d68:	f3bf 8f6f 	isb	sy
 8003d6c:	f3bf 8f4f 	dsb	sy
 8003d70:	60fb      	str	r3, [r7, #12]
 8003d72:	e7fe      	b.n	8003d72 <vTaskStartScheduler+0xa6>
}
 8003d74:	bf00      	nop
 8003d76:	3718      	adds	r7, #24
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	08005edc 	.word	0x08005edc
 8003d80:	0800439d 	.word	0x0800439d
 8003d84:	20000c74 	.word	0x20000c74
 8003d88:	20000c70 	.word	0x20000c70
 8003d8c:	20000c5c 	.word	0x20000c5c
 8003d90:	20000c54 	.word	0x20000c54

08003d94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003d98:	4b04      	ldr	r3, [pc, #16]	; (8003dac <vTaskSuspendAll+0x18>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	4a03      	ldr	r2, [pc, #12]	; (8003dac <vTaskSuspendAll+0x18>)
 8003da0:	6013      	str	r3, [r2, #0]
}
 8003da2:	bf00      	nop
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bc80      	pop	{r7}
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	20000c78 	.word	0x20000c78

08003db0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003db6:	2300      	movs	r3, #0
 8003db8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003dbe:	4b41      	ldr	r3, [pc, #260]	; (8003ec4 <xTaskResumeAll+0x114>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d109      	bne.n	8003dda <xTaskResumeAll+0x2a>
 8003dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dca:	f383 8811 	msr	BASEPRI, r3
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	603b      	str	r3, [r7, #0]
 8003dd8:	e7fe      	b.n	8003dd8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003dda:	f001 f885 	bl	8004ee8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003dde:	4b39      	ldr	r3, [pc, #228]	; (8003ec4 <xTaskResumeAll+0x114>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	3b01      	subs	r3, #1
 8003de4:	4a37      	ldr	r2, [pc, #220]	; (8003ec4 <xTaskResumeAll+0x114>)
 8003de6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003de8:	4b36      	ldr	r3, [pc, #216]	; (8003ec4 <xTaskResumeAll+0x114>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d162      	bne.n	8003eb6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003df0:	4b35      	ldr	r3, [pc, #212]	; (8003ec8 <xTaskResumeAll+0x118>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d05e      	beq.n	8003eb6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003df8:	e02f      	b.n	8003e5a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003dfa:	4b34      	ldr	r3, [pc, #208]	; (8003ecc <xTaskResumeAll+0x11c>)
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	3318      	adds	r3, #24
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fe ffe0 	bl	8002dcc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	3304      	adds	r3, #4
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7fe ffdb 	bl	8002dcc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e1a:	4b2d      	ldr	r3, [pc, #180]	; (8003ed0 <xTaskResumeAll+0x120>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d903      	bls.n	8003e2a <xTaskResumeAll+0x7a>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e26:	4a2a      	ldr	r2, [pc, #168]	; (8003ed0 <xTaskResumeAll+0x120>)
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e2e:	4613      	mov	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	4413      	add	r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4a27      	ldr	r2, [pc, #156]	; (8003ed4 <xTaskResumeAll+0x124>)
 8003e38:	441a      	add	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	3304      	adds	r3, #4
 8003e3e:	4619      	mov	r1, r3
 8003e40:	4610      	mov	r0, r2
 8003e42:	f7fe ff68 	bl	8002d16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e4a:	4b23      	ldr	r3, [pc, #140]	; (8003ed8 <xTaskResumeAll+0x128>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d302      	bcc.n	8003e5a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003e54:	4b21      	ldr	r3, [pc, #132]	; (8003edc <xTaskResumeAll+0x12c>)
 8003e56:	2201      	movs	r2, #1
 8003e58:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e5a:	4b1c      	ldr	r3, [pc, #112]	; (8003ecc <xTaskResumeAll+0x11c>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1cb      	bne.n	8003dfa <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e68:	f000 fb4a 	bl	8004500 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003e6c:	4b1c      	ldr	r3, [pc, #112]	; (8003ee0 <xTaskResumeAll+0x130>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d010      	beq.n	8003e9a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e78:	f000 f844 	bl	8003f04 <xTaskIncrementTick>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d002      	beq.n	8003e88 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003e82:	4b16      	ldr	r3, [pc, #88]	; (8003edc <xTaskResumeAll+0x12c>)
 8003e84:	2201      	movs	r2, #1
 8003e86:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1f1      	bne.n	8003e78 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003e94:	4b12      	ldr	r3, [pc, #72]	; (8003ee0 <xTaskResumeAll+0x130>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e9a:	4b10      	ldr	r3, [pc, #64]	; (8003edc <xTaskResumeAll+0x12c>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d009      	beq.n	8003eb6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003ea6:	4b0f      	ldr	r3, [pc, #60]	; (8003ee4 <xTaskResumeAll+0x134>)
 8003ea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	f3bf 8f4f 	dsb	sy
 8003eb2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003eb6:	f001 f845 	bl	8004f44 <vPortExitCritical>

	return xAlreadyYielded;
 8003eba:	68bb      	ldr	r3, [r7, #8]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	20000c78 	.word	0x20000c78
 8003ec8:	20000c50 	.word	0x20000c50
 8003ecc:	20000c10 	.word	0x20000c10
 8003ed0:	20000c58 	.word	0x20000c58
 8003ed4:	20000780 	.word	0x20000780
 8003ed8:	2000077c 	.word	0x2000077c
 8003edc:	20000c64 	.word	0x20000c64
 8003ee0:	20000c60 	.word	0x20000c60
 8003ee4:	e000ed04 	.word	0xe000ed04

08003ee8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003eee:	4b04      	ldr	r3, [pc, #16]	; (8003f00 <xTaskGetTickCount+0x18>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003ef4:	687b      	ldr	r3, [r7, #4]
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bc80      	pop	{r7}
 8003efe:	4770      	bx	lr
 8003f00:	20000c54 	.word	0x20000c54

08003f04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f0e:	4b51      	ldr	r3, [pc, #324]	; (8004054 <xTaskIncrementTick+0x150>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f040 808d 	bne.w	8004032 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f18:	4b4f      	ldr	r3, [pc, #316]	; (8004058 <xTaskIncrementTick+0x154>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f20:	4a4d      	ldr	r2, [pc, #308]	; (8004058 <xTaskIncrementTick+0x154>)
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d11f      	bne.n	8003f6c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f2c:	4b4b      	ldr	r3, [pc, #300]	; (800405c <xTaskIncrementTick+0x158>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d009      	beq.n	8003f4a <xTaskIncrementTick+0x46>
 8003f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3a:	f383 8811 	msr	BASEPRI, r3
 8003f3e:	f3bf 8f6f 	isb	sy
 8003f42:	f3bf 8f4f 	dsb	sy
 8003f46:	603b      	str	r3, [r7, #0]
 8003f48:	e7fe      	b.n	8003f48 <xTaskIncrementTick+0x44>
 8003f4a:	4b44      	ldr	r3, [pc, #272]	; (800405c <xTaskIncrementTick+0x158>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	60fb      	str	r3, [r7, #12]
 8003f50:	4b43      	ldr	r3, [pc, #268]	; (8004060 <xTaskIncrementTick+0x15c>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a41      	ldr	r2, [pc, #260]	; (800405c <xTaskIncrementTick+0x158>)
 8003f56:	6013      	str	r3, [r2, #0]
 8003f58:	4a41      	ldr	r2, [pc, #260]	; (8004060 <xTaskIncrementTick+0x15c>)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6013      	str	r3, [r2, #0]
 8003f5e:	4b41      	ldr	r3, [pc, #260]	; (8004064 <xTaskIncrementTick+0x160>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	3301      	adds	r3, #1
 8003f64:	4a3f      	ldr	r2, [pc, #252]	; (8004064 <xTaskIncrementTick+0x160>)
 8003f66:	6013      	str	r3, [r2, #0]
 8003f68:	f000 faca 	bl	8004500 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f6c:	4b3e      	ldr	r3, [pc, #248]	; (8004068 <xTaskIncrementTick+0x164>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d34e      	bcc.n	8004014 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f76:	4b39      	ldr	r3, [pc, #228]	; (800405c <xTaskIncrementTick+0x158>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d101      	bne.n	8003f84 <xTaskIncrementTick+0x80>
 8003f80:	2301      	movs	r3, #1
 8003f82:	e000      	b.n	8003f86 <xTaskIncrementTick+0x82>
 8003f84:	2300      	movs	r3, #0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d004      	beq.n	8003f94 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f8a:	4b37      	ldr	r3, [pc, #220]	; (8004068 <xTaskIncrementTick+0x164>)
 8003f8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f90:	601a      	str	r2, [r3, #0]
					break;
 8003f92:	e03f      	b.n	8004014 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f94:	4b31      	ldr	r3, [pc, #196]	; (800405c <xTaskIncrementTick+0x158>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d203      	bcs.n	8003fb4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003fac:	4a2e      	ldr	r2, [pc, #184]	; (8004068 <xTaskIncrementTick+0x164>)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6013      	str	r3, [r2, #0]
						break;
 8003fb2:	e02f      	b.n	8004014 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7fe ff07 	bl	8002dcc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d004      	beq.n	8003fd0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	3318      	adds	r3, #24
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fe fefe 	bl	8002dcc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd4:	4b25      	ldr	r3, [pc, #148]	; (800406c <xTaskIncrementTick+0x168>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d903      	bls.n	8003fe4 <xTaskIncrementTick+0xe0>
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe0:	4a22      	ldr	r2, [pc, #136]	; (800406c <xTaskIncrementTick+0x168>)
 8003fe2:	6013      	str	r3, [r2, #0]
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe8:	4613      	mov	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4a1f      	ldr	r2, [pc, #124]	; (8004070 <xTaskIncrementTick+0x16c>)
 8003ff2:	441a      	add	r2, r3
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	3304      	adds	r3, #4
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	4610      	mov	r0, r2
 8003ffc:	f7fe fe8b 	bl	8002d16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004004:	4b1b      	ldr	r3, [pc, #108]	; (8004074 <xTaskIncrementTick+0x170>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400a:	429a      	cmp	r2, r3
 800400c:	d3b3      	bcc.n	8003f76 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800400e:	2301      	movs	r3, #1
 8004010:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004012:	e7b0      	b.n	8003f76 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004014:	4b17      	ldr	r3, [pc, #92]	; (8004074 <xTaskIncrementTick+0x170>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800401a:	4915      	ldr	r1, [pc, #84]	; (8004070 <xTaskIncrementTick+0x16c>)
 800401c:	4613      	mov	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4413      	add	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	440b      	add	r3, r1
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d907      	bls.n	800403c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800402c:	2301      	movs	r3, #1
 800402e:	617b      	str	r3, [r7, #20]
 8004030:	e004      	b.n	800403c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004032:	4b11      	ldr	r3, [pc, #68]	; (8004078 <xTaskIncrementTick+0x174>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	3301      	adds	r3, #1
 8004038:	4a0f      	ldr	r2, [pc, #60]	; (8004078 <xTaskIncrementTick+0x174>)
 800403a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800403c:	4b0f      	ldr	r3, [pc, #60]	; (800407c <xTaskIncrementTick+0x178>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004044:	2301      	movs	r3, #1
 8004046:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004048:	697b      	ldr	r3, [r7, #20]
}
 800404a:	4618      	mov	r0, r3
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	20000c78 	.word	0x20000c78
 8004058:	20000c54 	.word	0x20000c54
 800405c:	20000c08 	.word	0x20000c08
 8004060:	20000c0c 	.word	0x20000c0c
 8004064:	20000c68 	.word	0x20000c68
 8004068:	20000c70 	.word	0x20000c70
 800406c:	20000c58 	.word	0x20000c58
 8004070:	20000780 	.word	0x20000780
 8004074:	2000077c 	.word	0x2000077c
 8004078:	20000c60 	.word	0x20000c60
 800407c:	20000c64 	.word	0x20000c64

08004080 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004086:	4b27      	ldr	r3, [pc, #156]	; (8004124 <vTaskSwitchContext+0xa4>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800408e:	4b26      	ldr	r3, [pc, #152]	; (8004128 <vTaskSwitchContext+0xa8>)
 8004090:	2201      	movs	r2, #1
 8004092:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004094:	e040      	b.n	8004118 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004096:	4b24      	ldr	r3, [pc, #144]	; (8004128 <vTaskSwitchContext+0xa8>)
 8004098:	2200      	movs	r2, #0
 800409a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800409c:	4b23      	ldr	r3, [pc, #140]	; (800412c <vTaskSwitchContext+0xac>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	60fb      	str	r3, [r7, #12]
 80040a2:	e00f      	b.n	80040c4 <vTaskSwitchContext+0x44>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d109      	bne.n	80040be <vTaskSwitchContext+0x3e>
 80040aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ae:	f383 8811 	msr	BASEPRI, r3
 80040b2:	f3bf 8f6f 	isb	sy
 80040b6:	f3bf 8f4f 	dsb	sy
 80040ba:	607b      	str	r3, [r7, #4]
 80040bc:	e7fe      	b.n	80040bc <vTaskSwitchContext+0x3c>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	3b01      	subs	r3, #1
 80040c2:	60fb      	str	r3, [r7, #12]
 80040c4:	491a      	ldr	r1, [pc, #104]	; (8004130 <vTaskSwitchContext+0xb0>)
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	4613      	mov	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4413      	add	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d0e5      	beq.n	80040a4 <vTaskSwitchContext+0x24>
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	4613      	mov	r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	4413      	add	r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4a13      	ldr	r2, [pc, #76]	; (8004130 <vTaskSwitchContext+0xb0>)
 80040e4:	4413      	add	r3, r2
 80040e6:	60bb      	str	r3, [r7, #8]
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	605a      	str	r2, [r3, #4]
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	3308      	adds	r3, #8
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d104      	bne.n	8004108 <vTaskSwitchContext+0x88>
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	605a      	str	r2, [r3, #4]
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	4a09      	ldr	r2, [pc, #36]	; (8004134 <vTaskSwitchContext+0xb4>)
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	4a06      	ldr	r2, [pc, #24]	; (800412c <vTaskSwitchContext+0xac>)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6013      	str	r3, [r2, #0]
}
 8004118:	bf00      	nop
 800411a:	3714      	adds	r7, #20
 800411c:	46bd      	mov	sp, r7
 800411e:	bc80      	pop	{r7}
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	20000c78 	.word	0x20000c78
 8004128:	20000c64 	.word	0x20000c64
 800412c:	20000c58 	.word	0x20000c58
 8004130:	20000780 	.word	0x20000780
 8004134:	2000077c 	.word	0x2000077c

08004138 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d109      	bne.n	800415c <vTaskPlaceOnEventList+0x24>
 8004148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414c:	f383 8811 	msr	BASEPRI, r3
 8004150:	f3bf 8f6f 	isb	sy
 8004154:	f3bf 8f4f 	dsb	sy
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	e7fe      	b.n	800415a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800415c:	4b07      	ldr	r3, [pc, #28]	; (800417c <vTaskPlaceOnEventList+0x44>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	3318      	adds	r3, #24
 8004162:	4619      	mov	r1, r3
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7fe fdf9 	bl	8002d5c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800416a:	2101      	movs	r1, #1
 800416c:	6838      	ldr	r0, [r7, #0]
 800416e:	f000 fa75 	bl	800465c <prvAddCurrentTaskToDelayedList>
}
 8004172:	bf00      	nop
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	2000077c 	.word	0x2000077c

08004180 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d109      	bne.n	80041a6 <vTaskPlaceOnEventListRestricted+0x26>
 8004192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004196:	f383 8811 	msr	BASEPRI, r3
 800419a:	f3bf 8f6f 	isb	sy
 800419e:	f3bf 8f4f 	dsb	sy
 80041a2:	617b      	str	r3, [r7, #20]
 80041a4:	e7fe      	b.n	80041a4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041a6:	4b0a      	ldr	r3, [pc, #40]	; (80041d0 <vTaskPlaceOnEventListRestricted+0x50>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	3318      	adds	r3, #24
 80041ac:	4619      	mov	r1, r3
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f7fe fdb1 	bl	8002d16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d002      	beq.n	80041c0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80041ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041be:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80041c0:	6879      	ldr	r1, [r7, #4]
 80041c2:	68b8      	ldr	r0, [r7, #8]
 80041c4:	f000 fa4a 	bl	800465c <prvAddCurrentTaskToDelayedList>
	}
 80041c8:	bf00      	nop
 80041ca:	3718      	adds	r7, #24
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	2000077c 	.word	0x2000077c

080041d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d109      	bne.n	80041fe <xTaskRemoveFromEventList+0x2a>
 80041ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ee:	f383 8811 	msr	BASEPRI, r3
 80041f2:	f3bf 8f6f 	isb	sy
 80041f6:	f3bf 8f4f 	dsb	sy
 80041fa:	60fb      	str	r3, [r7, #12]
 80041fc:	e7fe      	b.n	80041fc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	3318      	adds	r3, #24
 8004202:	4618      	mov	r0, r3
 8004204:	f7fe fde2 	bl	8002dcc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004208:	4b1d      	ldr	r3, [pc, #116]	; (8004280 <xTaskRemoveFromEventList+0xac>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d11d      	bne.n	800424c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	3304      	adds	r3, #4
 8004214:	4618      	mov	r0, r3
 8004216:	f7fe fdd9 	bl	8002dcc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800421e:	4b19      	ldr	r3, [pc, #100]	; (8004284 <xTaskRemoveFromEventList+0xb0>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	429a      	cmp	r2, r3
 8004224:	d903      	bls.n	800422e <xTaskRemoveFromEventList+0x5a>
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422a:	4a16      	ldr	r2, [pc, #88]	; (8004284 <xTaskRemoveFromEventList+0xb0>)
 800422c:	6013      	str	r3, [r2, #0]
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004232:	4613      	mov	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4413      	add	r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	4a13      	ldr	r2, [pc, #76]	; (8004288 <xTaskRemoveFromEventList+0xb4>)
 800423c:	441a      	add	r2, r3
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	3304      	adds	r3, #4
 8004242:	4619      	mov	r1, r3
 8004244:	4610      	mov	r0, r2
 8004246:	f7fe fd66 	bl	8002d16 <vListInsertEnd>
 800424a:	e005      	b.n	8004258 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	3318      	adds	r3, #24
 8004250:	4619      	mov	r1, r3
 8004252:	480e      	ldr	r0, [pc, #56]	; (800428c <xTaskRemoveFromEventList+0xb8>)
 8004254:	f7fe fd5f 	bl	8002d16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800425c:	4b0c      	ldr	r3, [pc, #48]	; (8004290 <xTaskRemoveFromEventList+0xbc>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004262:	429a      	cmp	r2, r3
 8004264:	d905      	bls.n	8004272 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004266:	2301      	movs	r3, #1
 8004268:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800426a:	4b0a      	ldr	r3, [pc, #40]	; (8004294 <xTaskRemoveFromEventList+0xc0>)
 800426c:	2201      	movs	r2, #1
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	e001      	b.n	8004276 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004272:	2300      	movs	r3, #0
 8004274:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004276:	697b      	ldr	r3, [r7, #20]
}
 8004278:	4618      	mov	r0, r3
 800427a:	3718      	adds	r7, #24
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	20000c78 	.word	0x20000c78
 8004284:	20000c58 	.word	0x20000c58
 8004288:	20000780 	.word	0x20000780
 800428c:	20000c10 	.word	0x20000c10
 8004290:	2000077c 	.word	0x2000077c
 8004294:	20000c64 	.word	0x20000c64

08004298 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80042a0:	4b06      	ldr	r3, [pc, #24]	; (80042bc <vTaskInternalSetTimeOutState+0x24>)
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80042a8:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <vTaskInternalSetTimeOutState+0x28>)
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	605a      	str	r2, [r3, #4]
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bc80      	pop	{r7}
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	20000c68 	.word	0x20000c68
 80042c0:	20000c54 	.word	0x20000c54

080042c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b088      	sub	sp, #32
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d109      	bne.n	80042e8 <xTaskCheckForTimeOut+0x24>
 80042d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d8:	f383 8811 	msr	BASEPRI, r3
 80042dc:	f3bf 8f6f 	isb	sy
 80042e0:	f3bf 8f4f 	dsb	sy
 80042e4:	613b      	str	r3, [r7, #16]
 80042e6:	e7fe      	b.n	80042e6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d109      	bne.n	8004302 <xTaskCheckForTimeOut+0x3e>
 80042ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f2:	f383 8811 	msr	BASEPRI, r3
 80042f6:	f3bf 8f6f 	isb	sy
 80042fa:	f3bf 8f4f 	dsb	sy
 80042fe:	60fb      	str	r3, [r7, #12]
 8004300:	e7fe      	b.n	8004300 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004302:	f000 fdf1 	bl	8004ee8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004306:	4b1d      	ldr	r3, [pc, #116]	; (800437c <xTaskCheckForTimeOut+0xb8>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800431e:	d102      	bne.n	8004326 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004320:	2300      	movs	r3, #0
 8004322:	61fb      	str	r3, [r7, #28]
 8004324:	e023      	b.n	800436e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	4b15      	ldr	r3, [pc, #84]	; (8004380 <xTaskCheckForTimeOut+0xbc>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	429a      	cmp	r2, r3
 8004330:	d007      	beq.n	8004342 <xTaskCheckForTimeOut+0x7e>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	429a      	cmp	r2, r3
 800433a:	d302      	bcc.n	8004342 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800433c:	2301      	movs	r3, #1
 800433e:	61fb      	str	r3, [r7, #28]
 8004340:	e015      	b.n	800436e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	429a      	cmp	r2, r3
 800434a:	d20b      	bcs.n	8004364 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	1ad2      	subs	r2, r2, r3
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f7ff ff9d 	bl	8004298 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800435e:	2300      	movs	r3, #0
 8004360:	61fb      	str	r3, [r7, #28]
 8004362:	e004      	b.n	800436e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	2200      	movs	r2, #0
 8004368:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800436a:	2301      	movs	r3, #1
 800436c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800436e:	f000 fde9 	bl	8004f44 <vPortExitCritical>

	return xReturn;
 8004372:	69fb      	ldr	r3, [r7, #28]
}
 8004374:	4618      	mov	r0, r3
 8004376:	3720      	adds	r7, #32
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	20000c54 	.word	0x20000c54
 8004380:	20000c68 	.word	0x20000c68

08004384 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004388:	4b03      	ldr	r3, [pc, #12]	; (8004398 <vTaskMissedYield+0x14>)
 800438a:	2201      	movs	r2, #1
 800438c:	601a      	str	r2, [r3, #0]
}
 800438e:	bf00      	nop
 8004390:	46bd      	mov	sp, r7
 8004392:	bc80      	pop	{r7}
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	20000c64 	.word	0x20000c64

0800439c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80043a4:	f000 f852 	bl	800444c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80043a8:	4b06      	ldr	r3, [pc, #24]	; (80043c4 <prvIdleTask+0x28>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d9f9      	bls.n	80043a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80043b0:	4b05      	ldr	r3, [pc, #20]	; (80043c8 <prvIdleTask+0x2c>)
 80043b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	f3bf 8f4f 	dsb	sy
 80043bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80043c0:	e7f0      	b.n	80043a4 <prvIdleTask+0x8>
 80043c2:	bf00      	nop
 80043c4:	20000780 	.word	0x20000780
 80043c8:	e000ed04 	.word	0xe000ed04

080043cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043d2:	2300      	movs	r3, #0
 80043d4:	607b      	str	r3, [r7, #4]
 80043d6:	e00c      	b.n	80043f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	4613      	mov	r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	4413      	add	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4a12      	ldr	r2, [pc, #72]	; (800442c <prvInitialiseTaskLists+0x60>)
 80043e4:	4413      	add	r3, r2
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fe fc6a 	bl	8002cc0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	3301      	adds	r3, #1
 80043f0:	607b      	str	r3, [r7, #4]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2b37      	cmp	r3, #55	; 0x37
 80043f6:	d9ef      	bls.n	80043d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80043f8:	480d      	ldr	r0, [pc, #52]	; (8004430 <prvInitialiseTaskLists+0x64>)
 80043fa:	f7fe fc61 	bl	8002cc0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80043fe:	480d      	ldr	r0, [pc, #52]	; (8004434 <prvInitialiseTaskLists+0x68>)
 8004400:	f7fe fc5e 	bl	8002cc0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004404:	480c      	ldr	r0, [pc, #48]	; (8004438 <prvInitialiseTaskLists+0x6c>)
 8004406:	f7fe fc5b 	bl	8002cc0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800440a:	480c      	ldr	r0, [pc, #48]	; (800443c <prvInitialiseTaskLists+0x70>)
 800440c:	f7fe fc58 	bl	8002cc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004410:	480b      	ldr	r0, [pc, #44]	; (8004440 <prvInitialiseTaskLists+0x74>)
 8004412:	f7fe fc55 	bl	8002cc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004416:	4b0b      	ldr	r3, [pc, #44]	; (8004444 <prvInitialiseTaskLists+0x78>)
 8004418:	4a05      	ldr	r2, [pc, #20]	; (8004430 <prvInitialiseTaskLists+0x64>)
 800441a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800441c:	4b0a      	ldr	r3, [pc, #40]	; (8004448 <prvInitialiseTaskLists+0x7c>)
 800441e:	4a05      	ldr	r2, [pc, #20]	; (8004434 <prvInitialiseTaskLists+0x68>)
 8004420:	601a      	str	r2, [r3, #0]
}
 8004422:	bf00      	nop
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	20000780 	.word	0x20000780
 8004430:	20000be0 	.word	0x20000be0
 8004434:	20000bf4 	.word	0x20000bf4
 8004438:	20000c10 	.word	0x20000c10
 800443c:	20000c24 	.word	0x20000c24
 8004440:	20000c3c 	.word	0x20000c3c
 8004444:	20000c08 	.word	0x20000c08
 8004448:	20000c0c 	.word	0x20000c0c

0800444c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004452:	e019      	b.n	8004488 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004454:	f000 fd48 	bl	8004ee8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004458:	4b0f      	ldr	r3, [pc, #60]	; (8004498 <prvCheckTasksWaitingTermination+0x4c>)
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3304      	adds	r3, #4
 8004464:	4618      	mov	r0, r3
 8004466:	f7fe fcb1 	bl	8002dcc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800446a:	4b0c      	ldr	r3, [pc, #48]	; (800449c <prvCheckTasksWaitingTermination+0x50>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	3b01      	subs	r3, #1
 8004470:	4a0a      	ldr	r2, [pc, #40]	; (800449c <prvCheckTasksWaitingTermination+0x50>)
 8004472:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004474:	4b0a      	ldr	r3, [pc, #40]	; (80044a0 <prvCheckTasksWaitingTermination+0x54>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	3b01      	subs	r3, #1
 800447a:	4a09      	ldr	r2, [pc, #36]	; (80044a0 <prvCheckTasksWaitingTermination+0x54>)
 800447c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800447e:	f000 fd61 	bl	8004f44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f80e 	bl	80044a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004488:	4b05      	ldr	r3, [pc, #20]	; (80044a0 <prvCheckTasksWaitingTermination+0x54>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1e1      	bne.n	8004454 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004490:	bf00      	nop
 8004492:	3708      	adds	r7, #8
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	20000c24 	.word	0x20000c24
 800449c:	20000c50 	.word	0x20000c50
 80044a0:	20000c38 	.word	0x20000c38

080044a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d108      	bne.n	80044c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 fecc 	bl	8005258 <vPortFree>
				vPortFree( pxTCB );
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 fec9 	bl	8005258 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80044c6:	e017      	b.n	80044f8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d103      	bne.n	80044da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 fec0 	bl	8005258 <vPortFree>
	}
 80044d8:	e00e      	b.n	80044f8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d009      	beq.n	80044f8 <prvDeleteTCB+0x54>
 80044e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e8:	f383 8811 	msr	BASEPRI, r3
 80044ec:	f3bf 8f6f 	isb	sy
 80044f0:	f3bf 8f4f 	dsb	sy
 80044f4:	60fb      	str	r3, [r7, #12]
 80044f6:	e7fe      	b.n	80044f6 <prvDeleteTCB+0x52>
	}
 80044f8:	bf00      	nop
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004506:	4b0e      	ldr	r3, [pc, #56]	; (8004540 <prvResetNextTaskUnblockTime+0x40>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d101      	bne.n	8004514 <prvResetNextTaskUnblockTime+0x14>
 8004510:	2301      	movs	r3, #1
 8004512:	e000      	b.n	8004516 <prvResetNextTaskUnblockTime+0x16>
 8004514:	2300      	movs	r3, #0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d004      	beq.n	8004524 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800451a:	4b0a      	ldr	r3, [pc, #40]	; (8004544 <prvResetNextTaskUnblockTime+0x44>)
 800451c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004520:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004522:	e008      	b.n	8004536 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004524:	4b06      	ldr	r3, [pc, #24]	; (8004540 <prvResetNextTaskUnblockTime+0x40>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	4a04      	ldr	r2, [pc, #16]	; (8004544 <prvResetNextTaskUnblockTime+0x44>)
 8004534:	6013      	str	r3, [r2, #0]
}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	bc80      	pop	{r7}
 800453e:	4770      	bx	lr
 8004540:	20000c08 	.word	0x20000c08
 8004544:	20000c70 	.word	0x20000c70

08004548 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800454e:	4b0b      	ldr	r3, [pc, #44]	; (800457c <xTaskGetSchedulerState+0x34>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d102      	bne.n	800455c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004556:	2301      	movs	r3, #1
 8004558:	607b      	str	r3, [r7, #4]
 800455a:	e008      	b.n	800456e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800455c:	4b08      	ldr	r3, [pc, #32]	; (8004580 <xTaskGetSchedulerState+0x38>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d102      	bne.n	800456a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004564:	2302      	movs	r3, #2
 8004566:	607b      	str	r3, [r7, #4]
 8004568:	e001      	b.n	800456e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800456a:	2300      	movs	r3, #0
 800456c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800456e:	687b      	ldr	r3, [r7, #4]
	}
 8004570:	4618      	mov	r0, r3
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	bc80      	pop	{r7}
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	20000c5c 	.word	0x20000c5c
 8004580:	20000c78 	.word	0x20000c78

08004584 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004590:	2300      	movs	r3, #0
 8004592:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d054      	beq.n	8004644 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800459a:	4b2d      	ldr	r3, [pc, #180]	; (8004650 <xTaskPriorityDisinherit+0xcc>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d009      	beq.n	80045b8 <xTaskPriorityDisinherit+0x34>
 80045a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a8:	f383 8811 	msr	BASEPRI, r3
 80045ac:	f3bf 8f6f 	isb	sy
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	60fb      	str	r3, [r7, #12]
 80045b6:	e7fe      	b.n	80045b6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d109      	bne.n	80045d4 <xTaskPriorityDisinherit+0x50>
 80045c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c4:	f383 8811 	msr	BASEPRI, r3
 80045c8:	f3bf 8f6f 	isb	sy
 80045cc:	f3bf 8f4f 	dsb	sy
 80045d0:	60bb      	str	r3, [r7, #8]
 80045d2:	e7fe      	b.n	80045d2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d8:	1e5a      	subs	r2, r3, #1
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d02c      	beq.n	8004644 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d128      	bne.n	8004644 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	3304      	adds	r3, #4
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7fe fbe8 	bl	8002dcc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004608:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004614:	4b0f      	ldr	r3, [pc, #60]	; (8004654 <xTaskPriorityDisinherit+0xd0>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	429a      	cmp	r2, r3
 800461a:	d903      	bls.n	8004624 <xTaskPriorityDisinherit+0xa0>
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004620:	4a0c      	ldr	r2, [pc, #48]	; (8004654 <xTaskPriorityDisinherit+0xd0>)
 8004622:	6013      	str	r3, [r2, #0]
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004628:	4613      	mov	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4413      	add	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4a09      	ldr	r2, [pc, #36]	; (8004658 <xTaskPriorityDisinherit+0xd4>)
 8004632:	441a      	add	r2, r3
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	3304      	adds	r3, #4
 8004638:	4619      	mov	r1, r3
 800463a:	4610      	mov	r0, r2
 800463c:	f7fe fb6b 	bl	8002d16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004640:	2301      	movs	r3, #1
 8004642:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004644:	697b      	ldr	r3, [r7, #20]
	}
 8004646:	4618      	mov	r0, r3
 8004648:	3718      	adds	r7, #24
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	2000077c 	.word	0x2000077c
 8004654:	20000c58 	.word	0x20000c58
 8004658:	20000780 	.word	0x20000780

0800465c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004666:	4b21      	ldr	r3, [pc, #132]	; (80046ec <prvAddCurrentTaskToDelayedList+0x90>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800466c:	4b20      	ldr	r3, [pc, #128]	; (80046f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	3304      	adds	r3, #4
 8004672:	4618      	mov	r0, r3
 8004674:	f7fe fbaa 	bl	8002dcc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800467e:	d10a      	bne.n	8004696 <prvAddCurrentTaskToDelayedList+0x3a>
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d007      	beq.n	8004696 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004686:	4b1a      	ldr	r3, [pc, #104]	; (80046f0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	3304      	adds	r3, #4
 800468c:	4619      	mov	r1, r3
 800468e:	4819      	ldr	r0, [pc, #100]	; (80046f4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004690:	f7fe fb41 	bl	8002d16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004694:	e026      	b.n	80046e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4413      	add	r3, r2
 800469c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800469e:	4b14      	ldr	r3, [pc, #80]	; (80046f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80046a6:	68ba      	ldr	r2, [r7, #8]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d209      	bcs.n	80046c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046ae:	4b12      	ldr	r3, [pc, #72]	; (80046f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	4b0f      	ldr	r3, [pc, #60]	; (80046f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	3304      	adds	r3, #4
 80046b8:	4619      	mov	r1, r3
 80046ba:	4610      	mov	r0, r2
 80046bc:	f7fe fb4e 	bl	8002d5c <vListInsert>
}
 80046c0:	e010      	b.n	80046e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046c2:	4b0e      	ldr	r3, [pc, #56]	; (80046fc <prvAddCurrentTaskToDelayedList+0xa0>)
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	4b0a      	ldr	r3, [pc, #40]	; (80046f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	3304      	adds	r3, #4
 80046cc:	4619      	mov	r1, r3
 80046ce:	4610      	mov	r0, r2
 80046d0:	f7fe fb44 	bl	8002d5c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80046d4:	4b0a      	ldr	r3, [pc, #40]	; (8004700 <prvAddCurrentTaskToDelayedList+0xa4>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d202      	bcs.n	80046e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80046de:	4a08      	ldr	r2, [pc, #32]	; (8004700 <prvAddCurrentTaskToDelayedList+0xa4>)
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	6013      	str	r3, [r2, #0]
}
 80046e4:	bf00      	nop
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	20000c54 	.word	0x20000c54
 80046f0:	2000077c 	.word	0x2000077c
 80046f4:	20000c3c 	.word	0x20000c3c
 80046f8:	20000c0c 	.word	0x20000c0c
 80046fc:	20000c08 	.word	0x20000c08
 8004700:	20000c70 	.word	0x20000c70

08004704 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b08a      	sub	sp, #40	; 0x28
 8004708:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800470a:	2300      	movs	r3, #0
 800470c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800470e:	f000 fac3 	bl	8004c98 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004712:	4b1c      	ldr	r3, [pc, #112]	; (8004784 <xTimerCreateTimerTask+0x80>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d021      	beq.n	800475e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800471a:	2300      	movs	r3, #0
 800471c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800471e:	2300      	movs	r3, #0
 8004720:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004722:	1d3a      	adds	r2, r7, #4
 8004724:	f107 0108 	add.w	r1, r7, #8
 8004728:	f107 030c 	add.w	r3, r7, #12
 800472c:	4618      	mov	r0, r3
 800472e:	f7fe faad 	bl	8002c8c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004732:	6879      	ldr	r1, [r7, #4]
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	9202      	str	r2, [sp, #8]
 800473a:	9301      	str	r3, [sp, #4]
 800473c:	2302      	movs	r3, #2
 800473e:	9300      	str	r3, [sp, #0]
 8004740:	2300      	movs	r3, #0
 8004742:	460a      	mov	r2, r1
 8004744:	4910      	ldr	r1, [pc, #64]	; (8004788 <xTimerCreateTimerTask+0x84>)
 8004746:	4811      	ldr	r0, [pc, #68]	; (800478c <xTimerCreateTimerTask+0x88>)
 8004748:	f7ff f8f8 	bl	800393c <xTaskCreateStatic>
 800474c:	4602      	mov	r2, r0
 800474e:	4b10      	ldr	r3, [pc, #64]	; (8004790 <xTimerCreateTimerTask+0x8c>)
 8004750:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004752:	4b0f      	ldr	r3, [pc, #60]	; (8004790 <xTimerCreateTimerTask+0x8c>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800475a:	2301      	movs	r3, #1
 800475c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d109      	bne.n	8004778 <xTimerCreateTimerTask+0x74>
 8004764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004768:	f383 8811 	msr	BASEPRI, r3
 800476c:	f3bf 8f6f 	isb	sy
 8004770:	f3bf 8f4f 	dsb	sy
 8004774:	613b      	str	r3, [r7, #16]
 8004776:	e7fe      	b.n	8004776 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004778:	697b      	ldr	r3, [r7, #20]
}
 800477a:	4618      	mov	r0, r3
 800477c:	3718      	adds	r7, #24
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	20000cac 	.word	0x20000cac
 8004788:	08005ee4 	.word	0x08005ee4
 800478c:	080048ad 	.word	0x080048ad
 8004790:	20000cb0 	.word	0x20000cb0

08004794 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b08a      	sub	sp, #40	; 0x28
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
 80047a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80047a2:	2300      	movs	r3, #0
 80047a4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d109      	bne.n	80047c0 <xTimerGenericCommand+0x2c>
 80047ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b0:	f383 8811 	msr	BASEPRI, r3
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	623b      	str	r3, [r7, #32]
 80047be:	e7fe      	b.n	80047be <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80047c0:	4b19      	ldr	r3, [pc, #100]	; (8004828 <xTimerGenericCommand+0x94>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d02a      	beq.n	800481e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	2b05      	cmp	r3, #5
 80047d8:	dc18      	bgt.n	800480c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80047da:	f7ff feb5 	bl	8004548 <xTaskGetSchedulerState>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d109      	bne.n	80047f8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80047e4:	4b10      	ldr	r3, [pc, #64]	; (8004828 <xTimerGenericCommand+0x94>)
 80047e6:	6818      	ldr	r0, [r3, #0]
 80047e8:	f107 0110 	add.w	r1, r7, #16
 80047ec:	2300      	movs	r3, #0
 80047ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047f0:	f7fe fc50 	bl	8003094 <xQueueGenericSend>
 80047f4:	6278      	str	r0, [r7, #36]	; 0x24
 80047f6:	e012      	b.n	800481e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80047f8:	4b0b      	ldr	r3, [pc, #44]	; (8004828 <xTimerGenericCommand+0x94>)
 80047fa:	6818      	ldr	r0, [r3, #0]
 80047fc:	f107 0110 	add.w	r1, r7, #16
 8004800:	2300      	movs	r3, #0
 8004802:	2200      	movs	r2, #0
 8004804:	f7fe fc46 	bl	8003094 <xQueueGenericSend>
 8004808:	6278      	str	r0, [r7, #36]	; 0x24
 800480a:	e008      	b.n	800481e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800480c:	4b06      	ldr	r3, [pc, #24]	; (8004828 <xTimerGenericCommand+0x94>)
 800480e:	6818      	ldr	r0, [r3, #0]
 8004810:	f107 0110 	add.w	r1, r7, #16
 8004814:	2300      	movs	r3, #0
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	f7fe fd36 	bl	8003288 <xQueueGenericSendFromISR>
 800481c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004820:	4618      	mov	r0, r3
 8004822:	3728      	adds	r7, #40	; 0x28
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	20000cac 	.word	0x20000cac

0800482c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b088      	sub	sp, #32
 8004830:	af02      	add	r7, sp, #8
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004836:	4b1c      	ldr	r3, [pc, #112]	; (80048a8 <prvProcessExpiredTimer+0x7c>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	3304      	adds	r3, #4
 8004844:	4618      	mov	r0, r3
 8004846:	f7fe fac1 	bl	8002dcc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d121      	bne.n	8004896 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	699a      	ldr	r2, [r3, #24]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	18d1      	adds	r1, r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	6978      	ldr	r0, [r7, #20]
 8004860:	f000 f8c8 	bl	80049f4 <prvInsertTimerInActiveList>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d015      	beq.n	8004896 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800486a:	2300      	movs	r3, #0
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	2300      	movs	r3, #0
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	2100      	movs	r1, #0
 8004874:	6978      	ldr	r0, [r7, #20]
 8004876:	f7ff ff8d 	bl	8004794 <xTimerGenericCommand>
 800487a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d109      	bne.n	8004896 <prvProcessExpiredTimer+0x6a>
 8004882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004886:	f383 8811 	msr	BASEPRI, r3
 800488a:	f3bf 8f6f 	isb	sy
 800488e:	f3bf 8f4f 	dsb	sy
 8004892:	60fb      	str	r3, [r7, #12]
 8004894:	e7fe      	b.n	8004894 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489a:	6978      	ldr	r0, [r7, #20]
 800489c:	4798      	blx	r3
}
 800489e:	bf00      	nop
 80048a0:	3718      	adds	r7, #24
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	20000ca4 	.word	0x20000ca4

080048ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80048b4:	f107 0308 	add.w	r3, r7, #8
 80048b8:	4618      	mov	r0, r3
 80048ba:	f000 f857 	bl	800496c <prvGetNextExpireTime>
 80048be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	4619      	mov	r1, r3
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f000 f803 	bl	80048d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80048ca:	f000 f8d5 	bl	8004a78 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80048ce:	e7f1      	b.n	80048b4 <prvTimerTask+0x8>

080048d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80048da:	f7ff fa5b 	bl	8003d94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80048de:	f107 0308 	add.w	r3, r7, #8
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 f866 	bl	80049b4 <prvSampleTimeNow>
 80048e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d130      	bne.n	8004952 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10a      	bne.n	800490c <prvProcessTimerOrBlockTask+0x3c>
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d806      	bhi.n	800490c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80048fe:	f7ff fa57 	bl	8003db0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004902:	68f9      	ldr	r1, [r7, #12]
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f7ff ff91 	bl	800482c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800490a:	e024      	b.n	8004956 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d008      	beq.n	8004924 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004912:	4b13      	ldr	r3, [pc, #76]	; (8004960 <prvProcessTimerOrBlockTask+0x90>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	bf0c      	ite	eq
 800491c:	2301      	moveq	r3, #1
 800491e:	2300      	movne	r3, #0
 8004920:	b2db      	uxtb	r3, r3
 8004922:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004924:	4b0f      	ldr	r3, [pc, #60]	; (8004964 <prvProcessTimerOrBlockTask+0x94>)
 8004926:	6818      	ldr	r0, [r3, #0]
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	4619      	mov	r1, r3
 8004932:	f7fe ffcf 	bl	80038d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004936:	f7ff fa3b 	bl	8003db0 <xTaskResumeAll>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10a      	bne.n	8004956 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004940:	4b09      	ldr	r3, [pc, #36]	; (8004968 <prvProcessTimerOrBlockTask+0x98>)
 8004942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004946:	601a      	str	r2, [r3, #0]
 8004948:	f3bf 8f4f 	dsb	sy
 800494c:	f3bf 8f6f 	isb	sy
}
 8004950:	e001      	b.n	8004956 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004952:	f7ff fa2d 	bl	8003db0 <xTaskResumeAll>
}
 8004956:	bf00      	nop
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	20000ca8 	.word	0x20000ca8
 8004964:	20000cac 	.word	0x20000cac
 8004968:	e000ed04 	.word	0xe000ed04

0800496c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004974:	4b0e      	ldr	r3, [pc, #56]	; (80049b0 <prvGetNextExpireTime+0x44>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	bf0c      	ite	eq
 800497e:	2301      	moveq	r3, #1
 8004980:	2300      	movne	r3, #0
 8004982:	b2db      	uxtb	r3, r3
 8004984:	461a      	mov	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d105      	bne.n	800499e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004992:	4b07      	ldr	r3, [pc, #28]	; (80049b0 <prvGetNextExpireTime+0x44>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	60fb      	str	r3, [r7, #12]
 800499c:	e001      	b.n	80049a2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800499e:	2300      	movs	r3, #0
 80049a0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80049a2:	68fb      	ldr	r3, [r7, #12]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3714      	adds	r7, #20
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bc80      	pop	{r7}
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	20000ca4 	.word	0x20000ca4

080049b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80049bc:	f7ff fa94 	bl	8003ee8 <xTaskGetTickCount>
 80049c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80049c2:	4b0b      	ldr	r3, [pc, #44]	; (80049f0 <prvSampleTimeNow+0x3c>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d205      	bcs.n	80049d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80049cc:	f000 f904 	bl	8004bd8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	601a      	str	r2, [r3, #0]
 80049d6:	e002      	b.n	80049de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80049de:	4a04      	ldr	r2, [pc, #16]	; (80049f0 <prvSampleTimeNow+0x3c>)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80049e4:	68fb      	ldr	r3, [r7, #12]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	20000cb4 	.word	0x20000cb4

080049f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b086      	sub	sp, #24
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
 8004a00:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004a02:	2300      	movs	r3, #0
 8004a04:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	68ba      	ldr	r2, [r7, #8]
 8004a0a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d812      	bhi.n	8004a40 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	1ad2      	subs	r2, r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d302      	bcc.n	8004a2e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	617b      	str	r3, [r7, #20]
 8004a2c:	e01b      	b.n	8004a66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004a2e:	4b10      	ldr	r3, [pc, #64]	; (8004a70 <prvInsertTimerInActiveList+0x7c>)
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	3304      	adds	r3, #4
 8004a36:	4619      	mov	r1, r3
 8004a38:	4610      	mov	r0, r2
 8004a3a:	f7fe f98f 	bl	8002d5c <vListInsert>
 8004a3e:	e012      	b.n	8004a66 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d206      	bcs.n	8004a56 <prvInsertTimerInActiveList+0x62>
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d302      	bcc.n	8004a56 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004a50:	2301      	movs	r3, #1
 8004a52:	617b      	str	r3, [r7, #20]
 8004a54:	e007      	b.n	8004a66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a56:	4b07      	ldr	r3, [pc, #28]	; (8004a74 <prvInsertTimerInActiveList+0x80>)
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	4619      	mov	r1, r3
 8004a60:	4610      	mov	r0, r2
 8004a62:	f7fe f97b 	bl	8002d5c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004a66:	697b      	ldr	r3, [r7, #20]
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3718      	adds	r7, #24
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	20000ca8 	.word	0x20000ca8
 8004a74:	20000ca4 	.word	0x20000ca4

08004a78 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b08e      	sub	sp, #56	; 0x38
 8004a7c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a7e:	e099      	b.n	8004bb4 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	da17      	bge.n	8004ab6 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004a86:	1d3b      	adds	r3, r7, #4
 8004a88:	3304      	adds	r3, #4
 8004a8a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d109      	bne.n	8004aa6 <prvProcessReceivedCommands+0x2e>
 8004a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a96:	f383 8811 	msr	BASEPRI, r3
 8004a9a:	f3bf 8f6f 	isb	sy
 8004a9e:	f3bf 8f4f 	dsb	sy
 8004aa2:	61fb      	str	r3, [r7, #28]
 8004aa4:	e7fe      	b.n	8004aa4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004aac:	6850      	ldr	r0, [r2, #4]
 8004aae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ab0:	6892      	ldr	r2, [r2, #8]
 8004ab2:	4611      	mov	r1, r2
 8004ab4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	db7a      	blt.n	8004bb2 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d004      	beq.n	8004ad2 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aca:	3304      	adds	r3, #4
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7fe f97d 	bl	8002dcc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ad2:	463b      	mov	r3, r7
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff ff6d 	bl	80049b4 <prvSampleTimeNow>
 8004ada:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b09      	cmp	r3, #9
 8004ae0:	d868      	bhi.n	8004bb4 <prvProcessReceivedCommands+0x13c>
 8004ae2:	a201      	add	r2, pc, #4	; (adr r2, 8004ae8 <prvProcessReceivedCommands+0x70>)
 8004ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae8:	08004b11 	.word	0x08004b11
 8004aec:	08004b11 	.word	0x08004b11
 8004af0:	08004b11 	.word	0x08004b11
 8004af4:	08004bb5 	.word	0x08004bb5
 8004af8:	08004b6b 	.word	0x08004b6b
 8004afc:	08004ba1 	.word	0x08004ba1
 8004b00:	08004b11 	.word	0x08004b11
 8004b04:	08004b11 	.word	0x08004b11
 8004b08:	08004bb5 	.word	0x08004bb5
 8004b0c:	08004b6b 	.word	0x08004b6b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	18d1      	adds	r1, r2, r3
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b1e:	f7ff ff69 	bl	80049f4 <prvInsertTimerInActiveList>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d045      	beq.n	8004bb4 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b2e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d13d      	bne.n	8004bb4 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	441a      	add	r2, r3
 8004b40:	2300      	movs	r3, #0
 8004b42:	9300      	str	r3, [sp, #0]
 8004b44:	2300      	movs	r3, #0
 8004b46:	2100      	movs	r1, #0
 8004b48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b4a:	f7ff fe23 	bl	8004794 <xTimerGenericCommand>
 8004b4e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004b50:	6a3b      	ldr	r3, [r7, #32]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d12e      	bne.n	8004bb4 <prvProcessReceivedCommands+0x13c>
 8004b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5a:	f383 8811 	msr	BASEPRI, r3
 8004b5e:	f3bf 8f6f 	isb	sy
 8004b62:	f3bf 8f4f 	dsb	sy
 8004b66:	61bb      	str	r3, [r7, #24]
 8004b68:	e7fe      	b.n	8004b68 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d109      	bne.n	8004b8c <prvProcessReceivedCommands+0x114>
 8004b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7c:	f383 8811 	msr	BASEPRI, r3
 8004b80:	f3bf 8f6f 	isb	sy
 8004b84:	f3bf 8f4f 	dsb	sy
 8004b88:	617b      	str	r3, [r7, #20]
 8004b8a:	e7fe      	b.n	8004b8a <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8e:	699a      	ldr	r2, [r3, #24]
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b92:	18d1      	adds	r1, r2, r3
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b9a:	f7ff ff2b 	bl	80049f4 <prvInsertTimerInActiveList>
					break;
 8004b9e:	e009      	b.n	8004bb4 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d104      	bne.n	8004bb4 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8004baa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bac:	f000 fb54 	bl	8005258 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004bb0:	e000      	b.n	8004bb4 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004bb2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004bb4:	4b07      	ldr	r3, [pc, #28]	; (8004bd4 <prvProcessReceivedCommands+0x15c>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	1d39      	adds	r1, r7, #4
 8004bba:	2200      	movs	r2, #0
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7fe fbf7 	bl	80033b0 <xQueueReceive>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f47f af5b 	bne.w	8004a80 <prvProcessReceivedCommands+0x8>
	}
}
 8004bca:	bf00      	nop
 8004bcc:	3730      	adds	r7, #48	; 0x30
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	20000cac 	.word	0x20000cac

08004bd8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b088      	sub	sp, #32
 8004bdc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004bde:	e044      	b.n	8004c6a <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004be0:	4b2b      	ldr	r3, [pc, #172]	; (8004c90 <prvSwitchTimerLists+0xb8>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004bea:	4b29      	ldr	r3, [pc, #164]	; (8004c90 <prvSwitchTimerLists+0xb8>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	3304      	adds	r3, #4
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7fe f8e7 	bl	8002dcc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d12d      	bne.n	8004c6a <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	4413      	add	r3, r2
 8004c16:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d90e      	bls.n	8004c3e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c2c:	4b18      	ldr	r3, [pc, #96]	; (8004c90 <prvSwitchTimerLists+0xb8>)
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	3304      	adds	r3, #4
 8004c34:	4619      	mov	r1, r3
 8004c36:	4610      	mov	r0, r2
 8004c38:	f7fe f890 	bl	8002d5c <vListInsert>
 8004c3c:	e015      	b.n	8004c6a <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c3e:	2300      	movs	r3, #0
 8004c40:	9300      	str	r3, [sp, #0]
 8004c42:	2300      	movs	r3, #0
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	2100      	movs	r1, #0
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f7ff fda3 	bl	8004794 <xTimerGenericCommand>
 8004c4e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d109      	bne.n	8004c6a <prvSwitchTimerLists+0x92>
 8004c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5a:	f383 8811 	msr	BASEPRI, r3
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	f3bf 8f4f 	dsb	sy
 8004c66:	603b      	str	r3, [r7, #0]
 8004c68:	e7fe      	b.n	8004c68 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c6a:	4b09      	ldr	r3, [pc, #36]	; (8004c90 <prvSwitchTimerLists+0xb8>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1b5      	bne.n	8004be0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004c74:	4b06      	ldr	r3, [pc, #24]	; (8004c90 <prvSwitchTimerLists+0xb8>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004c7a:	4b06      	ldr	r3, [pc, #24]	; (8004c94 <prvSwitchTimerLists+0xbc>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a04      	ldr	r2, [pc, #16]	; (8004c90 <prvSwitchTimerLists+0xb8>)
 8004c80:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004c82:	4a04      	ldr	r2, [pc, #16]	; (8004c94 <prvSwitchTimerLists+0xbc>)
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	6013      	str	r3, [r2, #0]
}
 8004c88:	bf00      	nop
 8004c8a:	3718      	adds	r7, #24
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	20000ca4 	.word	0x20000ca4
 8004c94:	20000ca8 	.word	0x20000ca8

08004c98 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004c9e:	f000 f923 	bl	8004ee8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004ca2:	4b15      	ldr	r3, [pc, #84]	; (8004cf8 <prvCheckForValidListAndQueue+0x60>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d120      	bne.n	8004cec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004caa:	4814      	ldr	r0, [pc, #80]	; (8004cfc <prvCheckForValidListAndQueue+0x64>)
 8004cac:	f7fe f808 	bl	8002cc0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004cb0:	4813      	ldr	r0, [pc, #76]	; (8004d00 <prvCheckForValidListAndQueue+0x68>)
 8004cb2:	f7fe f805 	bl	8002cc0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004cb6:	4b13      	ldr	r3, [pc, #76]	; (8004d04 <prvCheckForValidListAndQueue+0x6c>)
 8004cb8:	4a10      	ldr	r2, [pc, #64]	; (8004cfc <prvCheckForValidListAndQueue+0x64>)
 8004cba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004cbc:	4b12      	ldr	r3, [pc, #72]	; (8004d08 <prvCheckForValidListAndQueue+0x70>)
 8004cbe:	4a10      	ldr	r2, [pc, #64]	; (8004d00 <prvCheckForValidListAndQueue+0x68>)
 8004cc0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	4b11      	ldr	r3, [pc, #68]	; (8004d0c <prvCheckForValidListAndQueue+0x74>)
 8004cc8:	4a11      	ldr	r2, [pc, #68]	; (8004d10 <prvCheckForValidListAndQueue+0x78>)
 8004cca:	2110      	movs	r1, #16
 8004ccc:	200a      	movs	r0, #10
 8004cce:	f7fe f90f 	bl	8002ef0 <xQueueGenericCreateStatic>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	4b08      	ldr	r3, [pc, #32]	; (8004cf8 <prvCheckForValidListAndQueue+0x60>)
 8004cd6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004cd8:	4b07      	ldr	r3, [pc, #28]	; (8004cf8 <prvCheckForValidListAndQueue+0x60>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d005      	beq.n	8004cec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004ce0:	4b05      	ldr	r3, [pc, #20]	; (8004cf8 <prvCheckForValidListAndQueue+0x60>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	490b      	ldr	r1, [pc, #44]	; (8004d14 <prvCheckForValidListAndQueue+0x7c>)
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7fe fdcc 	bl	8003884 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004cec:	f000 f92a 	bl	8004f44 <vPortExitCritical>
}
 8004cf0:	bf00      	nop
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	20000cac 	.word	0x20000cac
 8004cfc:	20000c7c 	.word	0x20000c7c
 8004d00:	20000c90 	.word	0x20000c90
 8004d04:	20000ca4 	.word	0x20000ca4
 8004d08:	20000ca8 	.word	0x20000ca8
 8004d0c:	20000d58 	.word	0x20000d58
 8004d10:	20000cb8 	.word	0x20000cb8
 8004d14:	08005eec 	.word	0x08005eec

08004d18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	3b04      	subs	r3, #4
 8004d28:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	3b04      	subs	r3, #4
 8004d36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	f023 0201 	bic.w	r2, r3, #1
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	3b04      	subs	r3, #4
 8004d46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d48:	4a08      	ldr	r2, [pc, #32]	; (8004d6c <pxPortInitialiseStack+0x54>)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	3b14      	subs	r3, #20
 8004d52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	3b20      	subs	r3, #32
 8004d5e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d60:	68fb      	ldr	r3, [r7, #12]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bc80      	pop	{r7}
 8004d6a:	4770      	bx	lr
 8004d6c:	08004d71 	.word	0x08004d71

08004d70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004d76:	2300      	movs	r3, #0
 8004d78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d7a:	4b10      	ldr	r3, [pc, #64]	; (8004dbc <prvTaskExitError+0x4c>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d82:	d009      	beq.n	8004d98 <prvTaskExitError+0x28>
 8004d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d88:	f383 8811 	msr	BASEPRI, r3
 8004d8c:	f3bf 8f6f 	isb	sy
 8004d90:	f3bf 8f4f 	dsb	sy
 8004d94:	60fb      	str	r3, [r7, #12]
 8004d96:	e7fe      	b.n	8004d96 <prvTaskExitError+0x26>
 8004d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9c:	f383 8811 	msr	BASEPRI, r3
 8004da0:	f3bf 8f6f 	isb	sy
 8004da4:	f3bf 8f4f 	dsb	sy
 8004da8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004daa:	bf00      	nop
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d0fc      	beq.n	8004dac <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004db2:	bf00      	nop
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bc80      	pop	{r7}
 8004dba:	4770      	bx	lr
 8004dbc:	20000034 	.word	0x20000034

08004dc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004dc0:	4b07      	ldr	r3, [pc, #28]	; (8004de0 <pxCurrentTCBConst2>)
 8004dc2:	6819      	ldr	r1, [r3, #0]
 8004dc4:	6808      	ldr	r0, [r1, #0]
 8004dc6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004dca:	f380 8809 	msr	PSP, r0
 8004dce:	f3bf 8f6f 	isb	sy
 8004dd2:	f04f 0000 	mov.w	r0, #0
 8004dd6:	f380 8811 	msr	BASEPRI, r0
 8004dda:	f04e 0e0d 	orr.w	lr, lr, #13
 8004dde:	4770      	bx	lr

08004de0 <pxCurrentTCBConst2>:
 8004de0:	2000077c 	.word	0x2000077c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004de4:	bf00      	nop
 8004de6:	bf00      	nop

08004de8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004de8:	4806      	ldr	r0, [pc, #24]	; (8004e04 <prvPortStartFirstTask+0x1c>)
 8004dea:	6800      	ldr	r0, [r0, #0]
 8004dec:	6800      	ldr	r0, [r0, #0]
 8004dee:	f380 8808 	msr	MSP, r0
 8004df2:	b662      	cpsie	i
 8004df4:	b661      	cpsie	f
 8004df6:	f3bf 8f4f 	dsb	sy
 8004dfa:	f3bf 8f6f 	isb	sy
 8004dfe:	df00      	svc	0
 8004e00:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004e02:	bf00      	nop
 8004e04:	e000ed08 	.word	0xe000ed08

08004e08 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e0e:	4b31      	ldr	r3, [pc, #196]	; (8004ed4 <xPortStartScheduler+0xcc>)
 8004e10:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	22ff      	movs	r2, #255	; 0xff
 8004e1e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e28:	78fb      	ldrb	r3, [r7, #3]
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e30:	b2da      	uxtb	r2, r3
 8004e32:	4b29      	ldr	r3, [pc, #164]	; (8004ed8 <xPortStartScheduler+0xd0>)
 8004e34:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e36:	4b29      	ldr	r3, [pc, #164]	; (8004edc <xPortStartScheduler+0xd4>)
 8004e38:	2207      	movs	r2, #7
 8004e3a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e3c:	e009      	b.n	8004e52 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004e3e:	4b27      	ldr	r3, [pc, #156]	; (8004edc <xPortStartScheduler+0xd4>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	3b01      	subs	r3, #1
 8004e44:	4a25      	ldr	r2, [pc, #148]	; (8004edc <xPortStartScheduler+0xd4>)
 8004e46:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e48:	78fb      	ldrb	r3, [r7, #3]
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e52:	78fb      	ldrb	r3, [r7, #3]
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e5a:	2b80      	cmp	r3, #128	; 0x80
 8004e5c:	d0ef      	beq.n	8004e3e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e5e:	4b1f      	ldr	r3, [pc, #124]	; (8004edc <xPortStartScheduler+0xd4>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f1c3 0307 	rsb	r3, r3, #7
 8004e66:	2b04      	cmp	r3, #4
 8004e68:	d009      	beq.n	8004e7e <xPortStartScheduler+0x76>
 8004e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6e:	f383 8811 	msr	BASEPRI, r3
 8004e72:	f3bf 8f6f 	isb	sy
 8004e76:	f3bf 8f4f 	dsb	sy
 8004e7a:	60bb      	str	r3, [r7, #8]
 8004e7c:	e7fe      	b.n	8004e7c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e7e:	4b17      	ldr	r3, [pc, #92]	; (8004edc <xPortStartScheduler+0xd4>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	021b      	lsls	r3, r3, #8
 8004e84:	4a15      	ldr	r2, [pc, #84]	; (8004edc <xPortStartScheduler+0xd4>)
 8004e86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e88:	4b14      	ldr	r3, [pc, #80]	; (8004edc <xPortStartScheduler+0xd4>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e90:	4a12      	ldr	r2, [pc, #72]	; (8004edc <xPortStartScheduler+0xd4>)
 8004e92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	b2da      	uxtb	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e9c:	4b10      	ldr	r3, [pc, #64]	; (8004ee0 <xPortStartScheduler+0xd8>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a0f      	ldr	r2, [pc, #60]	; (8004ee0 <xPortStartScheduler+0xd8>)
 8004ea2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ea6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004ea8:	4b0d      	ldr	r3, [pc, #52]	; (8004ee0 <xPortStartScheduler+0xd8>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a0c      	ldr	r2, [pc, #48]	; (8004ee0 <xPortStartScheduler+0xd8>)
 8004eae:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004eb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004eb4:	f000 f8b0 	bl	8005018 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004eb8:	4b0a      	ldr	r3, [pc, #40]	; (8004ee4 <xPortStartScheduler+0xdc>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ebe:	f7ff ff93 	bl	8004de8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004ec2:	f7ff f8dd 	bl	8004080 <vTaskSwitchContext>
	prvTaskExitError();
 8004ec6:	f7ff ff53 	bl	8004d70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	e000e400 	.word	0xe000e400
 8004ed8:	20000da8 	.word	0x20000da8
 8004edc:	20000dac 	.word	0x20000dac
 8004ee0:	e000ed20 	.word	0xe000ed20
 8004ee4:	20000034 	.word	0x20000034

08004ee8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef2:	f383 8811 	msr	BASEPRI, r3
 8004ef6:	f3bf 8f6f 	isb	sy
 8004efa:	f3bf 8f4f 	dsb	sy
 8004efe:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004f00:	4b0e      	ldr	r3, [pc, #56]	; (8004f3c <vPortEnterCritical+0x54>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	3301      	adds	r3, #1
 8004f06:	4a0d      	ldr	r2, [pc, #52]	; (8004f3c <vPortEnterCritical+0x54>)
 8004f08:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004f0a:	4b0c      	ldr	r3, [pc, #48]	; (8004f3c <vPortEnterCritical+0x54>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d10e      	bne.n	8004f30 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f12:	4b0b      	ldr	r3, [pc, #44]	; (8004f40 <vPortEnterCritical+0x58>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d009      	beq.n	8004f30 <vPortEnterCritical+0x48>
 8004f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f20:	f383 8811 	msr	BASEPRI, r3
 8004f24:	f3bf 8f6f 	isb	sy
 8004f28:	f3bf 8f4f 	dsb	sy
 8004f2c:	603b      	str	r3, [r7, #0]
 8004f2e:	e7fe      	b.n	8004f2e <vPortEnterCritical+0x46>
	}
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bc80      	pop	{r7}
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	20000034 	.word	0x20000034
 8004f40:	e000ed04 	.word	0xe000ed04

08004f44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004f4a:	4b10      	ldr	r3, [pc, #64]	; (8004f8c <vPortExitCritical+0x48>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d109      	bne.n	8004f66 <vPortExitCritical+0x22>
 8004f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f56:	f383 8811 	msr	BASEPRI, r3
 8004f5a:	f3bf 8f6f 	isb	sy
 8004f5e:	f3bf 8f4f 	dsb	sy
 8004f62:	607b      	str	r3, [r7, #4]
 8004f64:	e7fe      	b.n	8004f64 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004f66:	4b09      	ldr	r3, [pc, #36]	; (8004f8c <vPortExitCritical+0x48>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	4a07      	ldr	r2, [pc, #28]	; (8004f8c <vPortExitCritical+0x48>)
 8004f6e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f70:	4b06      	ldr	r3, [pc, #24]	; (8004f8c <vPortExitCritical+0x48>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d104      	bne.n	8004f82 <vPortExitCritical+0x3e>
 8004f78:	2300      	movs	r3, #0
 8004f7a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004f82:	bf00      	nop
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bc80      	pop	{r7}
 8004f8a:	4770      	bx	lr
 8004f8c:	20000034 	.word	0x20000034

08004f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f90:	f3ef 8009 	mrs	r0, PSP
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	4b0d      	ldr	r3, [pc, #52]	; (8004fd0 <pxCurrentTCBConst>)
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004fa0:	6010      	str	r0, [r2, #0]
 8004fa2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004fa6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004faa:	f380 8811 	msr	BASEPRI, r0
 8004fae:	f7ff f867 	bl	8004080 <vTaskSwitchContext>
 8004fb2:	f04f 0000 	mov.w	r0, #0
 8004fb6:	f380 8811 	msr	BASEPRI, r0
 8004fba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004fbe:	6819      	ldr	r1, [r3, #0]
 8004fc0:	6808      	ldr	r0, [r1, #0]
 8004fc2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004fc6:	f380 8809 	msr	PSP, r0
 8004fca:	f3bf 8f6f 	isb	sy
 8004fce:	4770      	bx	lr

08004fd0 <pxCurrentTCBConst>:
 8004fd0:	2000077c 	.word	0x2000077c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004fd4:	bf00      	nop
 8004fd6:	bf00      	nop

08004fd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
	__asm volatile
 8004fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe2:	f383 8811 	msr	BASEPRI, r3
 8004fe6:	f3bf 8f6f 	isb	sy
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ff0:	f7fe ff88 	bl	8003f04 <xTaskIncrementTick>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d003      	beq.n	8005002 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004ffa:	4b06      	ldr	r3, [pc, #24]	; (8005014 <SysTick_Handler+0x3c>)
 8004ffc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	2300      	movs	r3, #0
 8005004:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800500c:	bf00      	nop
 800500e:	3708      	adds	r7, #8
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	e000ed04 	.word	0xe000ed04

08005018 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005018:	b480      	push	{r7}
 800501a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800501c:	4b0a      	ldr	r3, [pc, #40]	; (8005048 <vPortSetupTimerInterrupt+0x30>)
 800501e:	2200      	movs	r2, #0
 8005020:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005022:	4b0a      	ldr	r3, [pc, #40]	; (800504c <vPortSetupTimerInterrupt+0x34>)
 8005024:	2200      	movs	r2, #0
 8005026:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005028:	4b09      	ldr	r3, [pc, #36]	; (8005050 <vPortSetupTimerInterrupt+0x38>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a09      	ldr	r2, [pc, #36]	; (8005054 <vPortSetupTimerInterrupt+0x3c>)
 800502e:	fba2 2303 	umull	r2, r3, r2, r3
 8005032:	099b      	lsrs	r3, r3, #6
 8005034:	4a08      	ldr	r2, [pc, #32]	; (8005058 <vPortSetupTimerInterrupt+0x40>)
 8005036:	3b01      	subs	r3, #1
 8005038:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800503a:	4b03      	ldr	r3, [pc, #12]	; (8005048 <vPortSetupTimerInterrupt+0x30>)
 800503c:	2207      	movs	r2, #7
 800503e:	601a      	str	r2, [r3, #0]
}
 8005040:	bf00      	nop
 8005042:	46bd      	mov	sp, r7
 8005044:	bc80      	pop	{r7}
 8005046:	4770      	bx	lr
 8005048:	e000e010 	.word	0xe000e010
 800504c:	e000e018 	.word	0xe000e018
 8005050:	20000028 	.word	0x20000028
 8005054:	10624dd3 	.word	0x10624dd3
 8005058:	e000e014 	.word	0xe000e014

0800505c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005062:	f3ef 8305 	mrs	r3, IPSR
 8005066:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2b0f      	cmp	r3, #15
 800506c:	d913      	bls.n	8005096 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800506e:	4a15      	ldr	r2, [pc, #84]	; (80050c4 <vPortValidateInterruptPriority+0x68>)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	4413      	add	r3, r2
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005078:	4b13      	ldr	r3, [pc, #76]	; (80050c8 <vPortValidateInterruptPriority+0x6c>)
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	7afa      	ldrb	r2, [r7, #11]
 800507e:	429a      	cmp	r2, r3
 8005080:	d209      	bcs.n	8005096 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005086:	f383 8811 	msr	BASEPRI, r3
 800508a:	f3bf 8f6f 	isb	sy
 800508e:	f3bf 8f4f 	dsb	sy
 8005092:	607b      	str	r3, [r7, #4]
 8005094:	e7fe      	b.n	8005094 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005096:	4b0d      	ldr	r3, [pc, #52]	; (80050cc <vPortValidateInterruptPriority+0x70>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800509e:	4b0c      	ldr	r3, [pc, #48]	; (80050d0 <vPortValidateInterruptPriority+0x74>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d909      	bls.n	80050ba <vPortValidateInterruptPriority+0x5e>
 80050a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050aa:	f383 8811 	msr	BASEPRI, r3
 80050ae:	f3bf 8f6f 	isb	sy
 80050b2:	f3bf 8f4f 	dsb	sy
 80050b6:	603b      	str	r3, [r7, #0]
 80050b8:	e7fe      	b.n	80050b8 <vPortValidateInterruptPriority+0x5c>
	}
 80050ba:	bf00      	nop
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	bc80      	pop	{r7}
 80050c2:	4770      	bx	lr
 80050c4:	e000e3f0 	.word	0xe000e3f0
 80050c8:	20000da8 	.word	0x20000da8
 80050cc:	e000ed0c 	.word	0xe000ed0c
 80050d0:	20000dac 	.word	0x20000dac

080050d4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b08a      	sub	sp, #40	; 0x28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80050dc:	2300      	movs	r3, #0
 80050de:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80050e0:	f7fe fe58 	bl	8003d94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80050e4:	4b57      	ldr	r3, [pc, #348]	; (8005244 <pvPortMalloc+0x170>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d101      	bne.n	80050f0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80050ec:	f000 f90c 	bl	8005308 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80050f0:	4b55      	ldr	r3, [pc, #340]	; (8005248 <pvPortMalloc+0x174>)
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4013      	ands	r3, r2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f040 808c 	bne.w	8005216 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d01c      	beq.n	800513e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005104:	2208      	movs	r2, #8
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4413      	add	r3, r2
 800510a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f003 0307 	and.w	r3, r3, #7
 8005112:	2b00      	cmp	r3, #0
 8005114:	d013      	beq.n	800513e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f023 0307 	bic.w	r3, r3, #7
 800511c:	3308      	adds	r3, #8
 800511e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f003 0307 	and.w	r3, r3, #7
 8005126:	2b00      	cmp	r3, #0
 8005128:	d009      	beq.n	800513e <pvPortMalloc+0x6a>
 800512a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512e:	f383 8811 	msr	BASEPRI, r3
 8005132:	f3bf 8f6f 	isb	sy
 8005136:	f3bf 8f4f 	dsb	sy
 800513a:	617b      	str	r3, [r7, #20]
 800513c:	e7fe      	b.n	800513c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d068      	beq.n	8005216 <pvPortMalloc+0x142>
 8005144:	4b41      	ldr	r3, [pc, #260]	; (800524c <pvPortMalloc+0x178>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	429a      	cmp	r2, r3
 800514c:	d863      	bhi.n	8005216 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800514e:	4b40      	ldr	r3, [pc, #256]	; (8005250 <pvPortMalloc+0x17c>)
 8005150:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005152:	4b3f      	ldr	r3, [pc, #252]	; (8005250 <pvPortMalloc+0x17c>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005158:	e004      	b.n	8005164 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	429a      	cmp	r2, r3
 800516c:	d903      	bls.n	8005176 <pvPortMalloc+0xa2>
 800516e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1f1      	bne.n	800515a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005176:	4b33      	ldr	r3, [pc, #204]	; (8005244 <pvPortMalloc+0x170>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800517c:	429a      	cmp	r2, r3
 800517e:	d04a      	beq.n	8005216 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005180:	6a3b      	ldr	r3, [r7, #32]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2208      	movs	r2, #8
 8005186:	4413      	add	r3, r2
 8005188:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	6a3b      	ldr	r3, [r7, #32]
 8005190:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	1ad2      	subs	r2, r2, r3
 800519a:	2308      	movs	r3, #8
 800519c:	005b      	lsls	r3, r3, #1
 800519e:	429a      	cmp	r2, r3
 80051a0:	d91e      	bls.n	80051e0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80051a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4413      	add	r3, r2
 80051a8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	f003 0307 	and.w	r3, r3, #7
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d009      	beq.n	80051c8 <pvPortMalloc+0xf4>
 80051b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b8:	f383 8811 	msr	BASEPRI, r3
 80051bc:	f3bf 8f6f 	isb	sy
 80051c0:	f3bf 8f4f 	dsb	sy
 80051c4:	613b      	str	r3, [r7, #16]
 80051c6:	e7fe      	b.n	80051c6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	1ad2      	subs	r2, r2, r3
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80051da:	69b8      	ldr	r0, [r7, #24]
 80051dc:	f000 f8f6 	bl	80053cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80051e0:	4b1a      	ldr	r3, [pc, #104]	; (800524c <pvPortMalloc+0x178>)
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	4a18      	ldr	r2, [pc, #96]	; (800524c <pvPortMalloc+0x178>)
 80051ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80051ee:	4b17      	ldr	r3, [pc, #92]	; (800524c <pvPortMalloc+0x178>)
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	4b18      	ldr	r3, [pc, #96]	; (8005254 <pvPortMalloc+0x180>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d203      	bcs.n	8005202 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80051fa:	4b14      	ldr	r3, [pc, #80]	; (800524c <pvPortMalloc+0x178>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a15      	ldr	r2, [pc, #84]	; (8005254 <pvPortMalloc+0x180>)
 8005200:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	4b10      	ldr	r3, [pc, #64]	; (8005248 <pvPortMalloc+0x174>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	431a      	orrs	r2, r3
 800520c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	2200      	movs	r2, #0
 8005214:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005216:	f7fe fdcb 	bl	8003db0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	f003 0307 	and.w	r3, r3, #7
 8005220:	2b00      	cmp	r3, #0
 8005222:	d009      	beq.n	8005238 <pvPortMalloc+0x164>
 8005224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005228:	f383 8811 	msr	BASEPRI, r3
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	60fb      	str	r3, [r7, #12]
 8005236:	e7fe      	b.n	8005236 <pvPortMalloc+0x162>
	return pvReturn;
 8005238:	69fb      	ldr	r3, [r7, #28]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3728      	adds	r7, #40	; 0x28
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	200019b8 	.word	0x200019b8
 8005248:	200019c4 	.word	0x200019c4
 800524c:	200019bc 	.word	0x200019bc
 8005250:	200019b0 	.word	0x200019b0
 8005254:	200019c0 	.word	0x200019c0

08005258 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d046      	beq.n	80052f8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800526a:	2308      	movs	r3, #8
 800526c:	425b      	negs	r3, r3
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	4413      	add	r3, r2
 8005272:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	685a      	ldr	r2, [r3, #4]
 800527c:	4b20      	ldr	r3, [pc, #128]	; (8005300 <vPortFree+0xa8>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4013      	ands	r3, r2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d109      	bne.n	800529a <vPortFree+0x42>
 8005286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528a:	f383 8811 	msr	BASEPRI, r3
 800528e:	f3bf 8f6f 	isb	sy
 8005292:	f3bf 8f4f 	dsb	sy
 8005296:	60fb      	str	r3, [r7, #12]
 8005298:	e7fe      	b.n	8005298 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d009      	beq.n	80052b6 <vPortFree+0x5e>
 80052a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a6:	f383 8811 	msr	BASEPRI, r3
 80052aa:	f3bf 8f6f 	isb	sy
 80052ae:	f3bf 8f4f 	dsb	sy
 80052b2:	60bb      	str	r3, [r7, #8]
 80052b4:	e7fe      	b.n	80052b4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	4b11      	ldr	r3, [pc, #68]	; (8005300 <vPortFree+0xa8>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4013      	ands	r3, r2
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d019      	beq.n	80052f8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d115      	bne.n	80052f8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	685a      	ldr	r2, [r3, #4]
 80052d0:	4b0b      	ldr	r3, [pc, #44]	; (8005300 <vPortFree+0xa8>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	43db      	mvns	r3, r3
 80052d6:	401a      	ands	r2, r3
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80052dc:	f7fe fd5a 	bl	8003d94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	685a      	ldr	r2, [r3, #4]
 80052e4:	4b07      	ldr	r3, [pc, #28]	; (8005304 <vPortFree+0xac>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4413      	add	r3, r2
 80052ea:	4a06      	ldr	r2, [pc, #24]	; (8005304 <vPortFree+0xac>)
 80052ec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80052ee:	6938      	ldr	r0, [r7, #16]
 80052f0:	f000 f86c 	bl	80053cc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80052f4:	f7fe fd5c 	bl	8003db0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80052f8:	bf00      	nop
 80052fa:	3718      	adds	r7, #24
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	200019c4 	.word	0x200019c4
 8005304:	200019bc 	.word	0x200019bc

08005308 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800530e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005312:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005314:	4b27      	ldr	r3, [pc, #156]	; (80053b4 <prvHeapInit+0xac>)
 8005316:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f003 0307 	and.w	r3, r3, #7
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00c      	beq.n	800533c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	3307      	adds	r3, #7
 8005326:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f023 0307 	bic.w	r3, r3, #7
 800532e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005330:	68ba      	ldr	r2, [r7, #8]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	4a1f      	ldr	r2, [pc, #124]	; (80053b4 <prvHeapInit+0xac>)
 8005338:	4413      	add	r3, r2
 800533a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005340:	4a1d      	ldr	r2, [pc, #116]	; (80053b8 <prvHeapInit+0xb0>)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005346:	4b1c      	ldr	r3, [pc, #112]	; (80053b8 <prvHeapInit+0xb0>)
 8005348:	2200      	movs	r2, #0
 800534a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	4413      	add	r3, r2
 8005352:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005354:	2208      	movs	r2, #8
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	1a9b      	subs	r3, r3, r2
 800535a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f023 0307 	bic.w	r3, r3, #7
 8005362:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	4a15      	ldr	r2, [pc, #84]	; (80053bc <prvHeapInit+0xb4>)
 8005368:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800536a:	4b14      	ldr	r3, [pc, #80]	; (80053bc <prvHeapInit+0xb4>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2200      	movs	r2, #0
 8005370:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005372:	4b12      	ldr	r3, [pc, #72]	; (80053bc <prvHeapInit+0xb4>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2200      	movs	r2, #0
 8005378:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	1ad2      	subs	r2, r2, r3
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005388:	4b0c      	ldr	r3, [pc, #48]	; (80053bc <prvHeapInit+0xb4>)
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	4a0a      	ldr	r2, [pc, #40]	; (80053c0 <prvHeapInit+0xb8>)
 8005396:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	4a09      	ldr	r2, [pc, #36]	; (80053c4 <prvHeapInit+0xbc>)
 800539e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80053a0:	4b09      	ldr	r3, [pc, #36]	; (80053c8 <prvHeapInit+0xc0>)
 80053a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80053a6:	601a      	str	r2, [r3, #0]
}
 80053a8:	bf00      	nop
 80053aa:	3714      	adds	r7, #20
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bc80      	pop	{r7}
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	20000db0 	.word	0x20000db0
 80053b8:	200019b0 	.word	0x200019b0
 80053bc:	200019b8 	.word	0x200019b8
 80053c0:	200019c0 	.word	0x200019c0
 80053c4:	200019bc 	.word	0x200019bc
 80053c8:	200019c4 	.word	0x200019c4

080053cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80053d4:	4b27      	ldr	r3, [pc, #156]	; (8005474 <prvInsertBlockIntoFreeList+0xa8>)
 80053d6:	60fb      	str	r3, [r7, #12]
 80053d8:	e002      	b.n	80053e0 <prvInsertBlockIntoFreeList+0x14>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	60fb      	str	r3, [r7, #12]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d8f7      	bhi.n	80053da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	4413      	add	r3, r2
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d108      	bne.n	800540e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	685a      	ldr	r2, [r3, #4]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	441a      	add	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	441a      	add	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	429a      	cmp	r2, r3
 8005420:	d118      	bne.n	8005454 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	4b14      	ldr	r3, [pc, #80]	; (8005478 <prvInsertBlockIntoFreeList+0xac>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	429a      	cmp	r2, r3
 800542c:	d00d      	beq.n	800544a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685a      	ldr	r2, [r3, #4]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	441a      	add	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	601a      	str	r2, [r3, #0]
 8005448:	e008      	b.n	800545c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800544a:	4b0b      	ldr	r3, [pc, #44]	; (8005478 <prvInsertBlockIntoFreeList+0xac>)
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	601a      	str	r2, [r3, #0]
 8005452:	e003      	b.n	800545c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	429a      	cmp	r2, r3
 8005462:	d002      	beq.n	800546a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800546a:	bf00      	nop
 800546c:	3714      	adds	r7, #20
 800546e:	46bd      	mov	sp, r7
 8005470:	bc80      	pop	{r7}
 8005472:	4770      	bx	lr
 8005474:	200019b0 	.word	0x200019b0
 8005478:	200019b8 	.word	0x200019b8

0800547c <__errno>:
 800547c:	4b01      	ldr	r3, [pc, #4]	; (8005484 <__errno+0x8>)
 800547e:	6818      	ldr	r0, [r3, #0]
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	20000038 	.word	0x20000038

08005488 <__libc_init_array>:
 8005488:	b570      	push	{r4, r5, r6, lr}
 800548a:	2500      	movs	r5, #0
 800548c:	4e0c      	ldr	r6, [pc, #48]	; (80054c0 <__libc_init_array+0x38>)
 800548e:	4c0d      	ldr	r4, [pc, #52]	; (80054c4 <__libc_init_array+0x3c>)
 8005490:	1ba4      	subs	r4, r4, r6
 8005492:	10a4      	asrs	r4, r4, #2
 8005494:	42a5      	cmp	r5, r4
 8005496:	d109      	bne.n	80054ac <__libc_init_array+0x24>
 8005498:	f000 fc36 	bl	8005d08 <_init>
 800549c:	2500      	movs	r5, #0
 800549e:	4e0a      	ldr	r6, [pc, #40]	; (80054c8 <__libc_init_array+0x40>)
 80054a0:	4c0a      	ldr	r4, [pc, #40]	; (80054cc <__libc_init_array+0x44>)
 80054a2:	1ba4      	subs	r4, r4, r6
 80054a4:	10a4      	asrs	r4, r4, #2
 80054a6:	42a5      	cmp	r5, r4
 80054a8:	d105      	bne.n	80054b6 <__libc_init_array+0x2e>
 80054aa:	bd70      	pop	{r4, r5, r6, pc}
 80054ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80054b0:	4798      	blx	r3
 80054b2:	3501      	adds	r5, #1
 80054b4:	e7ee      	b.n	8005494 <__libc_init_array+0xc>
 80054b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80054ba:	4798      	blx	r3
 80054bc:	3501      	adds	r5, #1
 80054be:	e7f2      	b.n	80054a6 <__libc_init_array+0x1e>
 80054c0:	08005fdc 	.word	0x08005fdc
 80054c4:	08005fdc 	.word	0x08005fdc
 80054c8:	08005fdc 	.word	0x08005fdc
 80054cc:	08005fe0 	.word	0x08005fe0

080054d0 <memcpy>:
 80054d0:	b510      	push	{r4, lr}
 80054d2:	1e43      	subs	r3, r0, #1
 80054d4:	440a      	add	r2, r1
 80054d6:	4291      	cmp	r1, r2
 80054d8:	d100      	bne.n	80054dc <memcpy+0xc>
 80054da:	bd10      	pop	{r4, pc}
 80054dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054e4:	e7f7      	b.n	80054d6 <memcpy+0x6>

080054e6 <memset>:
 80054e6:	4603      	mov	r3, r0
 80054e8:	4402      	add	r2, r0
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d100      	bne.n	80054f0 <memset+0xa>
 80054ee:	4770      	bx	lr
 80054f0:	f803 1b01 	strb.w	r1, [r3], #1
 80054f4:	e7f9      	b.n	80054ea <memset+0x4>
	...

080054f8 <siprintf>:
 80054f8:	b40e      	push	{r1, r2, r3}
 80054fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054fe:	b500      	push	{lr}
 8005500:	b09c      	sub	sp, #112	; 0x70
 8005502:	ab1d      	add	r3, sp, #116	; 0x74
 8005504:	9002      	str	r0, [sp, #8]
 8005506:	9006      	str	r0, [sp, #24]
 8005508:	9107      	str	r1, [sp, #28]
 800550a:	9104      	str	r1, [sp, #16]
 800550c:	4808      	ldr	r0, [pc, #32]	; (8005530 <siprintf+0x38>)
 800550e:	4909      	ldr	r1, [pc, #36]	; (8005534 <siprintf+0x3c>)
 8005510:	f853 2b04 	ldr.w	r2, [r3], #4
 8005514:	9105      	str	r1, [sp, #20]
 8005516:	6800      	ldr	r0, [r0, #0]
 8005518:	a902      	add	r1, sp, #8
 800551a:	9301      	str	r3, [sp, #4]
 800551c:	f000 f866 	bl	80055ec <_svfiprintf_r>
 8005520:	2200      	movs	r2, #0
 8005522:	9b02      	ldr	r3, [sp, #8]
 8005524:	701a      	strb	r2, [r3, #0]
 8005526:	b01c      	add	sp, #112	; 0x70
 8005528:	f85d eb04 	ldr.w	lr, [sp], #4
 800552c:	b003      	add	sp, #12
 800552e:	4770      	bx	lr
 8005530:	20000038 	.word	0x20000038
 8005534:	ffff0208 	.word	0xffff0208

08005538 <__ssputs_r>:
 8005538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800553c:	688e      	ldr	r6, [r1, #8]
 800553e:	4682      	mov	sl, r0
 8005540:	429e      	cmp	r6, r3
 8005542:	460c      	mov	r4, r1
 8005544:	4690      	mov	r8, r2
 8005546:	4699      	mov	r9, r3
 8005548:	d837      	bhi.n	80055ba <__ssputs_r+0x82>
 800554a:	898a      	ldrh	r2, [r1, #12]
 800554c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005550:	d031      	beq.n	80055b6 <__ssputs_r+0x7e>
 8005552:	2302      	movs	r3, #2
 8005554:	6825      	ldr	r5, [r4, #0]
 8005556:	6909      	ldr	r1, [r1, #16]
 8005558:	1a6f      	subs	r7, r5, r1
 800555a:	6965      	ldr	r5, [r4, #20]
 800555c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005560:	fb95 f5f3 	sdiv	r5, r5, r3
 8005564:	f109 0301 	add.w	r3, r9, #1
 8005568:	443b      	add	r3, r7
 800556a:	429d      	cmp	r5, r3
 800556c:	bf38      	it	cc
 800556e:	461d      	movcc	r5, r3
 8005570:	0553      	lsls	r3, r2, #21
 8005572:	d530      	bpl.n	80055d6 <__ssputs_r+0x9e>
 8005574:	4629      	mov	r1, r5
 8005576:	f000 fb2d 	bl	8005bd4 <_malloc_r>
 800557a:	4606      	mov	r6, r0
 800557c:	b950      	cbnz	r0, 8005594 <__ssputs_r+0x5c>
 800557e:	230c      	movs	r3, #12
 8005580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005584:	f8ca 3000 	str.w	r3, [sl]
 8005588:	89a3      	ldrh	r3, [r4, #12]
 800558a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800558e:	81a3      	strh	r3, [r4, #12]
 8005590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005594:	463a      	mov	r2, r7
 8005596:	6921      	ldr	r1, [r4, #16]
 8005598:	f7ff ff9a 	bl	80054d0 <memcpy>
 800559c:	89a3      	ldrh	r3, [r4, #12]
 800559e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80055a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055a6:	81a3      	strh	r3, [r4, #12]
 80055a8:	6126      	str	r6, [r4, #16]
 80055aa:	443e      	add	r6, r7
 80055ac:	6026      	str	r6, [r4, #0]
 80055ae:	464e      	mov	r6, r9
 80055b0:	6165      	str	r5, [r4, #20]
 80055b2:	1bed      	subs	r5, r5, r7
 80055b4:	60a5      	str	r5, [r4, #8]
 80055b6:	454e      	cmp	r6, r9
 80055b8:	d900      	bls.n	80055bc <__ssputs_r+0x84>
 80055ba:	464e      	mov	r6, r9
 80055bc:	4632      	mov	r2, r6
 80055be:	4641      	mov	r1, r8
 80055c0:	6820      	ldr	r0, [r4, #0]
 80055c2:	f000 faa1 	bl	8005b08 <memmove>
 80055c6:	68a3      	ldr	r3, [r4, #8]
 80055c8:	2000      	movs	r0, #0
 80055ca:	1b9b      	subs	r3, r3, r6
 80055cc:	60a3      	str	r3, [r4, #8]
 80055ce:	6823      	ldr	r3, [r4, #0]
 80055d0:	441e      	add	r6, r3
 80055d2:	6026      	str	r6, [r4, #0]
 80055d4:	e7dc      	b.n	8005590 <__ssputs_r+0x58>
 80055d6:	462a      	mov	r2, r5
 80055d8:	f000 fb56 	bl	8005c88 <_realloc_r>
 80055dc:	4606      	mov	r6, r0
 80055de:	2800      	cmp	r0, #0
 80055e0:	d1e2      	bne.n	80055a8 <__ssputs_r+0x70>
 80055e2:	6921      	ldr	r1, [r4, #16]
 80055e4:	4650      	mov	r0, sl
 80055e6:	f000 faa9 	bl	8005b3c <_free_r>
 80055ea:	e7c8      	b.n	800557e <__ssputs_r+0x46>

080055ec <_svfiprintf_r>:
 80055ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055f0:	461d      	mov	r5, r3
 80055f2:	898b      	ldrh	r3, [r1, #12]
 80055f4:	b09d      	sub	sp, #116	; 0x74
 80055f6:	061f      	lsls	r7, r3, #24
 80055f8:	4680      	mov	r8, r0
 80055fa:	460c      	mov	r4, r1
 80055fc:	4616      	mov	r6, r2
 80055fe:	d50f      	bpl.n	8005620 <_svfiprintf_r+0x34>
 8005600:	690b      	ldr	r3, [r1, #16]
 8005602:	b96b      	cbnz	r3, 8005620 <_svfiprintf_r+0x34>
 8005604:	2140      	movs	r1, #64	; 0x40
 8005606:	f000 fae5 	bl	8005bd4 <_malloc_r>
 800560a:	6020      	str	r0, [r4, #0]
 800560c:	6120      	str	r0, [r4, #16]
 800560e:	b928      	cbnz	r0, 800561c <_svfiprintf_r+0x30>
 8005610:	230c      	movs	r3, #12
 8005612:	f8c8 3000 	str.w	r3, [r8]
 8005616:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800561a:	e0c8      	b.n	80057ae <_svfiprintf_r+0x1c2>
 800561c:	2340      	movs	r3, #64	; 0x40
 800561e:	6163      	str	r3, [r4, #20]
 8005620:	2300      	movs	r3, #0
 8005622:	9309      	str	r3, [sp, #36]	; 0x24
 8005624:	2320      	movs	r3, #32
 8005626:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800562a:	2330      	movs	r3, #48	; 0x30
 800562c:	f04f 0b01 	mov.w	fp, #1
 8005630:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005634:	9503      	str	r5, [sp, #12]
 8005636:	4637      	mov	r7, r6
 8005638:	463d      	mov	r5, r7
 800563a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800563e:	b10b      	cbz	r3, 8005644 <_svfiprintf_r+0x58>
 8005640:	2b25      	cmp	r3, #37	; 0x25
 8005642:	d13e      	bne.n	80056c2 <_svfiprintf_r+0xd6>
 8005644:	ebb7 0a06 	subs.w	sl, r7, r6
 8005648:	d00b      	beq.n	8005662 <_svfiprintf_r+0x76>
 800564a:	4653      	mov	r3, sl
 800564c:	4632      	mov	r2, r6
 800564e:	4621      	mov	r1, r4
 8005650:	4640      	mov	r0, r8
 8005652:	f7ff ff71 	bl	8005538 <__ssputs_r>
 8005656:	3001      	adds	r0, #1
 8005658:	f000 80a4 	beq.w	80057a4 <_svfiprintf_r+0x1b8>
 800565c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800565e:	4453      	add	r3, sl
 8005660:	9309      	str	r3, [sp, #36]	; 0x24
 8005662:	783b      	ldrb	r3, [r7, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	f000 809d 	beq.w	80057a4 <_svfiprintf_r+0x1b8>
 800566a:	2300      	movs	r3, #0
 800566c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005670:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005674:	9304      	str	r3, [sp, #16]
 8005676:	9307      	str	r3, [sp, #28]
 8005678:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800567c:	931a      	str	r3, [sp, #104]	; 0x68
 800567e:	462f      	mov	r7, r5
 8005680:	2205      	movs	r2, #5
 8005682:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005686:	4850      	ldr	r0, [pc, #320]	; (80057c8 <_svfiprintf_r+0x1dc>)
 8005688:	f000 fa30 	bl	8005aec <memchr>
 800568c:	9b04      	ldr	r3, [sp, #16]
 800568e:	b9d0      	cbnz	r0, 80056c6 <_svfiprintf_r+0xda>
 8005690:	06d9      	lsls	r1, r3, #27
 8005692:	bf44      	itt	mi
 8005694:	2220      	movmi	r2, #32
 8005696:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800569a:	071a      	lsls	r2, r3, #28
 800569c:	bf44      	itt	mi
 800569e:	222b      	movmi	r2, #43	; 0x2b
 80056a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80056a4:	782a      	ldrb	r2, [r5, #0]
 80056a6:	2a2a      	cmp	r2, #42	; 0x2a
 80056a8:	d015      	beq.n	80056d6 <_svfiprintf_r+0xea>
 80056aa:	462f      	mov	r7, r5
 80056ac:	2000      	movs	r0, #0
 80056ae:	250a      	movs	r5, #10
 80056b0:	9a07      	ldr	r2, [sp, #28]
 80056b2:	4639      	mov	r1, r7
 80056b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056b8:	3b30      	subs	r3, #48	; 0x30
 80056ba:	2b09      	cmp	r3, #9
 80056bc:	d94d      	bls.n	800575a <_svfiprintf_r+0x16e>
 80056be:	b1b8      	cbz	r0, 80056f0 <_svfiprintf_r+0x104>
 80056c0:	e00f      	b.n	80056e2 <_svfiprintf_r+0xf6>
 80056c2:	462f      	mov	r7, r5
 80056c4:	e7b8      	b.n	8005638 <_svfiprintf_r+0x4c>
 80056c6:	4a40      	ldr	r2, [pc, #256]	; (80057c8 <_svfiprintf_r+0x1dc>)
 80056c8:	463d      	mov	r5, r7
 80056ca:	1a80      	subs	r0, r0, r2
 80056cc:	fa0b f000 	lsl.w	r0, fp, r0
 80056d0:	4318      	orrs	r0, r3
 80056d2:	9004      	str	r0, [sp, #16]
 80056d4:	e7d3      	b.n	800567e <_svfiprintf_r+0x92>
 80056d6:	9a03      	ldr	r2, [sp, #12]
 80056d8:	1d11      	adds	r1, r2, #4
 80056da:	6812      	ldr	r2, [r2, #0]
 80056dc:	9103      	str	r1, [sp, #12]
 80056de:	2a00      	cmp	r2, #0
 80056e0:	db01      	blt.n	80056e6 <_svfiprintf_r+0xfa>
 80056e2:	9207      	str	r2, [sp, #28]
 80056e4:	e004      	b.n	80056f0 <_svfiprintf_r+0x104>
 80056e6:	4252      	negs	r2, r2
 80056e8:	f043 0302 	orr.w	r3, r3, #2
 80056ec:	9207      	str	r2, [sp, #28]
 80056ee:	9304      	str	r3, [sp, #16]
 80056f0:	783b      	ldrb	r3, [r7, #0]
 80056f2:	2b2e      	cmp	r3, #46	; 0x2e
 80056f4:	d10c      	bne.n	8005710 <_svfiprintf_r+0x124>
 80056f6:	787b      	ldrb	r3, [r7, #1]
 80056f8:	2b2a      	cmp	r3, #42	; 0x2a
 80056fa:	d133      	bne.n	8005764 <_svfiprintf_r+0x178>
 80056fc:	9b03      	ldr	r3, [sp, #12]
 80056fe:	3702      	adds	r7, #2
 8005700:	1d1a      	adds	r2, r3, #4
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	9203      	str	r2, [sp, #12]
 8005706:	2b00      	cmp	r3, #0
 8005708:	bfb8      	it	lt
 800570a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800570e:	9305      	str	r3, [sp, #20]
 8005710:	4d2e      	ldr	r5, [pc, #184]	; (80057cc <_svfiprintf_r+0x1e0>)
 8005712:	2203      	movs	r2, #3
 8005714:	7839      	ldrb	r1, [r7, #0]
 8005716:	4628      	mov	r0, r5
 8005718:	f000 f9e8 	bl	8005aec <memchr>
 800571c:	b138      	cbz	r0, 800572e <_svfiprintf_r+0x142>
 800571e:	2340      	movs	r3, #64	; 0x40
 8005720:	1b40      	subs	r0, r0, r5
 8005722:	fa03 f000 	lsl.w	r0, r3, r0
 8005726:	9b04      	ldr	r3, [sp, #16]
 8005728:	3701      	adds	r7, #1
 800572a:	4303      	orrs	r3, r0
 800572c:	9304      	str	r3, [sp, #16]
 800572e:	7839      	ldrb	r1, [r7, #0]
 8005730:	2206      	movs	r2, #6
 8005732:	4827      	ldr	r0, [pc, #156]	; (80057d0 <_svfiprintf_r+0x1e4>)
 8005734:	1c7e      	adds	r6, r7, #1
 8005736:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800573a:	f000 f9d7 	bl	8005aec <memchr>
 800573e:	2800      	cmp	r0, #0
 8005740:	d038      	beq.n	80057b4 <_svfiprintf_r+0x1c8>
 8005742:	4b24      	ldr	r3, [pc, #144]	; (80057d4 <_svfiprintf_r+0x1e8>)
 8005744:	bb13      	cbnz	r3, 800578c <_svfiprintf_r+0x1a0>
 8005746:	9b03      	ldr	r3, [sp, #12]
 8005748:	3307      	adds	r3, #7
 800574a:	f023 0307 	bic.w	r3, r3, #7
 800574e:	3308      	adds	r3, #8
 8005750:	9303      	str	r3, [sp, #12]
 8005752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005754:	444b      	add	r3, r9
 8005756:	9309      	str	r3, [sp, #36]	; 0x24
 8005758:	e76d      	b.n	8005636 <_svfiprintf_r+0x4a>
 800575a:	fb05 3202 	mla	r2, r5, r2, r3
 800575e:	2001      	movs	r0, #1
 8005760:	460f      	mov	r7, r1
 8005762:	e7a6      	b.n	80056b2 <_svfiprintf_r+0xc6>
 8005764:	2300      	movs	r3, #0
 8005766:	250a      	movs	r5, #10
 8005768:	4619      	mov	r1, r3
 800576a:	3701      	adds	r7, #1
 800576c:	9305      	str	r3, [sp, #20]
 800576e:	4638      	mov	r0, r7
 8005770:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005774:	3a30      	subs	r2, #48	; 0x30
 8005776:	2a09      	cmp	r2, #9
 8005778:	d903      	bls.n	8005782 <_svfiprintf_r+0x196>
 800577a:	2b00      	cmp	r3, #0
 800577c:	d0c8      	beq.n	8005710 <_svfiprintf_r+0x124>
 800577e:	9105      	str	r1, [sp, #20]
 8005780:	e7c6      	b.n	8005710 <_svfiprintf_r+0x124>
 8005782:	fb05 2101 	mla	r1, r5, r1, r2
 8005786:	2301      	movs	r3, #1
 8005788:	4607      	mov	r7, r0
 800578a:	e7f0      	b.n	800576e <_svfiprintf_r+0x182>
 800578c:	ab03      	add	r3, sp, #12
 800578e:	9300      	str	r3, [sp, #0]
 8005790:	4622      	mov	r2, r4
 8005792:	4b11      	ldr	r3, [pc, #68]	; (80057d8 <_svfiprintf_r+0x1ec>)
 8005794:	a904      	add	r1, sp, #16
 8005796:	4640      	mov	r0, r8
 8005798:	f3af 8000 	nop.w
 800579c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80057a0:	4681      	mov	r9, r0
 80057a2:	d1d6      	bne.n	8005752 <_svfiprintf_r+0x166>
 80057a4:	89a3      	ldrh	r3, [r4, #12]
 80057a6:	065b      	lsls	r3, r3, #25
 80057a8:	f53f af35 	bmi.w	8005616 <_svfiprintf_r+0x2a>
 80057ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057ae:	b01d      	add	sp, #116	; 0x74
 80057b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057b4:	ab03      	add	r3, sp, #12
 80057b6:	9300      	str	r3, [sp, #0]
 80057b8:	4622      	mov	r2, r4
 80057ba:	4b07      	ldr	r3, [pc, #28]	; (80057d8 <_svfiprintf_r+0x1ec>)
 80057bc:	a904      	add	r1, sp, #16
 80057be:	4640      	mov	r0, r8
 80057c0:	f000 f882 	bl	80058c8 <_printf_i>
 80057c4:	e7ea      	b.n	800579c <_svfiprintf_r+0x1b0>
 80057c6:	bf00      	nop
 80057c8:	08005fa8 	.word	0x08005fa8
 80057cc:	08005fae 	.word	0x08005fae
 80057d0:	08005fb2 	.word	0x08005fb2
 80057d4:	00000000 	.word	0x00000000
 80057d8:	08005539 	.word	0x08005539

080057dc <_printf_common>:
 80057dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057e0:	4691      	mov	r9, r2
 80057e2:	461f      	mov	r7, r3
 80057e4:	688a      	ldr	r2, [r1, #8]
 80057e6:	690b      	ldr	r3, [r1, #16]
 80057e8:	4606      	mov	r6, r0
 80057ea:	4293      	cmp	r3, r2
 80057ec:	bfb8      	it	lt
 80057ee:	4613      	movlt	r3, r2
 80057f0:	f8c9 3000 	str.w	r3, [r9]
 80057f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057f8:	460c      	mov	r4, r1
 80057fa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057fe:	b112      	cbz	r2, 8005806 <_printf_common+0x2a>
 8005800:	3301      	adds	r3, #1
 8005802:	f8c9 3000 	str.w	r3, [r9]
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	0699      	lsls	r1, r3, #26
 800580a:	bf42      	ittt	mi
 800580c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005810:	3302      	addmi	r3, #2
 8005812:	f8c9 3000 	strmi.w	r3, [r9]
 8005816:	6825      	ldr	r5, [r4, #0]
 8005818:	f015 0506 	ands.w	r5, r5, #6
 800581c:	d107      	bne.n	800582e <_printf_common+0x52>
 800581e:	f104 0a19 	add.w	sl, r4, #25
 8005822:	68e3      	ldr	r3, [r4, #12]
 8005824:	f8d9 2000 	ldr.w	r2, [r9]
 8005828:	1a9b      	subs	r3, r3, r2
 800582a:	42ab      	cmp	r3, r5
 800582c:	dc29      	bgt.n	8005882 <_printf_common+0xa6>
 800582e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005832:	6822      	ldr	r2, [r4, #0]
 8005834:	3300      	adds	r3, #0
 8005836:	bf18      	it	ne
 8005838:	2301      	movne	r3, #1
 800583a:	0692      	lsls	r2, r2, #26
 800583c:	d42e      	bmi.n	800589c <_printf_common+0xc0>
 800583e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005842:	4639      	mov	r1, r7
 8005844:	4630      	mov	r0, r6
 8005846:	47c0      	blx	r8
 8005848:	3001      	adds	r0, #1
 800584a:	d021      	beq.n	8005890 <_printf_common+0xb4>
 800584c:	6823      	ldr	r3, [r4, #0]
 800584e:	68e5      	ldr	r5, [r4, #12]
 8005850:	f003 0306 	and.w	r3, r3, #6
 8005854:	2b04      	cmp	r3, #4
 8005856:	bf18      	it	ne
 8005858:	2500      	movne	r5, #0
 800585a:	f8d9 2000 	ldr.w	r2, [r9]
 800585e:	f04f 0900 	mov.w	r9, #0
 8005862:	bf08      	it	eq
 8005864:	1aad      	subeq	r5, r5, r2
 8005866:	68a3      	ldr	r3, [r4, #8]
 8005868:	6922      	ldr	r2, [r4, #16]
 800586a:	bf08      	it	eq
 800586c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005870:	4293      	cmp	r3, r2
 8005872:	bfc4      	itt	gt
 8005874:	1a9b      	subgt	r3, r3, r2
 8005876:	18ed      	addgt	r5, r5, r3
 8005878:	341a      	adds	r4, #26
 800587a:	454d      	cmp	r5, r9
 800587c:	d11a      	bne.n	80058b4 <_printf_common+0xd8>
 800587e:	2000      	movs	r0, #0
 8005880:	e008      	b.n	8005894 <_printf_common+0xb8>
 8005882:	2301      	movs	r3, #1
 8005884:	4652      	mov	r2, sl
 8005886:	4639      	mov	r1, r7
 8005888:	4630      	mov	r0, r6
 800588a:	47c0      	blx	r8
 800588c:	3001      	adds	r0, #1
 800588e:	d103      	bne.n	8005898 <_printf_common+0xbc>
 8005890:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005898:	3501      	adds	r5, #1
 800589a:	e7c2      	b.n	8005822 <_printf_common+0x46>
 800589c:	2030      	movs	r0, #48	; 0x30
 800589e:	18e1      	adds	r1, r4, r3
 80058a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058a4:	1c5a      	adds	r2, r3, #1
 80058a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058aa:	4422      	add	r2, r4
 80058ac:	3302      	adds	r3, #2
 80058ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058b2:	e7c4      	b.n	800583e <_printf_common+0x62>
 80058b4:	2301      	movs	r3, #1
 80058b6:	4622      	mov	r2, r4
 80058b8:	4639      	mov	r1, r7
 80058ba:	4630      	mov	r0, r6
 80058bc:	47c0      	blx	r8
 80058be:	3001      	adds	r0, #1
 80058c0:	d0e6      	beq.n	8005890 <_printf_common+0xb4>
 80058c2:	f109 0901 	add.w	r9, r9, #1
 80058c6:	e7d8      	b.n	800587a <_printf_common+0x9e>

080058c8 <_printf_i>:
 80058c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80058cc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80058d0:	460c      	mov	r4, r1
 80058d2:	7e09      	ldrb	r1, [r1, #24]
 80058d4:	b085      	sub	sp, #20
 80058d6:	296e      	cmp	r1, #110	; 0x6e
 80058d8:	4617      	mov	r7, r2
 80058da:	4606      	mov	r6, r0
 80058dc:	4698      	mov	r8, r3
 80058de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80058e0:	f000 80b3 	beq.w	8005a4a <_printf_i+0x182>
 80058e4:	d822      	bhi.n	800592c <_printf_i+0x64>
 80058e6:	2963      	cmp	r1, #99	; 0x63
 80058e8:	d036      	beq.n	8005958 <_printf_i+0x90>
 80058ea:	d80a      	bhi.n	8005902 <_printf_i+0x3a>
 80058ec:	2900      	cmp	r1, #0
 80058ee:	f000 80b9 	beq.w	8005a64 <_printf_i+0x19c>
 80058f2:	2958      	cmp	r1, #88	; 0x58
 80058f4:	f000 8083 	beq.w	80059fe <_printf_i+0x136>
 80058f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005900:	e032      	b.n	8005968 <_printf_i+0xa0>
 8005902:	2964      	cmp	r1, #100	; 0x64
 8005904:	d001      	beq.n	800590a <_printf_i+0x42>
 8005906:	2969      	cmp	r1, #105	; 0x69
 8005908:	d1f6      	bne.n	80058f8 <_printf_i+0x30>
 800590a:	6820      	ldr	r0, [r4, #0]
 800590c:	6813      	ldr	r3, [r2, #0]
 800590e:	0605      	lsls	r5, r0, #24
 8005910:	f103 0104 	add.w	r1, r3, #4
 8005914:	d52a      	bpl.n	800596c <_printf_i+0xa4>
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	6011      	str	r1, [r2, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	da03      	bge.n	8005926 <_printf_i+0x5e>
 800591e:	222d      	movs	r2, #45	; 0x2d
 8005920:	425b      	negs	r3, r3
 8005922:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005926:	486f      	ldr	r0, [pc, #444]	; (8005ae4 <_printf_i+0x21c>)
 8005928:	220a      	movs	r2, #10
 800592a:	e039      	b.n	80059a0 <_printf_i+0xd8>
 800592c:	2973      	cmp	r1, #115	; 0x73
 800592e:	f000 809d 	beq.w	8005a6c <_printf_i+0x1a4>
 8005932:	d808      	bhi.n	8005946 <_printf_i+0x7e>
 8005934:	296f      	cmp	r1, #111	; 0x6f
 8005936:	d020      	beq.n	800597a <_printf_i+0xb2>
 8005938:	2970      	cmp	r1, #112	; 0x70
 800593a:	d1dd      	bne.n	80058f8 <_printf_i+0x30>
 800593c:	6823      	ldr	r3, [r4, #0]
 800593e:	f043 0320 	orr.w	r3, r3, #32
 8005942:	6023      	str	r3, [r4, #0]
 8005944:	e003      	b.n	800594e <_printf_i+0x86>
 8005946:	2975      	cmp	r1, #117	; 0x75
 8005948:	d017      	beq.n	800597a <_printf_i+0xb2>
 800594a:	2978      	cmp	r1, #120	; 0x78
 800594c:	d1d4      	bne.n	80058f8 <_printf_i+0x30>
 800594e:	2378      	movs	r3, #120	; 0x78
 8005950:	4865      	ldr	r0, [pc, #404]	; (8005ae8 <_printf_i+0x220>)
 8005952:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005956:	e055      	b.n	8005a04 <_printf_i+0x13c>
 8005958:	6813      	ldr	r3, [r2, #0]
 800595a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800595e:	1d19      	adds	r1, r3, #4
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	6011      	str	r1, [r2, #0]
 8005964:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005968:	2301      	movs	r3, #1
 800596a:	e08c      	b.n	8005a86 <_printf_i+0x1be>
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005972:	6011      	str	r1, [r2, #0]
 8005974:	bf18      	it	ne
 8005976:	b21b      	sxthne	r3, r3
 8005978:	e7cf      	b.n	800591a <_printf_i+0x52>
 800597a:	6813      	ldr	r3, [r2, #0]
 800597c:	6825      	ldr	r5, [r4, #0]
 800597e:	1d18      	adds	r0, r3, #4
 8005980:	6010      	str	r0, [r2, #0]
 8005982:	0628      	lsls	r0, r5, #24
 8005984:	d501      	bpl.n	800598a <_printf_i+0xc2>
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	e002      	b.n	8005990 <_printf_i+0xc8>
 800598a:	0668      	lsls	r0, r5, #25
 800598c:	d5fb      	bpl.n	8005986 <_printf_i+0xbe>
 800598e:	881b      	ldrh	r3, [r3, #0]
 8005990:	296f      	cmp	r1, #111	; 0x6f
 8005992:	bf14      	ite	ne
 8005994:	220a      	movne	r2, #10
 8005996:	2208      	moveq	r2, #8
 8005998:	4852      	ldr	r0, [pc, #328]	; (8005ae4 <_printf_i+0x21c>)
 800599a:	2100      	movs	r1, #0
 800599c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059a0:	6865      	ldr	r5, [r4, #4]
 80059a2:	2d00      	cmp	r5, #0
 80059a4:	60a5      	str	r5, [r4, #8]
 80059a6:	f2c0 8095 	blt.w	8005ad4 <_printf_i+0x20c>
 80059aa:	6821      	ldr	r1, [r4, #0]
 80059ac:	f021 0104 	bic.w	r1, r1, #4
 80059b0:	6021      	str	r1, [r4, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d13d      	bne.n	8005a32 <_printf_i+0x16a>
 80059b6:	2d00      	cmp	r5, #0
 80059b8:	f040 808e 	bne.w	8005ad8 <_printf_i+0x210>
 80059bc:	4665      	mov	r5, ip
 80059be:	2a08      	cmp	r2, #8
 80059c0:	d10b      	bne.n	80059da <_printf_i+0x112>
 80059c2:	6823      	ldr	r3, [r4, #0]
 80059c4:	07db      	lsls	r3, r3, #31
 80059c6:	d508      	bpl.n	80059da <_printf_i+0x112>
 80059c8:	6923      	ldr	r3, [r4, #16]
 80059ca:	6862      	ldr	r2, [r4, #4]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	bfde      	ittt	le
 80059d0:	2330      	movle	r3, #48	; 0x30
 80059d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80059d6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80059da:	ebac 0305 	sub.w	r3, ip, r5
 80059de:	6123      	str	r3, [r4, #16]
 80059e0:	f8cd 8000 	str.w	r8, [sp]
 80059e4:	463b      	mov	r3, r7
 80059e6:	aa03      	add	r2, sp, #12
 80059e8:	4621      	mov	r1, r4
 80059ea:	4630      	mov	r0, r6
 80059ec:	f7ff fef6 	bl	80057dc <_printf_common>
 80059f0:	3001      	adds	r0, #1
 80059f2:	d14d      	bne.n	8005a90 <_printf_i+0x1c8>
 80059f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059f8:	b005      	add	sp, #20
 80059fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80059fe:	4839      	ldr	r0, [pc, #228]	; (8005ae4 <_printf_i+0x21c>)
 8005a00:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005a04:	6813      	ldr	r3, [r2, #0]
 8005a06:	6821      	ldr	r1, [r4, #0]
 8005a08:	1d1d      	adds	r5, r3, #4
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	6015      	str	r5, [r2, #0]
 8005a0e:	060a      	lsls	r2, r1, #24
 8005a10:	d50b      	bpl.n	8005a2a <_printf_i+0x162>
 8005a12:	07ca      	lsls	r2, r1, #31
 8005a14:	bf44      	itt	mi
 8005a16:	f041 0120 	orrmi.w	r1, r1, #32
 8005a1a:	6021      	strmi	r1, [r4, #0]
 8005a1c:	b91b      	cbnz	r3, 8005a26 <_printf_i+0x15e>
 8005a1e:	6822      	ldr	r2, [r4, #0]
 8005a20:	f022 0220 	bic.w	r2, r2, #32
 8005a24:	6022      	str	r2, [r4, #0]
 8005a26:	2210      	movs	r2, #16
 8005a28:	e7b7      	b.n	800599a <_printf_i+0xd2>
 8005a2a:	064d      	lsls	r5, r1, #25
 8005a2c:	bf48      	it	mi
 8005a2e:	b29b      	uxthmi	r3, r3
 8005a30:	e7ef      	b.n	8005a12 <_printf_i+0x14a>
 8005a32:	4665      	mov	r5, ip
 8005a34:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a38:	fb02 3311 	mls	r3, r2, r1, r3
 8005a3c:	5cc3      	ldrb	r3, [r0, r3]
 8005a3e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005a42:	460b      	mov	r3, r1
 8005a44:	2900      	cmp	r1, #0
 8005a46:	d1f5      	bne.n	8005a34 <_printf_i+0x16c>
 8005a48:	e7b9      	b.n	80059be <_printf_i+0xf6>
 8005a4a:	6813      	ldr	r3, [r2, #0]
 8005a4c:	6825      	ldr	r5, [r4, #0]
 8005a4e:	1d18      	adds	r0, r3, #4
 8005a50:	6961      	ldr	r1, [r4, #20]
 8005a52:	6010      	str	r0, [r2, #0]
 8005a54:	0628      	lsls	r0, r5, #24
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	d501      	bpl.n	8005a5e <_printf_i+0x196>
 8005a5a:	6019      	str	r1, [r3, #0]
 8005a5c:	e002      	b.n	8005a64 <_printf_i+0x19c>
 8005a5e:	066a      	lsls	r2, r5, #25
 8005a60:	d5fb      	bpl.n	8005a5a <_printf_i+0x192>
 8005a62:	8019      	strh	r1, [r3, #0]
 8005a64:	2300      	movs	r3, #0
 8005a66:	4665      	mov	r5, ip
 8005a68:	6123      	str	r3, [r4, #16]
 8005a6a:	e7b9      	b.n	80059e0 <_printf_i+0x118>
 8005a6c:	6813      	ldr	r3, [r2, #0]
 8005a6e:	1d19      	adds	r1, r3, #4
 8005a70:	6011      	str	r1, [r2, #0]
 8005a72:	681d      	ldr	r5, [r3, #0]
 8005a74:	6862      	ldr	r2, [r4, #4]
 8005a76:	2100      	movs	r1, #0
 8005a78:	4628      	mov	r0, r5
 8005a7a:	f000 f837 	bl	8005aec <memchr>
 8005a7e:	b108      	cbz	r0, 8005a84 <_printf_i+0x1bc>
 8005a80:	1b40      	subs	r0, r0, r5
 8005a82:	6060      	str	r0, [r4, #4]
 8005a84:	6863      	ldr	r3, [r4, #4]
 8005a86:	6123      	str	r3, [r4, #16]
 8005a88:	2300      	movs	r3, #0
 8005a8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a8e:	e7a7      	b.n	80059e0 <_printf_i+0x118>
 8005a90:	6923      	ldr	r3, [r4, #16]
 8005a92:	462a      	mov	r2, r5
 8005a94:	4639      	mov	r1, r7
 8005a96:	4630      	mov	r0, r6
 8005a98:	47c0      	blx	r8
 8005a9a:	3001      	adds	r0, #1
 8005a9c:	d0aa      	beq.n	80059f4 <_printf_i+0x12c>
 8005a9e:	6823      	ldr	r3, [r4, #0]
 8005aa0:	079b      	lsls	r3, r3, #30
 8005aa2:	d413      	bmi.n	8005acc <_printf_i+0x204>
 8005aa4:	68e0      	ldr	r0, [r4, #12]
 8005aa6:	9b03      	ldr	r3, [sp, #12]
 8005aa8:	4298      	cmp	r0, r3
 8005aaa:	bfb8      	it	lt
 8005aac:	4618      	movlt	r0, r3
 8005aae:	e7a3      	b.n	80059f8 <_printf_i+0x130>
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	464a      	mov	r2, r9
 8005ab4:	4639      	mov	r1, r7
 8005ab6:	4630      	mov	r0, r6
 8005ab8:	47c0      	blx	r8
 8005aba:	3001      	adds	r0, #1
 8005abc:	d09a      	beq.n	80059f4 <_printf_i+0x12c>
 8005abe:	3501      	adds	r5, #1
 8005ac0:	68e3      	ldr	r3, [r4, #12]
 8005ac2:	9a03      	ldr	r2, [sp, #12]
 8005ac4:	1a9b      	subs	r3, r3, r2
 8005ac6:	42ab      	cmp	r3, r5
 8005ac8:	dcf2      	bgt.n	8005ab0 <_printf_i+0x1e8>
 8005aca:	e7eb      	b.n	8005aa4 <_printf_i+0x1dc>
 8005acc:	2500      	movs	r5, #0
 8005ace:	f104 0919 	add.w	r9, r4, #25
 8005ad2:	e7f5      	b.n	8005ac0 <_printf_i+0x1f8>
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1ac      	bne.n	8005a32 <_printf_i+0x16a>
 8005ad8:	7803      	ldrb	r3, [r0, #0]
 8005ada:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ade:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ae2:	e76c      	b.n	80059be <_printf_i+0xf6>
 8005ae4:	08005fb9 	.word	0x08005fb9
 8005ae8:	08005fca 	.word	0x08005fca

08005aec <memchr>:
 8005aec:	b510      	push	{r4, lr}
 8005aee:	b2c9      	uxtb	r1, r1
 8005af0:	4402      	add	r2, r0
 8005af2:	4290      	cmp	r0, r2
 8005af4:	4603      	mov	r3, r0
 8005af6:	d101      	bne.n	8005afc <memchr+0x10>
 8005af8:	2300      	movs	r3, #0
 8005afa:	e003      	b.n	8005b04 <memchr+0x18>
 8005afc:	781c      	ldrb	r4, [r3, #0]
 8005afe:	3001      	adds	r0, #1
 8005b00:	428c      	cmp	r4, r1
 8005b02:	d1f6      	bne.n	8005af2 <memchr+0x6>
 8005b04:	4618      	mov	r0, r3
 8005b06:	bd10      	pop	{r4, pc}

08005b08 <memmove>:
 8005b08:	4288      	cmp	r0, r1
 8005b0a:	b510      	push	{r4, lr}
 8005b0c:	eb01 0302 	add.w	r3, r1, r2
 8005b10:	d807      	bhi.n	8005b22 <memmove+0x1a>
 8005b12:	1e42      	subs	r2, r0, #1
 8005b14:	4299      	cmp	r1, r3
 8005b16:	d00a      	beq.n	8005b2e <memmove+0x26>
 8005b18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b1c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005b20:	e7f8      	b.n	8005b14 <memmove+0xc>
 8005b22:	4283      	cmp	r3, r0
 8005b24:	d9f5      	bls.n	8005b12 <memmove+0xa>
 8005b26:	1881      	adds	r1, r0, r2
 8005b28:	1ad2      	subs	r2, r2, r3
 8005b2a:	42d3      	cmn	r3, r2
 8005b2c:	d100      	bne.n	8005b30 <memmove+0x28>
 8005b2e:	bd10      	pop	{r4, pc}
 8005b30:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b34:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005b38:	e7f7      	b.n	8005b2a <memmove+0x22>
	...

08005b3c <_free_r>:
 8005b3c:	b538      	push	{r3, r4, r5, lr}
 8005b3e:	4605      	mov	r5, r0
 8005b40:	2900      	cmp	r1, #0
 8005b42:	d043      	beq.n	8005bcc <_free_r+0x90>
 8005b44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b48:	1f0c      	subs	r4, r1, #4
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	bfb8      	it	lt
 8005b4e:	18e4      	addlt	r4, r4, r3
 8005b50:	f000 f8d0 	bl	8005cf4 <__malloc_lock>
 8005b54:	4a1e      	ldr	r2, [pc, #120]	; (8005bd0 <_free_r+0x94>)
 8005b56:	6813      	ldr	r3, [r2, #0]
 8005b58:	4610      	mov	r0, r2
 8005b5a:	b933      	cbnz	r3, 8005b6a <_free_r+0x2e>
 8005b5c:	6063      	str	r3, [r4, #4]
 8005b5e:	6014      	str	r4, [r2, #0]
 8005b60:	4628      	mov	r0, r5
 8005b62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b66:	f000 b8c6 	b.w	8005cf6 <__malloc_unlock>
 8005b6a:	42a3      	cmp	r3, r4
 8005b6c:	d90b      	bls.n	8005b86 <_free_r+0x4a>
 8005b6e:	6821      	ldr	r1, [r4, #0]
 8005b70:	1862      	adds	r2, r4, r1
 8005b72:	4293      	cmp	r3, r2
 8005b74:	bf01      	itttt	eq
 8005b76:	681a      	ldreq	r2, [r3, #0]
 8005b78:	685b      	ldreq	r3, [r3, #4]
 8005b7a:	1852      	addeq	r2, r2, r1
 8005b7c:	6022      	streq	r2, [r4, #0]
 8005b7e:	6063      	str	r3, [r4, #4]
 8005b80:	6004      	str	r4, [r0, #0]
 8005b82:	e7ed      	b.n	8005b60 <_free_r+0x24>
 8005b84:	4613      	mov	r3, r2
 8005b86:	685a      	ldr	r2, [r3, #4]
 8005b88:	b10a      	cbz	r2, 8005b8e <_free_r+0x52>
 8005b8a:	42a2      	cmp	r2, r4
 8005b8c:	d9fa      	bls.n	8005b84 <_free_r+0x48>
 8005b8e:	6819      	ldr	r1, [r3, #0]
 8005b90:	1858      	adds	r0, r3, r1
 8005b92:	42a0      	cmp	r0, r4
 8005b94:	d10b      	bne.n	8005bae <_free_r+0x72>
 8005b96:	6820      	ldr	r0, [r4, #0]
 8005b98:	4401      	add	r1, r0
 8005b9a:	1858      	adds	r0, r3, r1
 8005b9c:	4282      	cmp	r2, r0
 8005b9e:	6019      	str	r1, [r3, #0]
 8005ba0:	d1de      	bne.n	8005b60 <_free_r+0x24>
 8005ba2:	6810      	ldr	r0, [r2, #0]
 8005ba4:	6852      	ldr	r2, [r2, #4]
 8005ba6:	4401      	add	r1, r0
 8005ba8:	6019      	str	r1, [r3, #0]
 8005baa:	605a      	str	r2, [r3, #4]
 8005bac:	e7d8      	b.n	8005b60 <_free_r+0x24>
 8005bae:	d902      	bls.n	8005bb6 <_free_r+0x7a>
 8005bb0:	230c      	movs	r3, #12
 8005bb2:	602b      	str	r3, [r5, #0]
 8005bb4:	e7d4      	b.n	8005b60 <_free_r+0x24>
 8005bb6:	6820      	ldr	r0, [r4, #0]
 8005bb8:	1821      	adds	r1, r4, r0
 8005bba:	428a      	cmp	r2, r1
 8005bbc:	bf01      	itttt	eq
 8005bbe:	6811      	ldreq	r1, [r2, #0]
 8005bc0:	6852      	ldreq	r2, [r2, #4]
 8005bc2:	1809      	addeq	r1, r1, r0
 8005bc4:	6021      	streq	r1, [r4, #0]
 8005bc6:	6062      	str	r2, [r4, #4]
 8005bc8:	605c      	str	r4, [r3, #4]
 8005bca:	e7c9      	b.n	8005b60 <_free_r+0x24>
 8005bcc:	bd38      	pop	{r3, r4, r5, pc}
 8005bce:	bf00      	nop
 8005bd0:	200019c8 	.word	0x200019c8

08005bd4 <_malloc_r>:
 8005bd4:	b570      	push	{r4, r5, r6, lr}
 8005bd6:	1ccd      	adds	r5, r1, #3
 8005bd8:	f025 0503 	bic.w	r5, r5, #3
 8005bdc:	3508      	adds	r5, #8
 8005bde:	2d0c      	cmp	r5, #12
 8005be0:	bf38      	it	cc
 8005be2:	250c      	movcc	r5, #12
 8005be4:	2d00      	cmp	r5, #0
 8005be6:	4606      	mov	r6, r0
 8005be8:	db01      	blt.n	8005bee <_malloc_r+0x1a>
 8005bea:	42a9      	cmp	r1, r5
 8005bec:	d903      	bls.n	8005bf6 <_malloc_r+0x22>
 8005bee:	230c      	movs	r3, #12
 8005bf0:	6033      	str	r3, [r6, #0]
 8005bf2:	2000      	movs	r0, #0
 8005bf4:	bd70      	pop	{r4, r5, r6, pc}
 8005bf6:	f000 f87d 	bl	8005cf4 <__malloc_lock>
 8005bfa:	4a21      	ldr	r2, [pc, #132]	; (8005c80 <_malloc_r+0xac>)
 8005bfc:	6814      	ldr	r4, [r2, #0]
 8005bfe:	4621      	mov	r1, r4
 8005c00:	b991      	cbnz	r1, 8005c28 <_malloc_r+0x54>
 8005c02:	4c20      	ldr	r4, [pc, #128]	; (8005c84 <_malloc_r+0xb0>)
 8005c04:	6823      	ldr	r3, [r4, #0]
 8005c06:	b91b      	cbnz	r3, 8005c10 <_malloc_r+0x3c>
 8005c08:	4630      	mov	r0, r6
 8005c0a:	f000 f863 	bl	8005cd4 <_sbrk_r>
 8005c0e:	6020      	str	r0, [r4, #0]
 8005c10:	4629      	mov	r1, r5
 8005c12:	4630      	mov	r0, r6
 8005c14:	f000 f85e 	bl	8005cd4 <_sbrk_r>
 8005c18:	1c43      	adds	r3, r0, #1
 8005c1a:	d124      	bne.n	8005c66 <_malloc_r+0x92>
 8005c1c:	230c      	movs	r3, #12
 8005c1e:	4630      	mov	r0, r6
 8005c20:	6033      	str	r3, [r6, #0]
 8005c22:	f000 f868 	bl	8005cf6 <__malloc_unlock>
 8005c26:	e7e4      	b.n	8005bf2 <_malloc_r+0x1e>
 8005c28:	680b      	ldr	r3, [r1, #0]
 8005c2a:	1b5b      	subs	r3, r3, r5
 8005c2c:	d418      	bmi.n	8005c60 <_malloc_r+0x8c>
 8005c2e:	2b0b      	cmp	r3, #11
 8005c30:	d90f      	bls.n	8005c52 <_malloc_r+0x7e>
 8005c32:	600b      	str	r3, [r1, #0]
 8005c34:	18cc      	adds	r4, r1, r3
 8005c36:	50cd      	str	r5, [r1, r3]
 8005c38:	4630      	mov	r0, r6
 8005c3a:	f000 f85c 	bl	8005cf6 <__malloc_unlock>
 8005c3e:	f104 000b 	add.w	r0, r4, #11
 8005c42:	1d23      	adds	r3, r4, #4
 8005c44:	f020 0007 	bic.w	r0, r0, #7
 8005c48:	1ac3      	subs	r3, r0, r3
 8005c4a:	d0d3      	beq.n	8005bf4 <_malloc_r+0x20>
 8005c4c:	425a      	negs	r2, r3
 8005c4e:	50e2      	str	r2, [r4, r3]
 8005c50:	e7d0      	b.n	8005bf4 <_malloc_r+0x20>
 8005c52:	684b      	ldr	r3, [r1, #4]
 8005c54:	428c      	cmp	r4, r1
 8005c56:	bf16      	itet	ne
 8005c58:	6063      	strne	r3, [r4, #4]
 8005c5a:	6013      	streq	r3, [r2, #0]
 8005c5c:	460c      	movne	r4, r1
 8005c5e:	e7eb      	b.n	8005c38 <_malloc_r+0x64>
 8005c60:	460c      	mov	r4, r1
 8005c62:	6849      	ldr	r1, [r1, #4]
 8005c64:	e7cc      	b.n	8005c00 <_malloc_r+0x2c>
 8005c66:	1cc4      	adds	r4, r0, #3
 8005c68:	f024 0403 	bic.w	r4, r4, #3
 8005c6c:	42a0      	cmp	r0, r4
 8005c6e:	d005      	beq.n	8005c7c <_malloc_r+0xa8>
 8005c70:	1a21      	subs	r1, r4, r0
 8005c72:	4630      	mov	r0, r6
 8005c74:	f000 f82e 	bl	8005cd4 <_sbrk_r>
 8005c78:	3001      	adds	r0, #1
 8005c7a:	d0cf      	beq.n	8005c1c <_malloc_r+0x48>
 8005c7c:	6025      	str	r5, [r4, #0]
 8005c7e:	e7db      	b.n	8005c38 <_malloc_r+0x64>
 8005c80:	200019c8 	.word	0x200019c8
 8005c84:	200019cc 	.word	0x200019cc

08005c88 <_realloc_r>:
 8005c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8a:	4607      	mov	r7, r0
 8005c8c:	4614      	mov	r4, r2
 8005c8e:	460e      	mov	r6, r1
 8005c90:	b921      	cbnz	r1, 8005c9c <_realloc_r+0x14>
 8005c92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005c96:	4611      	mov	r1, r2
 8005c98:	f7ff bf9c 	b.w	8005bd4 <_malloc_r>
 8005c9c:	b922      	cbnz	r2, 8005ca8 <_realloc_r+0x20>
 8005c9e:	f7ff ff4d 	bl	8005b3c <_free_r>
 8005ca2:	4625      	mov	r5, r4
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ca8:	f000 f826 	bl	8005cf8 <_malloc_usable_size_r>
 8005cac:	42a0      	cmp	r0, r4
 8005cae:	d20f      	bcs.n	8005cd0 <_realloc_r+0x48>
 8005cb0:	4621      	mov	r1, r4
 8005cb2:	4638      	mov	r0, r7
 8005cb4:	f7ff ff8e 	bl	8005bd4 <_malloc_r>
 8005cb8:	4605      	mov	r5, r0
 8005cba:	2800      	cmp	r0, #0
 8005cbc:	d0f2      	beq.n	8005ca4 <_realloc_r+0x1c>
 8005cbe:	4631      	mov	r1, r6
 8005cc0:	4622      	mov	r2, r4
 8005cc2:	f7ff fc05 	bl	80054d0 <memcpy>
 8005cc6:	4631      	mov	r1, r6
 8005cc8:	4638      	mov	r0, r7
 8005cca:	f7ff ff37 	bl	8005b3c <_free_r>
 8005cce:	e7e9      	b.n	8005ca4 <_realloc_r+0x1c>
 8005cd0:	4635      	mov	r5, r6
 8005cd2:	e7e7      	b.n	8005ca4 <_realloc_r+0x1c>

08005cd4 <_sbrk_r>:
 8005cd4:	b538      	push	{r3, r4, r5, lr}
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	4c05      	ldr	r4, [pc, #20]	; (8005cf0 <_sbrk_r+0x1c>)
 8005cda:	4605      	mov	r5, r0
 8005cdc:	4608      	mov	r0, r1
 8005cde:	6023      	str	r3, [r4, #0]
 8005ce0:	f7fb f904 	bl	8000eec <_sbrk>
 8005ce4:	1c43      	adds	r3, r0, #1
 8005ce6:	d102      	bne.n	8005cee <_sbrk_r+0x1a>
 8005ce8:	6823      	ldr	r3, [r4, #0]
 8005cea:	b103      	cbz	r3, 8005cee <_sbrk_r+0x1a>
 8005cec:	602b      	str	r3, [r5, #0]
 8005cee:	bd38      	pop	{r3, r4, r5, pc}
 8005cf0:	20001b28 	.word	0x20001b28

08005cf4 <__malloc_lock>:
 8005cf4:	4770      	bx	lr

08005cf6 <__malloc_unlock>:
 8005cf6:	4770      	bx	lr

08005cf8 <_malloc_usable_size_r>:
 8005cf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cfc:	1f18      	subs	r0, r3, #4
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	bfbc      	itt	lt
 8005d02:	580b      	ldrlt	r3, [r1, r0]
 8005d04:	18c0      	addlt	r0, r0, r3
 8005d06:	4770      	bx	lr

08005d08 <_init>:
 8005d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d0a:	bf00      	nop
 8005d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d0e:	bc08      	pop	{r3}
 8005d10:	469e      	mov	lr, r3
 8005d12:	4770      	bx	lr

08005d14 <_fini>:
 8005d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d16:	bf00      	nop
 8005d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d1a:	bc08      	pop	{r3}
 8005d1c:	469e      	mov	lr, r3
 8005d1e:	4770      	bx	lr
