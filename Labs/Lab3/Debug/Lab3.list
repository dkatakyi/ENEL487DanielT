
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ff8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08002104  08002104  00012104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002280  08002280  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08002280  08002280  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002280  08002280  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002280  08002280  00012280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002284  08002284  00012284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002288  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  2000001c  080022a4  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  080022a4  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006f29  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015ae  00000000  00000000  00026f6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000690  00000000  00000000  00028520  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005d8  00000000  00000000  00028bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001725c  00000000  00000000  00029188  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006450  00000000  00000000  000403e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00081da5  00000000  00000000  00046834  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c85d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001930  00000000  00000000  000c8654  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	080020ec 	.word	0x080020ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	080020ec 	.word	0x080020ec

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <isCompleteLine>:

	return "\nWelcome to the CLI!\r\n";
}

bool isCompleteLine(char recBuffer[10])
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	//if enter was hit, then it is a complete line, else it isnt
	if(recBuffer[0] == '\r')
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	781b      	ldrb	r3, [r3, #0]
 8000168:	2b0d      	cmp	r3, #13
 800016a:	d101      	bne.n	8000170 <isCompleteLine+0x14>
	{
		return true;
 800016c:	2301      	movs	r3, #1
 800016e:	e000      	b.n	8000172 <isCompleteLine+0x16>
	}
	else
	{
		return false;
 8000170:	2300      	movs	r3, #0
	}
}
 8000172:	4618      	mov	r0, r3
 8000174:	370c      	adds	r7, #12
 8000176:	46bd      	mov	sp, r7
 8000178:	bc80      	pop	{r7}
 800017a:	4770      	bx	lr

0800017c <copyCharTo>:

void copyCharTo(char recBuffer[10], char s[20], int coun)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b084      	sub	sp, #16
 8000180:	af00      	add	r7, sp, #0
 8000182:	60f8      	str	r0, [r7, #12]
 8000184:	60b9      	str	r1, [r7, #8]
 8000186:	607a      	str	r2, [r7, #4]

		  if(recBuffer[0] == '\b')
 8000188:	68fb      	ldr	r3, [r7, #12]
 800018a:	781b      	ldrb	r3, [r3, #0]
 800018c:	2b08      	cmp	r3, #8
 800018e:	d103      	bne.n	8000198 <copyCharTo+0x1c>
		  {
			  printString("\b \b");
 8000190:	4808      	ldr	r0, [pc, #32]	; (80001b4 <copyCharTo+0x38>)
 8000192:	f000 f8f7 	bl	8000384 <printString>
		  {
			  s[coun] = recBuffer[0];
			  printString(recBuffer);

		  }
}
 8000196:	e008      	b.n	80001aa <copyCharTo+0x2e>
			  s[coun] = recBuffer[0];
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	68ba      	ldr	r2, [r7, #8]
 800019c:	4413      	add	r3, r2
 800019e:	68fa      	ldr	r2, [r7, #12]
 80001a0:	7812      	ldrb	r2, [r2, #0]
 80001a2:	701a      	strb	r2, [r3, #0]
			  printString(recBuffer);
 80001a4:	68f8      	ldr	r0, [r7, #12]
 80001a6:	f000 f8ed 	bl	8000384 <printString>
}
 80001aa:	bf00      	nop
 80001ac:	3710      	adds	r7, #16
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bd80      	pop	{r7, pc}
 80001b2:	bf00      	nop
 80001b4:	0800211c 	.word	0x0800211c

080001b8 <executeCommand>:

void executeCommand(char recBuffer[20])
{
 80001b8:	b5b0      	push	{r4, r5, r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
	  if(recBuffer[0] == 'h' && recBuffer[1] == 'e' && recBuffer[2] == 'l' && recBuffer[3] == 'p' && recBuffer[4] == '\r')
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	781b      	ldrb	r3, [r3, #0]
 80001c4:	2b68      	cmp	r3, #104	; 0x68
 80001c6:	d11d      	bne.n	8000204 <executeCommand+0x4c>
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	3301      	adds	r3, #1
 80001cc:	781b      	ldrb	r3, [r3, #0]
 80001ce:	2b65      	cmp	r3, #101	; 0x65
 80001d0:	d118      	bne.n	8000204 <executeCommand+0x4c>
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	3302      	adds	r3, #2
 80001d6:	781b      	ldrb	r3, [r3, #0]
 80001d8:	2b6c      	cmp	r3, #108	; 0x6c
 80001da:	d113      	bne.n	8000204 <executeCommand+0x4c>
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	3303      	adds	r3, #3
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	2b70      	cmp	r3, #112	; 0x70
 80001e4:	d10e      	bne.n	8000204 <executeCommand+0x4c>
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	3304      	adds	r3, #4
 80001ea:	781b      	ldrb	r3, [r3, #0]
 80001ec:	2b0d      	cmp	r3, #13
 80001ee:	d109      	bne.n	8000204 <executeCommand+0x4c>
	  {
		  printString("\n1. \"ledon\" turns the green LED on\r\n");
 80001f0:	485b      	ldr	r0, [pc, #364]	; (8000360 <executeCommand+0x1a8>)
 80001f2:	f000 f8c7 	bl	8000384 <printString>
		  printString("\n2. \"ledoff\" turns the green LED off\r\n");
 80001f6:	485b      	ldr	r0, [pc, #364]	; (8000364 <executeCommand+0x1ac>)
 80001f8:	f000 f8c4 	bl	8000384 <printString>
		  printString("\n3. \"ledquery\" returns the state of the green LED\r\n");
 80001fc:	485a      	ldr	r0, [pc, #360]	; (8000368 <executeCommand+0x1b0>)
 80001fe:	f000 f8c1 	bl	8000384 <printString>
 8000202:	e0a8      	b.n	8000356 <executeCommand+0x19e>

	  }
	  else if(recBuffer[0] == 'l' && recBuffer[1] == 'e' && recBuffer[2] == 'd' && recBuffer[3] == 'o' && recBuffer[4] == 'n' && recBuffer[5] == '\r')
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	2b6c      	cmp	r3, #108	; 0x6c
 800020a:	d121      	bne.n	8000250 <executeCommand+0x98>
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	3301      	adds	r3, #1
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	2b65      	cmp	r3, #101	; 0x65
 8000214:	d11c      	bne.n	8000250 <executeCommand+0x98>
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	3302      	adds	r3, #2
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	2b64      	cmp	r3, #100	; 0x64
 800021e:	d117      	bne.n	8000250 <executeCommand+0x98>
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	3303      	adds	r3, #3
 8000224:	781b      	ldrb	r3, [r3, #0]
 8000226:	2b6f      	cmp	r3, #111	; 0x6f
 8000228:	d112      	bne.n	8000250 <executeCommand+0x98>
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	3304      	adds	r3, #4
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	2b6e      	cmp	r3, #110	; 0x6e
 8000232:	d10d      	bne.n	8000250 <executeCommand+0x98>
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	3305      	adds	r3, #5
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	2b0d      	cmp	r3, #13
 800023c:	d108      	bne.n	8000250 <executeCommand+0x98>
	  {
		  printString("\nDone!\r\n");
 800023e:	484b      	ldr	r0, [pc, #300]	; (800036c <executeCommand+0x1b4>)
 8000240:	f000 f8a0 	bl	8000384 <printString>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000244:	2201      	movs	r2, #1
 8000246:	2120      	movs	r1, #32
 8000248:	4849      	ldr	r0, [pc, #292]	; (8000370 <executeCommand+0x1b8>)
 800024a:	f000 feb0 	bl	8000fae <HAL_GPIO_WritePin>
 800024e:	e082      	b.n	8000356 <executeCommand+0x19e>
	  }
	  else if(recBuffer[0] == 'l' && recBuffer[1] == 'e' && recBuffer[2] == 'd' && recBuffer[3] == 'o' && recBuffer[4] == 'f' && recBuffer[5] == 'f' && recBuffer[6] == '\r')
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	2b6c      	cmp	r3, #108	; 0x6c
 8000256:	d126      	bne.n	80002a6 <executeCommand+0xee>
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	3301      	adds	r3, #1
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2b65      	cmp	r3, #101	; 0x65
 8000260:	d121      	bne.n	80002a6 <executeCommand+0xee>
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	3302      	adds	r3, #2
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	2b64      	cmp	r3, #100	; 0x64
 800026a:	d11c      	bne.n	80002a6 <executeCommand+0xee>
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	3303      	adds	r3, #3
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	2b6f      	cmp	r3, #111	; 0x6f
 8000274:	d117      	bne.n	80002a6 <executeCommand+0xee>
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	3304      	adds	r3, #4
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	2b66      	cmp	r3, #102	; 0x66
 800027e:	d112      	bne.n	80002a6 <executeCommand+0xee>
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	3305      	adds	r3, #5
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	2b66      	cmp	r3, #102	; 0x66
 8000288:	d10d      	bne.n	80002a6 <executeCommand+0xee>
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	3306      	adds	r3, #6
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	2b0d      	cmp	r3, #13
 8000292:	d108      	bne.n	80002a6 <executeCommand+0xee>
	  {
		  printString("\nDone!\r\n");
 8000294:	4835      	ldr	r0, [pc, #212]	; (800036c <executeCommand+0x1b4>)
 8000296:	f000 f875 	bl	8000384 <printString>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800029a:	2200      	movs	r2, #0
 800029c:	2120      	movs	r1, #32
 800029e:	4834      	ldr	r0, [pc, #208]	; (8000370 <executeCommand+0x1b8>)
 80002a0:	f000 fe85 	bl	8000fae <HAL_GPIO_WritePin>
 80002a4:	e057      	b.n	8000356 <executeCommand+0x19e>
	  }
	  else if(recBuffer[0] == 'l' && recBuffer[1] == 'e' && recBuffer[2] == 'd' && recBuffer[3] == 'q' && recBuffer[4] == 'u' && recBuffer[5] == 'e' && recBuffer[6] == 'r' && recBuffer[7] == 'y' && recBuffer[8] == '\r')
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	2b6c      	cmp	r3, #108	; 0x6c
 80002ac:	d136      	bne.n	800031c <executeCommand+0x164>
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	3301      	adds	r3, #1
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	2b65      	cmp	r3, #101	; 0x65
 80002b6:	d131      	bne.n	800031c <executeCommand+0x164>
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	3302      	adds	r3, #2
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	2b64      	cmp	r3, #100	; 0x64
 80002c0:	d12c      	bne.n	800031c <executeCommand+0x164>
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	3303      	adds	r3, #3
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	2b71      	cmp	r3, #113	; 0x71
 80002ca:	d127      	bne.n	800031c <executeCommand+0x164>
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	3304      	adds	r3, #4
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b75      	cmp	r3, #117	; 0x75
 80002d4:	d122      	bne.n	800031c <executeCommand+0x164>
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	3305      	adds	r3, #5
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	2b65      	cmp	r3, #101	; 0x65
 80002de:	d11d      	bne.n	800031c <executeCommand+0x164>
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	3306      	adds	r3, #6
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	2b72      	cmp	r3, #114	; 0x72
 80002e8:	d118      	bne.n	800031c <executeCommand+0x164>
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	3307      	adds	r3, #7
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	2b79      	cmp	r3, #121	; 0x79
 80002f2:	d113      	bne.n	800031c <executeCommand+0x164>
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	3308      	adds	r3, #8
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	2b0d      	cmp	r3, #13
 80002fc:	d10e      	bne.n	800031c <executeCommand+0x164>
	  {
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0x1)
 80002fe:	2120      	movs	r1, #32
 8000300:	481b      	ldr	r0, [pc, #108]	; (8000370 <executeCommand+0x1b8>)
 8000302:	f000 fe3d 	bl	8000f80 <HAL_GPIO_ReadPin>
 8000306:	4603      	mov	r3, r0
 8000308:	2b01      	cmp	r3, #1
 800030a:	d103      	bne.n	8000314 <executeCommand+0x15c>
		  {
			  printString("\nThe LED is on!\r\n");
 800030c:	4819      	ldr	r0, [pc, #100]	; (8000374 <executeCommand+0x1bc>)
 800030e:	f000 f839 	bl	8000384 <printString>
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0x1)
 8000312:	e020      	b.n	8000356 <executeCommand+0x19e>
		  }
		  else
		  {
			  printString("\nThe LED is off!\r\n");
 8000314:	4818      	ldr	r0, [pc, #96]	; (8000378 <executeCommand+0x1c0>)
 8000316:	f000 f835 	bl	8000384 <printString>
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0x1)
 800031a:	e01c      	b.n	8000356 <executeCommand+0x19e>
		  }

	  }
	  else if(recBuffer[0] == '\r')
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	2b0d      	cmp	r3, #13
 8000322:	d018      	beq.n	8000356 <executeCommand+0x19e>
	  {

	  }
	  else
	  {
		  strcpy((char *)recBuffer, "\nError. Try again.\r\n");
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	4a15      	ldr	r2, [pc, #84]	; (800037c <executeCommand+0x1c4>)
 8000328:	461d      	mov	r5, r3
 800032a:	4614      	mov	r4, r2
 800032c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800032e:	6028      	str	r0, [r5, #0]
 8000330:	6069      	str	r1, [r5, #4]
 8000332:	60aa      	str	r2, [r5, #8]
 8000334:	60eb      	str	r3, [r5, #12]
 8000336:	6820      	ldr	r0, [r4, #0]
 8000338:	6128      	str	r0, [r5, #16]
 800033a:	7923      	ldrb	r3, [r4, #4]
 800033c:	752b      	strb	r3, [r5, #20]
		  HAL_UART_Transmit(&huart3, recBuffer, strlen((char *)recBuffer), 1000);
 800033e:	6878      	ldr	r0, [r7, #4]
 8000340:	f7ff ff04 	bl	800014c <strlen>
 8000344:	4603      	mov	r3, r0
 8000346:	b29a      	uxth	r2, r3
 8000348:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800034c:	6879      	ldr	r1, [r7, #4]
 800034e:	480c      	ldr	r0, [pc, #48]	; (8000380 <executeCommand+0x1c8>)
 8000350:	f001 faaf 	bl	80018b2 <HAL_UART_Transmit>
	  }
}
 8000354:	e7ff      	b.n	8000356 <executeCommand+0x19e>
 8000356:	bf00      	nop
 8000358:	3708      	adds	r7, #8
 800035a:	46bd      	mov	sp, r7
 800035c:	bdb0      	pop	{r4, r5, r7, pc}
 800035e:	bf00      	nop
 8000360:	08002120 	.word	0x08002120
 8000364:	08002148 	.word	0x08002148
 8000368:	08002170 	.word	0x08002170
 800036c:	080021a4 	.word	0x080021a4
 8000370:	40010800 	.word	0x40010800
 8000374:	080021b0 	.word	0x080021b0
 8000378:	080021c4 	.word	0x080021c4
 800037c:	080021d8 	.word	0x080021d8
 8000380:	20000054 	.word	0x20000054

08000384 <printString>:

void printString(const char* mess)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b086      	sub	sp, #24
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
	int i = 0;
 800038c:	2300      	movs	r3, #0
 800038e:	617b      	str	r3, [r7, #20]
	HAL_StatusTypeDef  st;

	while(huart3.gState == HAL_UART_STATE_BUSY_TX){}
 8000390:	bf00      	nop
 8000392:	4b16      	ldr	r3, [pc, #88]	; (80003ec <printString+0x68>)
 8000394:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000398:	b2db      	uxtb	r3, r3
 800039a:	2b21      	cmp	r3, #33	; 0x21
 800039c:	d0f9      	beq.n	8000392 <printString+0xe>

	for(const char* p = mess; *p; ++p)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	613b      	str	r3, [r7, #16]
 80003a2:	e00c      	b.n	80003be <printString+0x3a>
	{
		cliBufferTX[i] = *p;
 80003a4:	693b      	ldr	r3, [r7, #16]
 80003a6:	7819      	ldrb	r1, [r3, #0]
 80003a8:	4a11      	ldr	r2, [pc, #68]	; (80003f0 <printString+0x6c>)
 80003aa:	697b      	ldr	r3, [r7, #20]
 80003ac:	4413      	add	r3, r2
 80003ae:	460a      	mov	r2, r1
 80003b0:	701a      	strb	r2, [r3, #0]
		i++;
 80003b2:	697b      	ldr	r3, [r7, #20]
 80003b4:	3301      	adds	r3, #1
 80003b6:	617b      	str	r3, [r7, #20]
	for(const char* p = mess; *p; ++p)
 80003b8:	693b      	ldr	r3, [r7, #16]
 80003ba:	3301      	adds	r3, #1
 80003bc:	613b      	str	r3, [r7, #16]
 80003be:	693b      	ldr	r3, [r7, #16]
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d1ee      	bne.n	80003a4 <printString+0x20>
	}

	st = HAL_UART_Transmit(&huart3, cliBufferTX, i, 1000);
 80003c6:	697b      	ldr	r3, [r7, #20]
 80003c8:	b29a      	uxth	r2, r3
 80003ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003ce:	4908      	ldr	r1, [pc, #32]	; (80003f0 <printString+0x6c>)
 80003d0:	4806      	ldr	r0, [pc, #24]	; (80003ec <printString+0x68>)
 80003d2:	f001 fa6e 	bl	80018b2 <HAL_UART_Transmit>
 80003d6:	4603      	mov	r3, r0
 80003d8:	73fb      	strb	r3, [r7, #15]
	if(st != HAL_OK)
 80003da:	7bfb      	ldrb	r3, [r7, #15]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <printString+0x60>
	{
		Error_Handler();
 80003e0:	f000 f96c 	bl	80006bc <Error_Handler>
	}

}
 80003e4:	bf00      	nop
 80003e6:	3718      	adds	r7, #24
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	20000054 	.word	0x20000054
 80003f0:	20000094 	.word	0x20000094

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f8:	f000 fa60 	bl	80008bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fc:	f000 f852 	bl	80004a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000400:	f000 f8b6 	bl	8000570 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000404:	f000 f88a 	bl	800051c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */


  //Print out Welcome Message
  printString(CLEAR_SCREEN);
 8000408:	4b1c      	ldr	r3, [pc, #112]	; (800047c <main+0x88>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4618      	mov	r0, r3
 800040e:	f7ff ffb9 	bl	8000384 <printString>
  printString(GO_TO_TOP);
 8000412:	4b1b      	ldr	r3, [pc, #108]	; (8000480 <main+0x8c>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4618      	mov	r0, r3
 8000418:	f7ff ffb4 	bl	8000384 <printString>
  printString("Welcome to the CLI!\r\n");
 800041c:	4819      	ldr	r0, [pc, #100]	; (8000484 <main+0x90>)
 800041e:	f7ff ffb1 	bl	8000384 <printString>

  HAL_Delay(2000);
 8000422:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000426:	f000 faab 	bl	8000980 <HAL_Delay>

  printString(CLEAR_SCREEN);
 800042a:	4b14      	ldr	r3, [pc, #80]	; (800047c <main+0x88>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4618      	mov	r0, r3
 8000430:	f7ff ffa8 	bl	8000384 <printString>
  printString(GO_TO_TOP);
 8000434:	4b12      	ldr	r3, [pc, #72]	; (8000480 <main+0x8c>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4618      	mov	r0, r3
 800043a:	f7ff ffa3 	bl	8000384 <printString>
  printString("Test");
 800043e:	4812      	ldr	r0, [pc, #72]	; (8000488 <main+0x94>)
 8000440:	f7ff ffa0 	bl	8000384 <printString>
  printString(SCROLL_WINDOW);
 8000444:	4b11      	ldr	r3, [pc, #68]	; (800048c <main+0x98>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff ff9b 	bl	8000384 <printString>
  printString(GO_TO_SCROLL);
 800044e:	4b10      	ldr	r3, [pc, #64]	; (8000490 <main+0x9c>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4618      	mov	r0, r3
 8000454:	f7ff ff96 	bl	8000384 <printString>

  //Start the process of receiving data
  HAL_UART_Receive_IT(&huart3, cliBufferRX, 1);
 8000458:	2201      	movs	r2, #1
 800045a:	490e      	ldr	r1, [pc, #56]	; (8000494 <main+0xa0>)
 800045c:	480e      	ldr	r0, [pc, #56]	; (8000498 <main+0xa4>)
 800045e:	f001 faba 	bl	80019d6 <HAL_UART_Receive_IT>
  printString("\nEnter a command for the LED:\r\n");
 8000462:	480e      	ldr	r0, [pc, #56]	; (800049c <main+0xa8>)
 8000464:	f7ff ff8e 	bl	8000384 <printString>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	HAL_Delay(1000);
 8000468:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800046c:	f000 fa88 	bl	8000980 <HAL_Delay>
	counter++;
 8000470:	4b0b      	ldr	r3, [pc, #44]	; (80004a0 <main+0xac>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	3301      	adds	r3, #1
 8000476:	4a0a      	ldr	r2, [pc, #40]	; (80004a0 <main+0xac>)
 8000478:	6013      	str	r3, [r2, #0]
	HAL_Delay(1000);
 800047a:	e7f5      	b.n	8000468 <main+0x74>
 800047c:	20000000 	.word	0x20000000
 8000480:	2000000c 	.word	0x2000000c
 8000484:	08002210 	.word	0x08002210
 8000488:	08002228 	.word	0x08002228
 800048c:	20000004 	.word	0x20000004
 8000490:	20000008 	.word	0x20000008
 8000494:	200000e0 	.word	0x200000e0
 8000498:	20000054 	.word	0x20000054
 800049c:	08002230 	.word	0x08002230
 80004a0:	2000003c 	.word	0x2000003c

080004a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b090      	sub	sp, #64	; 0x40
 80004a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004aa:	f107 0318 	add.w	r3, r7, #24
 80004ae:	2228      	movs	r2, #40	; 0x28
 80004b0:	2100      	movs	r1, #0
 80004b2:	4618      	mov	r0, r3
 80004b4:	f001 fe0a 	bl	80020cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b8:	1d3b      	adds	r3, r7, #4
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
 80004be:	605a      	str	r2, [r3, #4]
 80004c0:	609a      	str	r2, [r3, #8]
 80004c2:	60da      	str	r2, [r3, #12]
 80004c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004c6:	2302      	movs	r3, #2
 80004c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004ca:	2301      	movs	r3, #1
 80004cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004ce:	2310      	movs	r3, #16
 80004d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004d2:	2300      	movs	r3, #0
 80004d4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d6:	f107 0318 	add.w	r3, r7, #24
 80004da:	4618      	mov	r0, r3
 80004dc:	f000 fd80 	bl	8000fe0 <HAL_RCC_OscConfig>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <SystemClock_Config+0x46>
  {
    Error_Handler();
 80004e6:	f000 f8e9 	bl	80006bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ea:	230f      	movs	r3, #15
 80004ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004ee:	2300      	movs	r3, #0
 80004f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004f2:	2300      	movs	r3, #0
 80004f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004f6:	2300      	movs	r3, #0
 80004f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004fa:	2300      	movs	r3, #0
 80004fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004fe:	1d3b      	adds	r3, r7, #4
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f000 ffec 	bl	80014e0 <HAL_RCC_ClockConfig>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800050e:	f000 f8d5 	bl	80006bc <Error_Handler>
  }
}
 8000512:	bf00      	nop
 8000514:	3740      	adds	r7, #64	; 0x40
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
	...

0800051c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000520:	4b11      	ldr	r3, [pc, #68]	; (8000568 <MX_USART3_UART_Init+0x4c>)
 8000522:	4a12      	ldr	r2, [pc, #72]	; (800056c <MX_USART3_UART_Init+0x50>)
 8000524:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000526:	4b10      	ldr	r3, [pc, #64]	; (8000568 <MX_USART3_UART_Init+0x4c>)
 8000528:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800052c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800052e:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <MX_USART3_UART_Init+0x4c>)
 8000530:	2200      	movs	r2, #0
 8000532:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000534:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <MX_USART3_UART_Init+0x4c>)
 8000536:	2200      	movs	r2, #0
 8000538:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800053a:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <MX_USART3_UART_Init+0x4c>)
 800053c:	2200      	movs	r2, #0
 800053e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000540:	4b09      	ldr	r3, [pc, #36]	; (8000568 <MX_USART3_UART_Init+0x4c>)
 8000542:	220c      	movs	r2, #12
 8000544:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000546:	4b08      	ldr	r3, [pc, #32]	; (8000568 <MX_USART3_UART_Init+0x4c>)
 8000548:	2200      	movs	r2, #0
 800054a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <MX_USART3_UART_Init+0x4c>)
 800054e:	2200      	movs	r2, #0
 8000550:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000552:	4805      	ldr	r0, [pc, #20]	; (8000568 <MX_USART3_UART_Init+0x4c>)
 8000554:	f001 f960 	bl	8001818 <HAL_UART_Init>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800055e:	f000 f8ad 	bl	80006bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	20000054 	.word	0x20000054
 800056c:	40004800 	.word	0x40004800

08000570 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000576:	f107 0308 	add.w	r3, r7, #8
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000584:	4b17      	ldr	r3, [pc, #92]	; (80005e4 <MX_GPIO_Init+0x74>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	4a16      	ldr	r2, [pc, #88]	; (80005e4 <MX_GPIO_Init+0x74>)
 800058a:	f043 0304 	orr.w	r3, r3, #4
 800058e:	6193      	str	r3, [r2, #24]
 8000590:	4b14      	ldr	r3, [pc, #80]	; (80005e4 <MX_GPIO_Init+0x74>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	f003 0304 	and.w	r3, r3, #4
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059c:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <MX_GPIO_Init+0x74>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	4a10      	ldr	r2, [pc, #64]	; (80005e4 <MX_GPIO_Init+0x74>)
 80005a2:	f043 0310 	orr.w	r3, r3, #16
 80005a6:	6193      	str	r3, [r2, #24]
 80005a8:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <MX_GPIO_Init+0x74>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	f003 0310 	and.w	r3, r3, #16
 80005b0:	603b      	str	r3, [r7, #0]
 80005b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2120      	movs	r1, #32
 80005b8:	480b      	ldr	r0, [pc, #44]	; (80005e8 <MX_GPIO_Init+0x78>)
 80005ba:	f000 fcf8 	bl	8000fae <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80005be:	2320      	movs	r3, #32
 80005c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c2:	2301      	movs	r3, #1
 80005c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ca:	2302      	movs	r3, #2
 80005cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ce:	f107 0308 	add.w	r3, r7, #8
 80005d2:	4619      	mov	r1, r3
 80005d4:	4804      	ldr	r0, [pc, #16]	; (80005e8 <MX_GPIO_Init+0x78>)
 80005d6:	f000 fb79 	bl	8000ccc <HAL_GPIO_Init>

}
 80005da:	bf00      	nop
 80005dc:	3718      	adds	r7, #24
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40021000 	.word	0x40021000
 80005e8:	40010800 	.word	0x40010800

080005ec <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *husart)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]

	//HAL_UART_Transmit(&huart3, cliBufferRX, 1, 1000);
	copyCharTo(cliBufferRX, save, j);
 80005f4:	4b2a      	ldr	r3, [pc, #168]	; (80006a0 <HAL_UART_RxCpltCallback+0xb4>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	461a      	mov	r2, r3
 80005fa:	492a      	ldr	r1, [pc, #168]	; (80006a4 <HAL_UART_RxCpltCallback+0xb8>)
 80005fc:	482a      	ldr	r0, [pc, #168]	; (80006a8 <HAL_UART_RxCpltCallback+0xbc>)
 80005fe:	f7ff fdbd 	bl	800017c <copyCharTo>

	if(cliBufferRX[0] == '\b')
 8000602:	4b29      	ldr	r3, [pc, #164]	; (80006a8 <HAL_UART_RxCpltCallback+0xbc>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b08      	cmp	r3, #8
 8000608:	d105      	bne.n	8000616 <HAL_UART_RxCpltCallback+0x2a>
	{
		j--;
 800060a:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <HAL_UART_RxCpltCallback+0xb4>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	3b01      	subs	r3, #1
 8000610:	4a23      	ldr	r2, [pc, #140]	; (80006a0 <HAL_UART_RxCpltCallback+0xb4>)
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	e004      	b.n	8000620 <HAL_UART_RxCpltCallback+0x34>
	}
	else
	{
		j++;
 8000616:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <HAL_UART_RxCpltCallback+0xb4>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	3301      	adds	r3, #1
 800061c:	4a20      	ldr	r2, [pc, #128]	; (80006a0 <HAL_UART_RxCpltCallback+0xb4>)
 800061e:	6013      	str	r3, [r2, #0]
	}

	if(isCompleteLine(cliBufferRX))
 8000620:	4821      	ldr	r0, [pc, #132]	; (80006a8 <HAL_UART_RxCpltCallback+0xbc>)
 8000622:	f7ff fd9b 	bl	800015c <isCompleteLine>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d028      	beq.n	800067e <HAL_UART_RxCpltCallback+0x92>
	{
		HAL_UART_Transmit(&huart3, "\r\n", 2, 1000);
 800062c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000630:	2202      	movs	r2, #2
 8000632:	491e      	ldr	r1, [pc, #120]	; (80006ac <HAL_UART_RxCpltCallback+0xc0>)
 8000634:	481e      	ldr	r0, [pc, #120]	; (80006b0 <HAL_UART_RxCpltCallback+0xc4>)
 8000636:	f001 f93c 	bl	80018b2 <HAL_UART_Transmit>
		strcpy((char *)cliBufferTX, save);
 800063a:	491a      	ldr	r1, [pc, #104]	; (80006a4 <HAL_UART_RxCpltCallback+0xb8>)
 800063c:	481d      	ldr	r0, [pc, #116]	; (80006b4 <HAL_UART_RxCpltCallback+0xc8>)
 800063e:	f001 fd4d 	bl	80020dc <strcpy>
		//HAL_UART_Transmit(&huart3, cliBufferTX, strlen((char *)cliBufferTX), 1000);

		executeCommand(save);
 8000642:	4818      	ldr	r0, [pc, #96]	; (80006a4 <HAL_UART_RxCpltCallback+0xb8>)
 8000644:	f7ff fdb8 	bl	80001b8 <executeCommand>
		HAL_UART_Transmit(&huart3, "\r\n", 2, 1000);
 8000648:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800064c:	2202      	movs	r2, #2
 800064e:	4917      	ldr	r1, [pc, #92]	; (80006ac <HAL_UART_RxCpltCallback+0xc0>)
 8000650:	4817      	ldr	r0, [pc, #92]	; (80006b0 <HAL_UART_RxCpltCallback+0xc4>)
 8000652:	f001 f92e 	bl	80018b2 <HAL_UART_Transmit>
		j = 0;
 8000656:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <HAL_UART_RxCpltCallback+0xb4>)
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < 20; i++)
 800065c:	2300      	movs	r3, #0
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	e007      	b.n	8000672 <HAL_UART_RxCpltCallback+0x86>
		{
			save[i] = NULL;
 8000662:	4a10      	ldr	r2, [pc, #64]	; (80006a4 <HAL_UART_RxCpltCallback+0xb8>)
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	4413      	add	r3, r2
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 20; i++)
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	3301      	adds	r3, #1
 8000670:	60fb      	str	r3, [r7, #12]
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	2b13      	cmp	r3, #19
 8000676:	ddf4      	ble.n	8000662 <HAL_UART_RxCpltCallback+0x76>
		}
		printString("\nEnter a command for the LED:\r\n");
 8000678:	480f      	ldr	r0, [pc, #60]	; (80006b8 <HAL_UART_RxCpltCallback+0xcc>)
 800067a:	f7ff fe83 	bl	8000384 <printString>
	}



	while(huart3.gState == HAL_UART_STATE_BUSY_RX){}
 800067e:	bf00      	nop
 8000680:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <HAL_UART_RxCpltCallback+0xc4>)
 8000682:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000686:	b2db      	uxtb	r3, r3
 8000688:	2b22      	cmp	r3, #34	; 0x22
 800068a:	d0f9      	beq.n	8000680 <HAL_UART_RxCpltCallback+0x94>

	HAL_UART_Receive_IT(&huart3, cliBufferRX, 1);
 800068c:	2201      	movs	r2, #1
 800068e:	4906      	ldr	r1, [pc, #24]	; (80006a8 <HAL_UART_RxCpltCallback+0xbc>)
 8000690:	4807      	ldr	r0, [pc, #28]	; (80006b0 <HAL_UART_RxCpltCallback+0xc4>)
 8000692:	f001 f9a0 	bl	80019d6 <HAL_UART_Receive_IT>

}
 8000696:	bf00      	nop
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000038 	.word	0x20000038
 80006a4:	200000cc 	.word	0x200000cc
 80006a8:	200000e0 	.word	0x200000e0
 80006ac:	08002250 	.word	0x08002250
 80006b0:	20000054 	.word	0x20000054
 80006b4:	20000094 	.word	0x20000094
 80006b8:	08002230 	.word	0x08002230

080006bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr

080006c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006ce:	4b15      	ldr	r3, [pc, #84]	; (8000724 <HAL_MspInit+0x5c>)
 80006d0:	699b      	ldr	r3, [r3, #24]
 80006d2:	4a14      	ldr	r2, [pc, #80]	; (8000724 <HAL_MspInit+0x5c>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6193      	str	r3, [r2, #24]
 80006da:	4b12      	ldr	r3, [pc, #72]	; (8000724 <HAL_MspInit+0x5c>)
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e6:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <HAL_MspInit+0x5c>)
 80006e8:	69db      	ldr	r3, [r3, #28]
 80006ea:	4a0e      	ldr	r2, [pc, #56]	; (8000724 <HAL_MspInit+0x5c>)
 80006ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f0:	61d3      	str	r3, [r2, #28]
 80006f2:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <HAL_MspInit+0x5c>)
 80006f4:	69db      	ldr	r3, [r3, #28]
 80006f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006fe:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <HAL_MspInit+0x60>)
 8000700:	685b      	ldr	r3, [r3, #4]
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	4a04      	ldr	r2, [pc, #16]	; (8000728 <HAL_MspInit+0x60>)
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800071a:	bf00      	nop
 800071c:	3714      	adds	r7, #20
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr
 8000724:	40021000 	.word	0x40021000
 8000728:	40010000 	.word	0x40010000

0800072c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a29      	ldr	r2, [pc, #164]	; (80007ec <HAL_UART_MspInit+0xc0>)
 8000748:	4293      	cmp	r3, r2
 800074a:	d14b      	bne.n	80007e4 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800074c:	4b28      	ldr	r3, [pc, #160]	; (80007f0 <HAL_UART_MspInit+0xc4>)
 800074e:	69db      	ldr	r3, [r3, #28]
 8000750:	4a27      	ldr	r2, [pc, #156]	; (80007f0 <HAL_UART_MspInit+0xc4>)
 8000752:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000756:	61d3      	str	r3, [r2, #28]
 8000758:	4b25      	ldr	r3, [pc, #148]	; (80007f0 <HAL_UART_MspInit+0xc4>)
 800075a:	69db      	ldr	r3, [r3, #28]
 800075c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000760:	613b      	str	r3, [r7, #16]
 8000762:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000764:	4b22      	ldr	r3, [pc, #136]	; (80007f0 <HAL_UART_MspInit+0xc4>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4a21      	ldr	r2, [pc, #132]	; (80007f0 <HAL_UART_MspInit+0xc4>)
 800076a:	f043 0310 	orr.w	r3, r3, #16
 800076e:	6193      	str	r3, [r2, #24]
 8000770:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <HAL_UART_MspInit+0xc4>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	f003 0310 	and.w	r3, r3, #16
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC11     ------> USART3_RX
    PC10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800077c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000782:	2300      	movs	r3, #0
 8000784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800078a:	f107 0314 	add.w	r3, r7, #20
 800078e:	4619      	mov	r1, r3
 8000790:	4818      	ldr	r0, [pc, #96]	; (80007f4 <HAL_UART_MspInit+0xc8>)
 8000792:	f000 fa9b 	bl	8000ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000796:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800079a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079c:	2302      	movs	r3, #2
 800079e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007a0:	2303      	movs	r3, #3
 80007a2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	4619      	mov	r1, r3
 80007aa:	4812      	ldr	r0, [pc, #72]	; (80007f4 <HAL_UART_MspInit+0xc8>)
 80007ac:	f000 fa8e 	bl	8000ccc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_PARTIAL();
 80007b0:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <HAL_UART_MspInit+0xcc>)
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
 80007b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
 80007be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
 80007c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c8:	f043 0310 	orr.w	r3, r3, #16
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
 80007ce:	4a0a      	ldr	r2, [pc, #40]	; (80007f8 <HAL_UART_MspInit+0xcc>)
 80007d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d2:	6053      	str	r3, [r2, #4]

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2100      	movs	r1, #0
 80007d8:	2027      	movs	r0, #39	; 0x27
 80007da:	f000 f9ca 	bl	8000b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80007de:	2027      	movs	r0, #39	; 0x27
 80007e0:	f000 f9e3 	bl	8000baa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80007e4:	bf00      	nop
 80007e6:	3728      	adds	r7, #40	; 0x28
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40004800 	.word	0x40004800
 80007f0:	40021000 	.word	0x40021000
 80007f4:	40011000 	.word	0x40011000
 80007f8:	40010000 	.word	0x40010000

080007fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr

08000808 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800080c:	e7fe      	b.n	800080c <HardFault_Handler+0x4>

0800080e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000812:	e7fe      	b.n	8000812 <MemManage_Handler+0x4>

08000814 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <BusFault_Handler+0x4>

0800081a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800081e:	e7fe      	b.n	800081e <UsageFault_Handler+0x4>

08000820 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr

0800082c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr

08000838 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr

08000844 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000848:	f000 f87e 	bl	8000948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}

08000850 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000854:	4802      	ldr	r0, [pc, #8]	; (8000860 <USART3_IRQHandler+0x10>)
 8000856:	f001 f913 	bl	8001a80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000054 	.word	0x20000054

08000864 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr

08000870 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000870:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000872:	e003      	b.n	800087c <LoopCopyDataInit>

08000874 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000874:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000876:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000878:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800087a:	3104      	adds	r1, #4

0800087c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800087c:	480a      	ldr	r0, [pc, #40]	; (80008a8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000880:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000882:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000884:	d3f6      	bcc.n	8000874 <CopyDataInit>
  ldr r2, =_sbss
 8000886:	4a0a      	ldr	r2, [pc, #40]	; (80008b0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000888:	e002      	b.n	8000890 <LoopFillZerobss>

0800088a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800088a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800088c:	f842 3b04 	str.w	r3, [r2], #4

08000890 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000892:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000894:	d3f9      	bcc.n	800088a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000896:	f7ff ffe5 	bl	8000864 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800089a:	f001 fbf3 	bl	8002084 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800089e:	f7ff fda9 	bl	80003f4 <main>
  bx lr
 80008a2:	4770      	bx	lr
  ldr r3, =_sidata
 80008a4:	08002288 	.word	0x08002288
  ldr r0, =_sdata
 80008a8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80008ac:	2000001c 	.word	0x2000001c
  ldr r2, =_sbss
 80008b0:	2000001c 	.word	0x2000001c
  ldr r3, = _ebss
 80008b4:	200000f0 	.word	0x200000f0

080008b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008b8:	e7fe      	b.n	80008b8 <ADC1_2_IRQHandler>
	...

080008bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008c0:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <HAL_Init+0x28>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a07      	ldr	r2, [pc, #28]	; (80008e4 <HAL_Init+0x28>)
 80008c6:	f043 0310 	orr.w	r3, r3, #16
 80008ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008cc:	2003      	movs	r0, #3
 80008ce:	f000 f945 	bl	8000b5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008d2:	2000      	movs	r0, #0
 80008d4:	f000 f808 	bl	80008e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008d8:	f7ff fef6 	bl	80006c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008dc:	2300      	movs	r3, #0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40022000 	.word	0x40022000

080008e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <HAL_InitTick+0x54>)
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <HAL_InitTick+0x58>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	4619      	mov	r1, r3
 80008fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000902:	fbb2 f3f3 	udiv	r3, r2, r3
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f95d 	bl	8000bc6 <HAL_SYSTICK_Config>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000912:	2301      	movs	r3, #1
 8000914:	e00e      	b.n	8000934 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2b0f      	cmp	r3, #15
 800091a:	d80a      	bhi.n	8000932 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800091c:	2200      	movs	r2, #0
 800091e:	6879      	ldr	r1, [r7, #4]
 8000920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000924:	f000 f925 	bl	8000b72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000928:	4a06      	ldr	r2, [pc, #24]	; (8000944 <HAL_InitTick+0x5c>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800092e:	2300      	movs	r3, #0
 8000930:	e000      	b.n	8000934 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000932:	2301      	movs	r3, #1
}
 8000934:	4618      	mov	r0, r3
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000010 	.word	0x20000010
 8000940:	20000018 	.word	0x20000018
 8000944:	20000014 	.word	0x20000014

08000948 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800094c:	4b05      	ldr	r3, [pc, #20]	; (8000964 <HAL_IncTick+0x1c>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	461a      	mov	r2, r3
 8000952:	4b05      	ldr	r3, [pc, #20]	; (8000968 <HAL_IncTick+0x20>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4413      	add	r3, r2
 8000958:	4a03      	ldr	r2, [pc, #12]	; (8000968 <HAL_IncTick+0x20>)
 800095a:	6013      	str	r3, [r2, #0]
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr
 8000964:	20000018 	.word	0x20000018
 8000968:	200000ec 	.word	0x200000ec

0800096c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  return uwTick;
 8000970:	4b02      	ldr	r3, [pc, #8]	; (800097c <HAL_GetTick+0x10>)
 8000972:	681b      	ldr	r3, [r3, #0]
}
 8000974:	4618      	mov	r0, r3
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr
 800097c:	200000ec 	.word	0x200000ec

08000980 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000988:	f7ff fff0 	bl	800096c <HAL_GetTick>
 800098c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000998:	d005      	beq.n	80009a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <HAL_Delay+0x40>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	461a      	mov	r2, r3
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	4413      	add	r3, r2
 80009a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009a6:	bf00      	nop
 80009a8:	f7ff ffe0 	bl	800096c <HAL_GetTick>
 80009ac:	4602      	mov	r2, r0
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d8f7      	bhi.n	80009a8 <HAL_Delay+0x28>
  {
  }
}
 80009b8:	bf00      	nop
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000018 	.word	0x20000018

080009c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	f003 0307 	and.w	r3, r3, #7
 80009d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <__NVIC_SetPriorityGrouping+0x44>)
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009da:	68ba      	ldr	r2, [r7, #8]
 80009dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009e0:	4013      	ands	r3, r2
 80009e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009f6:	4a04      	ldr	r2, [pc, #16]	; (8000a08 <__NVIC_SetPriorityGrouping+0x44>)
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	60d3      	str	r3, [r2, #12]
}
 80009fc:	bf00      	nop
 80009fe:	3714      	adds	r7, #20
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a10:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <__NVIC_GetPriorityGrouping+0x18>)
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	0a1b      	lsrs	r3, r3, #8
 8000a16:	f003 0307 	and.w	r3, r3, #7
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	db0b      	blt.n	8000a52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	f003 021f 	and.w	r2, r3, #31
 8000a40:	4906      	ldr	r1, [pc, #24]	; (8000a5c <__NVIC_EnableIRQ+0x34>)
 8000a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a46:	095b      	lsrs	r3, r3, #5
 8000a48:	2001      	movs	r0, #1
 8000a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr
 8000a5c:	e000e100 	.word	0xe000e100

08000a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	6039      	str	r1, [r7, #0]
 8000a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	db0a      	blt.n	8000a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	490c      	ldr	r1, [pc, #48]	; (8000aac <__NVIC_SetPriority+0x4c>)
 8000a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7e:	0112      	lsls	r2, r2, #4
 8000a80:	b2d2      	uxtb	r2, r2
 8000a82:	440b      	add	r3, r1
 8000a84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a88:	e00a      	b.n	8000aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	4908      	ldr	r1, [pc, #32]	; (8000ab0 <__NVIC_SetPriority+0x50>)
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	f003 030f 	and.w	r3, r3, #15
 8000a96:	3b04      	subs	r3, #4
 8000a98:	0112      	lsls	r2, r2, #4
 8000a9a:	b2d2      	uxtb	r2, r2
 8000a9c:	440b      	add	r3, r1
 8000a9e:	761a      	strb	r2, [r3, #24]
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	e000e100 	.word	0xe000e100
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b089      	sub	sp, #36	; 0x24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	f003 0307 	and.w	r3, r3, #7
 8000ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac8:	69fb      	ldr	r3, [r7, #28]
 8000aca:	f1c3 0307 	rsb	r3, r3, #7
 8000ace:	2b04      	cmp	r3, #4
 8000ad0:	bf28      	it	cs
 8000ad2:	2304      	movcs	r3, #4
 8000ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	3304      	adds	r3, #4
 8000ada:	2b06      	cmp	r3, #6
 8000adc:	d902      	bls.n	8000ae4 <NVIC_EncodePriority+0x30>
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	3b03      	subs	r3, #3
 8000ae2:	e000      	b.n	8000ae6 <NVIC_EncodePriority+0x32>
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	43da      	mvns	r2, r3
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	401a      	ands	r2, r3
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000afc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	fa01 f303 	lsl.w	r3, r1, r3
 8000b06:	43d9      	mvns	r1, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b0c:	4313      	orrs	r3, r2
         );
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3724      	adds	r7, #36	; 0x24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr

08000b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b28:	d301      	bcc.n	8000b2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e00f      	b.n	8000b4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <SysTick_Config+0x40>)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3b01      	subs	r3, #1
 8000b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b36:	210f      	movs	r1, #15
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b3c:	f7ff ff90 	bl	8000a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <SysTick_Config+0x40>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b46:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <SysTick_Config+0x40>)
 8000b48:	2207      	movs	r2, #7
 8000b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	e000e010 	.word	0xe000e010

08000b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f7ff ff2d 	bl	80009c4 <__NVIC_SetPriorityGrouping>
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b086      	sub	sp, #24
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	4603      	mov	r3, r0
 8000b7a:	60b9      	str	r1, [r7, #8]
 8000b7c:	607a      	str	r2, [r7, #4]
 8000b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b84:	f7ff ff42 	bl	8000a0c <__NVIC_GetPriorityGrouping>
 8000b88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	68b9      	ldr	r1, [r7, #8]
 8000b8e:	6978      	ldr	r0, [r7, #20]
 8000b90:	f7ff ff90 	bl	8000ab4 <NVIC_EncodePriority>
 8000b94:	4602      	mov	r2, r0
 8000b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b9a:	4611      	mov	r1, r2
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff ff5f 	bl	8000a60 <__NVIC_SetPriority>
}
 8000ba2:	bf00      	nop
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b082      	sub	sp, #8
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ff35 	bl	8000a28 <__NVIC_EnableIRQ>
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff ffa2 	bl	8000b18 <SysTick_Config>
 8000bd4:	4603      	mov	r3, r0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000be8:	2300      	movs	r3, #0
 8000bea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	d005      	beq.n	8000c02 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2204      	movs	r2, #4
 8000bfa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	73fb      	strb	r3, [r7, #15]
 8000c00:	e051      	b.n	8000ca6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f022 020e 	bic.w	r2, r2, #14
 8000c10:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f022 0201 	bic.w	r2, r2, #1
 8000c20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a22      	ldr	r2, [pc, #136]	; (8000cb0 <HAL_DMA_Abort_IT+0xd0>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d029      	beq.n	8000c80 <HAL_DMA_Abort_IT+0xa0>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a20      	ldr	r2, [pc, #128]	; (8000cb4 <HAL_DMA_Abort_IT+0xd4>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d022      	beq.n	8000c7c <HAL_DMA_Abort_IT+0x9c>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a1f      	ldr	r2, [pc, #124]	; (8000cb8 <HAL_DMA_Abort_IT+0xd8>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d01a      	beq.n	8000c76 <HAL_DMA_Abort_IT+0x96>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a1d      	ldr	r2, [pc, #116]	; (8000cbc <HAL_DMA_Abort_IT+0xdc>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d012      	beq.n	8000c70 <HAL_DMA_Abort_IT+0x90>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a1c      	ldr	r2, [pc, #112]	; (8000cc0 <HAL_DMA_Abort_IT+0xe0>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d00a      	beq.n	8000c6a <HAL_DMA_Abort_IT+0x8a>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a1a      	ldr	r2, [pc, #104]	; (8000cc4 <HAL_DMA_Abort_IT+0xe4>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d102      	bne.n	8000c64 <HAL_DMA_Abort_IT+0x84>
 8000c5e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c62:	e00e      	b.n	8000c82 <HAL_DMA_Abort_IT+0xa2>
 8000c64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c68:	e00b      	b.n	8000c82 <HAL_DMA_Abort_IT+0xa2>
 8000c6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c6e:	e008      	b.n	8000c82 <HAL_DMA_Abort_IT+0xa2>
 8000c70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c74:	e005      	b.n	8000c82 <HAL_DMA_Abort_IT+0xa2>
 8000c76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c7a:	e002      	b.n	8000c82 <HAL_DMA_Abort_IT+0xa2>
 8000c7c:	2310      	movs	r3, #16
 8000c7e:	e000      	b.n	8000c82 <HAL_DMA_Abort_IT+0xa2>
 8000c80:	2301      	movs	r3, #1
 8000c82:	4a11      	ldr	r2, [pc, #68]	; (8000cc8 <HAL_DMA_Abort_IT+0xe8>)
 8000c84:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2201      	movs	r2, #1
 8000c8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2200      	movs	r2, #0
 8000c92:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d003      	beq.n	8000ca6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	4798      	blx	r3
    } 
  }
  return status;
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40020008 	.word	0x40020008
 8000cb4:	4002001c 	.word	0x4002001c
 8000cb8:	40020030 	.word	0x40020030
 8000cbc:	40020044 	.word	0x40020044
 8000cc0:	40020058 	.word	0x40020058
 8000cc4:	4002006c 	.word	0x4002006c
 8000cc8:	40020000 	.word	0x40020000

08000ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b08b      	sub	sp, #44	; 0x2c
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cde:	e127      	b.n	8000f30 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	69fa      	ldr	r2, [r7, #28]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	f040 8116 	bne.w	8000f2a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	2b12      	cmp	r3, #18
 8000d04:	d034      	beq.n	8000d70 <HAL_GPIO_Init+0xa4>
 8000d06:	2b12      	cmp	r3, #18
 8000d08:	d80d      	bhi.n	8000d26 <HAL_GPIO_Init+0x5a>
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d02b      	beq.n	8000d66 <HAL_GPIO_Init+0x9a>
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d804      	bhi.n	8000d1c <HAL_GPIO_Init+0x50>
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d031      	beq.n	8000d7a <HAL_GPIO_Init+0xae>
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d01c      	beq.n	8000d54 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d1a:	e048      	b.n	8000dae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d1c:	2b03      	cmp	r3, #3
 8000d1e:	d043      	beq.n	8000da8 <HAL_GPIO_Init+0xdc>
 8000d20:	2b11      	cmp	r3, #17
 8000d22:	d01b      	beq.n	8000d5c <HAL_GPIO_Init+0x90>
          break;
 8000d24:	e043      	b.n	8000dae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d26:	4a89      	ldr	r2, [pc, #548]	; (8000f4c <HAL_GPIO_Init+0x280>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d026      	beq.n	8000d7a <HAL_GPIO_Init+0xae>
 8000d2c:	4a87      	ldr	r2, [pc, #540]	; (8000f4c <HAL_GPIO_Init+0x280>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d806      	bhi.n	8000d40 <HAL_GPIO_Init+0x74>
 8000d32:	4a87      	ldr	r2, [pc, #540]	; (8000f50 <HAL_GPIO_Init+0x284>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d020      	beq.n	8000d7a <HAL_GPIO_Init+0xae>
 8000d38:	4a86      	ldr	r2, [pc, #536]	; (8000f54 <HAL_GPIO_Init+0x288>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d01d      	beq.n	8000d7a <HAL_GPIO_Init+0xae>
          break;
 8000d3e:	e036      	b.n	8000dae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d40:	4a85      	ldr	r2, [pc, #532]	; (8000f58 <HAL_GPIO_Init+0x28c>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d019      	beq.n	8000d7a <HAL_GPIO_Init+0xae>
 8000d46:	4a85      	ldr	r2, [pc, #532]	; (8000f5c <HAL_GPIO_Init+0x290>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d016      	beq.n	8000d7a <HAL_GPIO_Init+0xae>
 8000d4c:	4a84      	ldr	r2, [pc, #528]	; (8000f60 <HAL_GPIO_Init+0x294>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d013      	beq.n	8000d7a <HAL_GPIO_Init+0xae>
          break;
 8000d52:	e02c      	b.n	8000dae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	623b      	str	r3, [r7, #32]
          break;
 8000d5a:	e028      	b.n	8000dae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	3304      	adds	r3, #4
 8000d62:	623b      	str	r3, [r7, #32]
          break;
 8000d64:	e023      	b.n	8000dae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	3308      	adds	r3, #8
 8000d6c:	623b      	str	r3, [r7, #32]
          break;
 8000d6e:	e01e      	b.n	8000dae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	330c      	adds	r3, #12
 8000d76:	623b      	str	r3, [r7, #32]
          break;
 8000d78:	e019      	b.n	8000dae <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d102      	bne.n	8000d88 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d82:	2304      	movs	r3, #4
 8000d84:	623b      	str	r3, [r7, #32]
          break;
 8000d86:	e012      	b.n	8000dae <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d105      	bne.n	8000d9c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d90:	2308      	movs	r3, #8
 8000d92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	69fa      	ldr	r2, [r7, #28]
 8000d98:	611a      	str	r2, [r3, #16]
          break;
 8000d9a:	e008      	b.n	8000dae <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d9c:	2308      	movs	r3, #8
 8000d9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	69fa      	ldr	r2, [r7, #28]
 8000da4:	615a      	str	r2, [r3, #20]
          break;
 8000da6:	e002      	b.n	8000dae <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000da8:	2300      	movs	r3, #0
 8000daa:	623b      	str	r3, [r7, #32]
          break;
 8000dac:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	2bff      	cmp	r3, #255	; 0xff
 8000db2:	d801      	bhi.n	8000db8 <HAL_GPIO_Init+0xec>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	e001      	b.n	8000dbc <HAL_GPIO_Init+0xf0>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3304      	adds	r3, #4
 8000dbc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	2bff      	cmp	r3, #255	; 0xff
 8000dc2:	d802      	bhi.n	8000dca <HAL_GPIO_Init+0xfe>
 8000dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	e002      	b.n	8000dd0 <HAL_GPIO_Init+0x104>
 8000dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dcc:	3b08      	subs	r3, #8
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	210f      	movs	r1, #15
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	fa01 f303 	lsl.w	r3, r1, r3
 8000dde:	43db      	mvns	r3, r3
 8000de0:	401a      	ands	r2, r3
 8000de2:	6a39      	ldr	r1, [r7, #32]
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dea:	431a      	orrs	r2, r3
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	f000 8096 	beq.w	8000f2a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000dfe:	4b59      	ldr	r3, [pc, #356]	; (8000f64 <HAL_GPIO_Init+0x298>)
 8000e00:	699b      	ldr	r3, [r3, #24]
 8000e02:	4a58      	ldr	r2, [pc, #352]	; (8000f64 <HAL_GPIO_Init+0x298>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6193      	str	r3, [r2, #24]
 8000e0a:	4b56      	ldr	r3, [pc, #344]	; (8000f64 <HAL_GPIO_Init+0x298>)
 8000e0c:	699b      	ldr	r3, [r3, #24]
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e16:	4a54      	ldr	r2, [pc, #336]	; (8000f68 <HAL_GPIO_Init+0x29c>)
 8000e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1a:	089b      	lsrs	r3, r3, #2
 8000e1c:	3302      	adds	r3, #2
 8000e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e22:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e26:	f003 0303 	and.w	r3, r3, #3
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	220f      	movs	r2, #15
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43db      	mvns	r3, r3
 8000e34:	68fa      	ldr	r2, [r7, #12]
 8000e36:	4013      	ands	r3, r2
 8000e38:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a4b      	ldr	r2, [pc, #300]	; (8000f6c <HAL_GPIO_Init+0x2a0>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d013      	beq.n	8000e6a <HAL_GPIO_Init+0x19e>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a4a      	ldr	r2, [pc, #296]	; (8000f70 <HAL_GPIO_Init+0x2a4>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d00d      	beq.n	8000e66 <HAL_GPIO_Init+0x19a>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a49      	ldr	r2, [pc, #292]	; (8000f74 <HAL_GPIO_Init+0x2a8>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d007      	beq.n	8000e62 <HAL_GPIO_Init+0x196>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a48      	ldr	r2, [pc, #288]	; (8000f78 <HAL_GPIO_Init+0x2ac>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d101      	bne.n	8000e5e <HAL_GPIO_Init+0x192>
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	e006      	b.n	8000e6c <HAL_GPIO_Init+0x1a0>
 8000e5e:	2304      	movs	r3, #4
 8000e60:	e004      	b.n	8000e6c <HAL_GPIO_Init+0x1a0>
 8000e62:	2302      	movs	r3, #2
 8000e64:	e002      	b.n	8000e6c <HAL_GPIO_Init+0x1a0>
 8000e66:	2301      	movs	r3, #1
 8000e68:	e000      	b.n	8000e6c <HAL_GPIO_Init+0x1a0>
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e6e:	f002 0203 	and.w	r2, r2, #3
 8000e72:	0092      	lsls	r2, r2, #2
 8000e74:	4093      	lsls	r3, r2
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e7c:	493a      	ldr	r1, [pc, #232]	; (8000f68 <HAL_GPIO_Init+0x29c>)
 8000e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e80:	089b      	lsrs	r3, r3, #2
 8000e82:	3302      	adds	r3, #2
 8000e84:	68fa      	ldr	r2, [r7, #12]
 8000e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d006      	beq.n	8000ea4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e96:	4b39      	ldr	r3, [pc, #228]	; (8000f7c <HAL_GPIO_Init+0x2b0>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	4938      	ldr	r1, [pc, #224]	; (8000f7c <HAL_GPIO_Init+0x2b0>)
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	600b      	str	r3, [r1, #0]
 8000ea2:	e006      	b.n	8000eb2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ea4:	4b35      	ldr	r3, [pc, #212]	; (8000f7c <HAL_GPIO_Init+0x2b0>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	4933      	ldr	r1, [pc, #204]	; (8000f7c <HAL_GPIO_Init+0x2b0>)
 8000eae:	4013      	ands	r3, r2
 8000eb0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d006      	beq.n	8000ecc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ebe:	4b2f      	ldr	r3, [pc, #188]	; (8000f7c <HAL_GPIO_Init+0x2b0>)
 8000ec0:	685a      	ldr	r2, [r3, #4]
 8000ec2:	492e      	ldr	r1, [pc, #184]	; (8000f7c <HAL_GPIO_Init+0x2b0>)
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	604b      	str	r3, [r1, #4]
 8000eca:	e006      	b.n	8000eda <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ecc:	4b2b      	ldr	r3, [pc, #172]	; (8000f7c <HAL_GPIO_Init+0x2b0>)
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	4929      	ldr	r1, [pc, #164]	; (8000f7c <HAL_GPIO_Init+0x2b0>)
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d006      	beq.n	8000ef4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ee6:	4b25      	ldr	r3, [pc, #148]	; (8000f7c <HAL_GPIO_Init+0x2b0>)
 8000ee8:	689a      	ldr	r2, [r3, #8]
 8000eea:	4924      	ldr	r1, [pc, #144]	; (8000f7c <HAL_GPIO_Init+0x2b0>)
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	608b      	str	r3, [r1, #8]
 8000ef2:	e006      	b.n	8000f02 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ef4:	4b21      	ldr	r3, [pc, #132]	; (8000f7c <HAL_GPIO_Init+0x2b0>)
 8000ef6:	689a      	ldr	r2, [r3, #8]
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	43db      	mvns	r3, r3
 8000efc:	491f      	ldr	r1, [pc, #124]	; (8000f7c <HAL_GPIO_Init+0x2b0>)
 8000efe:	4013      	ands	r3, r2
 8000f00:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d006      	beq.n	8000f1c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f0e:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <HAL_GPIO_Init+0x2b0>)
 8000f10:	68da      	ldr	r2, [r3, #12]
 8000f12:	491a      	ldr	r1, [pc, #104]	; (8000f7c <HAL_GPIO_Init+0x2b0>)
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	60cb      	str	r3, [r1, #12]
 8000f1a:	e006      	b.n	8000f2a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f1c:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <HAL_GPIO_Init+0x2b0>)
 8000f1e:	68da      	ldr	r2, [r3, #12]
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	43db      	mvns	r3, r3
 8000f24:	4915      	ldr	r1, [pc, #84]	; (8000f7c <HAL_GPIO_Init+0x2b0>)
 8000f26:	4013      	ands	r3, r2
 8000f28:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f36:	fa22 f303 	lsr.w	r3, r2, r3
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f47f aed0 	bne.w	8000ce0 <HAL_GPIO_Init+0x14>
  }
}
 8000f40:	bf00      	nop
 8000f42:	372c      	adds	r7, #44	; 0x2c
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	10210000 	.word	0x10210000
 8000f50:	10110000 	.word	0x10110000
 8000f54:	10120000 	.word	0x10120000
 8000f58:	10310000 	.word	0x10310000
 8000f5c:	10320000 	.word	0x10320000
 8000f60:	10220000 	.word	0x10220000
 8000f64:	40021000 	.word	0x40021000
 8000f68:	40010000 	.word	0x40010000
 8000f6c:	40010800 	.word	0x40010800
 8000f70:	40010c00 	.word	0x40010c00
 8000f74:	40011000 	.word	0x40011000
 8000f78:	40011400 	.word	0x40011400
 8000f7c:	40010400 	.word	0x40010400

08000f80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	887b      	ldrh	r3, [r7, #2]
 8000f92:	4013      	ands	r3, r2
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d002      	beq.n	8000f9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	73fb      	strb	r3, [r7, #15]
 8000f9c:	e001      	b.n	8000fa2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr

08000fae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	807b      	strh	r3, [r7, #2]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fbe:	787b      	ldrb	r3, [r7, #1]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d003      	beq.n	8000fcc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fc4:	887a      	ldrh	r2, [r7, #2]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000fca:	e003      	b.n	8000fd4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fcc:	887b      	ldrh	r3, [r7, #2]
 8000fce:	041a      	lsls	r2, r3, #16
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	611a      	str	r2, [r3, #16]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr
	...

08000fe0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d101      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e26c      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f000 8087 	beq.w	800110e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001000:	4b92      	ldr	r3, [pc, #584]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 030c 	and.w	r3, r3, #12
 8001008:	2b04      	cmp	r3, #4
 800100a:	d00c      	beq.n	8001026 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800100c:	4b8f      	ldr	r3, [pc, #572]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 030c 	and.w	r3, r3, #12
 8001014:	2b08      	cmp	r3, #8
 8001016:	d112      	bne.n	800103e <HAL_RCC_OscConfig+0x5e>
 8001018:	4b8c      	ldr	r3, [pc, #560]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001024:	d10b      	bne.n	800103e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001026:	4b89      	ldr	r3, [pc, #548]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d06c      	beq.n	800110c <HAL_RCC_OscConfig+0x12c>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d168      	bne.n	800110c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e246      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001046:	d106      	bne.n	8001056 <HAL_RCC_OscConfig+0x76>
 8001048:	4b80      	ldr	r3, [pc, #512]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a7f      	ldr	r2, [pc, #508]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 800104e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001052:	6013      	str	r3, [r2, #0]
 8001054:	e02e      	b.n	80010b4 <HAL_RCC_OscConfig+0xd4>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d10c      	bne.n	8001078 <HAL_RCC_OscConfig+0x98>
 800105e:	4b7b      	ldr	r3, [pc, #492]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a7a      	ldr	r2, [pc, #488]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001068:	6013      	str	r3, [r2, #0]
 800106a:	4b78      	ldr	r3, [pc, #480]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a77      	ldr	r2, [pc, #476]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001070:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001074:	6013      	str	r3, [r2, #0]
 8001076:	e01d      	b.n	80010b4 <HAL_RCC_OscConfig+0xd4>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001080:	d10c      	bne.n	800109c <HAL_RCC_OscConfig+0xbc>
 8001082:	4b72      	ldr	r3, [pc, #456]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a71      	ldr	r2, [pc, #452]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001088:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800108c:	6013      	str	r3, [r2, #0]
 800108e:	4b6f      	ldr	r3, [pc, #444]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a6e      	ldr	r2, [pc, #440]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001098:	6013      	str	r3, [r2, #0]
 800109a:	e00b      	b.n	80010b4 <HAL_RCC_OscConfig+0xd4>
 800109c:	4b6b      	ldr	r3, [pc, #428]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a6a      	ldr	r2, [pc, #424]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 80010a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	4b68      	ldr	r3, [pc, #416]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a67      	ldr	r2, [pc, #412]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 80010ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d013      	beq.n	80010e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010bc:	f7ff fc56 	bl	800096c <HAL_GetTick>
 80010c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010c2:	e008      	b.n	80010d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010c4:	f7ff fc52 	bl	800096c <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b64      	cmp	r3, #100	; 0x64
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e1fa      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d6:	4b5d      	ldr	r3, [pc, #372]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d0f0      	beq.n	80010c4 <HAL_RCC_OscConfig+0xe4>
 80010e2:	e014      	b.n	800110e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e4:	f7ff fc42 	bl	800096c <HAL_GetTick>
 80010e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ea:	e008      	b.n	80010fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010ec:	f7ff fc3e 	bl	800096c <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b64      	cmp	r3, #100	; 0x64
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e1e6      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010fe:	4b53      	ldr	r3, [pc, #332]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d1f0      	bne.n	80010ec <HAL_RCC_OscConfig+0x10c>
 800110a:	e000      	b.n	800110e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800110c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	2b00      	cmp	r3, #0
 8001118:	d063      	beq.n	80011e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800111a:	4b4c      	ldr	r3, [pc, #304]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 030c 	and.w	r3, r3, #12
 8001122:	2b00      	cmp	r3, #0
 8001124:	d00b      	beq.n	800113e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001126:	4b49      	ldr	r3, [pc, #292]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f003 030c 	and.w	r3, r3, #12
 800112e:	2b08      	cmp	r3, #8
 8001130:	d11c      	bne.n	800116c <HAL_RCC_OscConfig+0x18c>
 8001132:	4b46      	ldr	r3, [pc, #280]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d116      	bne.n	800116c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800113e:	4b43      	ldr	r3, [pc, #268]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	2b00      	cmp	r3, #0
 8001148:	d005      	beq.n	8001156 <HAL_RCC_OscConfig+0x176>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	691b      	ldr	r3, [r3, #16]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d001      	beq.n	8001156 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e1ba      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001156:	4b3d      	ldr	r3, [pc, #244]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	00db      	lsls	r3, r3, #3
 8001164:	4939      	ldr	r1, [pc, #228]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001166:	4313      	orrs	r3, r2
 8001168:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800116a:	e03a      	b.n	80011e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	691b      	ldr	r3, [r3, #16]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d020      	beq.n	80011b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001174:	4b36      	ldr	r3, [pc, #216]	; (8001250 <HAL_RCC_OscConfig+0x270>)
 8001176:	2201      	movs	r2, #1
 8001178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117a:	f7ff fbf7 	bl	800096c <HAL_GetTick>
 800117e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001180:	e008      	b.n	8001194 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001182:	f7ff fbf3 	bl	800096c <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d901      	bls.n	8001194 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001190:	2303      	movs	r3, #3
 8001192:	e19b      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001194:	4b2d      	ldr	r3, [pc, #180]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d0f0      	beq.n	8001182 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a0:	4b2a      	ldr	r3, [pc, #168]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	695b      	ldr	r3, [r3, #20]
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	4927      	ldr	r1, [pc, #156]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 80011b0:	4313      	orrs	r3, r2
 80011b2:	600b      	str	r3, [r1, #0]
 80011b4:	e015      	b.n	80011e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011b6:	4b26      	ldr	r3, [pc, #152]	; (8001250 <HAL_RCC_OscConfig+0x270>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011bc:	f7ff fbd6 	bl	800096c <HAL_GetTick>
 80011c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011c2:	e008      	b.n	80011d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011c4:	f7ff fbd2 	bl	800096c <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d901      	bls.n	80011d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e17a      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011d6:	4b1d      	ldr	r3, [pc, #116]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1f0      	bne.n	80011c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0308 	and.w	r3, r3, #8
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d03a      	beq.n	8001264 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d019      	beq.n	800122a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011f6:	4b17      	ldr	r3, [pc, #92]	; (8001254 <HAL_RCC_OscConfig+0x274>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011fc:	f7ff fbb6 	bl	800096c <HAL_GetTick>
 8001200:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001204:	f7ff fbb2 	bl	800096c <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e15a      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001216:	4b0d      	ldr	r3, [pc, #52]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	2b00      	cmp	r3, #0
 8001220:	d0f0      	beq.n	8001204 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001222:	2001      	movs	r0, #1
 8001224:	f000 fada 	bl	80017dc <RCC_Delay>
 8001228:	e01c      	b.n	8001264 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <HAL_RCC_OscConfig+0x274>)
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001230:	f7ff fb9c 	bl	800096c <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001236:	e00f      	b.n	8001258 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001238:	f7ff fb98 	bl	800096c <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d908      	bls.n	8001258 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e140      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
 800124a:	bf00      	nop
 800124c:	40021000 	.word	0x40021000
 8001250:	42420000 	.word	0x42420000
 8001254:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001258:	4b9e      	ldr	r3, [pc, #632]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 800125a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1e9      	bne.n	8001238 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	2b00      	cmp	r3, #0
 800126e:	f000 80a6 	beq.w	80013be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001272:	2300      	movs	r3, #0
 8001274:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001276:	4b97      	ldr	r3, [pc, #604]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d10d      	bne.n	800129e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001282:	4b94      	ldr	r3, [pc, #592]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001284:	69db      	ldr	r3, [r3, #28]
 8001286:	4a93      	ldr	r2, [pc, #588]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800128c:	61d3      	str	r3, [r2, #28]
 800128e:	4b91      	ldr	r3, [pc, #580]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800129a:	2301      	movs	r3, #1
 800129c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800129e:	4b8e      	ldr	r3, [pc, #568]	; (80014d8 <HAL_RCC_OscConfig+0x4f8>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d118      	bne.n	80012dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012aa:	4b8b      	ldr	r3, [pc, #556]	; (80014d8 <HAL_RCC_OscConfig+0x4f8>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a8a      	ldr	r2, [pc, #552]	; (80014d8 <HAL_RCC_OscConfig+0x4f8>)
 80012b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012b6:	f7ff fb59 	bl	800096c <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012bc:	e008      	b.n	80012d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012be:	f7ff fb55 	bl	800096c <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b64      	cmp	r3, #100	; 0x64
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e0fd      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d0:	4b81      	ldr	r3, [pc, #516]	; (80014d8 <HAL_RCC_OscConfig+0x4f8>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d0f0      	beq.n	80012be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d106      	bne.n	80012f2 <HAL_RCC_OscConfig+0x312>
 80012e4:	4b7b      	ldr	r3, [pc, #492]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 80012e6:	6a1b      	ldr	r3, [r3, #32]
 80012e8:	4a7a      	ldr	r2, [pc, #488]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 80012ea:	f043 0301 	orr.w	r3, r3, #1
 80012ee:	6213      	str	r3, [r2, #32]
 80012f0:	e02d      	b.n	800134e <HAL_RCC_OscConfig+0x36e>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d10c      	bne.n	8001314 <HAL_RCC_OscConfig+0x334>
 80012fa:	4b76      	ldr	r3, [pc, #472]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 80012fc:	6a1b      	ldr	r3, [r3, #32]
 80012fe:	4a75      	ldr	r2, [pc, #468]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001300:	f023 0301 	bic.w	r3, r3, #1
 8001304:	6213      	str	r3, [r2, #32]
 8001306:	4b73      	ldr	r3, [pc, #460]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001308:	6a1b      	ldr	r3, [r3, #32]
 800130a:	4a72      	ldr	r2, [pc, #456]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 800130c:	f023 0304 	bic.w	r3, r3, #4
 8001310:	6213      	str	r3, [r2, #32]
 8001312:	e01c      	b.n	800134e <HAL_RCC_OscConfig+0x36e>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	2b05      	cmp	r3, #5
 800131a:	d10c      	bne.n	8001336 <HAL_RCC_OscConfig+0x356>
 800131c:	4b6d      	ldr	r3, [pc, #436]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	4a6c      	ldr	r2, [pc, #432]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001322:	f043 0304 	orr.w	r3, r3, #4
 8001326:	6213      	str	r3, [r2, #32]
 8001328:	4b6a      	ldr	r3, [pc, #424]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 800132a:	6a1b      	ldr	r3, [r3, #32]
 800132c:	4a69      	ldr	r2, [pc, #420]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 800132e:	f043 0301 	orr.w	r3, r3, #1
 8001332:	6213      	str	r3, [r2, #32]
 8001334:	e00b      	b.n	800134e <HAL_RCC_OscConfig+0x36e>
 8001336:	4b67      	ldr	r3, [pc, #412]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	4a66      	ldr	r2, [pc, #408]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 800133c:	f023 0301 	bic.w	r3, r3, #1
 8001340:	6213      	str	r3, [r2, #32]
 8001342:	4b64      	ldr	r3, [pc, #400]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001344:	6a1b      	ldr	r3, [r3, #32]
 8001346:	4a63      	ldr	r2, [pc, #396]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001348:	f023 0304 	bic.w	r3, r3, #4
 800134c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d015      	beq.n	8001382 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001356:	f7ff fb09 	bl	800096c <HAL_GetTick>
 800135a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800135c:	e00a      	b.n	8001374 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800135e:	f7ff fb05 	bl	800096c <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	f241 3288 	movw	r2, #5000	; 0x1388
 800136c:	4293      	cmp	r3, r2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e0ab      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001374:	4b57      	ldr	r3, [pc, #348]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d0ee      	beq.n	800135e <HAL_RCC_OscConfig+0x37e>
 8001380:	e014      	b.n	80013ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001382:	f7ff faf3 	bl	800096c <HAL_GetTick>
 8001386:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001388:	e00a      	b.n	80013a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800138a:	f7ff faef 	bl	800096c <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	f241 3288 	movw	r2, #5000	; 0x1388
 8001398:	4293      	cmp	r3, r2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e095      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013a0:	4b4c      	ldr	r3, [pc, #304]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1ee      	bne.n	800138a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013ac:	7dfb      	ldrb	r3, [r7, #23]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d105      	bne.n	80013be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013b2:	4b48      	ldr	r3, [pc, #288]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	4a47      	ldr	r2, [pc, #284]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 80013b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f000 8081 	beq.w	80014ca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013c8:	4b42      	ldr	r3, [pc, #264]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 030c 	and.w	r3, r3, #12
 80013d0:	2b08      	cmp	r3, #8
 80013d2:	d061      	beq.n	8001498 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	69db      	ldr	r3, [r3, #28]
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d146      	bne.n	800146a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013dc:	4b3f      	ldr	r3, [pc, #252]	; (80014dc <HAL_RCC_OscConfig+0x4fc>)
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e2:	f7ff fac3 	bl	800096c <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ea:	f7ff fabf 	bl	800096c <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e067      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013fc:	4b35      	ldr	r3, [pc, #212]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1f0      	bne.n	80013ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a1b      	ldr	r3, [r3, #32]
 800140c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001410:	d108      	bne.n	8001424 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001412:	4b30      	ldr	r3, [pc, #192]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	492d      	ldr	r1, [pc, #180]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001420:	4313      	orrs	r3, r2
 8001422:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001424:	4b2b      	ldr	r3, [pc, #172]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a19      	ldr	r1, [r3, #32]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001434:	430b      	orrs	r3, r1
 8001436:	4927      	ldr	r1, [pc, #156]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001438:	4313      	orrs	r3, r2
 800143a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800143c:	4b27      	ldr	r3, [pc, #156]	; (80014dc <HAL_RCC_OscConfig+0x4fc>)
 800143e:	2201      	movs	r2, #1
 8001440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001442:	f7ff fa93 	bl	800096c <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001448:	e008      	b.n	800145c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800144a:	f7ff fa8f 	bl	800096c <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e037      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800145c:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d0f0      	beq.n	800144a <HAL_RCC_OscConfig+0x46a>
 8001468:	e02f      	b.n	80014ca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800146a:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <HAL_RCC_OscConfig+0x4fc>)
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001470:	f7ff fa7c 	bl	800096c <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001478:	f7ff fa78 	bl	800096c <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e020      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800148a:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f0      	bne.n	8001478 <HAL_RCC_OscConfig+0x498>
 8001496:	e018      	b.n	80014ca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	69db      	ldr	r3, [r3, #28]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d101      	bne.n	80014a4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e013      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014a4:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d106      	bne.n	80014c6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d001      	beq.n	80014ca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e000      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40007000 	.word	0x40007000
 80014dc:	42420060 	.word	0x42420060

080014e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d101      	bne.n	80014f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e0d0      	b.n	8001696 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014f4:	4b6a      	ldr	r3, [pc, #424]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0307 	and.w	r3, r3, #7
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d910      	bls.n	8001524 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001502:	4b67      	ldr	r3, [pc, #412]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f023 0207 	bic.w	r2, r3, #7
 800150a:	4965      	ldr	r1, [pc, #404]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	4313      	orrs	r3, r2
 8001510:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001512:	4b63      	ldr	r3, [pc, #396]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	429a      	cmp	r2, r3
 800151e:	d001      	beq.n	8001524 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e0b8      	b.n	8001696 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d020      	beq.n	8001572 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	2b00      	cmp	r3, #0
 800153a:	d005      	beq.n	8001548 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800153c:	4b59      	ldr	r3, [pc, #356]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	4a58      	ldr	r2, [pc, #352]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001542:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001546:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0308 	and.w	r3, r3, #8
 8001550:	2b00      	cmp	r3, #0
 8001552:	d005      	beq.n	8001560 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001554:	4b53      	ldr	r3, [pc, #332]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	4a52      	ldr	r2, [pc, #328]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 800155a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800155e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001560:	4b50      	ldr	r3, [pc, #320]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	494d      	ldr	r1, [pc, #308]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 800156e:	4313      	orrs	r3, r2
 8001570:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b00      	cmp	r3, #0
 800157c:	d040      	beq.n	8001600 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d107      	bne.n	8001596 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001586:	4b47      	ldr	r3, [pc, #284]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d115      	bne.n	80015be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e07f      	b.n	8001696 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b02      	cmp	r3, #2
 800159c:	d107      	bne.n	80015ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800159e:	4b41      	ldr	r3, [pc, #260]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d109      	bne.n	80015be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e073      	b.n	8001696 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ae:	4b3d      	ldr	r3, [pc, #244]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e06b      	b.n	8001696 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015be:	4b39      	ldr	r3, [pc, #228]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f023 0203 	bic.w	r2, r3, #3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	4936      	ldr	r1, [pc, #216]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015d0:	f7ff f9cc 	bl	800096c <HAL_GetTick>
 80015d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015d6:	e00a      	b.n	80015ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015d8:	f7ff f9c8 	bl	800096c <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e053      	b.n	8001696 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ee:	4b2d      	ldr	r3, [pc, #180]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f003 020c 	and.w	r2, r3, #12
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d1eb      	bne.n	80015d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001600:	4b27      	ldr	r3, [pc, #156]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0307 	and.w	r3, r3, #7
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	d210      	bcs.n	8001630 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800160e:	4b24      	ldr	r3, [pc, #144]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f023 0207 	bic.w	r2, r3, #7
 8001616:	4922      	ldr	r1, [pc, #136]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	4313      	orrs	r3, r2
 800161c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800161e:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	429a      	cmp	r2, r3
 800162a:	d001      	beq.n	8001630 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e032      	b.n	8001696 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0304 	and.w	r3, r3, #4
 8001638:	2b00      	cmp	r3, #0
 800163a:	d008      	beq.n	800164e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800163c:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	4916      	ldr	r1, [pc, #88]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 800164a:	4313      	orrs	r3, r2
 800164c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	2b00      	cmp	r3, #0
 8001658:	d009      	beq.n	800166e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800165a:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	490e      	ldr	r1, [pc, #56]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 800166a:	4313      	orrs	r3, r2
 800166c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800166e:	f000 f821 	bl	80016b4 <HAL_RCC_GetSysClockFreq>
 8001672:	4601      	mov	r1, r0
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	091b      	lsrs	r3, r3, #4
 800167a:	f003 030f 	and.w	r3, r3, #15
 800167e:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001680:	5cd3      	ldrb	r3, [r2, r3]
 8001682:	fa21 f303 	lsr.w	r3, r1, r3
 8001686:	4a09      	ldr	r2, [pc, #36]	; (80016ac <HAL_RCC_ClockConfig+0x1cc>)
 8001688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <HAL_RCC_ClockConfig+0x1d0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff f92a 	bl	80008e8 <HAL_InitTick>

  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40022000 	.word	0x40022000
 80016a4:	40021000 	.word	0x40021000
 80016a8:	08002268 	.word	0x08002268
 80016ac:	20000010 	.word	0x20000010
 80016b0:	20000014 	.word	0x20000014

080016b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016b4:	b490      	push	{r4, r7}
 80016b6:	b08a      	sub	sp, #40	; 0x28
 80016b8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80016ba:	4b2a      	ldr	r3, [pc, #168]	; (8001764 <HAL_RCC_GetSysClockFreq+0xb0>)
 80016bc:	1d3c      	adds	r4, r7, #4
 80016be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80016c4:	4b28      	ldr	r3, [pc, #160]	; (8001768 <HAL_RCC_GetSysClockFreq+0xb4>)
 80016c6:	881b      	ldrh	r3, [r3, #0]
 80016c8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
 80016ce:	2300      	movs	r3, #0
 80016d0:	61bb      	str	r3, [r7, #24]
 80016d2:	2300      	movs	r3, #0
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80016da:	2300      	movs	r3, #0
 80016dc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80016de:	4b23      	ldr	r3, [pc, #140]	; (800176c <HAL_RCC_GetSysClockFreq+0xb8>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f003 030c 	and.w	r3, r3, #12
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	d002      	beq.n	80016f4 <HAL_RCC_GetSysClockFreq+0x40>
 80016ee:	2b08      	cmp	r3, #8
 80016f0:	d003      	beq.n	80016fa <HAL_RCC_GetSysClockFreq+0x46>
 80016f2:	e02d      	b.n	8001750 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016f4:	4b1e      	ldr	r3, [pc, #120]	; (8001770 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016f6:	623b      	str	r3, [r7, #32]
      break;
 80016f8:	e02d      	b.n	8001756 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	0c9b      	lsrs	r3, r3, #18
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001706:	4413      	add	r3, r2
 8001708:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800170c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d013      	beq.n	8001740 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001718:	4b14      	ldr	r3, [pc, #80]	; (800176c <HAL_RCC_GetSysClockFreq+0xb8>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	0c5b      	lsrs	r3, r3, #17
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001726:	4413      	add	r3, r2
 8001728:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800172c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	4a0f      	ldr	r2, [pc, #60]	; (8001770 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001732:	fb02 f203 	mul.w	r2, r2, r3
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	fbb2 f3f3 	udiv	r3, r2, r3
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
 800173e:	e004      	b.n	800174a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	4a0c      	ldr	r2, [pc, #48]	; (8001774 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001744:	fb02 f303 	mul.w	r3, r2, r3
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	623b      	str	r3, [r7, #32]
      break;
 800174e:	e002      	b.n	8001756 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001750:	4b07      	ldr	r3, [pc, #28]	; (8001770 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001752:	623b      	str	r3, [r7, #32]
      break;
 8001754:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001756:	6a3b      	ldr	r3, [r7, #32]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3728      	adds	r7, #40	; 0x28
 800175c:	46bd      	mov	sp, r7
 800175e:	bc90      	pop	{r4, r7}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	08002254 	.word	0x08002254
 8001768:	08002264 	.word	0x08002264
 800176c:	40021000 	.word	0x40021000
 8001770:	007a1200 	.word	0x007a1200
 8001774:	003d0900 	.word	0x003d0900

08001778 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800177c:	4b02      	ldr	r3, [pc, #8]	; (8001788 <HAL_RCC_GetHCLKFreq+0x10>)
 800177e:	681b      	ldr	r3, [r3, #0]
}
 8001780:	4618      	mov	r0, r3
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr
 8001788:	20000010 	.word	0x20000010

0800178c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001790:	f7ff fff2 	bl	8001778 <HAL_RCC_GetHCLKFreq>
 8001794:	4601      	mov	r1, r0
 8001796:	4b05      	ldr	r3, [pc, #20]	; (80017ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	0a1b      	lsrs	r3, r3, #8
 800179c:	f003 0307 	and.w	r3, r3, #7
 80017a0:	4a03      	ldr	r2, [pc, #12]	; (80017b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017a2:	5cd3      	ldrb	r3, [r2, r3]
 80017a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40021000 	.word	0x40021000
 80017b0:	08002278 	.word	0x08002278

080017b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017b8:	f7ff ffde 	bl	8001778 <HAL_RCC_GetHCLKFreq>
 80017bc:	4601      	mov	r1, r0
 80017be:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	0adb      	lsrs	r3, r3, #11
 80017c4:	f003 0307 	and.w	r3, r3, #7
 80017c8:	4a03      	ldr	r2, [pc, #12]	; (80017d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017ca:	5cd3      	ldrb	r3, [r2, r3]
 80017cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40021000 	.word	0x40021000
 80017d8:	08002278 	.word	0x08002278

080017dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017e4:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <RCC_Delay+0x34>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a0a      	ldr	r2, [pc, #40]	; (8001814 <RCC_Delay+0x38>)
 80017ea:	fba2 2303 	umull	r2, r3, r2, r3
 80017ee:	0a5b      	lsrs	r3, r3, #9
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	fb02 f303 	mul.w	r3, r2, r3
 80017f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80017f8:	bf00      	nop
  }
  while (Delay --);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	1e5a      	subs	r2, r3, #1
 80017fe:	60fa      	str	r2, [r7, #12]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d1f9      	bne.n	80017f8 <RCC_Delay+0x1c>
}
 8001804:	bf00      	nop
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	20000010 	.word	0x20000010
 8001814:	10624dd3 	.word	0x10624dd3

08001818 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e03f      	b.n	80018aa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d106      	bne.n	8001844 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7fe ff74 	bl	800072c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2224      	movs	r2, #36	; 0x24
 8001848:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	68da      	ldr	r2, [r3, #12]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800185a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f000 fb83 	bl	8001f68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	691a      	ldr	r2, [r3, #16]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001870:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	695a      	ldr	r2, [r3, #20]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001880:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	68da      	ldr	r2, [r3, #12]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001890:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2220      	movs	r2, #32
 800189c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2220      	movs	r2, #32
 80018a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b08a      	sub	sp, #40	; 0x28
 80018b6:	af02      	add	r7, sp, #8
 80018b8:	60f8      	str	r0, [r7, #12]
 80018ba:	60b9      	str	r1, [r7, #8]
 80018bc:	603b      	str	r3, [r7, #0]
 80018be:	4613      	mov	r3, r2
 80018c0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b20      	cmp	r3, #32
 80018d0:	d17c      	bne.n	80019cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d002      	beq.n	80018de <HAL_UART_Transmit+0x2c>
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e075      	b.n	80019ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d101      	bne.n	80018f0 <HAL_UART_Transmit+0x3e>
 80018ec:	2302      	movs	r3, #2
 80018ee:	e06e      	b.n	80019ce <HAL_UART_Transmit+0x11c>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2200      	movs	r2, #0
 80018fc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2221      	movs	r2, #33	; 0x21
 8001902:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001906:	f7ff f831 	bl	800096c <HAL_GetTick>
 800190a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	88fa      	ldrh	r2, [r7, #6]
 8001910:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	88fa      	ldrh	r2, [r7, #6]
 8001916:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001920:	d108      	bne.n	8001934 <HAL_UART_Transmit+0x82>
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d104      	bne.n	8001934 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800192a:	2300      	movs	r3, #0
 800192c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	61bb      	str	r3, [r7, #24]
 8001932:	e003      	b.n	800193c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001938:	2300      	movs	r3, #0
 800193a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001944:	e02a      	b.n	800199c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	2200      	movs	r2, #0
 800194e:	2180      	movs	r1, #128	; 0x80
 8001950:	68f8      	ldr	r0, [r7, #12]
 8001952:	f000 f9a7 	bl	8001ca4 <UART_WaitOnFlagUntilTimeout>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e036      	b.n	80019ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d10b      	bne.n	800197e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001974:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	3302      	adds	r3, #2
 800197a:	61bb      	str	r3, [r7, #24]
 800197c:	e007      	b.n	800198e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	781a      	ldrb	r2, [r3, #0]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	3301      	adds	r3, #1
 800198c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001992:	b29b      	uxth	r3, r3
 8001994:	3b01      	subs	r3, #1
 8001996:	b29a      	uxth	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1cf      	bne.n	8001946 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	2200      	movs	r2, #0
 80019ae:	2140      	movs	r1, #64	; 0x40
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f000 f977 	bl	8001ca4 <UART_WaitOnFlagUntilTimeout>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e006      	b.n	80019ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2220      	movs	r2, #32
 80019c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80019c8:	2300      	movs	r3, #0
 80019ca:	e000      	b.n	80019ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80019cc:	2302      	movs	r3, #2
  }
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3720      	adds	r7, #32
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b085      	sub	sp, #20
 80019da:	af00      	add	r7, sp, #0
 80019dc:	60f8      	str	r0, [r7, #12]
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	4613      	mov	r3, r2
 80019e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b20      	cmp	r3, #32
 80019ee:	d140      	bne.n	8001a72 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d002      	beq.n	80019fc <HAL_UART_Receive_IT+0x26>
 80019f6:	88fb      	ldrh	r3, [r7, #6]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d101      	bne.n	8001a00 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e039      	b.n	8001a74 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d101      	bne.n	8001a0e <HAL_UART_Receive_IT+0x38>
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	e032      	b.n	8001a74 <HAL_UART_Receive_IT+0x9e>
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2201      	movs	r2, #1
 8001a12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	68ba      	ldr	r2, [r7, #8]
 8001a1a:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	88fa      	ldrh	r2, [r7, #6]
 8001a20:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	88fa      	ldrh	r2, [r7, #6]
 8001a26:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2222      	movs	r2, #34	; 0x22
 8001a32:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68da      	ldr	r2, [r3, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a4c:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	695a      	ldr	r2, [r3, #20]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f042 0201 	orr.w	r2, r2, #1
 8001a5c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	68da      	ldr	r2, [r3, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f042 0220 	orr.w	r2, r2, #32
 8001a6c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	e000      	b.n	8001a74 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001a72:	2302      	movs	r3, #2
  }
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr
	...

08001a80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10d      	bne.n	8001ad2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	f003 0320 	and.w	r3, r3, #32
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d008      	beq.n	8001ad2 <HAL_UART_IRQHandler+0x52>
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	f003 0320 	and.w	r3, r3, #32
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 f9cc 	bl	8001e68 <UART_Receive_IT>
      return;
 8001ad0:	e0d1      	b.n	8001c76 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f000 80b0 	beq.w	8001c3a <HAL_UART_IRQHandler+0x1ba>
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d105      	bne.n	8001af0 <HAL_UART_IRQHandler+0x70>
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f000 80a5 	beq.w	8001c3a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d00a      	beq.n	8001b10 <HAL_UART_IRQHandler+0x90>
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d005      	beq.n	8001b10 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b08:	f043 0201 	orr.w	r2, r3, #1
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f003 0304 	and.w	r3, r3, #4
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d00a      	beq.n	8001b30 <HAL_UART_IRQHandler+0xb0>
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d005      	beq.n	8001b30 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b28:	f043 0202 	orr.w	r2, r3, #2
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00a      	beq.n	8001b50 <HAL_UART_IRQHandler+0xd0>
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d005      	beq.n	8001b50 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b48:	f043 0204 	orr.w	r2, r3, #4
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00f      	beq.n	8001b7a <HAL_UART_IRQHandler+0xfa>
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	f003 0320 	and.w	r3, r3, #32
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d104      	bne.n	8001b6e <HAL_UART_IRQHandler+0xee>
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d005      	beq.n	8001b7a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b72:	f043 0208 	orr.w	r2, r3, #8
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d078      	beq.n	8001c74 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	f003 0320 	and.w	r3, r3, #32
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d007      	beq.n	8001b9c <HAL_UART_IRQHandler+0x11c>
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	f003 0320 	and.w	r3, r3, #32
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d002      	beq.n	8001b9c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f000 f966 	bl	8001e68 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	bf14      	ite	ne
 8001baa:	2301      	movne	r3, #1
 8001bac:	2300      	moveq	r3, #0
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d102      	bne.n	8001bc4 <HAL_UART_IRQHandler+0x144>
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d031      	beq.n	8001c28 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f000 f8b7 	bl	8001d38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	695b      	ldr	r3, [r3, #20]
 8001bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d023      	beq.n	8001c20 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	695a      	ldr	r2, [r3, #20]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001be6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d013      	beq.n	8001c18 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bf4:	4a21      	ldr	r2, [pc, #132]	; (8001c7c <HAL_UART_IRQHandler+0x1fc>)
 8001bf6:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7fe ffef 	bl	8000be0 <HAL_DMA_Abort_IT>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d016      	beq.n	8001c36 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c12:	4610      	mov	r0, r2
 8001c14:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c16:	e00e      	b.n	8001c36 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f000 f83a 	bl	8001c92 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c1e:	e00a      	b.n	8001c36 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 f836 	bl	8001c92 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c26:	e006      	b.n	8001c36 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 f832 	bl	8001c92 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001c34:	e01e      	b.n	8001c74 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c36:	bf00      	nop
    return;
 8001c38:	e01c      	b.n	8001c74 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d008      	beq.n	8001c56 <HAL_UART_IRQHandler+0x1d6>
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f8a3 	bl	8001d9a <UART_Transmit_IT>
    return;
 8001c54:	e00f      	b.n	8001c76 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d00a      	beq.n	8001c76 <HAL_UART_IRQHandler+0x1f6>
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d005      	beq.n	8001c76 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f8e4 	bl	8001e38 <UART_EndTransmit_IT>
    return;
 8001c70:	bf00      	nop
 8001c72:	e000      	b.n	8001c76 <HAL_UART_IRQHandler+0x1f6>
    return;
 8001c74:	bf00      	nop
  }
}
 8001c76:	3720      	adds	r7, #32
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	08001d73 	.word	0x08001d73

08001c80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr

08001c92 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr

08001ca4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	603b      	str	r3, [r7, #0]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cb4:	e02c      	b.n	8001d10 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cbc:	d028      	beq.n	8001d10 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d007      	beq.n	8001cd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8001cc4:	f7fe fe52 	bl	800096c <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d21d      	bcs.n	8001d10 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68da      	ldr	r2, [r3, #12]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001ce2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	695a      	ldr	r2, [r3, #20]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 0201 	bic.w	r2, r2, #1
 8001cf2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2220      	movs	r2, #32
 8001cf8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2220      	movs	r2, #32
 8001d00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e00f      	b.n	8001d30 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	bf0c      	ite	eq
 8001d20:	2301      	moveq	r3, #1
 8001d22:	2300      	movne	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	461a      	mov	r2, r3
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d0c3      	beq.n	8001cb6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68da      	ldr	r2, [r3, #12]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001d4e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	695a      	ldr	r2, [r3, #20]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 0201 	bic.w	r2, r2, #1
 8001d5e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2220      	movs	r2, #32
 8001d64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr

08001d72 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b084      	sub	sp, #16
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2200      	movs	r2, #0
 8001d84:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f7ff ff80 	bl	8001c92 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001d92:	bf00      	nop
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b085      	sub	sp, #20
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b21      	cmp	r3, #33	; 0x21
 8001dac:	d13e      	bne.n	8001e2c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001db6:	d114      	bne.n	8001de2 <UART_Transmit_IT+0x48>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d110      	bne.n	8001de2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	881b      	ldrh	r3, [r3, #0]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001dd4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	1c9a      	adds	r2, r3, #2
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	621a      	str	r2, [r3, #32]
 8001de0:	e008      	b.n	8001df4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	1c59      	adds	r1, r3, #1
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6211      	str	r1, [r2, #32]
 8001dec:	781a      	ldrb	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	4619      	mov	r1, r3
 8001e02:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d10f      	bne.n	8001e28 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68da      	ldr	r2, [r3, #12]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e16:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68da      	ldr	r2, [r3, #12]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e26:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	e000      	b.n	8001e2e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001e2c:	2302      	movs	r3, #2
  }
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr

08001e38 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68da      	ldr	r2, [r3, #12]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e4e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2220      	movs	r2, #32
 8001e54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff ff11 	bl	8001c80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b22      	cmp	r3, #34	; 0x22
 8001e7a:	d170      	bne.n	8001f5e <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e84:	d117      	bne.n	8001eb6 <UART_Receive_IT+0x4e>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d113      	bne.n	8001eb6 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e96:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eae:	1c9a      	adds	r2, r3, #2
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	629a      	str	r2, [r3, #40]	; 0x28
 8001eb4:	e026      	b.n	8001f04 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eba:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ec8:	d007      	beq.n	8001eda <UART_Receive_IT+0x72>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10a      	bne.n	8001ee8 <UART_Receive_IT+0x80>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d106      	bne.n	8001ee8 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	701a      	strb	r2, [r3, #0]
 8001ee6:	e008      	b.n	8001efa <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efe:	1c5a      	adds	r2, r3, #1
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	4619      	mov	r1, r3
 8001f12:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d120      	bne.n	8001f5a <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 0220 	bic.w	r2, r2, #32
 8001f26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68da      	ldr	r2, [r3, #12]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	695a      	ldr	r2, [r3, #20]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0201 	bic.w	r2, r2, #1
 8001f46:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2220      	movs	r2, #32
 8001f4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7fe fb4b 	bl	80005ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8001f56:	2300      	movs	r3, #0
 8001f58:	e002      	b.n	8001f60 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	e000      	b.n	8001f60 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8001f5e:	2302      	movs	r3, #2
  }
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	68da      	ldr	r2, [r3, #12]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001fa2:	f023 030c 	bic.w	r3, r3, #12
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6812      	ldr	r2, [r2, #0]
 8001faa:	68b9      	ldr	r1, [r7, #8]
 8001fac:	430b      	orrs	r3, r1
 8001fae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	699a      	ldr	r2, [r3, #24]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a2c      	ldr	r2, [pc, #176]	; (800207c <UART_SetConfig+0x114>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d103      	bne.n	8001fd8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001fd0:	f7ff fbf0 	bl	80017b4 <HAL_RCC_GetPCLK2Freq>
 8001fd4:	60f8      	str	r0, [r7, #12]
 8001fd6:	e002      	b.n	8001fde <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001fd8:	f7ff fbd8 	bl	800178c <HAL_RCC_GetPCLK1Freq>
 8001fdc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	009a      	lsls	r2, r3, #2
 8001fe8:	441a      	add	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff4:	4a22      	ldr	r2, [pc, #136]	; (8002080 <UART_SetConfig+0x118>)
 8001ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffa:	095b      	lsrs	r3, r3, #5
 8001ffc:	0119      	lsls	r1, r3, #4
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	009a      	lsls	r2, r3, #2
 8002008:	441a      	add	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	fbb2 f2f3 	udiv	r2, r2, r3
 8002014:	4b1a      	ldr	r3, [pc, #104]	; (8002080 <UART_SetConfig+0x118>)
 8002016:	fba3 0302 	umull	r0, r3, r3, r2
 800201a:	095b      	lsrs	r3, r3, #5
 800201c:	2064      	movs	r0, #100	; 0x64
 800201e:	fb00 f303 	mul.w	r3, r0, r3
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	011b      	lsls	r3, r3, #4
 8002026:	3332      	adds	r3, #50	; 0x32
 8002028:	4a15      	ldr	r2, [pc, #84]	; (8002080 <UART_SetConfig+0x118>)
 800202a:	fba2 2303 	umull	r2, r3, r2, r3
 800202e:	095b      	lsrs	r3, r3, #5
 8002030:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002034:	4419      	add	r1, r3
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	009a      	lsls	r2, r3, #2
 8002040:	441a      	add	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	fbb2 f2f3 	udiv	r2, r2, r3
 800204c:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <UART_SetConfig+0x118>)
 800204e:	fba3 0302 	umull	r0, r3, r3, r2
 8002052:	095b      	lsrs	r3, r3, #5
 8002054:	2064      	movs	r0, #100	; 0x64
 8002056:	fb00 f303 	mul.w	r3, r0, r3
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	011b      	lsls	r3, r3, #4
 800205e:	3332      	adds	r3, #50	; 0x32
 8002060:	4a07      	ldr	r2, [pc, #28]	; (8002080 <UART_SetConfig+0x118>)
 8002062:	fba2 2303 	umull	r2, r3, r2, r3
 8002066:	095b      	lsrs	r3, r3, #5
 8002068:	f003 020f 	and.w	r2, r3, #15
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	440a      	add	r2, r1
 8002072:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002074:	bf00      	nop
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40013800 	.word	0x40013800
 8002080:	51eb851f 	.word	0x51eb851f

08002084 <__libc_init_array>:
 8002084:	b570      	push	{r4, r5, r6, lr}
 8002086:	2500      	movs	r5, #0
 8002088:	4e0c      	ldr	r6, [pc, #48]	; (80020bc <__libc_init_array+0x38>)
 800208a:	4c0d      	ldr	r4, [pc, #52]	; (80020c0 <__libc_init_array+0x3c>)
 800208c:	1ba4      	subs	r4, r4, r6
 800208e:	10a4      	asrs	r4, r4, #2
 8002090:	42a5      	cmp	r5, r4
 8002092:	d109      	bne.n	80020a8 <__libc_init_array+0x24>
 8002094:	f000 f82a 	bl	80020ec <_init>
 8002098:	2500      	movs	r5, #0
 800209a:	4e0a      	ldr	r6, [pc, #40]	; (80020c4 <__libc_init_array+0x40>)
 800209c:	4c0a      	ldr	r4, [pc, #40]	; (80020c8 <__libc_init_array+0x44>)
 800209e:	1ba4      	subs	r4, r4, r6
 80020a0:	10a4      	asrs	r4, r4, #2
 80020a2:	42a5      	cmp	r5, r4
 80020a4:	d105      	bne.n	80020b2 <__libc_init_array+0x2e>
 80020a6:	bd70      	pop	{r4, r5, r6, pc}
 80020a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020ac:	4798      	blx	r3
 80020ae:	3501      	adds	r5, #1
 80020b0:	e7ee      	b.n	8002090 <__libc_init_array+0xc>
 80020b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020b6:	4798      	blx	r3
 80020b8:	3501      	adds	r5, #1
 80020ba:	e7f2      	b.n	80020a2 <__libc_init_array+0x1e>
 80020bc:	08002280 	.word	0x08002280
 80020c0:	08002280 	.word	0x08002280
 80020c4:	08002280 	.word	0x08002280
 80020c8:	08002284 	.word	0x08002284

080020cc <memset>:
 80020cc:	4603      	mov	r3, r0
 80020ce:	4402      	add	r2, r0
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d100      	bne.n	80020d6 <memset+0xa>
 80020d4:	4770      	bx	lr
 80020d6:	f803 1b01 	strb.w	r1, [r3], #1
 80020da:	e7f9      	b.n	80020d0 <memset+0x4>

080020dc <strcpy>:
 80020dc:	4603      	mov	r3, r0
 80020de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80020e2:	f803 2b01 	strb.w	r2, [r3], #1
 80020e6:	2a00      	cmp	r2, #0
 80020e8:	d1f9      	bne.n	80020de <strcpy+0x2>
 80020ea:	4770      	bx	lr

080020ec <_init>:
 80020ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ee:	bf00      	nop
 80020f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020f2:	bc08      	pop	{r3}
 80020f4:	469e      	mov	lr, r3
 80020f6:	4770      	bx	lr

080020f8 <_fini>:
 80020f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020fa:	bf00      	nop
 80020fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020fe:	bc08      	pop	{r3}
 8002100:	469e      	mov	lr, r3
 8002102:	4770      	bx	lr
