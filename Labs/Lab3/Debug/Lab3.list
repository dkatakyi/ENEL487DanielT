
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002914  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08002a20  08002a20  00012a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bf0  08002bf0  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08002bf0  08002bf0  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bf0  08002bf0  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bf0  08002bf0  00012bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bf4  08002bf4  00012bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08002bf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000094  08002c8c  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08002c8c  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000793f  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000174d  00000000  00000000  000279fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006a8  00000000  00000000  00029150  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005e0  00000000  00000000  000297f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017585  00000000  00000000  00029dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006973  00000000  00000000  0004135d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000822b6  00000000  00000000  00047cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c9f86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cac  00000000  00000000  000ca004  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a08 	.word	0x08002a08

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000098 	.word	0x20000098
 8000148:	08002a08 	.word	0x08002a08

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <isCompleteLine>:
 */

#include "CLI.h"

bool isCompleteLine(char recBuffer[10])
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	//if enter was hit, then it is a complete line, else it isnt
	if(recBuffer[0] == '\r')
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	781b      	ldrb	r3, [r3, #0]
 8000168:	2b0d      	cmp	r3, #13
 800016a:	d101      	bne.n	8000170 <isCompleteLine+0x14>
	{
		return true;
 800016c:	2301      	movs	r3, #1
 800016e:	e000      	b.n	8000172 <isCompleteLine+0x16>
	}
	else
	{
		return false;
 8000170:	2300      	movs	r3, #0
	}
}
 8000172:	4618      	mov	r0, r3
 8000174:	370c      	adds	r7, #12
 8000176:	46bd      	mov	sp, r7
 8000178:	bc80      	pop	{r7}
 800017a:	4770      	bx	lr

0800017c <copyCharTo>:

void copyCharTo(char recBuffer[10], char s[20], int coun)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b084      	sub	sp, #16
 8000180:	af00      	add	r7, sp, #0
 8000182:	60f8      	str	r0, [r7, #12]
 8000184:	60b9      	str	r1, [r7, #8]
 8000186:	607a      	str	r2, [r7, #4]

		  if(recBuffer[0] == '\b')
 8000188:	68fb      	ldr	r3, [r7, #12]
 800018a:	781b      	ldrb	r3, [r3, #0]
 800018c:	2b08      	cmp	r3, #8
 800018e:	d103      	bne.n	8000198 <copyCharTo+0x1c>
		  {
			  printString("\b \b");
 8000190:	4808      	ldr	r0, [pc, #32]	; (80001b4 <copyCharTo+0x38>)
 8000192:	f000 f8f7 	bl	8000384 <printString>
		  {
			  s[coun] = recBuffer[0];
			  printString(recBuffer);

		  }
}
 8000196:	e008      	b.n	80001aa <copyCharTo+0x2e>
			  s[coun] = recBuffer[0];
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	68ba      	ldr	r2, [r7, #8]
 800019c:	4413      	add	r3, r2
 800019e:	68fa      	ldr	r2, [r7, #12]
 80001a0:	7812      	ldrb	r2, [r2, #0]
 80001a2:	701a      	strb	r2, [r3, #0]
			  printString(recBuffer);
 80001a4:	68f8      	ldr	r0, [r7, #12]
 80001a6:	f000 f8ed 	bl	8000384 <printString>
}
 80001aa:	bf00      	nop
 80001ac:	3710      	adds	r7, #16
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bd80      	pop	{r7, pc}
 80001b2:	bf00      	nop
 80001b4:	08002a20 	.word	0x08002a20

080001b8 <executeCommand>:

void executeCommand(char recBuffer[20])
{
 80001b8:	b5b0      	push	{r4, r5, r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
	  if(recBuffer[0] == 'h' && recBuffer[1] == 'e' && recBuffer[2] == 'l' && recBuffer[3] == 'p' && recBuffer[4] == '\r')
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	781b      	ldrb	r3, [r3, #0]
 80001c4:	2b68      	cmp	r3, #104	; 0x68
 80001c6:	d11d      	bne.n	8000204 <executeCommand+0x4c>
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	3301      	adds	r3, #1
 80001cc:	781b      	ldrb	r3, [r3, #0]
 80001ce:	2b65      	cmp	r3, #101	; 0x65
 80001d0:	d118      	bne.n	8000204 <executeCommand+0x4c>
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	3302      	adds	r3, #2
 80001d6:	781b      	ldrb	r3, [r3, #0]
 80001d8:	2b6c      	cmp	r3, #108	; 0x6c
 80001da:	d113      	bne.n	8000204 <executeCommand+0x4c>
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	3303      	adds	r3, #3
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	2b70      	cmp	r3, #112	; 0x70
 80001e4:	d10e      	bne.n	8000204 <executeCommand+0x4c>
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	3304      	adds	r3, #4
 80001ea:	781b      	ldrb	r3, [r3, #0]
 80001ec:	2b0d      	cmp	r3, #13
 80001ee:	d109      	bne.n	8000204 <executeCommand+0x4c>
	  {
		  printString("\n1. \"ledon\" turns the green LED on\r\n");
 80001f0:	485b      	ldr	r0, [pc, #364]	; (8000360 <executeCommand+0x1a8>)
 80001f2:	f000 f8c7 	bl	8000384 <printString>
		  printString("\n2. \"ledoff\" turns the green LED off\r\n");
 80001f6:	485b      	ldr	r0, [pc, #364]	; (8000364 <executeCommand+0x1ac>)
 80001f8:	f000 f8c4 	bl	8000384 <printString>
		  printString("\n3. \"ledquery\" returns the state of the green LED\r\n");
 80001fc:	485a      	ldr	r0, [pc, #360]	; (8000368 <executeCommand+0x1b0>)
 80001fe:	f000 f8c1 	bl	8000384 <printString>
 8000202:	e0a8      	b.n	8000356 <executeCommand+0x19e>

	  }
	  else if(recBuffer[0] == 'l' && recBuffer[1] == 'e' && recBuffer[2] == 'd' && recBuffer[3] == 'o' && recBuffer[4] == 'n' && recBuffer[5] == '\r')
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	2b6c      	cmp	r3, #108	; 0x6c
 800020a:	d121      	bne.n	8000250 <executeCommand+0x98>
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	3301      	adds	r3, #1
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	2b65      	cmp	r3, #101	; 0x65
 8000214:	d11c      	bne.n	8000250 <executeCommand+0x98>
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	3302      	adds	r3, #2
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	2b64      	cmp	r3, #100	; 0x64
 800021e:	d117      	bne.n	8000250 <executeCommand+0x98>
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	3303      	adds	r3, #3
 8000224:	781b      	ldrb	r3, [r3, #0]
 8000226:	2b6f      	cmp	r3, #111	; 0x6f
 8000228:	d112      	bne.n	8000250 <executeCommand+0x98>
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	3304      	adds	r3, #4
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	2b6e      	cmp	r3, #110	; 0x6e
 8000232:	d10d      	bne.n	8000250 <executeCommand+0x98>
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	3305      	adds	r3, #5
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	2b0d      	cmp	r3, #13
 800023c:	d108      	bne.n	8000250 <executeCommand+0x98>
	  {
		  printString("\nDone!\r\n");
 800023e:	484b      	ldr	r0, [pc, #300]	; (800036c <executeCommand+0x1b4>)
 8000240:	f000 f8a0 	bl	8000384 <printString>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000244:	2201      	movs	r2, #1
 8000246:	2120      	movs	r1, #32
 8000248:	4849      	ldr	r0, [pc, #292]	; (8000370 <executeCommand+0x1b8>)
 800024a:	f000 ff26 	bl	800109a <HAL_GPIO_WritePin>
 800024e:	e082      	b.n	8000356 <executeCommand+0x19e>
	  }
	  else if(recBuffer[0] == 'l' && recBuffer[1] == 'e' && recBuffer[2] == 'd' && recBuffer[3] == 'o' && recBuffer[4] == 'f' && recBuffer[5] == 'f' && recBuffer[6] == '\r')
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	2b6c      	cmp	r3, #108	; 0x6c
 8000256:	d126      	bne.n	80002a6 <executeCommand+0xee>
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	3301      	adds	r3, #1
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2b65      	cmp	r3, #101	; 0x65
 8000260:	d121      	bne.n	80002a6 <executeCommand+0xee>
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	3302      	adds	r3, #2
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	2b64      	cmp	r3, #100	; 0x64
 800026a:	d11c      	bne.n	80002a6 <executeCommand+0xee>
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	3303      	adds	r3, #3
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	2b6f      	cmp	r3, #111	; 0x6f
 8000274:	d117      	bne.n	80002a6 <executeCommand+0xee>
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	3304      	adds	r3, #4
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	2b66      	cmp	r3, #102	; 0x66
 800027e:	d112      	bne.n	80002a6 <executeCommand+0xee>
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	3305      	adds	r3, #5
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	2b66      	cmp	r3, #102	; 0x66
 8000288:	d10d      	bne.n	80002a6 <executeCommand+0xee>
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	3306      	adds	r3, #6
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	2b0d      	cmp	r3, #13
 8000292:	d108      	bne.n	80002a6 <executeCommand+0xee>
	  {
		  printString("\nDone!\r\n");
 8000294:	4835      	ldr	r0, [pc, #212]	; (800036c <executeCommand+0x1b4>)
 8000296:	f000 f875 	bl	8000384 <printString>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800029a:	2200      	movs	r2, #0
 800029c:	2120      	movs	r1, #32
 800029e:	4834      	ldr	r0, [pc, #208]	; (8000370 <executeCommand+0x1b8>)
 80002a0:	f000 fefb 	bl	800109a <HAL_GPIO_WritePin>
 80002a4:	e057      	b.n	8000356 <executeCommand+0x19e>
	  }
	  else if(recBuffer[0] == 'l' && recBuffer[1] == 'e' && recBuffer[2] == 'd' && recBuffer[3] == 'q' && recBuffer[4] == 'u' && recBuffer[5] == 'e' && recBuffer[6] == 'r' && recBuffer[7] == 'y' && recBuffer[8] == '\r')
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	2b6c      	cmp	r3, #108	; 0x6c
 80002ac:	d136      	bne.n	800031c <executeCommand+0x164>
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	3301      	adds	r3, #1
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	2b65      	cmp	r3, #101	; 0x65
 80002b6:	d131      	bne.n	800031c <executeCommand+0x164>
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	3302      	adds	r3, #2
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	2b64      	cmp	r3, #100	; 0x64
 80002c0:	d12c      	bne.n	800031c <executeCommand+0x164>
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	3303      	adds	r3, #3
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	2b71      	cmp	r3, #113	; 0x71
 80002ca:	d127      	bne.n	800031c <executeCommand+0x164>
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	3304      	adds	r3, #4
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b75      	cmp	r3, #117	; 0x75
 80002d4:	d122      	bne.n	800031c <executeCommand+0x164>
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	3305      	adds	r3, #5
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	2b65      	cmp	r3, #101	; 0x65
 80002de:	d11d      	bne.n	800031c <executeCommand+0x164>
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	3306      	adds	r3, #6
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	2b72      	cmp	r3, #114	; 0x72
 80002e8:	d118      	bne.n	800031c <executeCommand+0x164>
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	3307      	adds	r3, #7
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	2b79      	cmp	r3, #121	; 0x79
 80002f2:	d113      	bne.n	800031c <executeCommand+0x164>
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	3308      	adds	r3, #8
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	2b0d      	cmp	r3, #13
 80002fc:	d10e      	bne.n	800031c <executeCommand+0x164>
	  {
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0x1)
 80002fe:	2120      	movs	r1, #32
 8000300:	481b      	ldr	r0, [pc, #108]	; (8000370 <executeCommand+0x1b8>)
 8000302:	f000 feb3 	bl	800106c <HAL_GPIO_ReadPin>
 8000306:	4603      	mov	r3, r0
 8000308:	2b01      	cmp	r3, #1
 800030a:	d103      	bne.n	8000314 <executeCommand+0x15c>
		  {
			  printString("\nThe LED is on!\r\n");
 800030c:	4819      	ldr	r0, [pc, #100]	; (8000374 <executeCommand+0x1bc>)
 800030e:	f000 f839 	bl	8000384 <printString>
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0x1)
 8000312:	e020      	b.n	8000356 <executeCommand+0x19e>
		  }
		  else
		  {
			  printString("\nThe LED is off!\r\n");
 8000314:	4818      	ldr	r0, [pc, #96]	; (8000378 <executeCommand+0x1c0>)
 8000316:	f000 f835 	bl	8000384 <printString>
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0x1)
 800031a:	e01c      	b.n	8000356 <executeCommand+0x19e>
		  }

	  }
	  else if(recBuffer[0] == '\r')
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	2b0d      	cmp	r3, #13
 8000322:	d018      	beq.n	8000356 <executeCommand+0x19e>
	  {

	  }
	  else
	  {
		  strcpy((char *)recBuffer, "\nError. Try again.\r\n");
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	4a15      	ldr	r2, [pc, #84]	; (800037c <executeCommand+0x1c4>)
 8000328:	461d      	mov	r5, r3
 800032a:	4614      	mov	r4, r2
 800032c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800032e:	6028      	str	r0, [r5, #0]
 8000330:	6069      	str	r1, [r5, #4]
 8000332:	60aa      	str	r2, [r5, #8]
 8000334:	60eb      	str	r3, [r5, #12]
 8000336:	6820      	ldr	r0, [r4, #0]
 8000338:	6128      	str	r0, [r5, #16]
 800033a:	7923      	ldrb	r3, [r4, #4]
 800033c:	752b      	strb	r3, [r5, #20]
		  HAL_UART_Transmit(&huart3, recBuffer, strlen((char *)recBuffer), 1000);
 800033e:	6878      	ldr	r0, [r7, #4]
 8000340:	f7ff ff04 	bl	800014c <strlen>
 8000344:	4603      	mov	r3, r0
 8000346:	b29a      	uxth	r2, r3
 8000348:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800034c:	6879      	ldr	r1, [r7, #4]
 800034e:	480c      	ldr	r0, [pc, #48]	; (8000380 <executeCommand+0x1c8>)
 8000350:	f001 fb25 	bl	800199e <HAL_UART_Transmit>
	  }
}
 8000354:	e7ff      	b.n	8000356 <executeCommand+0x19e>
 8000356:	bf00      	nop
 8000358:	3708      	adds	r7, #8
 800035a:	46bd      	mov	sp, r7
 800035c:	bdb0      	pop	{r4, r5, r7, pc}
 800035e:	bf00      	nop
 8000360:	08002a24 	.word	0x08002a24
 8000364:	08002a4c 	.word	0x08002a4c
 8000368:	08002a74 	.word	0x08002a74
 800036c:	08002aa8 	.word	0x08002aa8
 8000370:	40010800 	.word	0x40010800
 8000374:	08002ab4 	.word	0x08002ab4
 8000378:	08002ac8 	.word	0x08002ac8
 800037c:	08002adc 	.word	0x08002adc
 8000380:	200000d8 	.word	0x200000d8

08000384 <printString>:
	strcat(msg, "H");
	return msg;
}

void printString(const char* mess)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b086      	sub	sp, #24
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
	int i = 0;
 800038c:	2300      	movs	r3, #0
 800038e:	617b      	str	r3, [r7, #20]
	HAL_StatusTypeDef  st;

	while(huart3.gState == HAL_UART_STATE_BUSY_TX){}
 8000390:	bf00      	nop
 8000392:	4b16      	ldr	r3, [pc, #88]	; (80003ec <printString+0x68>)
 8000394:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000398:	b2db      	uxtb	r3, r3
 800039a:	2b21      	cmp	r3, #33	; 0x21
 800039c:	d0f9      	beq.n	8000392 <printString+0xe>

	for(const char* p = mess; *p; ++p)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	613b      	str	r3, [r7, #16]
 80003a2:	e00c      	b.n	80003be <printString+0x3a>
	{
		cliBufferTX[i] = *p;
 80003a4:	693b      	ldr	r3, [r7, #16]
 80003a6:	7819      	ldrb	r1, [r3, #0]
 80003a8:	4a11      	ldr	r2, [pc, #68]	; (80003f0 <printString+0x6c>)
 80003aa:	697b      	ldr	r3, [r7, #20]
 80003ac:	4413      	add	r3, r2
 80003ae:	460a      	mov	r2, r1
 80003b0:	701a      	strb	r2, [r3, #0]
		i++;
 80003b2:	697b      	ldr	r3, [r7, #20]
 80003b4:	3301      	adds	r3, #1
 80003b6:	617b      	str	r3, [r7, #20]
	for(const char* p = mess; *p; ++p)
 80003b8:	693b      	ldr	r3, [r7, #16]
 80003ba:	3301      	adds	r3, #1
 80003bc:	613b      	str	r3, [r7, #16]
 80003be:	693b      	ldr	r3, [r7, #16]
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d1ee      	bne.n	80003a4 <printString+0x20>
	}

	st = HAL_UART_Transmit(&huart3, cliBufferTX, i, 1000);
 80003c6:	697b      	ldr	r3, [r7, #20]
 80003c8:	b29a      	uxth	r2, r3
 80003ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003ce:	4908      	ldr	r1, [pc, #32]	; (80003f0 <printString+0x6c>)
 80003d0:	4806      	ldr	r0, [pc, #24]	; (80003ec <printString+0x68>)
 80003d2:	f001 fae4 	bl	800199e <HAL_UART_Transmit>
 80003d6:	4603      	mov	r3, r0
 80003d8:	73fb      	strb	r3, [r7, #15]
	if(st != HAL_OK)
 80003da:	7bfb      	ldrb	r3, [r7, #15]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <printString+0x60>
	{
		Error_Handler();
 80003e0:	f000 f9ac 	bl	800073c <Error_Handler>
	}

}
 80003e4:	bf00      	nop
 80003e6:	3718      	adds	r7, #24
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	200000d8 	.word	0x200000d8
 80003f0:	20000118 	.word	0x20000118

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f8:	f000 fad6 	bl	80009a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fc:	f000 f876 	bl	80004ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000400:	f000 f8da 	bl	80005b8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000404:	f000 f8ae 	bl	8000564 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */


  //Print out Welcome Message
  printString(CLEAR_SCREEN);
 8000408:	4b29      	ldr	r3, [pc, #164]	; (80004b0 <main+0xbc>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4618      	mov	r0, r3
 800040e:	f7ff ffb9 	bl	8000384 <printString>
  printString(GO_TO_TOP);
 8000412:	4b28      	ldr	r3, [pc, #160]	; (80004b4 <main+0xc0>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4618      	mov	r0, r3
 8000418:	f7ff ffb4 	bl	8000384 <printString>
  printString("Welcome to the CLI!\r\n");
 800041c:	4826      	ldr	r0, [pc, #152]	; (80004b8 <main+0xc4>)
 800041e:	f7ff ffb1 	bl	8000384 <printString>

  HAL_Delay(2000);
 8000422:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000426:	f000 fb21 	bl	8000a6c <HAL_Delay>

  //Formats the screen to show counter and create a scroll window
  printString(CLEAR_SCREEN);
 800042a:	4b21      	ldr	r3, [pc, #132]	; (80004b0 <main+0xbc>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4618      	mov	r0, r3
 8000430:	f7ff ffa8 	bl	8000384 <printString>
  printString(GO_TO_TOP);
 8000434:	4b1f      	ldr	r3, [pc, #124]	; (80004b4 <main+0xc0>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4618      	mov	r0, r3
 800043a:	f7ff ffa3 	bl	8000384 <printString>
  printString("counter: ");
 800043e:	481f      	ldr	r0, [pc, #124]	; (80004bc <main+0xc8>)
 8000440:	f7ff ffa0 	bl	8000384 <printString>
  printString(SCROLL_WINDOW);
 8000444:	4b1e      	ldr	r3, [pc, #120]	; (80004c0 <main+0xcc>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff ff9b 	bl	8000384 <printString>
  printString(GO_TO_SCROLL);
 800044e:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <main+0xd0>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4618      	mov	r0, r3
 8000454:	f7ff ff96 	bl	8000384 <printString>

  //printString(goTo(10, 0));

  //Start the process of receiving data
  HAL_UART_Receive_IT(&huart3, cliBufferRX, 1);
 8000458:	2201      	movs	r2, #1
 800045a:	491b      	ldr	r1, [pc, #108]	; (80004c8 <main+0xd4>)
 800045c:	481b      	ldr	r0, [pc, #108]	; (80004cc <main+0xd8>)
 800045e:	f001 fb30 	bl	8001ac2 <HAL_UART_Receive_IT>
  printString("\nEnter a command for the LED:\r\n");
 8000462:	481b      	ldr	r0, [pc, #108]	; (80004d0 <main+0xdc>)
 8000464:	f7ff ff8e 	bl	8000384 <printString>
  printString(SAVE_CURS);
 8000468:	4b1a      	ldr	r3, [pc, #104]	; (80004d4 <main+0xe0>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4618      	mov	r0, r3
 800046e:	f7ff ff89 	bl	8000384 <printString>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//increment counter and display it approx. every 1 second
	HAL_Delay(1000);
 8000472:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000476:	f000 faf9 	bl	8000a6c <HAL_Delay>
	counter++;
 800047a:	4b17      	ldr	r3, [pc, #92]	; (80004d8 <main+0xe4>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	3301      	adds	r3, #1
 8000480:	4a15      	ldr	r2, [pc, #84]	; (80004d8 <main+0xe4>)
 8000482:	6013      	str	r3, [r2, #0]
	sprintf(counter_str, "%d", counter);
 8000484:	4b14      	ldr	r3, [pc, #80]	; (80004d8 <main+0xe4>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	461a      	mov	r2, r3
 800048a:	4914      	ldr	r1, [pc, #80]	; (80004dc <main+0xe8>)
 800048c:	4814      	ldr	r0, [pc, #80]	; (80004e0 <main+0xec>)
 800048e:	f001 fea1 	bl	80021d4 <siprintf>
	printString(HIDE_CURS);
 8000492:	4b14      	ldr	r3, [pc, #80]	; (80004e4 <main+0xf0>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4618      	mov	r0, r3
 8000498:	f7ff ff74 	bl	8000384 <printString>
	printString(GO_TO_COUNT);
 800049c:	4b12      	ldr	r3, [pc, #72]	; (80004e8 <main+0xf4>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4618      	mov	r0, r3
 80004a2:	f7ff ff6f 	bl	8000384 <printString>
	printString(counter_str);
 80004a6:	480e      	ldr	r0, [pc, #56]	; (80004e0 <main+0xec>)
 80004a8:	f7ff ff6c 	bl	8000384 <printString>
	HAL_Delay(1000);
 80004ac:	e7e1      	b.n	8000472 <main+0x7e>
 80004ae:	bf00      	nop
 80004b0:	20000000 	.word	0x20000000
 80004b4:	2000000c 	.word	0x2000000c
 80004b8:	08002b44 	.word	0x08002b44
 80004bc:	08002b5c 	.word	0x08002b5c
 80004c0:	20000004 	.word	0x20000004
 80004c4:	20000008 	.word	0x20000008
 80004c8:	20000164 	.word	0x20000164
 80004cc:	200000d8 	.word	0x200000d8
 80004d0:	08002b68 	.word	0x08002b68
 80004d4:	2000001c 	.word	0x2000001c
 80004d8:	200000b4 	.word	0x200000b4
 80004dc:	08002b88 	.word	0x08002b88
 80004e0:	200000c4 	.word	0x200000c4
 80004e4:	20000014 	.word	0x20000014
 80004e8:	20000010 	.word	0x20000010

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b090      	sub	sp, #64	; 0x40
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	f107 0318 	add.w	r3, r7, #24
 80004f6:	2228      	movs	r2, #40	; 0x28
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f001 fe62 	bl	80021c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000500:	1d3b      	adds	r3, r7, #4
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	605a      	str	r2, [r3, #4]
 8000508:	609a      	str	r2, [r3, #8]
 800050a:	60da      	str	r2, [r3, #12]
 800050c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800050e:	2302      	movs	r3, #2
 8000510:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000512:	2301      	movs	r3, #1
 8000514:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000516:	2310      	movs	r3, #16
 8000518:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800051a:	2300      	movs	r3, #0
 800051c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800051e:	f107 0318 	add.w	r3, r7, #24
 8000522:	4618      	mov	r0, r3
 8000524:	f000 fdd2 	bl	80010cc <HAL_RCC_OscConfig>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800052e:	f000 f905 	bl	800073c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000532:	230f      	movs	r3, #15
 8000534:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000536:	2300      	movs	r3, #0
 8000538:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800053a:	2300      	movs	r3, #0
 800053c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800053e:	2300      	movs	r3, #0
 8000540:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000542:	2300      	movs	r3, #0
 8000544:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f001 f83e 	bl	80015cc <HAL_RCC_ClockConfig>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000556:	f000 f8f1 	bl	800073c <Error_Handler>
  }
}
 800055a:	bf00      	nop
 800055c:	3740      	adds	r7, #64	; 0x40
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
	...

08000564 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000568:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <MX_USART3_UART_Init+0x4c>)
 800056a:	4a12      	ldr	r2, [pc, #72]	; (80005b4 <MX_USART3_UART_Init+0x50>)
 800056c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800056e:	4b10      	ldr	r3, [pc, #64]	; (80005b0 <MX_USART3_UART_Init+0x4c>)
 8000570:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000574:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <MX_USART3_UART_Init+0x4c>)
 8000578:	2200      	movs	r2, #0
 800057a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800057c:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <MX_USART3_UART_Init+0x4c>)
 800057e:	2200      	movs	r2, #0
 8000580:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000582:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <MX_USART3_UART_Init+0x4c>)
 8000584:	2200      	movs	r2, #0
 8000586:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000588:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <MX_USART3_UART_Init+0x4c>)
 800058a:	220c      	movs	r2, #12
 800058c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800058e:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <MX_USART3_UART_Init+0x4c>)
 8000590:	2200      	movs	r2, #0
 8000592:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <MX_USART3_UART_Init+0x4c>)
 8000596:	2200      	movs	r2, #0
 8000598:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800059a:	4805      	ldr	r0, [pc, #20]	; (80005b0 <MX_USART3_UART_Init+0x4c>)
 800059c:	f001 f9b2 	bl	8001904 <HAL_UART_Init>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80005a6:	f000 f8c9 	bl	800073c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	200000d8 	.word	0x200000d8
 80005b4:	40004800 	.word	0x40004800

080005b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005be:	f107 0308 	add.w	r3, r7, #8
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
 80005ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005cc:	4b17      	ldr	r3, [pc, #92]	; (800062c <MX_GPIO_Init+0x74>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	4a16      	ldr	r2, [pc, #88]	; (800062c <MX_GPIO_Init+0x74>)
 80005d2:	f043 0304 	orr.w	r3, r3, #4
 80005d6:	6193      	str	r3, [r2, #24]
 80005d8:	4b14      	ldr	r3, [pc, #80]	; (800062c <MX_GPIO_Init+0x74>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	f003 0304 	and.w	r3, r3, #4
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e4:	4b11      	ldr	r3, [pc, #68]	; (800062c <MX_GPIO_Init+0x74>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	4a10      	ldr	r2, [pc, #64]	; (800062c <MX_GPIO_Init+0x74>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6193      	str	r3, [r2, #24]
 80005f0:	4b0e      	ldr	r3, [pc, #56]	; (800062c <MX_GPIO_Init+0x74>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	f003 0310 	and.w	r3, r3, #16
 80005f8:	603b      	str	r3, [r7, #0]
 80005fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2120      	movs	r1, #32
 8000600:	480b      	ldr	r0, [pc, #44]	; (8000630 <MX_GPIO_Init+0x78>)
 8000602:	f000 fd4a 	bl	800109a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000606:	2320      	movs	r3, #32
 8000608:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060a:	2301      	movs	r3, #1
 800060c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000612:	2302      	movs	r3, #2
 8000614:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000616:	f107 0308 	add.w	r3, r7, #8
 800061a:	4619      	mov	r1, r3
 800061c:	4804      	ldr	r0, [pc, #16]	; (8000630 <MX_GPIO_Init+0x78>)
 800061e:	f000 fbcb 	bl	8000db8 <HAL_GPIO_Init>

}
 8000622:	bf00      	nop
 8000624:	3718      	adds	r7, #24
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40021000 	.word	0x40021000
 8000630:	40010800 	.word	0x40010800

08000634 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *husart)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	counter++;
 800063c:	4b34      	ldr	r3, [pc, #208]	; (8000710 <HAL_UART_RxCpltCallback+0xdc>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	3301      	adds	r3, #1
 8000642:	4a33      	ldr	r2, [pc, #204]	; (8000710 <HAL_UART_RxCpltCallback+0xdc>)
 8000644:	6013      	str	r3, [r2, #0]
	printString(RETURN_CURS);
 8000646:	4b33      	ldr	r3, [pc, #204]	; (8000714 <HAL_UART_RxCpltCallback+0xe0>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4618      	mov	r0, r3
 800064c:	f7ff fe9a 	bl	8000384 <printString>
	printString(SHOW_CURS);
 8000650:	4b31      	ldr	r3, [pc, #196]	; (8000718 <HAL_UART_RxCpltCallback+0xe4>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff fe95 	bl	8000384 <printString>
	//HAL_UART_Transmit(&huart3, cliBufferRX, 1, 1000);
	copyCharTo(cliBufferRX, save, j);
 800065a:	4b30      	ldr	r3, [pc, #192]	; (800071c <HAL_UART_RxCpltCallback+0xe8>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	461a      	mov	r2, r3
 8000660:	492f      	ldr	r1, [pc, #188]	; (8000720 <HAL_UART_RxCpltCallback+0xec>)
 8000662:	4830      	ldr	r0, [pc, #192]	; (8000724 <HAL_UART_RxCpltCallback+0xf0>)
 8000664:	f7ff fd8a 	bl	800017c <copyCharTo>

	//backspace incidence
	if(cliBufferRX[0] == '\b')
 8000668:	4b2e      	ldr	r3, [pc, #184]	; (8000724 <HAL_UART_RxCpltCallback+0xf0>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b08      	cmp	r3, #8
 800066e:	d105      	bne.n	800067c <HAL_UART_RxCpltCallback+0x48>
	{
		j--;
 8000670:	4b2a      	ldr	r3, [pc, #168]	; (800071c <HAL_UART_RxCpltCallback+0xe8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	3b01      	subs	r3, #1
 8000676:	4a29      	ldr	r2, [pc, #164]	; (800071c <HAL_UART_RxCpltCallback+0xe8>)
 8000678:	6013      	str	r3, [r2, #0]
 800067a:	e004      	b.n	8000686 <HAL_UART_RxCpltCallback+0x52>
	}
	else
	{
		j++;
 800067c:	4b27      	ldr	r3, [pc, #156]	; (800071c <HAL_UART_RxCpltCallback+0xe8>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	3301      	adds	r3, #1
 8000682:	4a26      	ldr	r2, [pc, #152]	; (800071c <HAL_UART_RxCpltCallback+0xe8>)
 8000684:	6013      	str	r3, [r2, #0]
	}

	//when enter is hit execute the command
	if(isCompleteLine(cliBufferRX))
 8000686:	4827      	ldr	r0, [pc, #156]	; (8000724 <HAL_UART_RxCpltCallback+0xf0>)
 8000688:	f7ff fd68 	bl	800015c <isCompleteLine>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d028      	beq.n	80006e4 <HAL_UART_RxCpltCallback+0xb0>
	{
		HAL_UART_Transmit(&huart3, "\r\n", 2, 1000);
 8000692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000696:	2202      	movs	r2, #2
 8000698:	4923      	ldr	r1, [pc, #140]	; (8000728 <HAL_UART_RxCpltCallback+0xf4>)
 800069a:	4824      	ldr	r0, [pc, #144]	; (800072c <HAL_UART_RxCpltCallback+0xf8>)
 800069c:	f001 f97f 	bl	800199e <HAL_UART_Transmit>
		strcpy((char *)cliBufferTX, save);
 80006a0:	491f      	ldr	r1, [pc, #124]	; (8000720 <HAL_UART_RxCpltCallback+0xec>)
 80006a2:	4823      	ldr	r0, [pc, #140]	; (8000730 <HAL_UART_RxCpltCallback+0xfc>)
 80006a4:	f001 fdb6 	bl	8002214 <strcpy>
		//HAL_UART_Transmit(&huart3, cliBufferTX, strlen((char *)cliBufferTX), 1000);

		executeCommand(save);
 80006a8:	481d      	ldr	r0, [pc, #116]	; (8000720 <HAL_UART_RxCpltCallback+0xec>)
 80006aa:	f7ff fd85 	bl	80001b8 <executeCommand>
		HAL_UART_Transmit(&huart3, "\r\n", 2, 1000);
 80006ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b2:	2202      	movs	r2, #2
 80006b4:	491c      	ldr	r1, [pc, #112]	; (8000728 <HAL_UART_RxCpltCallback+0xf4>)
 80006b6:	481d      	ldr	r0, [pc, #116]	; (800072c <HAL_UART_RxCpltCallback+0xf8>)
 80006b8:	f001 f971 	bl	800199e <HAL_UART_Transmit>
		j = 0;
 80006bc:	4b17      	ldr	r3, [pc, #92]	; (800071c <HAL_UART_RxCpltCallback+0xe8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < 20; i++)
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	e007      	b.n	80006d8 <HAL_UART_RxCpltCallback+0xa4>
		{
			save[i] = NULL;
 80006c8:	4a15      	ldr	r2, [pc, #84]	; (8000720 <HAL_UART_RxCpltCallback+0xec>)
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	4413      	add	r3, r2
 80006ce:	2200      	movs	r2, #0
 80006d0:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 20; i++)
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	3301      	adds	r3, #1
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	2b13      	cmp	r3, #19
 80006dc:	ddf4      	ble.n	80006c8 <HAL_UART_RxCpltCallback+0x94>
		}
		printString("\nEnter a command for the LED:\r\n");
 80006de:	4815      	ldr	r0, [pc, #84]	; (8000734 <HAL_UART_RxCpltCallback+0x100>)
 80006e0:	f7ff fe50 	bl	8000384 <printString>
	}

	printString(SAVE_CURS);
 80006e4:	4b14      	ldr	r3, [pc, #80]	; (8000738 <HAL_UART_RxCpltCallback+0x104>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff fe4b 	bl	8000384 <printString>

	while(huart3.gState == HAL_UART_STATE_BUSY_RX){}
 80006ee:	bf00      	nop
 80006f0:	4b0e      	ldr	r3, [pc, #56]	; (800072c <HAL_UART_RxCpltCallback+0xf8>)
 80006f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	2b22      	cmp	r3, #34	; 0x22
 80006fa:	d0f9      	beq.n	80006f0 <HAL_UART_RxCpltCallback+0xbc>

	HAL_UART_Receive_IT(&huart3, cliBufferRX, 1);
 80006fc:	2201      	movs	r2, #1
 80006fe:	4909      	ldr	r1, [pc, #36]	; (8000724 <HAL_UART_RxCpltCallback+0xf0>)
 8000700:	480a      	ldr	r0, [pc, #40]	; (800072c <HAL_UART_RxCpltCallback+0xf8>)
 8000702:	f001 f9de 	bl	8001ac2 <HAL_UART_Receive_IT>

}
 8000706:	bf00      	nop
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200000b4 	.word	0x200000b4
 8000714:	20000020 	.word	0x20000020
 8000718:	20000018 	.word	0x20000018
 800071c:	200000b0 	.word	0x200000b0
 8000720:	20000150 	.word	0x20000150
 8000724:	20000164 	.word	0x20000164
 8000728:	08002b8c 	.word	0x08002b8c
 800072c:	200000d8 	.word	0x200000d8
 8000730:	20000118 	.word	0x20000118
 8000734:	08002b68 	.word	0x08002b68
 8000738:	2000001c 	.word	0x2000001c

0800073c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr

08000748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000748:	b480      	push	{r7}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <HAL_MspInit+0x5c>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	4a14      	ldr	r2, [pc, #80]	; (80007a4 <HAL_MspInit+0x5c>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6193      	str	r3, [r2, #24]
 800075a:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <HAL_MspInit+0x5c>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <HAL_MspInit+0x5c>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	4a0e      	ldr	r2, [pc, #56]	; (80007a4 <HAL_MspInit+0x5c>)
 800076c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000770:	61d3      	str	r3, [r2, #28]
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <HAL_MspInit+0x5c>)
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800077e:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <HAL_MspInit+0x60>)
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	4a04      	ldr	r2, [pc, #16]	; (80007a8 <HAL_MspInit+0x60>)
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079a:	bf00      	nop
 800079c:	3714      	adds	r7, #20
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr
 80007a4:	40021000 	.word	0x40021000
 80007a8:	40010000 	.word	0x40010000

080007ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	; 0x28
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	f107 0314 	add.w	r3, r7, #20
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a29      	ldr	r2, [pc, #164]	; (800086c <HAL_UART_MspInit+0xc0>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d14b      	bne.n	8000864 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80007cc:	4b28      	ldr	r3, [pc, #160]	; (8000870 <HAL_UART_MspInit+0xc4>)
 80007ce:	69db      	ldr	r3, [r3, #28]
 80007d0:	4a27      	ldr	r2, [pc, #156]	; (8000870 <HAL_UART_MspInit+0xc4>)
 80007d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007d6:	61d3      	str	r3, [r2, #28]
 80007d8:	4b25      	ldr	r3, [pc, #148]	; (8000870 <HAL_UART_MspInit+0xc4>)
 80007da:	69db      	ldr	r3, [r3, #28]
 80007dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e4:	4b22      	ldr	r3, [pc, #136]	; (8000870 <HAL_UART_MspInit+0xc4>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	4a21      	ldr	r2, [pc, #132]	; (8000870 <HAL_UART_MspInit+0xc4>)
 80007ea:	f043 0310 	orr.w	r3, r3, #16
 80007ee:	6193      	str	r3, [r2, #24]
 80007f0:	4b1f      	ldr	r3, [pc, #124]	; (8000870 <HAL_UART_MspInit+0xc4>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	f003 0310 	and.w	r3, r3, #16
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC11     ------> USART3_RX
    PC10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80007fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000802:	2300      	movs	r3, #0
 8000804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	4818      	ldr	r0, [pc, #96]	; (8000874 <HAL_UART_MspInit+0xc8>)
 8000812:	f000 fad1 	bl	8000db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000816:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800081a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081c:	2302      	movs	r3, #2
 800081e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000820:	2303      	movs	r3, #3
 8000822:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	4619      	mov	r1, r3
 800082a:	4812      	ldr	r0, [pc, #72]	; (8000874 <HAL_UART_MspInit+0xc8>)
 800082c:	f000 fac4 	bl	8000db8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <HAL_UART_MspInit+0xcc>)
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
 8000836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000838:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
 800083e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000840:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
 8000846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000848:	f043 0310 	orr.w	r3, r3, #16
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
 800084e:	4a0a      	ldr	r2, [pc, #40]	; (8000878 <HAL_UART_MspInit+0xcc>)
 8000850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000852:	6053      	str	r3, [r2, #4]

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000854:	2200      	movs	r2, #0
 8000856:	2100      	movs	r1, #0
 8000858:	2027      	movs	r0, #39	; 0x27
 800085a:	f000 fa00 	bl	8000c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800085e:	2027      	movs	r0, #39	; 0x27
 8000860:	f000 fa19 	bl	8000c96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000864:	bf00      	nop
 8000866:	3728      	adds	r7, #40	; 0x28
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40004800 	.word	0x40004800
 8000870:	40021000 	.word	0x40021000
 8000874:	40011000 	.word	0x40011000
 8000878:	40010000 	.word	0x40010000

0800087c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr

08000888 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800088c:	e7fe      	b.n	800088c <HardFault_Handler+0x4>

0800088e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000892:	e7fe      	b.n	8000892 <MemManage_Handler+0x4>

08000894 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <BusFault_Handler+0x4>

0800089a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800089e:	e7fe      	b.n	800089e <UsageFault_Handler+0x4>

080008a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr

080008ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr

080008b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr

080008c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c8:	f000 f8b4 	bl	8000a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80008d4:	4802      	ldr	r0, [pc, #8]	; (80008e0 <USART3_IRQHandler+0x10>)
 80008d6:	f001 f949 	bl	8001b6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200000d8 	.word	0x200000d8

080008e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008ec:	4a14      	ldr	r2, [pc, #80]	; (8000940 <_sbrk+0x5c>)
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <_sbrk+0x60>)
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008f8:	4b13      	ldr	r3, [pc, #76]	; (8000948 <_sbrk+0x64>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d102      	bne.n	8000906 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <_sbrk+0x64>)
 8000902:	4a12      	ldr	r2, [pc, #72]	; (800094c <_sbrk+0x68>)
 8000904:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <_sbrk+0x64>)
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4413      	add	r3, r2
 800090e:	693a      	ldr	r2, [r7, #16]
 8000910:	429a      	cmp	r2, r3
 8000912:	d207      	bcs.n	8000924 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000914:	f001 fc2c 	bl	8002170 <__errno>
 8000918:	4602      	mov	r2, r0
 800091a:	230c      	movs	r3, #12
 800091c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800091e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000922:	e009      	b.n	8000938 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000924:	4b08      	ldr	r3, [pc, #32]	; (8000948 <_sbrk+0x64>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800092a:	4b07      	ldr	r3, [pc, #28]	; (8000948 <_sbrk+0x64>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4413      	add	r3, r2
 8000932:	4a05      	ldr	r2, [pc, #20]	; (8000948 <_sbrk+0x64>)
 8000934:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000936:	68fb      	ldr	r3, [r7, #12]
}
 8000938:	4618      	mov	r0, r3
 800093a:	3718      	adds	r7, #24
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20005000 	.word	0x20005000
 8000944:	00000400 	.word	0x00000400
 8000948:	200000b8 	.word	0x200000b8
 800094c:	20000178 	.word	0x20000178

08000950 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr

0800095c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800095c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800095e:	e003      	b.n	8000968 <LoopCopyDataInit>

08000960 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000960:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000962:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000964:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000966:	3104      	adds	r1, #4

08000968 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000968:	480a      	ldr	r0, [pc, #40]	; (8000994 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800096c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800096e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000970:	d3f6      	bcc.n	8000960 <CopyDataInit>
  ldr r2, =_sbss
 8000972:	4a0a      	ldr	r2, [pc, #40]	; (800099c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000974:	e002      	b.n	800097c <LoopFillZerobss>

08000976 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000978:	f842 3b04 	str.w	r3, [r2], #4

0800097c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800097c:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800097e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000980:	d3f9      	bcc.n	8000976 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000982:	f7ff ffe5 	bl	8000950 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000986:	f001 fbf9 	bl	800217c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800098a:	f7ff fd33 	bl	80003f4 <main>
  bx lr
 800098e:	4770      	bx	lr
  ldr r3, =_sidata
 8000990:	08002bf8 	.word	0x08002bf8
  ldr r0, =_sdata
 8000994:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000998:	20000094 	.word	0x20000094
  ldr r2, =_sbss
 800099c:	20000094 	.word	0x20000094
  ldr r3, = _ebss
 80009a0:	20000178 	.word	0x20000178

080009a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009a4:	e7fe      	b.n	80009a4 <ADC1_2_IRQHandler>
	...

080009a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <HAL_Init+0x28>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a07      	ldr	r2, [pc, #28]	; (80009d0 <HAL_Init+0x28>)
 80009b2:	f043 0310 	orr.w	r3, r3, #16
 80009b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b8:	2003      	movs	r0, #3
 80009ba:	f000 f945 	bl	8000c48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009be:	2000      	movs	r0, #0
 80009c0:	f000 f808 	bl	80009d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009c4:	f7ff fec0 	bl	8000748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40022000 	.word	0x40022000

080009d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <HAL_InitTick+0x54>)
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <HAL_InitTick+0x58>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	4619      	mov	r1, r3
 80009e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 f95d 	bl	8000cb2 <HAL_SYSTICK_Config>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	e00e      	b.n	8000a20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2b0f      	cmp	r3, #15
 8000a06:	d80a      	bhi.n	8000a1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	6879      	ldr	r1, [r7, #4]
 8000a0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a10:	f000 f925 	bl	8000c5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a14:	4a06      	ldr	r2, [pc, #24]	; (8000a30 <HAL_InitTick+0x5c>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	e000      	b.n	8000a20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000024 	.word	0x20000024
 8000a2c:	2000002c 	.word	0x2000002c
 8000a30:	20000028 	.word	0x20000028

08000a34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a38:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <HAL_IncTick+0x1c>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <HAL_IncTick+0x20>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4413      	add	r3, r2
 8000a44:	4a03      	ldr	r2, [pc, #12]	; (8000a54 <HAL_IncTick+0x20>)
 8000a46:	6013      	str	r3, [r2, #0]
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr
 8000a50:	2000002c 	.word	0x2000002c
 8000a54:	20000170 	.word	0x20000170

08000a58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a5c:	4b02      	ldr	r3, [pc, #8]	; (8000a68 <HAL_GetTick+0x10>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr
 8000a68:	20000170 	.word	0x20000170

08000a6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a74:	f7ff fff0 	bl	8000a58 <HAL_GetTick>
 8000a78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a84:	d005      	beq.n	8000a92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <HAL_Delay+0x40>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	4413      	add	r3, r2
 8000a90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a92:	bf00      	nop
 8000a94:	f7ff ffe0 	bl	8000a58 <HAL_GetTick>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d8f7      	bhi.n	8000a94 <HAL_Delay+0x28>
  {
  }
}
 8000aa4:	bf00      	nop
 8000aa6:	3710      	adds	r7, #16
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	2000002c 	.word	0x2000002c

08000ab0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000acc:	4013      	ands	r3, r2
 8000ace:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ad8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ae2:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	60d3      	str	r3, [r2, #12]
}
 8000ae8:	bf00      	nop
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bc80      	pop	{r7}
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000afc:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <__NVIC_GetPriorityGrouping+0x18>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	0a1b      	lsrs	r3, r3, #8
 8000b02:	f003 0307 	and.w	r3, r3, #7
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	db0b      	blt.n	8000b3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	f003 021f 	and.w	r2, r3, #31
 8000b2c:	4906      	ldr	r1, [pc, #24]	; (8000b48 <__NVIC_EnableIRQ+0x34>)
 8000b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b32:	095b      	lsrs	r3, r3, #5
 8000b34:	2001      	movs	r0, #1
 8000b36:	fa00 f202 	lsl.w	r2, r0, r2
 8000b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr
 8000b48:	e000e100 	.word	0xe000e100

08000b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	6039      	str	r1, [r7, #0]
 8000b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	db0a      	blt.n	8000b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	490c      	ldr	r1, [pc, #48]	; (8000b98 <__NVIC_SetPriority+0x4c>)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	0112      	lsls	r2, r2, #4
 8000b6c:	b2d2      	uxtb	r2, r2
 8000b6e:	440b      	add	r3, r1
 8000b70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b74:	e00a      	b.n	8000b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	4908      	ldr	r1, [pc, #32]	; (8000b9c <__NVIC_SetPriority+0x50>)
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	f003 030f 	and.w	r3, r3, #15
 8000b82:	3b04      	subs	r3, #4
 8000b84:	0112      	lsls	r2, r2, #4
 8000b86:	b2d2      	uxtb	r2, r2
 8000b88:	440b      	add	r3, r1
 8000b8a:	761a      	strb	r2, [r3, #24]
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bc80      	pop	{r7}
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000e100 	.word	0xe000e100
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b089      	sub	sp, #36	; 0x24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb4:	69fb      	ldr	r3, [r7, #28]
 8000bb6:	f1c3 0307 	rsb	r3, r3, #7
 8000bba:	2b04      	cmp	r3, #4
 8000bbc:	bf28      	it	cs
 8000bbe:	2304      	movcs	r3, #4
 8000bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	2b06      	cmp	r3, #6
 8000bc8:	d902      	bls.n	8000bd0 <NVIC_EncodePriority+0x30>
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	3b03      	subs	r3, #3
 8000bce:	e000      	b.n	8000bd2 <NVIC_EncodePriority+0x32>
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	43da      	mvns	r2, r3
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	401a      	ands	r2, r3
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf2:	43d9      	mvns	r1, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf8:	4313      	orrs	r3, r2
         );
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3724      	adds	r7, #36	; 0x24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr

08000c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c14:	d301      	bcc.n	8000c1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c16:	2301      	movs	r3, #1
 8000c18:	e00f      	b.n	8000c3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <SysTick_Config+0x40>)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c22:	210f      	movs	r1, #15
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c28:	f7ff ff90 	bl	8000b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c2c:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <SysTick_Config+0x40>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c32:	4b04      	ldr	r3, [pc, #16]	; (8000c44 <SysTick_Config+0x40>)
 8000c34:	2207      	movs	r2, #7
 8000c36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	e000e010 	.word	0xe000e010

08000c48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f7ff ff2d 	bl	8000ab0 <__NVIC_SetPriorityGrouping>
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b086      	sub	sp, #24
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	4603      	mov	r3, r0
 8000c66:	60b9      	str	r1, [r7, #8]
 8000c68:	607a      	str	r2, [r7, #4]
 8000c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c70:	f7ff ff42 	bl	8000af8 <__NVIC_GetPriorityGrouping>
 8000c74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	68b9      	ldr	r1, [r7, #8]
 8000c7a:	6978      	ldr	r0, [r7, #20]
 8000c7c:	f7ff ff90 	bl	8000ba0 <NVIC_EncodePriority>
 8000c80:	4602      	mov	r2, r0
 8000c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c86:	4611      	mov	r1, r2
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff ff5f 	bl	8000b4c <__NVIC_SetPriority>
}
 8000c8e:	bf00      	nop
 8000c90:	3718      	adds	r7, #24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff ff35 	bl	8000b14 <__NVIC_EnableIRQ>
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f7ff ffa2 	bl	8000c04 <SysTick_Config>
 8000cc0:	4603      	mov	r3, r0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d005      	beq.n	8000cee <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2204      	movs	r2, #4
 8000ce6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	73fb      	strb	r3, [r7, #15]
 8000cec:	e051      	b.n	8000d92 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f022 020e 	bic.w	r2, r2, #14
 8000cfc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f022 0201 	bic.w	r2, r2, #1
 8000d0c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a22      	ldr	r2, [pc, #136]	; (8000d9c <HAL_DMA_Abort_IT+0xd0>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d029      	beq.n	8000d6c <HAL_DMA_Abort_IT+0xa0>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a20      	ldr	r2, [pc, #128]	; (8000da0 <HAL_DMA_Abort_IT+0xd4>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d022      	beq.n	8000d68 <HAL_DMA_Abort_IT+0x9c>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a1f      	ldr	r2, [pc, #124]	; (8000da4 <HAL_DMA_Abort_IT+0xd8>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d01a      	beq.n	8000d62 <HAL_DMA_Abort_IT+0x96>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a1d      	ldr	r2, [pc, #116]	; (8000da8 <HAL_DMA_Abort_IT+0xdc>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d012      	beq.n	8000d5c <HAL_DMA_Abort_IT+0x90>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a1c      	ldr	r2, [pc, #112]	; (8000dac <HAL_DMA_Abort_IT+0xe0>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d00a      	beq.n	8000d56 <HAL_DMA_Abort_IT+0x8a>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a1a      	ldr	r2, [pc, #104]	; (8000db0 <HAL_DMA_Abort_IT+0xe4>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d102      	bne.n	8000d50 <HAL_DMA_Abort_IT+0x84>
 8000d4a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d4e:	e00e      	b.n	8000d6e <HAL_DMA_Abort_IT+0xa2>
 8000d50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d54:	e00b      	b.n	8000d6e <HAL_DMA_Abort_IT+0xa2>
 8000d56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d5a:	e008      	b.n	8000d6e <HAL_DMA_Abort_IT+0xa2>
 8000d5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d60:	e005      	b.n	8000d6e <HAL_DMA_Abort_IT+0xa2>
 8000d62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d66:	e002      	b.n	8000d6e <HAL_DMA_Abort_IT+0xa2>
 8000d68:	2310      	movs	r3, #16
 8000d6a:	e000      	b.n	8000d6e <HAL_DMA_Abort_IT+0xa2>
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	4a11      	ldr	r2, [pc, #68]	; (8000db4 <HAL_DMA_Abort_IT+0xe8>)
 8000d70:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2201      	movs	r2, #1
 8000d76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d003      	beq.n	8000d92 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	4798      	blx	r3
    } 
  }
  return status;
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40020008 	.word	0x40020008
 8000da0:	4002001c 	.word	0x4002001c
 8000da4:	40020030 	.word	0x40020030
 8000da8:	40020044 	.word	0x40020044
 8000dac:	40020058 	.word	0x40020058
 8000db0:	4002006c 	.word	0x4002006c
 8000db4:	40020000 	.word	0x40020000

08000db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b08b      	sub	sp, #44	; 0x2c
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dca:	e127      	b.n	800101c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	69fa      	ldr	r2, [r7, #28]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	f040 8116 	bne.w	8001016 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	2b12      	cmp	r3, #18
 8000df0:	d034      	beq.n	8000e5c <HAL_GPIO_Init+0xa4>
 8000df2:	2b12      	cmp	r3, #18
 8000df4:	d80d      	bhi.n	8000e12 <HAL_GPIO_Init+0x5a>
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d02b      	beq.n	8000e52 <HAL_GPIO_Init+0x9a>
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d804      	bhi.n	8000e08 <HAL_GPIO_Init+0x50>
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d031      	beq.n	8000e66 <HAL_GPIO_Init+0xae>
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d01c      	beq.n	8000e40 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e06:	e048      	b.n	8000e9a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e08:	2b03      	cmp	r3, #3
 8000e0a:	d043      	beq.n	8000e94 <HAL_GPIO_Init+0xdc>
 8000e0c:	2b11      	cmp	r3, #17
 8000e0e:	d01b      	beq.n	8000e48 <HAL_GPIO_Init+0x90>
          break;
 8000e10:	e043      	b.n	8000e9a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e12:	4a89      	ldr	r2, [pc, #548]	; (8001038 <HAL_GPIO_Init+0x280>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d026      	beq.n	8000e66 <HAL_GPIO_Init+0xae>
 8000e18:	4a87      	ldr	r2, [pc, #540]	; (8001038 <HAL_GPIO_Init+0x280>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d806      	bhi.n	8000e2c <HAL_GPIO_Init+0x74>
 8000e1e:	4a87      	ldr	r2, [pc, #540]	; (800103c <HAL_GPIO_Init+0x284>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d020      	beq.n	8000e66 <HAL_GPIO_Init+0xae>
 8000e24:	4a86      	ldr	r2, [pc, #536]	; (8001040 <HAL_GPIO_Init+0x288>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d01d      	beq.n	8000e66 <HAL_GPIO_Init+0xae>
          break;
 8000e2a:	e036      	b.n	8000e9a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e2c:	4a85      	ldr	r2, [pc, #532]	; (8001044 <HAL_GPIO_Init+0x28c>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d019      	beq.n	8000e66 <HAL_GPIO_Init+0xae>
 8000e32:	4a85      	ldr	r2, [pc, #532]	; (8001048 <HAL_GPIO_Init+0x290>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d016      	beq.n	8000e66 <HAL_GPIO_Init+0xae>
 8000e38:	4a84      	ldr	r2, [pc, #528]	; (800104c <HAL_GPIO_Init+0x294>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d013      	beq.n	8000e66 <HAL_GPIO_Init+0xae>
          break;
 8000e3e:	e02c      	b.n	8000e9a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	623b      	str	r3, [r7, #32]
          break;
 8000e46:	e028      	b.n	8000e9a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	623b      	str	r3, [r7, #32]
          break;
 8000e50:	e023      	b.n	8000e9a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	3308      	adds	r3, #8
 8000e58:	623b      	str	r3, [r7, #32]
          break;
 8000e5a:	e01e      	b.n	8000e9a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	330c      	adds	r3, #12
 8000e62:	623b      	str	r3, [r7, #32]
          break;
 8000e64:	e019      	b.n	8000e9a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d102      	bne.n	8000e74 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e6e:	2304      	movs	r3, #4
 8000e70:	623b      	str	r3, [r7, #32]
          break;
 8000e72:	e012      	b.n	8000e9a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d105      	bne.n	8000e88 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e7c:	2308      	movs	r3, #8
 8000e7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	69fa      	ldr	r2, [r7, #28]
 8000e84:	611a      	str	r2, [r3, #16]
          break;
 8000e86:	e008      	b.n	8000e9a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e88:	2308      	movs	r3, #8
 8000e8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	69fa      	ldr	r2, [r7, #28]
 8000e90:	615a      	str	r2, [r3, #20]
          break;
 8000e92:	e002      	b.n	8000e9a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e94:	2300      	movs	r3, #0
 8000e96:	623b      	str	r3, [r7, #32]
          break;
 8000e98:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	2bff      	cmp	r3, #255	; 0xff
 8000e9e:	d801      	bhi.n	8000ea4 <HAL_GPIO_Init+0xec>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	e001      	b.n	8000ea8 <HAL_GPIO_Init+0xf0>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3304      	adds	r3, #4
 8000ea8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	2bff      	cmp	r3, #255	; 0xff
 8000eae:	d802      	bhi.n	8000eb6 <HAL_GPIO_Init+0xfe>
 8000eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	e002      	b.n	8000ebc <HAL_GPIO_Init+0x104>
 8000eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb8:	3b08      	subs	r3, #8
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	210f      	movs	r1, #15
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	401a      	ands	r2, r3
 8000ece:	6a39      	ldr	r1, [r7, #32]
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed6:	431a      	orrs	r2, r3
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	f000 8096 	beq.w	8001016 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000eea:	4b59      	ldr	r3, [pc, #356]	; (8001050 <HAL_GPIO_Init+0x298>)
 8000eec:	699b      	ldr	r3, [r3, #24]
 8000eee:	4a58      	ldr	r2, [pc, #352]	; (8001050 <HAL_GPIO_Init+0x298>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6193      	str	r3, [r2, #24]
 8000ef6:	4b56      	ldr	r3, [pc, #344]	; (8001050 <HAL_GPIO_Init+0x298>)
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f02:	4a54      	ldr	r2, [pc, #336]	; (8001054 <HAL_GPIO_Init+0x29c>)
 8000f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f06:	089b      	lsrs	r3, r3, #2
 8000f08:	3302      	adds	r3, #2
 8000f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f0e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f12:	f003 0303 	and.w	r3, r3, #3
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	220f      	movs	r2, #15
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	68fa      	ldr	r2, [r7, #12]
 8000f22:	4013      	ands	r3, r2
 8000f24:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a4b      	ldr	r2, [pc, #300]	; (8001058 <HAL_GPIO_Init+0x2a0>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d013      	beq.n	8000f56 <HAL_GPIO_Init+0x19e>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a4a      	ldr	r2, [pc, #296]	; (800105c <HAL_GPIO_Init+0x2a4>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d00d      	beq.n	8000f52 <HAL_GPIO_Init+0x19a>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a49      	ldr	r2, [pc, #292]	; (8001060 <HAL_GPIO_Init+0x2a8>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d007      	beq.n	8000f4e <HAL_GPIO_Init+0x196>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a48      	ldr	r2, [pc, #288]	; (8001064 <HAL_GPIO_Init+0x2ac>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d101      	bne.n	8000f4a <HAL_GPIO_Init+0x192>
 8000f46:	2303      	movs	r3, #3
 8000f48:	e006      	b.n	8000f58 <HAL_GPIO_Init+0x1a0>
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	e004      	b.n	8000f58 <HAL_GPIO_Init+0x1a0>
 8000f4e:	2302      	movs	r3, #2
 8000f50:	e002      	b.n	8000f58 <HAL_GPIO_Init+0x1a0>
 8000f52:	2301      	movs	r3, #1
 8000f54:	e000      	b.n	8000f58 <HAL_GPIO_Init+0x1a0>
 8000f56:	2300      	movs	r3, #0
 8000f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f5a:	f002 0203 	and.w	r2, r2, #3
 8000f5e:	0092      	lsls	r2, r2, #2
 8000f60:	4093      	lsls	r3, r2
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f68:	493a      	ldr	r1, [pc, #232]	; (8001054 <HAL_GPIO_Init+0x29c>)
 8000f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6c:	089b      	lsrs	r3, r3, #2
 8000f6e:	3302      	adds	r3, #2
 8000f70:	68fa      	ldr	r2, [r7, #12]
 8000f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d006      	beq.n	8000f90 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f82:	4b39      	ldr	r3, [pc, #228]	; (8001068 <HAL_GPIO_Init+0x2b0>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	4938      	ldr	r1, [pc, #224]	; (8001068 <HAL_GPIO_Init+0x2b0>)
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	600b      	str	r3, [r1, #0]
 8000f8e:	e006      	b.n	8000f9e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f90:	4b35      	ldr	r3, [pc, #212]	; (8001068 <HAL_GPIO_Init+0x2b0>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	43db      	mvns	r3, r3
 8000f98:	4933      	ldr	r1, [pc, #204]	; (8001068 <HAL_GPIO_Init+0x2b0>)
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d006      	beq.n	8000fb8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000faa:	4b2f      	ldr	r3, [pc, #188]	; (8001068 <HAL_GPIO_Init+0x2b0>)
 8000fac:	685a      	ldr	r2, [r3, #4]
 8000fae:	492e      	ldr	r1, [pc, #184]	; (8001068 <HAL_GPIO_Init+0x2b0>)
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	604b      	str	r3, [r1, #4]
 8000fb6:	e006      	b.n	8000fc6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fb8:	4b2b      	ldr	r3, [pc, #172]	; (8001068 <HAL_GPIO_Init+0x2b0>)
 8000fba:	685a      	ldr	r2, [r3, #4]
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	4929      	ldr	r1, [pc, #164]	; (8001068 <HAL_GPIO_Init+0x2b0>)
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d006      	beq.n	8000fe0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fd2:	4b25      	ldr	r3, [pc, #148]	; (8001068 <HAL_GPIO_Init+0x2b0>)
 8000fd4:	689a      	ldr	r2, [r3, #8]
 8000fd6:	4924      	ldr	r1, [pc, #144]	; (8001068 <HAL_GPIO_Init+0x2b0>)
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	608b      	str	r3, [r1, #8]
 8000fde:	e006      	b.n	8000fee <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fe0:	4b21      	ldr	r3, [pc, #132]	; (8001068 <HAL_GPIO_Init+0x2b0>)
 8000fe2:	689a      	ldr	r2, [r3, #8]
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	491f      	ldr	r1, [pc, #124]	; (8001068 <HAL_GPIO_Init+0x2b0>)
 8000fea:	4013      	ands	r3, r2
 8000fec:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d006      	beq.n	8001008 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ffa:	4b1b      	ldr	r3, [pc, #108]	; (8001068 <HAL_GPIO_Init+0x2b0>)
 8000ffc:	68da      	ldr	r2, [r3, #12]
 8000ffe:	491a      	ldr	r1, [pc, #104]	; (8001068 <HAL_GPIO_Init+0x2b0>)
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	60cb      	str	r3, [r1, #12]
 8001006:	e006      	b.n	8001016 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001008:	4b17      	ldr	r3, [pc, #92]	; (8001068 <HAL_GPIO_Init+0x2b0>)
 800100a:	68da      	ldr	r2, [r3, #12]
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	43db      	mvns	r3, r3
 8001010:	4915      	ldr	r1, [pc, #84]	; (8001068 <HAL_GPIO_Init+0x2b0>)
 8001012:	4013      	ands	r3, r2
 8001014:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001018:	3301      	adds	r3, #1
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001022:	fa22 f303 	lsr.w	r3, r2, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	f47f aed0 	bne.w	8000dcc <HAL_GPIO_Init+0x14>
  }
}
 800102c:	bf00      	nop
 800102e:	372c      	adds	r7, #44	; 0x2c
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	10210000 	.word	0x10210000
 800103c:	10110000 	.word	0x10110000
 8001040:	10120000 	.word	0x10120000
 8001044:	10310000 	.word	0x10310000
 8001048:	10320000 	.word	0x10320000
 800104c:	10220000 	.word	0x10220000
 8001050:	40021000 	.word	0x40021000
 8001054:	40010000 	.word	0x40010000
 8001058:	40010800 	.word	0x40010800
 800105c:	40010c00 	.word	0x40010c00
 8001060:	40011000 	.word	0x40011000
 8001064:	40011400 	.word	0x40011400
 8001068:	40010400 	.word	0x40010400

0800106c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	689a      	ldr	r2, [r3, #8]
 800107c:	887b      	ldrh	r3, [r7, #2]
 800107e:	4013      	ands	r3, r2
 8001080:	2b00      	cmp	r3, #0
 8001082:	d002      	beq.n	800108a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001084:	2301      	movs	r3, #1
 8001086:	73fb      	strb	r3, [r7, #15]
 8001088:	e001      	b.n	800108e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800108a:	2300      	movs	r3, #0
 800108c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800108e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr

0800109a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
 80010a2:	460b      	mov	r3, r1
 80010a4:	807b      	strh	r3, [r7, #2]
 80010a6:	4613      	mov	r3, r2
 80010a8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010aa:	787b      	ldrb	r3, [r7, #1]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010b0:	887a      	ldrh	r2, [r7, #2]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010b6:	e003      	b.n	80010c0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010b8:	887b      	ldrh	r3, [r7, #2]
 80010ba:	041a      	lsls	r2, r3, #16
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	611a      	str	r2, [r3, #16]
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr
	...

080010cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e26c      	b.n	80015b8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f000 8087 	beq.w	80011fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010ec:	4b92      	ldr	r3, [pc, #584]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 030c 	and.w	r3, r3, #12
 80010f4:	2b04      	cmp	r3, #4
 80010f6:	d00c      	beq.n	8001112 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010f8:	4b8f      	ldr	r3, [pc, #572]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 030c 	and.w	r3, r3, #12
 8001100:	2b08      	cmp	r3, #8
 8001102:	d112      	bne.n	800112a <HAL_RCC_OscConfig+0x5e>
 8001104:	4b8c      	ldr	r3, [pc, #560]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800110c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001110:	d10b      	bne.n	800112a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001112:	4b89      	ldr	r3, [pc, #548]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d06c      	beq.n	80011f8 <HAL_RCC_OscConfig+0x12c>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d168      	bne.n	80011f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e246      	b.n	80015b8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001132:	d106      	bne.n	8001142 <HAL_RCC_OscConfig+0x76>
 8001134:	4b80      	ldr	r3, [pc, #512]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a7f      	ldr	r2, [pc, #508]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 800113a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800113e:	6013      	str	r3, [r2, #0]
 8001140:	e02e      	b.n	80011a0 <HAL_RCC_OscConfig+0xd4>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10c      	bne.n	8001164 <HAL_RCC_OscConfig+0x98>
 800114a:	4b7b      	ldr	r3, [pc, #492]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a7a      	ldr	r2, [pc, #488]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001150:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	4b78      	ldr	r3, [pc, #480]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a77      	ldr	r2, [pc, #476]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 800115c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	e01d      	b.n	80011a0 <HAL_RCC_OscConfig+0xd4>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800116c:	d10c      	bne.n	8001188 <HAL_RCC_OscConfig+0xbc>
 800116e:	4b72      	ldr	r3, [pc, #456]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a71      	ldr	r2, [pc, #452]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001174:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001178:	6013      	str	r3, [r2, #0]
 800117a:	4b6f      	ldr	r3, [pc, #444]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a6e      	ldr	r2, [pc, #440]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	e00b      	b.n	80011a0 <HAL_RCC_OscConfig+0xd4>
 8001188:	4b6b      	ldr	r3, [pc, #428]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a6a      	ldr	r2, [pc, #424]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 800118e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001192:	6013      	str	r3, [r2, #0]
 8001194:	4b68      	ldr	r3, [pc, #416]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a67      	ldr	r2, [pc, #412]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 800119a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800119e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d013      	beq.n	80011d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a8:	f7ff fc56 	bl	8000a58 <HAL_GetTick>
 80011ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011b0:	f7ff fc52 	bl	8000a58 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b64      	cmp	r3, #100	; 0x64
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e1fa      	b.n	80015b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c2:	4b5d      	ldr	r3, [pc, #372]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d0f0      	beq.n	80011b0 <HAL_RCC_OscConfig+0xe4>
 80011ce:	e014      	b.n	80011fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d0:	f7ff fc42 	bl	8000a58 <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011d8:	f7ff fc3e 	bl	8000a58 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b64      	cmp	r3, #100	; 0x64
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e1e6      	b.n	80015b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ea:	4b53      	ldr	r3, [pc, #332]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1f0      	bne.n	80011d8 <HAL_RCC_OscConfig+0x10c>
 80011f6:	e000      	b.n	80011fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d063      	beq.n	80012ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001206:	4b4c      	ldr	r3, [pc, #304]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 030c 	and.w	r3, r3, #12
 800120e:	2b00      	cmp	r3, #0
 8001210:	d00b      	beq.n	800122a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001212:	4b49      	ldr	r3, [pc, #292]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f003 030c 	and.w	r3, r3, #12
 800121a:	2b08      	cmp	r3, #8
 800121c:	d11c      	bne.n	8001258 <HAL_RCC_OscConfig+0x18c>
 800121e:	4b46      	ldr	r3, [pc, #280]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d116      	bne.n	8001258 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800122a:	4b43      	ldr	r3, [pc, #268]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d005      	beq.n	8001242 <HAL_RCC_OscConfig+0x176>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d001      	beq.n	8001242 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e1ba      	b.n	80015b8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001242:	4b3d      	ldr	r3, [pc, #244]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	4939      	ldr	r1, [pc, #228]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001252:	4313      	orrs	r3, r2
 8001254:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001256:	e03a      	b.n	80012ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d020      	beq.n	80012a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001260:	4b36      	ldr	r3, [pc, #216]	; (800133c <HAL_RCC_OscConfig+0x270>)
 8001262:	2201      	movs	r2, #1
 8001264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001266:	f7ff fbf7 	bl	8000a58 <HAL_GetTick>
 800126a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800126c:	e008      	b.n	8001280 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800126e:	f7ff fbf3 	bl	8000a58 <HAL_GetTick>
 8001272:	4602      	mov	r2, r0
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e19b      	b.n	80015b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001280:	4b2d      	ldr	r3, [pc, #180]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d0f0      	beq.n	800126e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800128c:	4b2a      	ldr	r3, [pc, #168]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	695b      	ldr	r3, [r3, #20]
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	4927      	ldr	r1, [pc, #156]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 800129c:	4313      	orrs	r3, r2
 800129e:	600b      	str	r3, [r1, #0]
 80012a0:	e015      	b.n	80012ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012a2:	4b26      	ldr	r3, [pc, #152]	; (800133c <HAL_RCC_OscConfig+0x270>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a8:	f7ff fbd6 	bl	8000a58 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012b0:	f7ff fbd2 	bl	8000a58 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e17a      	b.n	80015b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012c2:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1f0      	bne.n	80012b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d03a      	beq.n	8001350 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d019      	beq.n	8001316 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012e2:	4b17      	ldr	r3, [pc, #92]	; (8001340 <HAL_RCC_OscConfig+0x274>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e8:	f7ff fbb6 	bl	8000a58 <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012f0:	f7ff fbb2 	bl	8000a58 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e15a      	b.n	80015b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001302:	4b0d      	ldr	r3, [pc, #52]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800130e:	2001      	movs	r0, #1
 8001310:	f000 fada 	bl	80018c8 <RCC_Delay>
 8001314:	e01c      	b.n	8001350 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <HAL_RCC_OscConfig+0x274>)
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800131c:	f7ff fb9c 	bl	8000a58 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001322:	e00f      	b.n	8001344 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001324:	f7ff fb98 	bl	8000a58 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d908      	bls.n	8001344 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e140      	b.n	80015b8 <HAL_RCC_OscConfig+0x4ec>
 8001336:	bf00      	nop
 8001338:	40021000 	.word	0x40021000
 800133c:	42420000 	.word	0x42420000
 8001340:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001344:	4b9e      	ldr	r3, [pc, #632]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 8001346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	2b00      	cmp	r3, #0
 800134e:	d1e9      	bne.n	8001324 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0304 	and.w	r3, r3, #4
 8001358:	2b00      	cmp	r3, #0
 800135a:	f000 80a6 	beq.w	80014aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800135e:	2300      	movs	r3, #0
 8001360:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001362:	4b97      	ldr	r3, [pc, #604]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d10d      	bne.n	800138a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800136e:	4b94      	ldr	r3, [pc, #592]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	4a93      	ldr	r2, [pc, #588]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 8001374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001378:	61d3      	str	r3, [r2, #28]
 800137a:	4b91      	ldr	r3, [pc, #580]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001386:	2301      	movs	r3, #1
 8001388:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800138a:	4b8e      	ldr	r3, [pc, #568]	; (80015c4 <HAL_RCC_OscConfig+0x4f8>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001392:	2b00      	cmp	r3, #0
 8001394:	d118      	bne.n	80013c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001396:	4b8b      	ldr	r3, [pc, #556]	; (80015c4 <HAL_RCC_OscConfig+0x4f8>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a8a      	ldr	r2, [pc, #552]	; (80015c4 <HAL_RCC_OscConfig+0x4f8>)
 800139c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013a2:	f7ff fb59 	bl	8000a58 <HAL_GetTick>
 80013a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a8:	e008      	b.n	80013bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013aa:	f7ff fb55 	bl	8000a58 <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b64      	cmp	r3, #100	; 0x64
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e0fd      	b.n	80015b8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013bc:	4b81      	ldr	r3, [pc, #516]	; (80015c4 <HAL_RCC_OscConfig+0x4f8>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0f0      	beq.n	80013aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d106      	bne.n	80013de <HAL_RCC_OscConfig+0x312>
 80013d0:	4b7b      	ldr	r3, [pc, #492]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	4a7a      	ldr	r2, [pc, #488]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	6213      	str	r3, [r2, #32]
 80013dc:	e02d      	b.n	800143a <HAL_RCC_OscConfig+0x36e>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d10c      	bne.n	8001400 <HAL_RCC_OscConfig+0x334>
 80013e6:	4b76      	ldr	r3, [pc, #472]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 80013e8:	6a1b      	ldr	r3, [r3, #32]
 80013ea:	4a75      	ldr	r2, [pc, #468]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 80013ec:	f023 0301 	bic.w	r3, r3, #1
 80013f0:	6213      	str	r3, [r2, #32]
 80013f2:	4b73      	ldr	r3, [pc, #460]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 80013f4:	6a1b      	ldr	r3, [r3, #32]
 80013f6:	4a72      	ldr	r2, [pc, #456]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 80013f8:	f023 0304 	bic.w	r3, r3, #4
 80013fc:	6213      	str	r3, [r2, #32]
 80013fe:	e01c      	b.n	800143a <HAL_RCC_OscConfig+0x36e>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	2b05      	cmp	r3, #5
 8001406:	d10c      	bne.n	8001422 <HAL_RCC_OscConfig+0x356>
 8001408:	4b6d      	ldr	r3, [pc, #436]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 800140a:	6a1b      	ldr	r3, [r3, #32]
 800140c:	4a6c      	ldr	r2, [pc, #432]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 800140e:	f043 0304 	orr.w	r3, r3, #4
 8001412:	6213      	str	r3, [r2, #32]
 8001414:	4b6a      	ldr	r3, [pc, #424]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	4a69      	ldr	r2, [pc, #420]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	6213      	str	r3, [r2, #32]
 8001420:	e00b      	b.n	800143a <HAL_RCC_OscConfig+0x36e>
 8001422:	4b67      	ldr	r3, [pc, #412]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 8001424:	6a1b      	ldr	r3, [r3, #32]
 8001426:	4a66      	ldr	r2, [pc, #408]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 8001428:	f023 0301 	bic.w	r3, r3, #1
 800142c:	6213      	str	r3, [r2, #32]
 800142e:	4b64      	ldr	r3, [pc, #400]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 8001430:	6a1b      	ldr	r3, [r3, #32]
 8001432:	4a63      	ldr	r2, [pc, #396]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 8001434:	f023 0304 	bic.w	r3, r3, #4
 8001438:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d015      	beq.n	800146e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001442:	f7ff fb09 	bl	8000a58 <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001448:	e00a      	b.n	8001460 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800144a:	f7ff fb05 	bl	8000a58 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	f241 3288 	movw	r2, #5000	; 0x1388
 8001458:	4293      	cmp	r3, r2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e0ab      	b.n	80015b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001460:	4b57      	ldr	r3, [pc, #348]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0ee      	beq.n	800144a <HAL_RCC_OscConfig+0x37e>
 800146c:	e014      	b.n	8001498 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146e:	f7ff faf3 	bl	8000a58 <HAL_GetTick>
 8001472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001474:	e00a      	b.n	800148c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001476:	f7ff faef 	bl	8000a58 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	f241 3288 	movw	r2, #5000	; 0x1388
 8001484:	4293      	cmp	r3, r2
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e095      	b.n	80015b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800148c:	4b4c      	ldr	r3, [pc, #304]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1ee      	bne.n	8001476 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001498:	7dfb      	ldrb	r3, [r7, #23]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d105      	bne.n	80014aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800149e:	4b48      	ldr	r3, [pc, #288]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	4a47      	ldr	r2, [pc, #284]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 80014a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 8081 	beq.w	80015b6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014b4:	4b42      	ldr	r3, [pc, #264]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 030c 	and.w	r3, r3, #12
 80014bc:	2b08      	cmp	r3, #8
 80014be:	d061      	beq.n	8001584 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	69db      	ldr	r3, [r3, #28]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d146      	bne.n	8001556 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c8:	4b3f      	ldr	r3, [pc, #252]	; (80015c8 <HAL_RCC_OscConfig+0x4fc>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ce:	f7ff fac3 	bl	8000a58 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014d6:	f7ff fabf 	bl	8000a58 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e067      	b.n	80015b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014e8:	4b35      	ldr	r3, [pc, #212]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1f0      	bne.n	80014d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014fc:	d108      	bne.n	8001510 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014fe:	4b30      	ldr	r3, [pc, #192]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	492d      	ldr	r1, [pc, #180]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 800150c:	4313      	orrs	r3, r2
 800150e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001510:	4b2b      	ldr	r3, [pc, #172]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a19      	ldr	r1, [r3, #32]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001520:	430b      	orrs	r3, r1
 8001522:	4927      	ldr	r1, [pc, #156]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 8001524:	4313      	orrs	r3, r2
 8001526:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001528:	4b27      	ldr	r3, [pc, #156]	; (80015c8 <HAL_RCC_OscConfig+0x4fc>)
 800152a:	2201      	movs	r2, #1
 800152c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152e:	f7ff fa93 	bl	8000a58 <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001536:	f7ff fa8f 	bl	8000a58 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e037      	b.n	80015b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001548:	4b1d      	ldr	r3, [pc, #116]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d0f0      	beq.n	8001536 <HAL_RCC_OscConfig+0x46a>
 8001554:	e02f      	b.n	80015b6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001556:	4b1c      	ldr	r3, [pc, #112]	; (80015c8 <HAL_RCC_OscConfig+0x4fc>)
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155c:	f7ff fa7c 	bl	8000a58 <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001564:	f7ff fa78 	bl	8000a58 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e020      	b.n	80015b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001576:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1f0      	bne.n	8001564 <HAL_RCC_OscConfig+0x498>
 8001582:	e018      	b.n	80015b6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	69db      	ldr	r3, [r3, #28]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d101      	bne.n	8001590 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e013      	b.n	80015b8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d106      	bne.n	80015b2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d001      	beq.n	80015b6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e000      	b.n	80015b8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40021000 	.word	0x40021000
 80015c4:	40007000 	.word	0x40007000
 80015c8:	42420060 	.word	0x42420060

080015cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d101      	bne.n	80015e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e0d0      	b.n	8001782 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015e0:	4b6a      	ldr	r3, [pc, #424]	; (800178c <HAL_RCC_ClockConfig+0x1c0>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0307 	and.w	r3, r3, #7
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d910      	bls.n	8001610 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ee:	4b67      	ldr	r3, [pc, #412]	; (800178c <HAL_RCC_ClockConfig+0x1c0>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f023 0207 	bic.w	r2, r3, #7
 80015f6:	4965      	ldr	r1, [pc, #404]	; (800178c <HAL_RCC_ClockConfig+0x1c0>)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015fe:	4b63      	ldr	r3, [pc, #396]	; (800178c <HAL_RCC_ClockConfig+0x1c0>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	429a      	cmp	r2, r3
 800160a:	d001      	beq.n	8001610 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e0b8      	b.n	8001782 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d020      	beq.n	800165e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	2b00      	cmp	r3, #0
 8001626:	d005      	beq.n	8001634 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001628:	4b59      	ldr	r3, [pc, #356]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	4a58      	ldr	r2, [pc, #352]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 800162e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001632:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0308 	and.w	r3, r3, #8
 800163c:	2b00      	cmp	r3, #0
 800163e:	d005      	beq.n	800164c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001640:	4b53      	ldr	r3, [pc, #332]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	4a52      	ldr	r2, [pc, #328]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 8001646:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800164a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800164c:	4b50      	ldr	r3, [pc, #320]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	494d      	ldr	r1, [pc, #308]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 800165a:	4313      	orrs	r3, r2
 800165c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b00      	cmp	r3, #0
 8001668:	d040      	beq.n	80016ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d107      	bne.n	8001682 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001672:	4b47      	ldr	r3, [pc, #284]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d115      	bne.n	80016aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e07f      	b.n	8001782 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2b02      	cmp	r3, #2
 8001688:	d107      	bne.n	800169a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800168a:	4b41      	ldr	r3, [pc, #260]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d109      	bne.n	80016aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e073      	b.n	8001782 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800169a:	4b3d      	ldr	r3, [pc, #244]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e06b      	b.n	8001782 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016aa:	4b39      	ldr	r3, [pc, #228]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f023 0203 	bic.w	r2, r3, #3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	4936      	ldr	r1, [pc, #216]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016bc:	f7ff f9cc 	bl	8000a58 <HAL_GetTick>
 80016c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016c2:	e00a      	b.n	80016da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016c4:	f7ff f9c8 	bl	8000a58 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e053      	b.n	8001782 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016da:	4b2d      	ldr	r3, [pc, #180]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f003 020c 	and.w	r2, r3, #12
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d1eb      	bne.n	80016c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016ec:	4b27      	ldr	r3, [pc, #156]	; (800178c <HAL_RCC_ClockConfig+0x1c0>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0307 	and.w	r3, r3, #7
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d210      	bcs.n	800171c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016fa:	4b24      	ldr	r3, [pc, #144]	; (800178c <HAL_RCC_ClockConfig+0x1c0>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f023 0207 	bic.w	r2, r3, #7
 8001702:	4922      	ldr	r1, [pc, #136]	; (800178c <HAL_RCC_ClockConfig+0x1c0>)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	4313      	orrs	r3, r2
 8001708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800170a:	4b20      	ldr	r3, [pc, #128]	; (800178c <HAL_RCC_ClockConfig+0x1c0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	429a      	cmp	r2, r3
 8001716:	d001      	beq.n	800171c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e032      	b.n	8001782 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	2b00      	cmp	r3, #0
 8001726:	d008      	beq.n	800173a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001728:	4b19      	ldr	r3, [pc, #100]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	4916      	ldr	r1, [pc, #88]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 8001736:	4313      	orrs	r3, r2
 8001738:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	2b00      	cmp	r3, #0
 8001744:	d009      	beq.n	800175a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001746:	4b12      	ldr	r3, [pc, #72]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	490e      	ldr	r1, [pc, #56]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 8001756:	4313      	orrs	r3, r2
 8001758:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800175a:	f000 f821 	bl	80017a0 <HAL_RCC_GetSysClockFreq>
 800175e:	4601      	mov	r1, r0
 8001760:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	091b      	lsrs	r3, r3, #4
 8001766:	f003 030f 	and.w	r3, r3, #15
 800176a:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <HAL_RCC_ClockConfig+0x1c8>)
 800176c:	5cd3      	ldrb	r3, [r2, r3]
 800176e:	fa21 f303 	lsr.w	r3, r1, r3
 8001772:	4a09      	ldr	r2, [pc, #36]	; (8001798 <HAL_RCC_ClockConfig+0x1cc>)
 8001774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <HAL_RCC_ClockConfig+0x1d0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff f92a 	bl	80009d4 <HAL_InitTick>

  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40022000 	.word	0x40022000
 8001790:	40021000 	.word	0x40021000
 8001794:	08002ba4 	.word	0x08002ba4
 8001798:	20000024 	.word	0x20000024
 800179c:	20000028 	.word	0x20000028

080017a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017a0:	b490      	push	{r4, r7}
 80017a2:	b08a      	sub	sp, #40	; 0x28
 80017a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80017a6:	4b2a      	ldr	r3, [pc, #168]	; (8001850 <HAL_RCC_GetSysClockFreq+0xb0>)
 80017a8:	1d3c      	adds	r4, r7, #4
 80017aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80017b0:	4b28      	ldr	r3, [pc, #160]	; (8001854 <HAL_RCC_GetSysClockFreq+0xb4>)
 80017b2:	881b      	ldrh	r3, [r3, #0]
 80017b4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
 80017ba:	2300      	movs	r3, #0
 80017bc:	61bb      	str	r3, [r7, #24]
 80017be:	2300      	movs	r3, #0
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017ca:	4b23      	ldr	r3, [pc, #140]	; (8001858 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f003 030c 	and.w	r3, r3, #12
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	d002      	beq.n	80017e0 <HAL_RCC_GetSysClockFreq+0x40>
 80017da:	2b08      	cmp	r3, #8
 80017dc:	d003      	beq.n	80017e6 <HAL_RCC_GetSysClockFreq+0x46>
 80017de:	e02d      	b.n	800183c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017e0:	4b1e      	ldr	r3, [pc, #120]	; (800185c <HAL_RCC_GetSysClockFreq+0xbc>)
 80017e2:	623b      	str	r3, [r7, #32]
      break;
 80017e4:	e02d      	b.n	8001842 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	0c9b      	lsrs	r3, r3, #18
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017f2:	4413      	add	r3, r2
 80017f4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80017f8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d013      	beq.n	800182c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001804:	4b14      	ldr	r3, [pc, #80]	; (8001858 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	0c5b      	lsrs	r3, r3, #17
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001812:	4413      	add	r3, r2
 8001814:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001818:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	4a0f      	ldr	r2, [pc, #60]	; (800185c <HAL_RCC_GetSysClockFreq+0xbc>)
 800181e:	fb02 f203 	mul.w	r2, r2, r3
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	fbb2 f3f3 	udiv	r3, r2, r3
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
 800182a:	e004      	b.n	8001836 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	4a0c      	ldr	r2, [pc, #48]	; (8001860 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001830:	fb02 f303 	mul.w	r3, r2, r3
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	623b      	str	r3, [r7, #32]
      break;
 800183a:	e002      	b.n	8001842 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800183c:	4b07      	ldr	r3, [pc, #28]	; (800185c <HAL_RCC_GetSysClockFreq+0xbc>)
 800183e:	623b      	str	r3, [r7, #32]
      break;
 8001840:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001842:	6a3b      	ldr	r3, [r7, #32]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3728      	adds	r7, #40	; 0x28
 8001848:	46bd      	mov	sp, r7
 800184a:	bc90      	pop	{r4, r7}
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	08002b90 	.word	0x08002b90
 8001854:	08002ba0 	.word	0x08002ba0
 8001858:	40021000 	.word	0x40021000
 800185c:	007a1200 	.word	0x007a1200
 8001860:	003d0900 	.word	0x003d0900

08001864 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001868:	4b02      	ldr	r3, [pc, #8]	; (8001874 <HAL_RCC_GetHCLKFreq+0x10>)
 800186a:	681b      	ldr	r3, [r3, #0]
}
 800186c:	4618      	mov	r0, r3
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr
 8001874:	20000024 	.word	0x20000024

08001878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800187c:	f7ff fff2 	bl	8001864 <HAL_RCC_GetHCLKFreq>
 8001880:	4601      	mov	r1, r0
 8001882:	4b05      	ldr	r3, [pc, #20]	; (8001898 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	0a1b      	lsrs	r3, r3, #8
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	4a03      	ldr	r2, [pc, #12]	; (800189c <HAL_RCC_GetPCLK1Freq+0x24>)
 800188e:	5cd3      	ldrb	r3, [r2, r3]
 8001890:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001894:	4618      	mov	r0, r3
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40021000 	.word	0x40021000
 800189c:	08002bb4 	.word	0x08002bb4

080018a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018a4:	f7ff ffde 	bl	8001864 <HAL_RCC_GetHCLKFreq>
 80018a8:	4601      	mov	r1, r0
 80018aa:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	0adb      	lsrs	r3, r3, #11
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	4a03      	ldr	r2, [pc, #12]	; (80018c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018b6:	5cd3      	ldrb	r3, [r2, r3]
 80018b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80018bc:	4618      	mov	r0, r3
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40021000 	.word	0x40021000
 80018c4:	08002bb4 	.word	0x08002bb4

080018c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018d0:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <RCC_Delay+0x34>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <RCC_Delay+0x38>)
 80018d6:	fba2 2303 	umull	r2, r3, r2, r3
 80018da:	0a5b      	lsrs	r3, r3, #9
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	fb02 f303 	mul.w	r3, r2, r3
 80018e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018e4:	bf00      	nop
  }
  while (Delay --);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	1e5a      	subs	r2, r3, #1
 80018ea:	60fa      	str	r2, [r7, #12]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1f9      	bne.n	80018e4 <RCC_Delay+0x1c>
}
 80018f0:	bf00      	nop
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	20000024 	.word	0x20000024
 8001900:	10624dd3 	.word	0x10624dd3

08001904 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e03f      	b.n	8001996 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d106      	bne.n	8001930 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7fe ff3e 	bl	80007ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2224      	movs	r2, #36	; 0x24
 8001934:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68da      	ldr	r2, [r3, #12]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001946:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f000 fb83 	bl	8002054 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	691a      	ldr	r2, [r3, #16]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800195c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	695a      	ldr	r2, [r3, #20]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800196c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	68da      	ldr	r2, [r3, #12]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800197c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2220      	movs	r2, #32
 8001988:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2220      	movs	r2, #32
 8001990:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b08a      	sub	sp, #40	; 0x28
 80019a2:	af02      	add	r7, sp, #8
 80019a4:	60f8      	str	r0, [r7, #12]
 80019a6:	60b9      	str	r1, [r7, #8]
 80019a8:	603b      	str	r3, [r7, #0]
 80019aa:	4613      	mov	r3, r2
 80019ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b20      	cmp	r3, #32
 80019bc:	d17c      	bne.n	8001ab8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d002      	beq.n	80019ca <HAL_UART_Transmit+0x2c>
 80019c4:	88fb      	ldrh	r3, [r7, #6]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e075      	b.n	8001aba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d101      	bne.n	80019dc <HAL_UART_Transmit+0x3e>
 80019d8:	2302      	movs	r3, #2
 80019da:	e06e      	b.n	8001aba <HAL_UART_Transmit+0x11c>
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2200      	movs	r2, #0
 80019e8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2221      	movs	r2, #33	; 0x21
 80019ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80019f2:	f7ff f831 	bl	8000a58 <HAL_GetTick>
 80019f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	88fa      	ldrh	r2, [r7, #6]
 80019fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	88fa      	ldrh	r2, [r7, #6]
 8001a02:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a0c:	d108      	bne.n	8001a20 <HAL_UART_Transmit+0x82>
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d104      	bne.n	8001a20 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	61bb      	str	r3, [r7, #24]
 8001a1e:	e003      	b.n	8001a28 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001a30:	e02a      	b.n	8001a88 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2180      	movs	r1, #128	; 0x80
 8001a3c:	68f8      	ldr	r0, [r7, #12]
 8001a3e:	f000 f9a7 	bl	8001d90 <UART_WaitOnFlagUntilTimeout>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e036      	b.n	8001aba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10b      	bne.n	8001a6a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	461a      	mov	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a60:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	3302      	adds	r3, #2
 8001a66:	61bb      	str	r3, [r7, #24]
 8001a68:	e007      	b.n	8001a7a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	781a      	ldrb	r2, [r3, #0]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	3301      	adds	r3, #1
 8001a78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	3b01      	subs	r3, #1
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1cf      	bne.n	8001a32 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2140      	movs	r1, #64	; 0x40
 8001a9c:	68f8      	ldr	r0, [r7, #12]
 8001a9e:	f000 f977 	bl	8001d90 <UART_WaitOnFlagUntilTimeout>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e006      	b.n	8001aba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2220      	movs	r2, #32
 8001ab0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	e000      	b.n	8001aba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001ab8:	2302      	movs	r3, #2
  }
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3720      	adds	r7, #32
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b085      	sub	sp, #20
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	60f8      	str	r0, [r7, #12]
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	4613      	mov	r3, r2
 8001ace:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b20      	cmp	r3, #32
 8001ada:	d140      	bne.n	8001b5e <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d002      	beq.n	8001ae8 <HAL_UART_Receive_IT+0x26>
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d101      	bne.n	8001aec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e039      	b.n	8001b60 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d101      	bne.n	8001afa <HAL_UART_Receive_IT+0x38>
 8001af6:	2302      	movs	r3, #2
 8001af8:	e032      	b.n	8001b60 <HAL_UART_Receive_IT+0x9e>
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	68ba      	ldr	r2, [r7, #8]
 8001b06:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	88fa      	ldrh	r2, [r7, #6]
 8001b0c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	88fa      	ldrh	r2, [r7, #6]
 8001b12:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2200      	movs	r2, #0
 8001b18:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2222      	movs	r2, #34	; 0x22
 8001b1e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68da      	ldr	r2, [r3, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b38:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	695a      	ldr	r2, [r3, #20]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f042 0201 	orr.w	r2, r2, #1
 8001b48:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	68da      	ldr	r2, [r3, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f042 0220 	orr.w	r2, r2, #32
 8001b58:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	e000      	b.n	8001b60 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001b5e:	2302      	movs	r3, #2
  }
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr
	...

08001b6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b088      	sub	sp, #32
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001b90:	2300      	movs	r3, #0
 8001b92:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d10d      	bne.n	8001bbe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	f003 0320 	and.w	r3, r3, #32
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d008      	beq.n	8001bbe <HAL_UART_IRQHandler+0x52>
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	f003 0320 	and.w	r3, r3, #32
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f9cc 	bl	8001f54 <UART_Receive_IT>
      return;
 8001bbc:	e0d1      	b.n	8001d62 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 80b0 	beq.w	8001d26 <HAL_UART_IRQHandler+0x1ba>
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d105      	bne.n	8001bdc <HAL_UART_IRQHandler+0x70>
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 80a5 	beq.w	8001d26 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00a      	beq.n	8001bfc <HAL_UART_IRQHandler+0x90>
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d005      	beq.n	8001bfc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf4:	f043 0201 	orr.w	r2, r3, #1
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00a      	beq.n	8001c1c <HAL_UART_IRQHandler+0xb0>
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d005      	beq.n	8001c1c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c14:	f043 0202 	orr.w	r2, r3, #2
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00a      	beq.n	8001c3c <HAL_UART_IRQHandler+0xd0>
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d005      	beq.n	8001c3c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c34:	f043 0204 	orr.w	r2, r3, #4
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f003 0308 	and.w	r3, r3, #8
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00f      	beq.n	8001c66 <HAL_UART_IRQHandler+0xfa>
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	f003 0320 	and.w	r3, r3, #32
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d104      	bne.n	8001c5a <HAL_UART_IRQHandler+0xee>
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d005      	beq.n	8001c66 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c5e:	f043 0208 	orr.w	r2, r3, #8
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d078      	beq.n	8001d60 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	f003 0320 	and.w	r3, r3, #32
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d007      	beq.n	8001c88 <HAL_UART_IRQHandler+0x11c>
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	f003 0320 	and.w	r3, r3, #32
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d002      	beq.n	8001c88 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f966 	bl	8001f54 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	bf14      	ite	ne
 8001c96:	2301      	movne	r3, #1
 8001c98:	2300      	moveq	r3, #0
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d102      	bne.n	8001cb0 <HAL_UART_IRQHandler+0x144>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d031      	beq.n	8001d14 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 f8b7 	bl	8001e24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d023      	beq.n	8001d0c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	695a      	ldr	r2, [r3, #20]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cd2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d013      	beq.n	8001d04 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce0:	4a21      	ldr	r2, [pc, #132]	; (8001d68 <HAL_UART_IRQHandler+0x1fc>)
 8001ce2:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7fe ffef 	bl	8000ccc <HAL_DMA_Abort_IT>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d016      	beq.n	8001d22 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cfe:	4610      	mov	r0, r2
 8001d00:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d02:	e00e      	b.n	8001d22 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 f83a 	bl	8001d7e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d0a:	e00a      	b.n	8001d22 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 f836 	bl	8001d7e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d12:	e006      	b.n	8001d22 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 f832 	bl	8001d7e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001d20:	e01e      	b.n	8001d60 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d22:	bf00      	nop
    return;
 8001d24:	e01c      	b.n	8001d60 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d008      	beq.n	8001d42 <HAL_UART_IRQHandler+0x1d6>
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f8a3 	bl	8001e86 <UART_Transmit_IT>
    return;
 8001d40:	e00f      	b.n	8001d62 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d00a      	beq.n	8001d62 <HAL_UART_IRQHandler+0x1f6>
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d005      	beq.n	8001d62 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f8e4 	bl	8001f24 <UART_EndTransmit_IT>
    return;
 8001d5c:	bf00      	nop
 8001d5e:	e000      	b.n	8001d62 <HAL_UART_IRQHandler+0x1f6>
    return;
 8001d60:	bf00      	nop
  }
}
 8001d62:	3720      	adds	r7, #32
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	08001e5f 	.word	0x08001e5f

08001d6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr

08001d7e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr

08001d90 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	603b      	str	r3, [r7, #0]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001da0:	e02c      	b.n	8001dfc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001da8:	d028      	beq.n	8001dfc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d007      	beq.n	8001dc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8001db0:	f7fe fe52 	bl	8000a58 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d21d      	bcs.n	8001dfc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68da      	ldr	r2, [r3, #12]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001dce:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	695a      	ldr	r2, [r3, #20]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0201 	bic.w	r2, r2, #1
 8001dde:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2220      	movs	r2, #32
 8001de4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2220      	movs	r2, #32
 8001dec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e00f      	b.n	8001e1c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	4013      	ands	r3, r2
 8001e06:	68ba      	ldr	r2, [r7, #8]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	bf0c      	ite	eq
 8001e0c:	2301      	moveq	r3, #1
 8001e0e:	2300      	movne	r3, #0
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	461a      	mov	r2, r3
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d0c3      	beq.n	8001da2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68da      	ldr	r2, [r3, #12]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001e3a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	695a      	ldr	r2, [r3, #20]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 0201 	bic.w	r2, r2, #1
 8001e4a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2220      	movs	r2, #32
 8001e50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr

08001e5e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b084      	sub	sp, #16
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f7ff ff80 	bl	8001d7e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001e7e:	bf00      	nop
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b085      	sub	sp, #20
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b21      	cmp	r3, #33	; 0x21
 8001e98:	d13e      	bne.n	8001f18 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ea2:	d114      	bne.n	8001ece <UART_Transmit_IT+0x48>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d110      	bne.n	8001ece <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ec0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	1c9a      	adds	r2, r3, #2
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	621a      	str	r2, [r3, #32]
 8001ecc:	e008      	b.n	8001ee0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	1c59      	adds	r1, r3, #1
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	6211      	str	r1, [r2, #32]
 8001ed8:	781a      	ldrb	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	4619      	mov	r1, r3
 8001eee:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d10f      	bne.n	8001f14 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68da      	ldr	r2, [r3, #12]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f02:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f12:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001f14:	2300      	movs	r3, #0
 8001f16:	e000      	b.n	8001f1a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001f18:	2302      	movs	r3, #2
  }
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr

08001f24 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f3a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff ff11 	bl	8001d6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b22      	cmp	r3, #34	; 0x22
 8001f66:	d170      	bne.n	800204a <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f70:	d117      	bne.n	8001fa2 <UART_Receive_IT+0x4e>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d113      	bne.n	8001fa2 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f82:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9a:	1c9a      	adds	r2, r3, #2
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	629a      	str	r2, [r3, #40]	; 0x28
 8001fa0:	e026      	b.n	8001ff0 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa6:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fb4:	d007      	beq.n	8001fc6 <UART_Receive_IT+0x72>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10a      	bne.n	8001fd4 <UART_Receive_IT+0x80>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d106      	bne.n	8001fd4 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	701a      	strb	r2, [r3, #0]
 8001fd2:	e008      	b.n	8001fe6 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fea:	1c5a      	adds	r2, r3, #1
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002000:	2b00      	cmp	r3, #0
 8002002:	d120      	bne.n	8002046 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 0220 	bic.w	r2, r2, #32
 8002012:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68da      	ldr	r2, [r3, #12]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002022:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	695a      	ldr	r2, [r3, #20]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 0201 	bic.w	r2, r2, #1
 8002032:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2220      	movs	r2, #32
 8002038:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7fe faf9 	bl	8000634 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002042:	2300      	movs	r3, #0
 8002044:	e002      	b.n	800204c <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8002046:	2300      	movs	r3, #0
 8002048:	e000      	b.n	800204c <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800204a:	2302      	movs	r3, #2
  }
}
 800204c:	4618      	mov	r0, r3
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689a      	ldr	r2, [r3, #8]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	4313      	orrs	r3, r2
 8002082:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800208e:	f023 030c 	bic.w	r3, r3, #12
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	6812      	ldr	r2, [r2, #0]
 8002096:	68b9      	ldr	r1, [r7, #8]
 8002098:	430b      	orrs	r3, r1
 800209a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	699a      	ldr	r2, [r3, #24]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a2c      	ldr	r2, [pc, #176]	; (8002168 <UART_SetConfig+0x114>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d103      	bne.n	80020c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80020bc:	f7ff fbf0 	bl	80018a0 <HAL_RCC_GetPCLK2Freq>
 80020c0:	60f8      	str	r0, [r7, #12]
 80020c2:	e002      	b.n	80020ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80020c4:	f7ff fbd8 	bl	8001878 <HAL_RCC_GetPCLK1Freq>
 80020c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	4613      	mov	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4413      	add	r3, r2
 80020d2:	009a      	lsls	r2, r3, #2
 80020d4:	441a      	add	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e0:	4a22      	ldr	r2, [pc, #136]	; (800216c <UART_SetConfig+0x118>)
 80020e2:	fba2 2303 	umull	r2, r3, r2, r3
 80020e6:	095b      	lsrs	r3, r3, #5
 80020e8:	0119      	lsls	r1, r3, #4
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	009a      	lsls	r2, r3, #2
 80020f4:	441a      	add	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002100:	4b1a      	ldr	r3, [pc, #104]	; (800216c <UART_SetConfig+0x118>)
 8002102:	fba3 0302 	umull	r0, r3, r3, r2
 8002106:	095b      	lsrs	r3, r3, #5
 8002108:	2064      	movs	r0, #100	; 0x64
 800210a:	fb00 f303 	mul.w	r3, r0, r3
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	011b      	lsls	r3, r3, #4
 8002112:	3332      	adds	r3, #50	; 0x32
 8002114:	4a15      	ldr	r2, [pc, #84]	; (800216c <UART_SetConfig+0x118>)
 8002116:	fba2 2303 	umull	r2, r3, r2, r3
 800211a:	095b      	lsrs	r3, r3, #5
 800211c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002120:	4419      	add	r1, r3
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	4613      	mov	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	009a      	lsls	r2, r3, #2
 800212c:	441a      	add	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	fbb2 f2f3 	udiv	r2, r2, r3
 8002138:	4b0c      	ldr	r3, [pc, #48]	; (800216c <UART_SetConfig+0x118>)
 800213a:	fba3 0302 	umull	r0, r3, r3, r2
 800213e:	095b      	lsrs	r3, r3, #5
 8002140:	2064      	movs	r0, #100	; 0x64
 8002142:	fb00 f303 	mul.w	r3, r0, r3
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	011b      	lsls	r3, r3, #4
 800214a:	3332      	adds	r3, #50	; 0x32
 800214c:	4a07      	ldr	r2, [pc, #28]	; (800216c <UART_SetConfig+0x118>)
 800214e:	fba2 2303 	umull	r2, r3, r2, r3
 8002152:	095b      	lsrs	r3, r3, #5
 8002154:	f003 020f 	and.w	r2, r3, #15
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	440a      	add	r2, r1
 800215e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002160:	bf00      	nop
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40013800 	.word	0x40013800
 800216c:	51eb851f 	.word	0x51eb851f

08002170 <__errno>:
 8002170:	4b01      	ldr	r3, [pc, #4]	; (8002178 <__errno+0x8>)
 8002172:	6818      	ldr	r0, [r3, #0]
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	20000030 	.word	0x20000030

0800217c <__libc_init_array>:
 800217c:	b570      	push	{r4, r5, r6, lr}
 800217e:	2500      	movs	r5, #0
 8002180:	4e0c      	ldr	r6, [pc, #48]	; (80021b4 <__libc_init_array+0x38>)
 8002182:	4c0d      	ldr	r4, [pc, #52]	; (80021b8 <__libc_init_array+0x3c>)
 8002184:	1ba4      	subs	r4, r4, r6
 8002186:	10a4      	asrs	r4, r4, #2
 8002188:	42a5      	cmp	r5, r4
 800218a:	d109      	bne.n	80021a0 <__libc_init_array+0x24>
 800218c:	f000 fc3c 	bl	8002a08 <_init>
 8002190:	2500      	movs	r5, #0
 8002192:	4e0a      	ldr	r6, [pc, #40]	; (80021bc <__libc_init_array+0x40>)
 8002194:	4c0a      	ldr	r4, [pc, #40]	; (80021c0 <__libc_init_array+0x44>)
 8002196:	1ba4      	subs	r4, r4, r6
 8002198:	10a4      	asrs	r4, r4, #2
 800219a:	42a5      	cmp	r5, r4
 800219c:	d105      	bne.n	80021aa <__libc_init_array+0x2e>
 800219e:	bd70      	pop	{r4, r5, r6, pc}
 80021a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021a4:	4798      	blx	r3
 80021a6:	3501      	adds	r5, #1
 80021a8:	e7ee      	b.n	8002188 <__libc_init_array+0xc>
 80021aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021ae:	4798      	blx	r3
 80021b0:	3501      	adds	r5, #1
 80021b2:	e7f2      	b.n	800219a <__libc_init_array+0x1e>
 80021b4:	08002bf0 	.word	0x08002bf0
 80021b8:	08002bf0 	.word	0x08002bf0
 80021bc:	08002bf0 	.word	0x08002bf0
 80021c0:	08002bf4 	.word	0x08002bf4

080021c4 <memset>:
 80021c4:	4603      	mov	r3, r0
 80021c6:	4402      	add	r2, r0
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d100      	bne.n	80021ce <memset+0xa>
 80021cc:	4770      	bx	lr
 80021ce:	f803 1b01 	strb.w	r1, [r3], #1
 80021d2:	e7f9      	b.n	80021c8 <memset+0x4>

080021d4 <siprintf>:
 80021d4:	b40e      	push	{r1, r2, r3}
 80021d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80021da:	b500      	push	{lr}
 80021dc:	b09c      	sub	sp, #112	; 0x70
 80021de:	ab1d      	add	r3, sp, #116	; 0x74
 80021e0:	9002      	str	r0, [sp, #8]
 80021e2:	9006      	str	r0, [sp, #24]
 80021e4:	9107      	str	r1, [sp, #28]
 80021e6:	9104      	str	r1, [sp, #16]
 80021e8:	4808      	ldr	r0, [pc, #32]	; (800220c <siprintf+0x38>)
 80021ea:	4909      	ldr	r1, [pc, #36]	; (8002210 <siprintf+0x3c>)
 80021ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80021f0:	9105      	str	r1, [sp, #20]
 80021f2:	6800      	ldr	r0, [r0, #0]
 80021f4:	a902      	add	r1, sp, #8
 80021f6:	9301      	str	r3, [sp, #4]
 80021f8:	f000 f86e 	bl	80022d8 <_svfiprintf_r>
 80021fc:	2200      	movs	r2, #0
 80021fe:	9b02      	ldr	r3, [sp, #8]
 8002200:	701a      	strb	r2, [r3, #0]
 8002202:	b01c      	add	sp, #112	; 0x70
 8002204:	f85d eb04 	ldr.w	lr, [sp], #4
 8002208:	b003      	add	sp, #12
 800220a:	4770      	bx	lr
 800220c:	20000030 	.word	0x20000030
 8002210:	ffff0208 	.word	0xffff0208

08002214 <strcpy>:
 8002214:	4603      	mov	r3, r0
 8002216:	f811 2b01 	ldrb.w	r2, [r1], #1
 800221a:	f803 2b01 	strb.w	r2, [r3], #1
 800221e:	2a00      	cmp	r2, #0
 8002220:	d1f9      	bne.n	8002216 <strcpy+0x2>
 8002222:	4770      	bx	lr

08002224 <__ssputs_r>:
 8002224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002228:	688e      	ldr	r6, [r1, #8]
 800222a:	4682      	mov	sl, r0
 800222c:	429e      	cmp	r6, r3
 800222e:	460c      	mov	r4, r1
 8002230:	4690      	mov	r8, r2
 8002232:	4699      	mov	r9, r3
 8002234:	d837      	bhi.n	80022a6 <__ssputs_r+0x82>
 8002236:	898a      	ldrh	r2, [r1, #12]
 8002238:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800223c:	d031      	beq.n	80022a2 <__ssputs_r+0x7e>
 800223e:	2302      	movs	r3, #2
 8002240:	6825      	ldr	r5, [r4, #0]
 8002242:	6909      	ldr	r1, [r1, #16]
 8002244:	1a6f      	subs	r7, r5, r1
 8002246:	6965      	ldr	r5, [r4, #20]
 8002248:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800224c:	fb95 f5f3 	sdiv	r5, r5, r3
 8002250:	f109 0301 	add.w	r3, r9, #1
 8002254:	443b      	add	r3, r7
 8002256:	429d      	cmp	r5, r3
 8002258:	bf38      	it	cc
 800225a:	461d      	movcc	r5, r3
 800225c:	0553      	lsls	r3, r2, #21
 800225e:	d530      	bpl.n	80022c2 <__ssputs_r+0x9e>
 8002260:	4629      	mov	r1, r5
 8002262:	f000 fb37 	bl	80028d4 <_malloc_r>
 8002266:	4606      	mov	r6, r0
 8002268:	b950      	cbnz	r0, 8002280 <__ssputs_r+0x5c>
 800226a:	230c      	movs	r3, #12
 800226c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002270:	f8ca 3000 	str.w	r3, [sl]
 8002274:	89a3      	ldrh	r3, [r4, #12]
 8002276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800227a:	81a3      	strh	r3, [r4, #12]
 800227c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002280:	463a      	mov	r2, r7
 8002282:	6921      	ldr	r1, [r4, #16]
 8002284:	f000 fab6 	bl	80027f4 <memcpy>
 8002288:	89a3      	ldrh	r3, [r4, #12]
 800228a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800228e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002292:	81a3      	strh	r3, [r4, #12]
 8002294:	6126      	str	r6, [r4, #16]
 8002296:	443e      	add	r6, r7
 8002298:	6026      	str	r6, [r4, #0]
 800229a:	464e      	mov	r6, r9
 800229c:	6165      	str	r5, [r4, #20]
 800229e:	1bed      	subs	r5, r5, r7
 80022a0:	60a5      	str	r5, [r4, #8]
 80022a2:	454e      	cmp	r6, r9
 80022a4:	d900      	bls.n	80022a8 <__ssputs_r+0x84>
 80022a6:	464e      	mov	r6, r9
 80022a8:	4632      	mov	r2, r6
 80022aa:	4641      	mov	r1, r8
 80022ac:	6820      	ldr	r0, [r4, #0]
 80022ae:	f000 faac 	bl	800280a <memmove>
 80022b2:	68a3      	ldr	r3, [r4, #8]
 80022b4:	2000      	movs	r0, #0
 80022b6:	1b9b      	subs	r3, r3, r6
 80022b8:	60a3      	str	r3, [r4, #8]
 80022ba:	6823      	ldr	r3, [r4, #0]
 80022bc:	441e      	add	r6, r3
 80022be:	6026      	str	r6, [r4, #0]
 80022c0:	e7dc      	b.n	800227c <__ssputs_r+0x58>
 80022c2:	462a      	mov	r2, r5
 80022c4:	f000 fb60 	bl	8002988 <_realloc_r>
 80022c8:	4606      	mov	r6, r0
 80022ca:	2800      	cmp	r0, #0
 80022cc:	d1e2      	bne.n	8002294 <__ssputs_r+0x70>
 80022ce:	6921      	ldr	r1, [r4, #16]
 80022d0:	4650      	mov	r0, sl
 80022d2:	f000 fab3 	bl	800283c <_free_r>
 80022d6:	e7c8      	b.n	800226a <__ssputs_r+0x46>

080022d8 <_svfiprintf_r>:
 80022d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022dc:	461d      	mov	r5, r3
 80022de:	898b      	ldrh	r3, [r1, #12]
 80022e0:	b09d      	sub	sp, #116	; 0x74
 80022e2:	061f      	lsls	r7, r3, #24
 80022e4:	4680      	mov	r8, r0
 80022e6:	460c      	mov	r4, r1
 80022e8:	4616      	mov	r6, r2
 80022ea:	d50f      	bpl.n	800230c <_svfiprintf_r+0x34>
 80022ec:	690b      	ldr	r3, [r1, #16]
 80022ee:	b96b      	cbnz	r3, 800230c <_svfiprintf_r+0x34>
 80022f0:	2140      	movs	r1, #64	; 0x40
 80022f2:	f000 faef 	bl	80028d4 <_malloc_r>
 80022f6:	6020      	str	r0, [r4, #0]
 80022f8:	6120      	str	r0, [r4, #16]
 80022fa:	b928      	cbnz	r0, 8002308 <_svfiprintf_r+0x30>
 80022fc:	230c      	movs	r3, #12
 80022fe:	f8c8 3000 	str.w	r3, [r8]
 8002302:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002306:	e0c8      	b.n	800249a <_svfiprintf_r+0x1c2>
 8002308:	2340      	movs	r3, #64	; 0x40
 800230a:	6163      	str	r3, [r4, #20]
 800230c:	2300      	movs	r3, #0
 800230e:	9309      	str	r3, [sp, #36]	; 0x24
 8002310:	2320      	movs	r3, #32
 8002312:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002316:	2330      	movs	r3, #48	; 0x30
 8002318:	f04f 0b01 	mov.w	fp, #1
 800231c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002320:	9503      	str	r5, [sp, #12]
 8002322:	4637      	mov	r7, r6
 8002324:	463d      	mov	r5, r7
 8002326:	f815 3b01 	ldrb.w	r3, [r5], #1
 800232a:	b10b      	cbz	r3, 8002330 <_svfiprintf_r+0x58>
 800232c:	2b25      	cmp	r3, #37	; 0x25
 800232e:	d13e      	bne.n	80023ae <_svfiprintf_r+0xd6>
 8002330:	ebb7 0a06 	subs.w	sl, r7, r6
 8002334:	d00b      	beq.n	800234e <_svfiprintf_r+0x76>
 8002336:	4653      	mov	r3, sl
 8002338:	4632      	mov	r2, r6
 800233a:	4621      	mov	r1, r4
 800233c:	4640      	mov	r0, r8
 800233e:	f7ff ff71 	bl	8002224 <__ssputs_r>
 8002342:	3001      	adds	r0, #1
 8002344:	f000 80a4 	beq.w	8002490 <_svfiprintf_r+0x1b8>
 8002348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800234a:	4453      	add	r3, sl
 800234c:	9309      	str	r3, [sp, #36]	; 0x24
 800234e:	783b      	ldrb	r3, [r7, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 809d 	beq.w	8002490 <_svfiprintf_r+0x1b8>
 8002356:	2300      	movs	r3, #0
 8002358:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800235c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002360:	9304      	str	r3, [sp, #16]
 8002362:	9307      	str	r3, [sp, #28]
 8002364:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002368:	931a      	str	r3, [sp, #104]	; 0x68
 800236a:	462f      	mov	r7, r5
 800236c:	2205      	movs	r2, #5
 800236e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002372:	4850      	ldr	r0, [pc, #320]	; (80024b4 <_svfiprintf_r+0x1dc>)
 8002374:	f000 fa30 	bl	80027d8 <memchr>
 8002378:	9b04      	ldr	r3, [sp, #16]
 800237a:	b9d0      	cbnz	r0, 80023b2 <_svfiprintf_r+0xda>
 800237c:	06d9      	lsls	r1, r3, #27
 800237e:	bf44      	itt	mi
 8002380:	2220      	movmi	r2, #32
 8002382:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002386:	071a      	lsls	r2, r3, #28
 8002388:	bf44      	itt	mi
 800238a:	222b      	movmi	r2, #43	; 0x2b
 800238c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002390:	782a      	ldrb	r2, [r5, #0]
 8002392:	2a2a      	cmp	r2, #42	; 0x2a
 8002394:	d015      	beq.n	80023c2 <_svfiprintf_r+0xea>
 8002396:	462f      	mov	r7, r5
 8002398:	2000      	movs	r0, #0
 800239a:	250a      	movs	r5, #10
 800239c:	9a07      	ldr	r2, [sp, #28]
 800239e:	4639      	mov	r1, r7
 80023a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80023a4:	3b30      	subs	r3, #48	; 0x30
 80023a6:	2b09      	cmp	r3, #9
 80023a8:	d94d      	bls.n	8002446 <_svfiprintf_r+0x16e>
 80023aa:	b1b8      	cbz	r0, 80023dc <_svfiprintf_r+0x104>
 80023ac:	e00f      	b.n	80023ce <_svfiprintf_r+0xf6>
 80023ae:	462f      	mov	r7, r5
 80023b0:	e7b8      	b.n	8002324 <_svfiprintf_r+0x4c>
 80023b2:	4a40      	ldr	r2, [pc, #256]	; (80024b4 <_svfiprintf_r+0x1dc>)
 80023b4:	463d      	mov	r5, r7
 80023b6:	1a80      	subs	r0, r0, r2
 80023b8:	fa0b f000 	lsl.w	r0, fp, r0
 80023bc:	4318      	orrs	r0, r3
 80023be:	9004      	str	r0, [sp, #16]
 80023c0:	e7d3      	b.n	800236a <_svfiprintf_r+0x92>
 80023c2:	9a03      	ldr	r2, [sp, #12]
 80023c4:	1d11      	adds	r1, r2, #4
 80023c6:	6812      	ldr	r2, [r2, #0]
 80023c8:	9103      	str	r1, [sp, #12]
 80023ca:	2a00      	cmp	r2, #0
 80023cc:	db01      	blt.n	80023d2 <_svfiprintf_r+0xfa>
 80023ce:	9207      	str	r2, [sp, #28]
 80023d0:	e004      	b.n	80023dc <_svfiprintf_r+0x104>
 80023d2:	4252      	negs	r2, r2
 80023d4:	f043 0302 	orr.w	r3, r3, #2
 80023d8:	9207      	str	r2, [sp, #28]
 80023da:	9304      	str	r3, [sp, #16]
 80023dc:	783b      	ldrb	r3, [r7, #0]
 80023de:	2b2e      	cmp	r3, #46	; 0x2e
 80023e0:	d10c      	bne.n	80023fc <_svfiprintf_r+0x124>
 80023e2:	787b      	ldrb	r3, [r7, #1]
 80023e4:	2b2a      	cmp	r3, #42	; 0x2a
 80023e6:	d133      	bne.n	8002450 <_svfiprintf_r+0x178>
 80023e8:	9b03      	ldr	r3, [sp, #12]
 80023ea:	3702      	adds	r7, #2
 80023ec:	1d1a      	adds	r2, r3, #4
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	9203      	str	r2, [sp, #12]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	bfb8      	it	lt
 80023f6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80023fa:	9305      	str	r3, [sp, #20]
 80023fc:	4d2e      	ldr	r5, [pc, #184]	; (80024b8 <_svfiprintf_r+0x1e0>)
 80023fe:	2203      	movs	r2, #3
 8002400:	7839      	ldrb	r1, [r7, #0]
 8002402:	4628      	mov	r0, r5
 8002404:	f000 f9e8 	bl	80027d8 <memchr>
 8002408:	b138      	cbz	r0, 800241a <_svfiprintf_r+0x142>
 800240a:	2340      	movs	r3, #64	; 0x40
 800240c:	1b40      	subs	r0, r0, r5
 800240e:	fa03 f000 	lsl.w	r0, r3, r0
 8002412:	9b04      	ldr	r3, [sp, #16]
 8002414:	3701      	adds	r7, #1
 8002416:	4303      	orrs	r3, r0
 8002418:	9304      	str	r3, [sp, #16]
 800241a:	7839      	ldrb	r1, [r7, #0]
 800241c:	2206      	movs	r2, #6
 800241e:	4827      	ldr	r0, [pc, #156]	; (80024bc <_svfiprintf_r+0x1e4>)
 8002420:	1c7e      	adds	r6, r7, #1
 8002422:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002426:	f000 f9d7 	bl	80027d8 <memchr>
 800242a:	2800      	cmp	r0, #0
 800242c:	d038      	beq.n	80024a0 <_svfiprintf_r+0x1c8>
 800242e:	4b24      	ldr	r3, [pc, #144]	; (80024c0 <_svfiprintf_r+0x1e8>)
 8002430:	bb13      	cbnz	r3, 8002478 <_svfiprintf_r+0x1a0>
 8002432:	9b03      	ldr	r3, [sp, #12]
 8002434:	3307      	adds	r3, #7
 8002436:	f023 0307 	bic.w	r3, r3, #7
 800243a:	3308      	adds	r3, #8
 800243c:	9303      	str	r3, [sp, #12]
 800243e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002440:	444b      	add	r3, r9
 8002442:	9309      	str	r3, [sp, #36]	; 0x24
 8002444:	e76d      	b.n	8002322 <_svfiprintf_r+0x4a>
 8002446:	fb05 3202 	mla	r2, r5, r2, r3
 800244a:	2001      	movs	r0, #1
 800244c:	460f      	mov	r7, r1
 800244e:	e7a6      	b.n	800239e <_svfiprintf_r+0xc6>
 8002450:	2300      	movs	r3, #0
 8002452:	250a      	movs	r5, #10
 8002454:	4619      	mov	r1, r3
 8002456:	3701      	adds	r7, #1
 8002458:	9305      	str	r3, [sp, #20]
 800245a:	4638      	mov	r0, r7
 800245c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002460:	3a30      	subs	r2, #48	; 0x30
 8002462:	2a09      	cmp	r2, #9
 8002464:	d903      	bls.n	800246e <_svfiprintf_r+0x196>
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0c8      	beq.n	80023fc <_svfiprintf_r+0x124>
 800246a:	9105      	str	r1, [sp, #20]
 800246c:	e7c6      	b.n	80023fc <_svfiprintf_r+0x124>
 800246e:	fb05 2101 	mla	r1, r5, r1, r2
 8002472:	2301      	movs	r3, #1
 8002474:	4607      	mov	r7, r0
 8002476:	e7f0      	b.n	800245a <_svfiprintf_r+0x182>
 8002478:	ab03      	add	r3, sp, #12
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	4622      	mov	r2, r4
 800247e:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <_svfiprintf_r+0x1ec>)
 8002480:	a904      	add	r1, sp, #16
 8002482:	4640      	mov	r0, r8
 8002484:	f3af 8000 	nop.w
 8002488:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800248c:	4681      	mov	r9, r0
 800248e:	d1d6      	bne.n	800243e <_svfiprintf_r+0x166>
 8002490:	89a3      	ldrh	r3, [r4, #12]
 8002492:	065b      	lsls	r3, r3, #25
 8002494:	f53f af35 	bmi.w	8002302 <_svfiprintf_r+0x2a>
 8002498:	9809      	ldr	r0, [sp, #36]	; 0x24
 800249a:	b01d      	add	sp, #116	; 0x74
 800249c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024a0:	ab03      	add	r3, sp, #12
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	4622      	mov	r2, r4
 80024a6:	4b07      	ldr	r3, [pc, #28]	; (80024c4 <_svfiprintf_r+0x1ec>)
 80024a8:	a904      	add	r1, sp, #16
 80024aa:	4640      	mov	r0, r8
 80024ac:	f000 f882 	bl	80025b4 <_printf_i>
 80024b0:	e7ea      	b.n	8002488 <_svfiprintf_r+0x1b0>
 80024b2:	bf00      	nop
 80024b4:	08002bbc 	.word	0x08002bbc
 80024b8:	08002bc2 	.word	0x08002bc2
 80024bc:	08002bc6 	.word	0x08002bc6
 80024c0:	00000000 	.word	0x00000000
 80024c4:	08002225 	.word	0x08002225

080024c8 <_printf_common>:
 80024c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024cc:	4691      	mov	r9, r2
 80024ce:	461f      	mov	r7, r3
 80024d0:	688a      	ldr	r2, [r1, #8]
 80024d2:	690b      	ldr	r3, [r1, #16]
 80024d4:	4606      	mov	r6, r0
 80024d6:	4293      	cmp	r3, r2
 80024d8:	bfb8      	it	lt
 80024da:	4613      	movlt	r3, r2
 80024dc:	f8c9 3000 	str.w	r3, [r9]
 80024e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80024e4:	460c      	mov	r4, r1
 80024e6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80024ea:	b112      	cbz	r2, 80024f2 <_printf_common+0x2a>
 80024ec:	3301      	adds	r3, #1
 80024ee:	f8c9 3000 	str.w	r3, [r9]
 80024f2:	6823      	ldr	r3, [r4, #0]
 80024f4:	0699      	lsls	r1, r3, #26
 80024f6:	bf42      	ittt	mi
 80024f8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80024fc:	3302      	addmi	r3, #2
 80024fe:	f8c9 3000 	strmi.w	r3, [r9]
 8002502:	6825      	ldr	r5, [r4, #0]
 8002504:	f015 0506 	ands.w	r5, r5, #6
 8002508:	d107      	bne.n	800251a <_printf_common+0x52>
 800250a:	f104 0a19 	add.w	sl, r4, #25
 800250e:	68e3      	ldr	r3, [r4, #12]
 8002510:	f8d9 2000 	ldr.w	r2, [r9]
 8002514:	1a9b      	subs	r3, r3, r2
 8002516:	42ab      	cmp	r3, r5
 8002518:	dc29      	bgt.n	800256e <_printf_common+0xa6>
 800251a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800251e:	6822      	ldr	r2, [r4, #0]
 8002520:	3300      	adds	r3, #0
 8002522:	bf18      	it	ne
 8002524:	2301      	movne	r3, #1
 8002526:	0692      	lsls	r2, r2, #26
 8002528:	d42e      	bmi.n	8002588 <_printf_common+0xc0>
 800252a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800252e:	4639      	mov	r1, r7
 8002530:	4630      	mov	r0, r6
 8002532:	47c0      	blx	r8
 8002534:	3001      	adds	r0, #1
 8002536:	d021      	beq.n	800257c <_printf_common+0xb4>
 8002538:	6823      	ldr	r3, [r4, #0]
 800253a:	68e5      	ldr	r5, [r4, #12]
 800253c:	f003 0306 	and.w	r3, r3, #6
 8002540:	2b04      	cmp	r3, #4
 8002542:	bf18      	it	ne
 8002544:	2500      	movne	r5, #0
 8002546:	f8d9 2000 	ldr.w	r2, [r9]
 800254a:	f04f 0900 	mov.w	r9, #0
 800254e:	bf08      	it	eq
 8002550:	1aad      	subeq	r5, r5, r2
 8002552:	68a3      	ldr	r3, [r4, #8]
 8002554:	6922      	ldr	r2, [r4, #16]
 8002556:	bf08      	it	eq
 8002558:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800255c:	4293      	cmp	r3, r2
 800255e:	bfc4      	itt	gt
 8002560:	1a9b      	subgt	r3, r3, r2
 8002562:	18ed      	addgt	r5, r5, r3
 8002564:	341a      	adds	r4, #26
 8002566:	454d      	cmp	r5, r9
 8002568:	d11a      	bne.n	80025a0 <_printf_common+0xd8>
 800256a:	2000      	movs	r0, #0
 800256c:	e008      	b.n	8002580 <_printf_common+0xb8>
 800256e:	2301      	movs	r3, #1
 8002570:	4652      	mov	r2, sl
 8002572:	4639      	mov	r1, r7
 8002574:	4630      	mov	r0, r6
 8002576:	47c0      	blx	r8
 8002578:	3001      	adds	r0, #1
 800257a:	d103      	bne.n	8002584 <_printf_common+0xbc>
 800257c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002584:	3501      	adds	r5, #1
 8002586:	e7c2      	b.n	800250e <_printf_common+0x46>
 8002588:	2030      	movs	r0, #48	; 0x30
 800258a:	18e1      	adds	r1, r4, r3
 800258c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002590:	1c5a      	adds	r2, r3, #1
 8002592:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002596:	4422      	add	r2, r4
 8002598:	3302      	adds	r3, #2
 800259a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800259e:	e7c4      	b.n	800252a <_printf_common+0x62>
 80025a0:	2301      	movs	r3, #1
 80025a2:	4622      	mov	r2, r4
 80025a4:	4639      	mov	r1, r7
 80025a6:	4630      	mov	r0, r6
 80025a8:	47c0      	blx	r8
 80025aa:	3001      	adds	r0, #1
 80025ac:	d0e6      	beq.n	800257c <_printf_common+0xb4>
 80025ae:	f109 0901 	add.w	r9, r9, #1
 80025b2:	e7d8      	b.n	8002566 <_printf_common+0x9e>

080025b4 <_printf_i>:
 80025b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80025b8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80025bc:	460c      	mov	r4, r1
 80025be:	7e09      	ldrb	r1, [r1, #24]
 80025c0:	b085      	sub	sp, #20
 80025c2:	296e      	cmp	r1, #110	; 0x6e
 80025c4:	4617      	mov	r7, r2
 80025c6:	4606      	mov	r6, r0
 80025c8:	4698      	mov	r8, r3
 80025ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80025cc:	f000 80b3 	beq.w	8002736 <_printf_i+0x182>
 80025d0:	d822      	bhi.n	8002618 <_printf_i+0x64>
 80025d2:	2963      	cmp	r1, #99	; 0x63
 80025d4:	d036      	beq.n	8002644 <_printf_i+0x90>
 80025d6:	d80a      	bhi.n	80025ee <_printf_i+0x3a>
 80025d8:	2900      	cmp	r1, #0
 80025da:	f000 80b9 	beq.w	8002750 <_printf_i+0x19c>
 80025de:	2958      	cmp	r1, #88	; 0x58
 80025e0:	f000 8083 	beq.w	80026ea <_printf_i+0x136>
 80025e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80025e8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80025ec:	e032      	b.n	8002654 <_printf_i+0xa0>
 80025ee:	2964      	cmp	r1, #100	; 0x64
 80025f0:	d001      	beq.n	80025f6 <_printf_i+0x42>
 80025f2:	2969      	cmp	r1, #105	; 0x69
 80025f4:	d1f6      	bne.n	80025e4 <_printf_i+0x30>
 80025f6:	6820      	ldr	r0, [r4, #0]
 80025f8:	6813      	ldr	r3, [r2, #0]
 80025fa:	0605      	lsls	r5, r0, #24
 80025fc:	f103 0104 	add.w	r1, r3, #4
 8002600:	d52a      	bpl.n	8002658 <_printf_i+0xa4>
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6011      	str	r1, [r2, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	da03      	bge.n	8002612 <_printf_i+0x5e>
 800260a:	222d      	movs	r2, #45	; 0x2d
 800260c:	425b      	negs	r3, r3
 800260e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002612:	486f      	ldr	r0, [pc, #444]	; (80027d0 <_printf_i+0x21c>)
 8002614:	220a      	movs	r2, #10
 8002616:	e039      	b.n	800268c <_printf_i+0xd8>
 8002618:	2973      	cmp	r1, #115	; 0x73
 800261a:	f000 809d 	beq.w	8002758 <_printf_i+0x1a4>
 800261e:	d808      	bhi.n	8002632 <_printf_i+0x7e>
 8002620:	296f      	cmp	r1, #111	; 0x6f
 8002622:	d020      	beq.n	8002666 <_printf_i+0xb2>
 8002624:	2970      	cmp	r1, #112	; 0x70
 8002626:	d1dd      	bne.n	80025e4 <_printf_i+0x30>
 8002628:	6823      	ldr	r3, [r4, #0]
 800262a:	f043 0320 	orr.w	r3, r3, #32
 800262e:	6023      	str	r3, [r4, #0]
 8002630:	e003      	b.n	800263a <_printf_i+0x86>
 8002632:	2975      	cmp	r1, #117	; 0x75
 8002634:	d017      	beq.n	8002666 <_printf_i+0xb2>
 8002636:	2978      	cmp	r1, #120	; 0x78
 8002638:	d1d4      	bne.n	80025e4 <_printf_i+0x30>
 800263a:	2378      	movs	r3, #120	; 0x78
 800263c:	4865      	ldr	r0, [pc, #404]	; (80027d4 <_printf_i+0x220>)
 800263e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002642:	e055      	b.n	80026f0 <_printf_i+0x13c>
 8002644:	6813      	ldr	r3, [r2, #0]
 8002646:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800264a:	1d19      	adds	r1, r3, #4
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6011      	str	r1, [r2, #0]
 8002650:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002654:	2301      	movs	r3, #1
 8002656:	e08c      	b.n	8002772 <_printf_i+0x1be>
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800265e:	6011      	str	r1, [r2, #0]
 8002660:	bf18      	it	ne
 8002662:	b21b      	sxthne	r3, r3
 8002664:	e7cf      	b.n	8002606 <_printf_i+0x52>
 8002666:	6813      	ldr	r3, [r2, #0]
 8002668:	6825      	ldr	r5, [r4, #0]
 800266a:	1d18      	adds	r0, r3, #4
 800266c:	6010      	str	r0, [r2, #0]
 800266e:	0628      	lsls	r0, r5, #24
 8002670:	d501      	bpl.n	8002676 <_printf_i+0xc2>
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	e002      	b.n	800267c <_printf_i+0xc8>
 8002676:	0668      	lsls	r0, r5, #25
 8002678:	d5fb      	bpl.n	8002672 <_printf_i+0xbe>
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	296f      	cmp	r1, #111	; 0x6f
 800267e:	bf14      	ite	ne
 8002680:	220a      	movne	r2, #10
 8002682:	2208      	moveq	r2, #8
 8002684:	4852      	ldr	r0, [pc, #328]	; (80027d0 <_printf_i+0x21c>)
 8002686:	2100      	movs	r1, #0
 8002688:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800268c:	6865      	ldr	r5, [r4, #4]
 800268e:	2d00      	cmp	r5, #0
 8002690:	60a5      	str	r5, [r4, #8]
 8002692:	f2c0 8095 	blt.w	80027c0 <_printf_i+0x20c>
 8002696:	6821      	ldr	r1, [r4, #0]
 8002698:	f021 0104 	bic.w	r1, r1, #4
 800269c:	6021      	str	r1, [r4, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d13d      	bne.n	800271e <_printf_i+0x16a>
 80026a2:	2d00      	cmp	r5, #0
 80026a4:	f040 808e 	bne.w	80027c4 <_printf_i+0x210>
 80026a8:	4665      	mov	r5, ip
 80026aa:	2a08      	cmp	r2, #8
 80026ac:	d10b      	bne.n	80026c6 <_printf_i+0x112>
 80026ae:	6823      	ldr	r3, [r4, #0]
 80026b0:	07db      	lsls	r3, r3, #31
 80026b2:	d508      	bpl.n	80026c6 <_printf_i+0x112>
 80026b4:	6923      	ldr	r3, [r4, #16]
 80026b6:	6862      	ldr	r2, [r4, #4]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	bfde      	ittt	le
 80026bc:	2330      	movle	r3, #48	; 0x30
 80026be:	f805 3c01 	strble.w	r3, [r5, #-1]
 80026c2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80026c6:	ebac 0305 	sub.w	r3, ip, r5
 80026ca:	6123      	str	r3, [r4, #16]
 80026cc:	f8cd 8000 	str.w	r8, [sp]
 80026d0:	463b      	mov	r3, r7
 80026d2:	aa03      	add	r2, sp, #12
 80026d4:	4621      	mov	r1, r4
 80026d6:	4630      	mov	r0, r6
 80026d8:	f7ff fef6 	bl	80024c8 <_printf_common>
 80026dc:	3001      	adds	r0, #1
 80026de:	d14d      	bne.n	800277c <_printf_i+0x1c8>
 80026e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026e4:	b005      	add	sp, #20
 80026e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80026ea:	4839      	ldr	r0, [pc, #228]	; (80027d0 <_printf_i+0x21c>)
 80026ec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80026f0:	6813      	ldr	r3, [r2, #0]
 80026f2:	6821      	ldr	r1, [r4, #0]
 80026f4:	1d1d      	adds	r5, r3, #4
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6015      	str	r5, [r2, #0]
 80026fa:	060a      	lsls	r2, r1, #24
 80026fc:	d50b      	bpl.n	8002716 <_printf_i+0x162>
 80026fe:	07ca      	lsls	r2, r1, #31
 8002700:	bf44      	itt	mi
 8002702:	f041 0120 	orrmi.w	r1, r1, #32
 8002706:	6021      	strmi	r1, [r4, #0]
 8002708:	b91b      	cbnz	r3, 8002712 <_printf_i+0x15e>
 800270a:	6822      	ldr	r2, [r4, #0]
 800270c:	f022 0220 	bic.w	r2, r2, #32
 8002710:	6022      	str	r2, [r4, #0]
 8002712:	2210      	movs	r2, #16
 8002714:	e7b7      	b.n	8002686 <_printf_i+0xd2>
 8002716:	064d      	lsls	r5, r1, #25
 8002718:	bf48      	it	mi
 800271a:	b29b      	uxthmi	r3, r3
 800271c:	e7ef      	b.n	80026fe <_printf_i+0x14a>
 800271e:	4665      	mov	r5, ip
 8002720:	fbb3 f1f2 	udiv	r1, r3, r2
 8002724:	fb02 3311 	mls	r3, r2, r1, r3
 8002728:	5cc3      	ldrb	r3, [r0, r3]
 800272a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800272e:	460b      	mov	r3, r1
 8002730:	2900      	cmp	r1, #0
 8002732:	d1f5      	bne.n	8002720 <_printf_i+0x16c>
 8002734:	e7b9      	b.n	80026aa <_printf_i+0xf6>
 8002736:	6813      	ldr	r3, [r2, #0]
 8002738:	6825      	ldr	r5, [r4, #0]
 800273a:	1d18      	adds	r0, r3, #4
 800273c:	6961      	ldr	r1, [r4, #20]
 800273e:	6010      	str	r0, [r2, #0]
 8002740:	0628      	lsls	r0, r5, #24
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	d501      	bpl.n	800274a <_printf_i+0x196>
 8002746:	6019      	str	r1, [r3, #0]
 8002748:	e002      	b.n	8002750 <_printf_i+0x19c>
 800274a:	066a      	lsls	r2, r5, #25
 800274c:	d5fb      	bpl.n	8002746 <_printf_i+0x192>
 800274e:	8019      	strh	r1, [r3, #0]
 8002750:	2300      	movs	r3, #0
 8002752:	4665      	mov	r5, ip
 8002754:	6123      	str	r3, [r4, #16]
 8002756:	e7b9      	b.n	80026cc <_printf_i+0x118>
 8002758:	6813      	ldr	r3, [r2, #0]
 800275a:	1d19      	adds	r1, r3, #4
 800275c:	6011      	str	r1, [r2, #0]
 800275e:	681d      	ldr	r5, [r3, #0]
 8002760:	6862      	ldr	r2, [r4, #4]
 8002762:	2100      	movs	r1, #0
 8002764:	4628      	mov	r0, r5
 8002766:	f000 f837 	bl	80027d8 <memchr>
 800276a:	b108      	cbz	r0, 8002770 <_printf_i+0x1bc>
 800276c:	1b40      	subs	r0, r0, r5
 800276e:	6060      	str	r0, [r4, #4]
 8002770:	6863      	ldr	r3, [r4, #4]
 8002772:	6123      	str	r3, [r4, #16]
 8002774:	2300      	movs	r3, #0
 8002776:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800277a:	e7a7      	b.n	80026cc <_printf_i+0x118>
 800277c:	6923      	ldr	r3, [r4, #16]
 800277e:	462a      	mov	r2, r5
 8002780:	4639      	mov	r1, r7
 8002782:	4630      	mov	r0, r6
 8002784:	47c0      	blx	r8
 8002786:	3001      	adds	r0, #1
 8002788:	d0aa      	beq.n	80026e0 <_printf_i+0x12c>
 800278a:	6823      	ldr	r3, [r4, #0]
 800278c:	079b      	lsls	r3, r3, #30
 800278e:	d413      	bmi.n	80027b8 <_printf_i+0x204>
 8002790:	68e0      	ldr	r0, [r4, #12]
 8002792:	9b03      	ldr	r3, [sp, #12]
 8002794:	4298      	cmp	r0, r3
 8002796:	bfb8      	it	lt
 8002798:	4618      	movlt	r0, r3
 800279a:	e7a3      	b.n	80026e4 <_printf_i+0x130>
 800279c:	2301      	movs	r3, #1
 800279e:	464a      	mov	r2, r9
 80027a0:	4639      	mov	r1, r7
 80027a2:	4630      	mov	r0, r6
 80027a4:	47c0      	blx	r8
 80027a6:	3001      	adds	r0, #1
 80027a8:	d09a      	beq.n	80026e0 <_printf_i+0x12c>
 80027aa:	3501      	adds	r5, #1
 80027ac:	68e3      	ldr	r3, [r4, #12]
 80027ae:	9a03      	ldr	r2, [sp, #12]
 80027b0:	1a9b      	subs	r3, r3, r2
 80027b2:	42ab      	cmp	r3, r5
 80027b4:	dcf2      	bgt.n	800279c <_printf_i+0x1e8>
 80027b6:	e7eb      	b.n	8002790 <_printf_i+0x1dc>
 80027b8:	2500      	movs	r5, #0
 80027ba:	f104 0919 	add.w	r9, r4, #25
 80027be:	e7f5      	b.n	80027ac <_printf_i+0x1f8>
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1ac      	bne.n	800271e <_printf_i+0x16a>
 80027c4:	7803      	ldrb	r3, [r0, #0]
 80027c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80027ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80027ce:	e76c      	b.n	80026aa <_printf_i+0xf6>
 80027d0:	08002bcd 	.word	0x08002bcd
 80027d4:	08002bde 	.word	0x08002bde

080027d8 <memchr>:
 80027d8:	b510      	push	{r4, lr}
 80027da:	b2c9      	uxtb	r1, r1
 80027dc:	4402      	add	r2, r0
 80027de:	4290      	cmp	r0, r2
 80027e0:	4603      	mov	r3, r0
 80027e2:	d101      	bne.n	80027e8 <memchr+0x10>
 80027e4:	2300      	movs	r3, #0
 80027e6:	e003      	b.n	80027f0 <memchr+0x18>
 80027e8:	781c      	ldrb	r4, [r3, #0]
 80027ea:	3001      	adds	r0, #1
 80027ec:	428c      	cmp	r4, r1
 80027ee:	d1f6      	bne.n	80027de <memchr+0x6>
 80027f0:	4618      	mov	r0, r3
 80027f2:	bd10      	pop	{r4, pc}

080027f4 <memcpy>:
 80027f4:	b510      	push	{r4, lr}
 80027f6:	1e43      	subs	r3, r0, #1
 80027f8:	440a      	add	r2, r1
 80027fa:	4291      	cmp	r1, r2
 80027fc:	d100      	bne.n	8002800 <memcpy+0xc>
 80027fe:	bd10      	pop	{r4, pc}
 8002800:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002804:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002808:	e7f7      	b.n	80027fa <memcpy+0x6>

0800280a <memmove>:
 800280a:	4288      	cmp	r0, r1
 800280c:	b510      	push	{r4, lr}
 800280e:	eb01 0302 	add.w	r3, r1, r2
 8002812:	d807      	bhi.n	8002824 <memmove+0x1a>
 8002814:	1e42      	subs	r2, r0, #1
 8002816:	4299      	cmp	r1, r3
 8002818:	d00a      	beq.n	8002830 <memmove+0x26>
 800281a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800281e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002822:	e7f8      	b.n	8002816 <memmove+0xc>
 8002824:	4283      	cmp	r3, r0
 8002826:	d9f5      	bls.n	8002814 <memmove+0xa>
 8002828:	1881      	adds	r1, r0, r2
 800282a:	1ad2      	subs	r2, r2, r3
 800282c:	42d3      	cmn	r3, r2
 800282e:	d100      	bne.n	8002832 <memmove+0x28>
 8002830:	bd10      	pop	{r4, pc}
 8002832:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002836:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800283a:	e7f7      	b.n	800282c <memmove+0x22>

0800283c <_free_r>:
 800283c:	b538      	push	{r3, r4, r5, lr}
 800283e:	4605      	mov	r5, r0
 8002840:	2900      	cmp	r1, #0
 8002842:	d043      	beq.n	80028cc <_free_r+0x90>
 8002844:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002848:	1f0c      	subs	r4, r1, #4
 800284a:	2b00      	cmp	r3, #0
 800284c:	bfb8      	it	lt
 800284e:	18e4      	addlt	r4, r4, r3
 8002850:	f000 f8d0 	bl	80029f4 <__malloc_lock>
 8002854:	4a1e      	ldr	r2, [pc, #120]	; (80028d0 <_free_r+0x94>)
 8002856:	6813      	ldr	r3, [r2, #0]
 8002858:	4610      	mov	r0, r2
 800285a:	b933      	cbnz	r3, 800286a <_free_r+0x2e>
 800285c:	6063      	str	r3, [r4, #4]
 800285e:	6014      	str	r4, [r2, #0]
 8002860:	4628      	mov	r0, r5
 8002862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002866:	f000 b8c6 	b.w	80029f6 <__malloc_unlock>
 800286a:	42a3      	cmp	r3, r4
 800286c:	d90b      	bls.n	8002886 <_free_r+0x4a>
 800286e:	6821      	ldr	r1, [r4, #0]
 8002870:	1862      	adds	r2, r4, r1
 8002872:	4293      	cmp	r3, r2
 8002874:	bf01      	itttt	eq
 8002876:	681a      	ldreq	r2, [r3, #0]
 8002878:	685b      	ldreq	r3, [r3, #4]
 800287a:	1852      	addeq	r2, r2, r1
 800287c:	6022      	streq	r2, [r4, #0]
 800287e:	6063      	str	r3, [r4, #4]
 8002880:	6004      	str	r4, [r0, #0]
 8002882:	e7ed      	b.n	8002860 <_free_r+0x24>
 8002884:	4613      	mov	r3, r2
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	b10a      	cbz	r2, 800288e <_free_r+0x52>
 800288a:	42a2      	cmp	r2, r4
 800288c:	d9fa      	bls.n	8002884 <_free_r+0x48>
 800288e:	6819      	ldr	r1, [r3, #0]
 8002890:	1858      	adds	r0, r3, r1
 8002892:	42a0      	cmp	r0, r4
 8002894:	d10b      	bne.n	80028ae <_free_r+0x72>
 8002896:	6820      	ldr	r0, [r4, #0]
 8002898:	4401      	add	r1, r0
 800289a:	1858      	adds	r0, r3, r1
 800289c:	4282      	cmp	r2, r0
 800289e:	6019      	str	r1, [r3, #0]
 80028a0:	d1de      	bne.n	8002860 <_free_r+0x24>
 80028a2:	6810      	ldr	r0, [r2, #0]
 80028a4:	6852      	ldr	r2, [r2, #4]
 80028a6:	4401      	add	r1, r0
 80028a8:	6019      	str	r1, [r3, #0]
 80028aa:	605a      	str	r2, [r3, #4]
 80028ac:	e7d8      	b.n	8002860 <_free_r+0x24>
 80028ae:	d902      	bls.n	80028b6 <_free_r+0x7a>
 80028b0:	230c      	movs	r3, #12
 80028b2:	602b      	str	r3, [r5, #0]
 80028b4:	e7d4      	b.n	8002860 <_free_r+0x24>
 80028b6:	6820      	ldr	r0, [r4, #0]
 80028b8:	1821      	adds	r1, r4, r0
 80028ba:	428a      	cmp	r2, r1
 80028bc:	bf01      	itttt	eq
 80028be:	6811      	ldreq	r1, [r2, #0]
 80028c0:	6852      	ldreq	r2, [r2, #4]
 80028c2:	1809      	addeq	r1, r1, r0
 80028c4:	6021      	streq	r1, [r4, #0]
 80028c6:	6062      	str	r2, [r4, #4]
 80028c8:	605c      	str	r4, [r3, #4]
 80028ca:	e7c9      	b.n	8002860 <_free_r+0x24>
 80028cc:	bd38      	pop	{r3, r4, r5, pc}
 80028ce:	bf00      	nop
 80028d0:	200000bc 	.word	0x200000bc

080028d4 <_malloc_r>:
 80028d4:	b570      	push	{r4, r5, r6, lr}
 80028d6:	1ccd      	adds	r5, r1, #3
 80028d8:	f025 0503 	bic.w	r5, r5, #3
 80028dc:	3508      	adds	r5, #8
 80028de:	2d0c      	cmp	r5, #12
 80028e0:	bf38      	it	cc
 80028e2:	250c      	movcc	r5, #12
 80028e4:	2d00      	cmp	r5, #0
 80028e6:	4606      	mov	r6, r0
 80028e8:	db01      	blt.n	80028ee <_malloc_r+0x1a>
 80028ea:	42a9      	cmp	r1, r5
 80028ec:	d903      	bls.n	80028f6 <_malloc_r+0x22>
 80028ee:	230c      	movs	r3, #12
 80028f0:	6033      	str	r3, [r6, #0]
 80028f2:	2000      	movs	r0, #0
 80028f4:	bd70      	pop	{r4, r5, r6, pc}
 80028f6:	f000 f87d 	bl	80029f4 <__malloc_lock>
 80028fa:	4a21      	ldr	r2, [pc, #132]	; (8002980 <_malloc_r+0xac>)
 80028fc:	6814      	ldr	r4, [r2, #0]
 80028fe:	4621      	mov	r1, r4
 8002900:	b991      	cbnz	r1, 8002928 <_malloc_r+0x54>
 8002902:	4c20      	ldr	r4, [pc, #128]	; (8002984 <_malloc_r+0xb0>)
 8002904:	6823      	ldr	r3, [r4, #0]
 8002906:	b91b      	cbnz	r3, 8002910 <_malloc_r+0x3c>
 8002908:	4630      	mov	r0, r6
 800290a:	f000 f863 	bl	80029d4 <_sbrk_r>
 800290e:	6020      	str	r0, [r4, #0]
 8002910:	4629      	mov	r1, r5
 8002912:	4630      	mov	r0, r6
 8002914:	f000 f85e 	bl	80029d4 <_sbrk_r>
 8002918:	1c43      	adds	r3, r0, #1
 800291a:	d124      	bne.n	8002966 <_malloc_r+0x92>
 800291c:	230c      	movs	r3, #12
 800291e:	4630      	mov	r0, r6
 8002920:	6033      	str	r3, [r6, #0]
 8002922:	f000 f868 	bl	80029f6 <__malloc_unlock>
 8002926:	e7e4      	b.n	80028f2 <_malloc_r+0x1e>
 8002928:	680b      	ldr	r3, [r1, #0]
 800292a:	1b5b      	subs	r3, r3, r5
 800292c:	d418      	bmi.n	8002960 <_malloc_r+0x8c>
 800292e:	2b0b      	cmp	r3, #11
 8002930:	d90f      	bls.n	8002952 <_malloc_r+0x7e>
 8002932:	600b      	str	r3, [r1, #0]
 8002934:	18cc      	adds	r4, r1, r3
 8002936:	50cd      	str	r5, [r1, r3]
 8002938:	4630      	mov	r0, r6
 800293a:	f000 f85c 	bl	80029f6 <__malloc_unlock>
 800293e:	f104 000b 	add.w	r0, r4, #11
 8002942:	1d23      	adds	r3, r4, #4
 8002944:	f020 0007 	bic.w	r0, r0, #7
 8002948:	1ac3      	subs	r3, r0, r3
 800294a:	d0d3      	beq.n	80028f4 <_malloc_r+0x20>
 800294c:	425a      	negs	r2, r3
 800294e:	50e2      	str	r2, [r4, r3]
 8002950:	e7d0      	b.n	80028f4 <_malloc_r+0x20>
 8002952:	684b      	ldr	r3, [r1, #4]
 8002954:	428c      	cmp	r4, r1
 8002956:	bf16      	itet	ne
 8002958:	6063      	strne	r3, [r4, #4]
 800295a:	6013      	streq	r3, [r2, #0]
 800295c:	460c      	movne	r4, r1
 800295e:	e7eb      	b.n	8002938 <_malloc_r+0x64>
 8002960:	460c      	mov	r4, r1
 8002962:	6849      	ldr	r1, [r1, #4]
 8002964:	e7cc      	b.n	8002900 <_malloc_r+0x2c>
 8002966:	1cc4      	adds	r4, r0, #3
 8002968:	f024 0403 	bic.w	r4, r4, #3
 800296c:	42a0      	cmp	r0, r4
 800296e:	d005      	beq.n	800297c <_malloc_r+0xa8>
 8002970:	1a21      	subs	r1, r4, r0
 8002972:	4630      	mov	r0, r6
 8002974:	f000 f82e 	bl	80029d4 <_sbrk_r>
 8002978:	3001      	adds	r0, #1
 800297a:	d0cf      	beq.n	800291c <_malloc_r+0x48>
 800297c:	6025      	str	r5, [r4, #0]
 800297e:	e7db      	b.n	8002938 <_malloc_r+0x64>
 8002980:	200000bc 	.word	0x200000bc
 8002984:	200000c0 	.word	0x200000c0

08002988 <_realloc_r>:
 8002988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800298a:	4607      	mov	r7, r0
 800298c:	4614      	mov	r4, r2
 800298e:	460e      	mov	r6, r1
 8002990:	b921      	cbnz	r1, 800299c <_realloc_r+0x14>
 8002992:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002996:	4611      	mov	r1, r2
 8002998:	f7ff bf9c 	b.w	80028d4 <_malloc_r>
 800299c:	b922      	cbnz	r2, 80029a8 <_realloc_r+0x20>
 800299e:	f7ff ff4d 	bl	800283c <_free_r>
 80029a2:	4625      	mov	r5, r4
 80029a4:	4628      	mov	r0, r5
 80029a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029a8:	f000 f826 	bl	80029f8 <_malloc_usable_size_r>
 80029ac:	42a0      	cmp	r0, r4
 80029ae:	d20f      	bcs.n	80029d0 <_realloc_r+0x48>
 80029b0:	4621      	mov	r1, r4
 80029b2:	4638      	mov	r0, r7
 80029b4:	f7ff ff8e 	bl	80028d4 <_malloc_r>
 80029b8:	4605      	mov	r5, r0
 80029ba:	2800      	cmp	r0, #0
 80029bc:	d0f2      	beq.n	80029a4 <_realloc_r+0x1c>
 80029be:	4631      	mov	r1, r6
 80029c0:	4622      	mov	r2, r4
 80029c2:	f7ff ff17 	bl	80027f4 <memcpy>
 80029c6:	4631      	mov	r1, r6
 80029c8:	4638      	mov	r0, r7
 80029ca:	f7ff ff37 	bl	800283c <_free_r>
 80029ce:	e7e9      	b.n	80029a4 <_realloc_r+0x1c>
 80029d0:	4635      	mov	r5, r6
 80029d2:	e7e7      	b.n	80029a4 <_realloc_r+0x1c>

080029d4 <_sbrk_r>:
 80029d4:	b538      	push	{r3, r4, r5, lr}
 80029d6:	2300      	movs	r3, #0
 80029d8:	4c05      	ldr	r4, [pc, #20]	; (80029f0 <_sbrk_r+0x1c>)
 80029da:	4605      	mov	r5, r0
 80029dc:	4608      	mov	r0, r1
 80029de:	6023      	str	r3, [r4, #0]
 80029e0:	f7fd ff80 	bl	80008e4 <_sbrk>
 80029e4:	1c43      	adds	r3, r0, #1
 80029e6:	d102      	bne.n	80029ee <_sbrk_r+0x1a>
 80029e8:	6823      	ldr	r3, [r4, #0]
 80029ea:	b103      	cbz	r3, 80029ee <_sbrk_r+0x1a>
 80029ec:	602b      	str	r3, [r5, #0]
 80029ee:	bd38      	pop	{r3, r4, r5, pc}
 80029f0:	20000174 	.word	0x20000174

080029f4 <__malloc_lock>:
 80029f4:	4770      	bx	lr

080029f6 <__malloc_unlock>:
 80029f6:	4770      	bx	lr

080029f8 <_malloc_usable_size_r>:
 80029f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029fc:	1f18      	subs	r0, r3, #4
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	bfbc      	itt	lt
 8002a02:	580b      	ldrlt	r3, [r1, r0]
 8002a04:	18c0      	addlt	r0, r0, r3
 8002a06:	4770      	bx	lr

08002a08 <_init>:
 8002a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a0a:	bf00      	nop
 8002a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a0e:	bc08      	pop	{r3}
 8002a10:	469e      	mov	lr, r3
 8002a12:	4770      	bx	lr

08002a14 <_fini>:
 8002a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a16:	bf00      	nop
 8002a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a1a:	bc08      	pop	{r3}
 8002a1c:	469e      	mov	lr, r3
 8002a1e:	4770      	bx	lr
