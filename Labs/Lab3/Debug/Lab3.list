
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002014  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08002120  08002120  00012120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002250  08002250  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002250  08002250  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002250  08002250  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002250  08002250  00012250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002254  08002254  00012254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002258  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  08002264  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08002264  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006ec0  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015b9  00000000  00000000  00026ef5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000690  00000000  00000000  000284b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005d8  00000000  00000000  00028b40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016dd2  00000000  00000000  00029118  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006387  00000000  00000000  0003feea  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080b9b  00000000  00000000  00046271  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c6e0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000193c  00000000  00000000  000c6e88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002108 	.word	0x08002108

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002108 	.word	0x08002108

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <isCompleteLine>:

	return "\nWelcome to the CLI!\r\n";
}

bool isCompleteLine(char recBuffer[10])
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	//if enter was hit, then it is a complete line, else it isnt
	if(recBuffer[0] == '\r')
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	781b      	ldrb	r3, [r3, #0]
 8000168:	2b0d      	cmp	r3, #13
 800016a:	d101      	bne.n	8000170 <isCompleteLine+0x14>
	{
		return true;
 800016c:	2301      	movs	r3, #1
 800016e:	e000      	b.n	8000172 <isCompleteLine+0x16>
	}
	else
	{
		return false;
 8000170:	2300      	movs	r3, #0
	}
}
 8000172:	4618      	mov	r0, r3
 8000174:	370c      	adds	r7, #12
 8000176:	46bd      	mov	sp, r7
 8000178:	bc80      	pop	{r7}
 800017a:	4770      	bx	lr

0800017c <copyCharTo>:

void copyCharTo(char recBuffer[10], char s[20], int coun)
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	60f8      	str	r0, [r7, #12]
 8000184:	60b9      	str	r1, [r7, #8]
 8000186:	607a      	str	r2, [r7, #4]
//	{
//		continue;
//	}

	//copy new character into empty buffer spot
	s[coun] = recBuffer[0];
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	68ba      	ldr	r2, [r7, #8]
 800018c:	4413      	add	r3, r2
 800018e:	68fa      	ldr	r2, [r7, #12]
 8000190:	7812      	ldrb	r2, [r2, #0]
 8000192:	701a      	strb	r2, [r3, #0]
}
 8000194:	bf00      	nop
 8000196:	3714      	adds	r7, #20
 8000198:	46bd      	mov	sp, r7
 800019a:	bc80      	pop	{r7}
 800019c:	4770      	bx	lr
	...

080001a0 <executeCommand>:
//
void executeCommand(char recBuffer[20])
{
 80001a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80001a2:	b083      	sub	sp, #12
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
	  if(recBuffer[0] == 'h' && recBuffer[1] == 'e' && recBuffer[2] == 'l' && recBuffer[3] == 'p' && recBuffer[4] == '\r')
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	781b      	ldrb	r3, [r3, #0]
 80001ac:	2b68      	cmp	r3, #104	; 0x68
 80001ae:	d17d      	bne.n	80002ac <executeCommand+0x10c>
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	3301      	adds	r3, #1
 80001b4:	781b      	ldrb	r3, [r3, #0]
 80001b6:	2b65      	cmp	r3, #101	; 0x65
 80001b8:	d178      	bne.n	80002ac <executeCommand+0x10c>
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	3302      	adds	r3, #2
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	2b6c      	cmp	r3, #108	; 0x6c
 80001c2:	d173      	bne.n	80002ac <executeCommand+0x10c>
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	3303      	adds	r3, #3
 80001c8:	781b      	ldrb	r3, [r3, #0]
 80001ca:	2b70      	cmp	r3, #112	; 0x70
 80001cc:	d16e      	bne.n	80002ac <executeCommand+0x10c>
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	3304      	adds	r3, #4
 80001d2:	781b      	ldrb	r3, [r3, #0]
 80001d4:	2b0d      	cmp	r3, #13
 80001d6:	d169      	bne.n	80002ac <executeCommand+0x10c>
	  {
		  strcpy((char *)recBuffer, "\n1. \"ledon\" turns the green LED on\r\n");
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	4aab      	ldr	r2, [pc, #684]	; (8000488 <executeCommand+0x2e8>)
 80001dc:	4614      	mov	r4, r2
 80001de:	469c      	mov	ip, r3
 80001e0:	f104 0e20 	add.w	lr, r4, #32
 80001e4:	4665      	mov	r5, ip
 80001e6:	4626      	mov	r6, r4
 80001e8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80001ea:	6028      	str	r0, [r5, #0]
 80001ec:	6069      	str	r1, [r5, #4]
 80001ee:	60aa      	str	r2, [r5, #8]
 80001f0:	60eb      	str	r3, [r5, #12]
 80001f2:	3410      	adds	r4, #16
 80001f4:	f10c 0c10 	add.w	ip, ip, #16
 80001f8:	4574      	cmp	r4, lr
 80001fa:	d1f3      	bne.n	80001e4 <executeCommand+0x44>
 80001fc:	4663      	mov	r3, ip
 80001fe:	4622      	mov	r2, r4
 8000200:	6810      	ldr	r0, [r2, #0]
 8000202:	6018      	str	r0, [r3, #0]
 8000204:	7912      	ldrb	r2, [r2, #4]
 8000206:	711a      	strb	r2, [r3, #4]
		  HAL_UART_Transmit(&huart3, recBuffer, strlen((char *)recBuffer), 3000);
 8000208:	6878      	ldr	r0, [r7, #4]
 800020a:	f7ff ff9f 	bl	800014c <strlen>
 800020e:	4603      	mov	r3, r0
 8000210:	b29a      	uxth	r2, r3
 8000212:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000216:	6879      	ldr	r1, [r7, #4]
 8000218:	489c      	ldr	r0, [pc, #624]	; (800048c <executeCommand+0x2ec>)
 800021a:	f001 fb58 	bl	80018ce <HAL_UART_Transmit>
		  strcpy((char *)recBuffer, "\n2. \"ledoff\" turns the green LED off\r\n");
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	4a9b      	ldr	r2, [pc, #620]	; (8000490 <executeCommand+0x2f0>)
 8000222:	4614      	mov	r4, r2
 8000224:	469c      	mov	ip, r3
 8000226:	f104 0e20 	add.w	lr, r4, #32
 800022a:	4665      	mov	r5, ip
 800022c:	4626      	mov	r6, r4
 800022e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000230:	6028      	str	r0, [r5, #0]
 8000232:	6069      	str	r1, [r5, #4]
 8000234:	60aa      	str	r2, [r5, #8]
 8000236:	60eb      	str	r3, [r5, #12]
 8000238:	3410      	adds	r4, #16
 800023a:	f10c 0c10 	add.w	ip, ip, #16
 800023e:	4574      	cmp	r4, lr
 8000240:	d1f3      	bne.n	800022a <executeCommand+0x8a>
 8000242:	4663      	mov	r3, ip
 8000244:	4622      	mov	r2, r4
 8000246:	6810      	ldr	r0, [r2, #0]
 8000248:	6018      	str	r0, [r3, #0]
 800024a:	8891      	ldrh	r1, [r2, #4]
 800024c:	7992      	ldrb	r2, [r2, #6]
 800024e:	8099      	strh	r1, [r3, #4]
 8000250:	719a      	strb	r2, [r3, #6]
		  HAL_UART_Transmit(&huart3, recBuffer, strlen((char *)recBuffer), 3000);
 8000252:	6878      	ldr	r0, [r7, #4]
 8000254:	f7ff ff7a 	bl	800014c <strlen>
 8000258:	4603      	mov	r3, r0
 800025a:	b29a      	uxth	r2, r3
 800025c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000260:	6879      	ldr	r1, [r7, #4]
 8000262:	488a      	ldr	r0, [pc, #552]	; (800048c <executeCommand+0x2ec>)
 8000264:	f001 fb33 	bl	80018ce <HAL_UART_Transmit>
		  strcpy((char *)recBuffer, "\n3. \"ledquery\" returns the state of the green LED\r\n");
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4a8a      	ldr	r2, [pc, #552]	; (8000494 <executeCommand+0x2f4>)
 800026c:	4614      	mov	r4, r2
 800026e:	469c      	mov	ip, r3
 8000270:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000274:	4665      	mov	r5, ip
 8000276:	4626      	mov	r6, r4
 8000278:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800027a:	6028      	str	r0, [r5, #0]
 800027c:	6069      	str	r1, [r5, #4]
 800027e:	60aa      	str	r2, [r5, #8]
 8000280:	60eb      	str	r3, [r5, #12]
 8000282:	3410      	adds	r4, #16
 8000284:	f10c 0c10 	add.w	ip, ip, #16
 8000288:	4574      	cmp	r4, lr
 800028a:	d1f3      	bne.n	8000274 <executeCommand+0xd4>
 800028c:	4663      	mov	r3, ip
 800028e:	4622      	mov	r2, r4
 8000290:	6810      	ldr	r0, [r2, #0]
 8000292:	6018      	str	r0, [r3, #0]
		  HAL_UART_Transmit(&huart3, recBuffer, strlen((char *)recBuffer), 3000);
 8000294:	6878      	ldr	r0, [r7, #4]
 8000296:	f7ff ff59 	bl	800014c <strlen>
 800029a:	4603      	mov	r3, r0
 800029c:	b29a      	uxth	r2, r3
 800029e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80002a2:	6879      	ldr	r1, [r7, #4]
 80002a4:	4879      	ldr	r0, [pc, #484]	; (800048c <executeCommand+0x2ec>)
 80002a6:	f001 fb12 	bl	80018ce <HAL_UART_Transmit>
 80002aa:	e0e8      	b.n	800047e <executeCommand+0x2de>
	  }
	  else if(recBuffer[0] == 'l' && recBuffer[1] == 'e' && recBuffer[2] == 'd' && recBuffer[3] == 'o' && recBuffer[4] == 'n' && recBuffer[5] == '\r')
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	2b6c      	cmp	r3, #108	; 0x6c
 80002b2:	d132      	bne.n	800031a <executeCommand+0x17a>
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	3301      	adds	r3, #1
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	2b65      	cmp	r3, #101	; 0x65
 80002bc:	d12d      	bne.n	800031a <executeCommand+0x17a>
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	3302      	adds	r3, #2
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	2b64      	cmp	r3, #100	; 0x64
 80002c6:	d128      	bne.n	800031a <executeCommand+0x17a>
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	3303      	adds	r3, #3
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	2b6f      	cmp	r3, #111	; 0x6f
 80002d0:	d123      	bne.n	800031a <executeCommand+0x17a>
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	3304      	adds	r3, #4
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	2b6e      	cmp	r3, #110	; 0x6e
 80002da:	d11e      	bne.n	800031a <executeCommand+0x17a>
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	3305      	adds	r3, #5
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	2b0d      	cmp	r3, #13
 80002e4:	d119      	bne.n	800031a <executeCommand+0x17a>
	  {
		  strcpy((char *)recBuffer, "\nDone!\r\n");
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	496b      	ldr	r1, [pc, #428]	; (8000498 <executeCommand+0x2f8>)
 80002ea:	461a      	mov	r2, r3
 80002ec:	460b      	mov	r3, r1
 80002ee:	cb03      	ldmia	r3!, {r0, r1}
 80002f0:	6010      	str	r0, [r2, #0]
 80002f2:	6051      	str	r1, [r2, #4]
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	7213      	strb	r3, [r2, #8]
		  HAL_UART_Transmit(&huart3, recBuffer, strlen((char *)recBuffer), 1000);
 80002f8:	6878      	ldr	r0, [r7, #4]
 80002fa:	f7ff ff27 	bl	800014c <strlen>
 80002fe:	4603      	mov	r3, r0
 8000300:	b29a      	uxth	r2, r3
 8000302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000306:	6879      	ldr	r1, [r7, #4]
 8000308:	4860      	ldr	r0, [pc, #384]	; (800048c <executeCommand+0x2ec>)
 800030a:	f001 fae0 	bl	80018ce <HAL_UART_Transmit>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800030e:	2201      	movs	r2, #1
 8000310:	2120      	movs	r1, #32
 8000312:	4862      	ldr	r0, [pc, #392]	; (800049c <executeCommand+0x2fc>)
 8000314:	f000 fe59 	bl	8000fca <HAL_GPIO_WritePin>
 8000318:	e0b1      	b.n	800047e <executeCommand+0x2de>
	  }
	  else if(recBuffer[0] == 'l' && recBuffer[1] == 'e' && recBuffer[2] == 'd' && recBuffer[3] == 'o' && recBuffer[4] == 'f' && recBuffer[5] == 'f' && recBuffer[6] == '\r')
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	2b6c      	cmp	r3, #108	; 0x6c
 8000320:	d137      	bne.n	8000392 <executeCommand+0x1f2>
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	3301      	adds	r3, #1
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	2b65      	cmp	r3, #101	; 0x65
 800032a:	d132      	bne.n	8000392 <executeCommand+0x1f2>
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	3302      	adds	r3, #2
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	2b64      	cmp	r3, #100	; 0x64
 8000334:	d12d      	bne.n	8000392 <executeCommand+0x1f2>
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	3303      	adds	r3, #3
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	2b6f      	cmp	r3, #111	; 0x6f
 800033e:	d128      	bne.n	8000392 <executeCommand+0x1f2>
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	3304      	adds	r3, #4
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	2b66      	cmp	r3, #102	; 0x66
 8000348:	d123      	bne.n	8000392 <executeCommand+0x1f2>
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	3305      	adds	r3, #5
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	2b66      	cmp	r3, #102	; 0x66
 8000352:	d11e      	bne.n	8000392 <executeCommand+0x1f2>
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	3306      	adds	r3, #6
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	2b0d      	cmp	r3, #13
 800035c:	d119      	bne.n	8000392 <executeCommand+0x1f2>
	  {
		  strcpy((char *)recBuffer, "\nDone!\r\n");
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	494d      	ldr	r1, [pc, #308]	; (8000498 <executeCommand+0x2f8>)
 8000362:	461a      	mov	r2, r3
 8000364:	460b      	mov	r3, r1
 8000366:	cb03      	ldmia	r3!, {r0, r1}
 8000368:	6010      	str	r0, [r2, #0]
 800036a:	6051      	str	r1, [r2, #4]
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	7213      	strb	r3, [r2, #8]
		  HAL_UART_Transmit(&huart3, recBuffer, strlen((char *)recBuffer), 1000);
 8000370:	6878      	ldr	r0, [r7, #4]
 8000372:	f7ff feeb 	bl	800014c <strlen>
 8000376:	4603      	mov	r3, r0
 8000378:	b29a      	uxth	r2, r3
 800037a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800037e:	6879      	ldr	r1, [r7, #4]
 8000380:	4842      	ldr	r0, [pc, #264]	; (800048c <executeCommand+0x2ec>)
 8000382:	f001 faa4 	bl	80018ce <HAL_UART_Transmit>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000386:	2200      	movs	r2, #0
 8000388:	2120      	movs	r1, #32
 800038a:	4844      	ldr	r0, [pc, #272]	; (800049c <executeCommand+0x2fc>)
 800038c:	f000 fe1d 	bl	8000fca <HAL_GPIO_WritePin>
 8000390:	e075      	b.n	800047e <executeCommand+0x2de>
	  }
	  else if(recBuffer[0] == 'l' && recBuffer[1] == 'e' && recBuffer[2] == 'd' && recBuffer[3] == 'q' && recBuffer[4] == 'u' && recBuffer[5] == 'e' && recBuffer[6] == 'r' && recBuffer[7] == 'y' && recBuffer[8] == '\r')
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	2b6c      	cmp	r3, #108	; 0x6c
 8000398:	d154      	bne.n	8000444 <executeCommand+0x2a4>
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	3301      	adds	r3, #1
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b65      	cmp	r3, #101	; 0x65
 80003a2:	d14f      	bne.n	8000444 <executeCommand+0x2a4>
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	3302      	adds	r3, #2
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	2b64      	cmp	r3, #100	; 0x64
 80003ac:	d14a      	bne.n	8000444 <executeCommand+0x2a4>
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	3303      	adds	r3, #3
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	2b71      	cmp	r3, #113	; 0x71
 80003b6:	d145      	bne.n	8000444 <executeCommand+0x2a4>
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	3304      	adds	r3, #4
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	2b75      	cmp	r3, #117	; 0x75
 80003c0:	d140      	bne.n	8000444 <executeCommand+0x2a4>
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	3305      	adds	r3, #5
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	2b65      	cmp	r3, #101	; 0x65
 80003ca:	d13b      	bne.n	8000444 <executeCommand+0x2a4>
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	3306      	adds	r3, #6
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	2b72      	cmp	r3, #114	; 0x72
 80003d4:	d136      	bne.n	8000444 <executeCommand+0x2a4>
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	3307      	adds	r3, #7
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b79      	cmp	r3, #121	; 0x79
 80003de:	d131      	bne.n	8000444 <executeCommand+0x2a4>
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	3308      	adds	r3, #8
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	2b0d      	cmp	r3, #13
 80003e8:	d12c      	bne.n	8000444 <executeCommand+0x2a4>
	  {
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0x1)
 80003ea:	2120      	movs	r1, #32
 80003ec:	482b      	ldr	r0, [pc, #172]	; (800049c <executeCommand+0x2fc>)
 80003ee:	f000 fdd5 	bl	8000f9c <HAL_GPIO_ReadPin>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b01      	cmp	r3, #1
 80003f6:	d10b      	bne.n	8000410 <executeCommand+0x270>
		  {
			  strcpy((char *)recBuffer, "\nThe LED is on!\r\n");
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	4a29      	ldr	r2, [pc, #164]	; (80004a0 <executeCommand+0x300>)
 80003fc:	461d      	mov	r5, r3
 80003fe:	4614      	mov	r4, r2
 8000400:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000402:	6028      	str	r0, [r5, #0]
 8000404:	6069      	str	r1, [r5, #4]
 8000406:	60aa      	str	r2, [r5, #8]
 8000408:	60eb      	str	r3, [r5, #12]
 800040a:	8823      	ldrh	r3, [r4, #0]
 800040c:	822b      	strh	r3, [r5, #16]
 800040e:	e00d      	b.n	800042c <executeCommand+0x28c>
		  }
		  else
		  {
			  strcpy((char *)recBuffer, "\nThe LED is off!\r\n");
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	4a24      	ldr	r2, [pc, #144]	; (80004a4 <executeCommand+0x304>)
 8000414:	461d      	mov	r5, r3
 8000416:	4614      	mov	r4, r2
 8000418:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800041a:	6028      	str	r0, [r5, #0]
 800041c:	6069      	str	r1, [r5, #4]
 800041e:	60aa      	str	r2, [r5, #8]
 8000420:	60eb      	str	r3, [r5, #12]
 8000422:	8823      	ldrh	r3, [r4, #0]
 8000424:	78a2      	ldrb	r2, [r4, #2]
 8000426:	822b      	strh	r3, [r5, #16]
 8000428:	4613      	mov	r3, r2
 800042a:	74ab      	strb	r3, [r5, #18]
		  }
		  HAL_UART_Transmit(&huart3, recBuffer, strlen((char *)recBuffer), 1000);
 800042c:	6878      	ldr	r0, [r7, #4]
 800042e:	f7ff fe8d 	bl	800014c <strlen>
 8000432:	4603      	mov	r3, r0
 8000434:	b29a      	uxth	r2, r3
 8000436:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800043a:	6879      	ldr	r1, [r7, #4]
 800043c:	4813      	ldr	r0, [pc, #76]	; (800048c <executeCommand+0x2ec>)
 800043e:	f001 fa46 	bl	80018ce <HAL_UART_Transmit>
 8000442:	e01c      	b.n	800047e <executeCommand+0x2de>
	  }
	  else if(recBuffer[0] == '\r')
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b0d      	cmp	r3, #13
 800044a:	d018      	beq.n	800047e <executeCommand+0x2de>
	  {

	  }
	  else
	  {
		  strcpy((char *)recBuffer, "\nError. Try again.\r\n");
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	4a16      	ldr	r2, [pc, #88]	; (80004a8 <executeCommand+0x308>)
 8000450:	461d      	mov	r5, r3
 8000452:	4614      	mov	r4, r2
 8000454:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000456:	6028      	str	r0, [r5, #0]
 8000458:	6069      	str	r1, [r5, #4]
 800045a:	60aa      	str	r2, [r5, #8]
 800045c:	60eb      	str	r3, [r5, #12]
 800045e:	6820      	ldr	r0, [r4, #0]
 8000460:	6128      	str	r0, [r5, #16]
 8000462:	7923      	ldrb	r3, [r4, #4]
 8000464:	752b      	strb	r3, [r5, #20]
		  HAL_UART_Transmit(&huart3, recBuffer, strlen((char *)recBuffer), 1000);
 8000466:	6878      	ldr	r0, [r7, #4]
 8000468:	f7ff fe70 	bl	800014c <strlen>
 800046c:	4603      	mov	r3, r0
 800046e:	b29a      	uxth	r2, r3
 8000470:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000474:	6879      	ldr	r1, [r7, #4]
 8000476:	4805      	ldr	r0, [pc, #20]	; (800048c <executeCommand+0x2ec>)
 8000478:	f001 fa29 	bl	80018ce <HAL_UART_Transmit>
	  }
}
 800047c:	e7ff      	b.n	800047e <executeCommand+0x2de>
 800047e:	bf00      	nop
 8000480:	370c      	adds	r7, #12
 8000482:	46bd      	mov	sp, r7
 8000484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000486:	bf00      	nop
 8000488:	08002138 	.word	0x08002138
 800048c:	2000002c 	.word	0x2000002c
 8000490:	08002160 	.word	0x08002160
 8000494:	08002188 	.word	0x08002188
 8000498:	080021bc 	.word	0x080021bc
 800049c:	40010800 	.word	0x40010800
 80004a0:	080021c8 	.word	0x080021c8
 80004a4:	080021dc 	.word	0x080021dc
 80004a8:	080021f0 	.word	0x080021f0

080004ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ac:	b5b0      	push	{r4, r5, r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b0:	f000 fa34 	bl	800091c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b4:	f000 f82e 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b8:	f000 f892 	bl	80005e0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80004bc:	f000 f866 	bl	800058c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  //Start the process of receiving data
  HAL_UART_Receive_IT(&huart3, cliBufferRX, 1);
 80004c0:	2201      	movs	r2, #1
 80004c2:	4910      	ldr	r1, [pc, #64]	; (8000504 <main+0x58>)
 80004c4:	4810      	ldr	r0, [pc, #64]	; (8000508 <main+0x5c>)
 80004c6:	f001 fa94 	bl	80019f2 <HAL_UART_Receive_IT>

  //Print out Welcome Message
  strcpy((char *)cliBufferTX, "\nWelcome to the CLI!\r\n");
 80004ca:	4a10      	ldr	r2, [pc, #64]	; (800050c <main+0x60>)
 80004cc:	4b10      	ldr	r3, [pc, #64]	; (8000510 <main+0x64>)
 80004ce:	4614      	mov	r4, r2
 80004d0:	461d      	mov	r5, r3
 80004d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004d4:	6020      	str	r0, [r4, #0]
 80004d6:	6061      	str	r1, [r4, #4]
 80004d8:	60a2      	str	r2, [r4, #8]
 80004da:	60e3      	str	r3, [r4, #12]
 80004dc:	6828      	ldr	r0, [r5, #0]
 80004de:	6120      	str	r0, [r4, #16]
 80004e0:	88ab      	ldrh	r3, [r5, #4]
 80004e2:	79aa      	ldrb	r2, [r5, #6]
 80004e4:	82a3      	strh	r3, [r4, #20]
 80004e6:	4613      	mov	r3, r2
 80004e8:	75a3      	strb	r3, [r4, #22]
  HAL_UART_Transmit(&huart3, cliBufferTX, strlen((char *)cliBufferTX), 1000);
 80004ea:	4808      	ldr	r0, [pc, #32]	; (800050c <main+0x60>)
 80004ec:	f7ff fe2e 	bl	800014c <strlen>
 80004f0:	4603      	mov	r3, r0
 80004f2:	b29a      	uxth	r2, r3
 80004f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f8:	4904      	ldr	r1, [pc, #16]	; (800050c <main+0x60>)
 80004fa:	4803      	ldr	r0, [pc, #12]	; (8000508 <main+0x5c>)
 80004fc:	f001 f9e7 	bl	80018ce <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000500:	e7fe      	b.n	8000500 <main+0x54>
 8000502:	bf00      	nop
 8000504:	200000b8 	.word	0x200000b8
 8000508:	2000002c 	.word	0x2000002c
 800050c:	2000006c 	.word	0x2000006c
 8000510:	08002208 	.word	0x08002208

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b090      	sub	sp, #64	; 0x40
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 0318 	add.w	r3, r7, #24
 800051e:	2228      	movs	r2, #40	; 0x28
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f001 fde0 	bl	80020e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]
 8000530:	609a      	str	r2, [r3, #8]
 8000532:	60da      	str	r2, [r3, #12]
 8000534:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000536:	2302      	movs	r3, #2
 8000538:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800053a:	2301      	movs	r3, #1
 800053c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800053e:	2310      	movs	r3, #16
 8000540:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000542:	2300      	movs	r3, #0
 8000544:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000546:	f107 0318 	add.w	r3, r7, #24
 800054a:	4618      	mov	r0, r3
 800054c:	f000 fd56 	bl	8000ffc <HAL_RCC_OscConfig>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000556:	f000 f8e1 	bl	800071c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055a:	230f      	movs	r3, #15
 800055c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800055e:	2300      	movs	r3, #0
 8000560:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000562:	2300      	movs	r3, #0
 8000564:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000566:	2300      	movs	r3, #0
 8000568:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800056a:	2300      	movs	r3, #0
 800056c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f000 ffc2 	bl	80014fc <HAL_RCC_ClockConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800057e:	f000 f8cd 	bl	800071c <Error_Handler>
  }
}
 8000582:	bf00      	nop
 8000584:	3740      	adds	r7, #64	; 0x40
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
	...

0800058c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000590:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <MX_USART3_UART_Init+0x4c>)
 8000592:	4a12      	ldr	r2, [pc, #72]	; (80005dc <MX_USART3_UART_Init+0x50>)
 8000594:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000596:	4b10      	ldr	r3, [pc, #64]	; (80005d8 <MX_USART3_UART_Init+0x4c>)
 8000598:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800059c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800059e:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <MX_USART3_UART_Init+0x4c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80005a4:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <MX_USART3_UART_Init+0x4c>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80005aa:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <MX_USART3_UART_Init+0x4c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80005b0:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <MX_USART3_UART_Init+0x4c>)
 80005b2:	220c      	movs	r2, #12
 80005b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005b6:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <MX_USART3_UART_Init+0x4c>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <MX_USART3_UART_Init+0x4c>)
 80005be:	2200      	movs	r2, #0
 80005c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80005c2:	4805      	ldr	r0, [pc, #20]	; (80005d8 <MX_USART3_UART_Init+0x4c>)
 80005c4:	f001 f936 	bl	8001834 <HAL_UART_Init>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80005ce:	f000 f8a5 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	2000002c 	.word	0x2000002c
 80005dc:	40004800 	.word	0x40004800

080005e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	f107 0308 	add.w	r3, r7, #8
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f4:	4b17      	ldr	r3, [pc, #92]	; (8000654 <MX_GPIO_Init+0x74>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	4a16      	ldr	r2, [pc, #88]	; (8000654 <MX_GPIO_Init+0x74>)
 80005fa:	f043 0304 	orr.w	r3, r3, #4
 80005fe:	6193      	str	r3, [r2, #24]
 8000600:	4b14      	ldr	r3, [pc, #80]	; (8000654 <MX_GPIO_Init+0x74>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	f003 0304 	and.w	r3, r3, #4
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_GPIO_Init+0x74>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	4a10      	ldr	r2, [pc, #64]	; (8000654 <MX_GPIO_Init+0x74>)
 8000612:	f043 0310 	orr.w	r3, r3, #16
 8000616:	6193      	str	r3, [r2, #24]
 8000618:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_GPIO_Init+0x74>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	f003 0310 	and.w	r3, r3, #16
 8000620:	603b      	str	r3, [r7, #0]
 8000622:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	2120      	movs	r1, #32
 8000628:	480b      	ldr	r0, [pc, #44]	; (8000658 <MX_GPIO_Init+0x78>)
 800062a:	f000 fcce 	bl	8000fca <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800062e:	2320      	movs	r3, #32
 8000630:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000632:	2301      	movs	r3, #1
 8000634:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063a:	2302      	movs	r3, #2
 800063c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063e:	f107 0308 	add.w	r3, r7, #8
 8000642:	4619      	mov	r1, r3
 8000644:	4804      	ldr	r0, [pc, #16]	; (8000658 <MX_GPIO_Init+0x78>)
 8000646:	f000 fb4f 	bl	8000ce8 <HAL_GPIO_Init>

}
 800064a:	bf00      	nop
 800064c:	3718      	adds	r7, #24
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40021000 	.word	0x40021000
 8000658:	40010800 	.word	0x40010800

0800065c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *husart)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart3, cliBufferRX, 1, 1000);
 8000664:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000668:	2201      	movs	r2, #1
 800066a:	4926      	ldr	r1, [pc, #152]	; (8000704 <HAL_UART_RxCpltCallback+0xa8>)
 800066c:	4826      	ldr	r0, [pc, #152]	; (8000708 <HAL_UART_RxCpltCallback+0xac>)
 800066e:	f001 f92e 	bl	80018ce <HAL_UART_Transmit>
	copyCharTo(cliBufferRX, save, j);
 8000672:	4b26      	ldr	r3, [pc, #152]	; (800070c <HAL_UART_RxCpltCallback+0xb0>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	461a      	mov	r2, r3
 8000678:	4925      	ldr	r1, [pc, #148]	; (8000710 <HAL_UART_RxCpltCallback+0xb4>)
 800067a:	4822      	ldr	r0, [pc, #136]	; (8000704 <HAL_UART_RxCpltCallback+0xa8>)
 800067c:	f7ff fd7e 	bl	800017c <copyCharTo>
	j++;
 8000680:	4b22      	ldr	r3, [pc, #136]	; (800070c <HAL_UART_RxCpltCallback+0xb0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	3301      	adds	r3, #1
 8000686:	4a21      	ldr	r2, [pc, #132]	; (800070c <HAL_UART_RxCpltCallback+0xb0>)
 8000688:	6013      	str	r3, [r2, #0]
	if(isCompleteLine(cliBufferRX))
 800068a:	481e      	ldr	r0, [pc, #120]	; (8000704 <HAL_UART_RxCpltCallback+0xa8>)
 800068c:	f7ff fd66 	bl	800015c <isCompleteLine>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d025      	beq.n	80006e2 <HAL_UART_RxCpltCallback+0x86>
	{
		HAL_UART_Transmit(&huart3, "\r\n", 2, 1000);
 8000696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800069a:	2202      	movs	r2, #2
 800069c:	491d      	ldr	r1, [pc, #116]	; (8000714 <HAL_UART_RxCpltCallback+0xb8>)
 800069e:	481a      	ldr	r0, [pc, #104]	; (8000708 <HAL_UART_RxCpltCallback+0xac>)
 80006a0:	f001 f915 	bl	80018ce <HAL_UART_Transmit>
		strcpy((char *)cliBufferTX, save);
 80006a4:	491a      	ldr	r1, [pc, #104]	; (8000710 <HAL_UART_RxCpltCallback+0xb4>)
 80006a6:	481c      	ldr	r0, [pc, #112]	; (8000718 <HAL_UART_RxCpltCallback+0xbc>)
 80006a8:	f001 fd26 	bl	80020f8 <strcpy>
		//HAL_UART_Transmit(&huart3, cliBufferTX, strlen((char *)cliBufferTX), 1000);

		executeCommand(save);
 80006ac:	4818      	ldr	r0, [pc, #96]	; (8000710 <HAL_UART_RxCpltCallback+0xb4>)
 80006ae:	f7ff fd77 	bl	80001a0 <executeCommand>
		HAL_UART_Transmit(&huart3, "\r\n", 2, 1000);
 80006b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b6:	2202      	movs	r2, #2
 80006b8:	4916      	ldr	r1, [pc, #88]	; (8000714 <HAL_UART_RxCpltCallback+0xb8>)
 80006ba:	4813      	ldr	r0, [pc, #76]	; (8000708 <HAL_UART_RxCpltCallback+0xac>)
 80006bc:	f001 f907 	bl	80018ce <HAL_UART_Transmit>
		j = 0;
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <HAL_UART_RxCpltCallback+0xb0>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < 20; i++)
 80006c6:	2300      	movs	r3, #0
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	e007      	b.n	80006dc <HAL_UART_RxCpltCallback+0x80>
		{
			save[i] = NULL;
 80006cc:	4a10      	ldr	r2, [pc, #64]	; (8000710 <HAL_UART_RxCpltCallback+0xb4>)
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	4413      	add	r3, r2
 80006d2:	2200      	movs	r2, #0
 80006d4:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 20; i++)
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	3301      	adds	r3, #1
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	2b13      	cmp	r3, #19
 80006e0:	ddf4      	ble.n	80006cc <HAL_UART_RxCpltCallback+0x70>
		}
	}



	while(huart3.gState == HAL_UART_STATE_BUSY_RX){}
 80006e2:	bf00      	nop
 80006e4:	4b08      	ldr	r3, [pc, #32]	; (8000708 <HAL_UART_RxCpltCallback+0xac>)
 80006e6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	2b22      	cmp	r3, #34	; 0x22
 80006ee:	d0f9      	beq.n	80006e4 <HAL_UART_RxCpltCallback+0x88>

	HAL_UART_Receive_IT(&huart3, cliBufferRX, 1);
 80006f0:	2201      	movs	r2, #1
 80006f2:	4904      	ldr	r1, [pc, #16]	; (8000704 <HAL_UART_RxCpltCallback+0xa8>)
 80006f4:	4804      	ldr	r0, [pc, #16]	; (8000708 <HAL_UART_RxCpltCallback+0xac>)
 80006f6:	f001 f97c 	bl	80019f2 <HAL_UART_Receive_IT>
}
 80006fa:	bf00      	nop
 80006fc:	3710      	adds	r7, #16
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	200000b8 	.word	0x200000b8
 8000708:	2000002c 	.word	0x2000002c
 800070c:	20000028 	.word	0x20000028
 8000710:	200000a4 	.word	0x200000a4
 8000714:	08002220 	.word	0x08002220
 8000718:	2000006c 	.word	0x2000006c

0800071c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr

08000728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <HAL_MspInit+0x5c>)
 8000730:	699b      	ldr	r3, [r3, #24]
 8000732:	4a14      	ldr	r2, [pc, #80]	; (8000784 <HAL_MspInit+0x5c>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6193      	str	r3, [r2, #24]
 800073a:	4b12      	ldr	r3, [pc, #72]	; (8000784 <HAL_MspInit+0x5c>)
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000746:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <HAL_MspInit+0x5c>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	4a0e      	ldr	r2, [pc, #56]	; (8000784 <HAL_MspInit+0x5c>)
 800074c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000750:	61d3      	str	r3, [r2, #28]
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <HAL_MspInit+0x5c>)
 8000754:	69db      	ldr	r3, [r3, #28]
 8000756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800075e:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <HAL_MspInit+0x60>)
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	4a04      	ldr	r2, [pc, #16]	; (8000788 <HAL_MspInit+0x60>)
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077a:	bf00      	nop
 800077c:	3714      	adds	r7, #20
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr
 8000784:	40021000 	.word	0x40021000
 8000788:	40010000 	.word	0x40010000

0800078c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	; 0x28
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a29      	ldr	r2, [pc, #164]	; (800084c <HAL_UART_MspInit+0xc0>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d14b      	bne.n	8000844 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80007ac:	4b28      	ldr	r3, [pc, #160]	; (8000850 <HAL_UART_MspInit+0xc4>)
 80007ae:	69db      	ldr	r3, [r3, #28]
 80007b0:	4a27      	ldr	r2, [pc, #156]	; (8000850 <HAL_UART_MspInit+0xc4>)
 80007b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007b6:	61d3      	str	r3, [r2, #28]
 80007b8:	4b25      	ldr	r3, [pc, #148]	; (8000850 <HAL_UART_MspInit+0xc4>)
 80007ba:	69db      	ldr	r3, [r3, #28]
 80007bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007c0:	613b      	str	r3, [r7, #16]
 80007c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c4:	4b22      	ldr	r3, [pc, #136]	; (8000850 <HAL_UART_MspInit+0xc4>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	4a21      	ldr	r2, [pc, #132]	; (8000850 <HAL_UART_MspInit+0xc4>)
 80007ca:	f043 0310 	orr.w	r3, r3, #16
 80007ce:	6193      	str	r3, [r2, #24]
 80007d0:	4b1f      	ldr	r3, [pc, #124]	; (8000850 <HAL_UART_MspInit+0xc4>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f003 0310 	and.w	r3, r3, #16
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC11     ------> USART3_RX
    PC10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80007dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	4818      	ldr	r0, [pc, #96]	; (8000854 <HAL_UART_MspInit+0xc8>)
 80007f2:	f000 fa79 	bl	8000ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fc:	2302      	movs	r3, #2
 80007fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000800:	2303      	movs	r3, #3
 8000802:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4619      	mov	r1, r3
 800080a:	4812      	ldr	r0, [pc, #72]	; (8000854 <HAL_UART_MspInit+0xc8>)
 800080c:	f000 fa6c 	bl	8000ce8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8000810:	4b11      	ldr	r3, [pc, #68]	; (8000858 <HAL_UART_MspInit+0xcc>)
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
 8000816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000818:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
 800081e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000820:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
 8000826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000828:	f043 0310 	orr.w	r3, r3, #16
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
 800082e:	4a0a      	ldr	r2, [pc, #40]	; (8000858 <HAL_UART_MspInit+0xcc>)
 8000830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000832:	6053      	str	r3, [r2, #4]

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000834:	2200      	movs	r2, #0
 8000836:	2100      	movs	r1, #0
 8000838:	2027      	movs	r0, #39	; 0x27
 800083a:	f000 f9a8 	bl	8000b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800083e:	2027      	movs	r0, #39	; 0x27
 8000840:	f000 f9c1 	bl	8000bc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000844:	bf00      	nop
 8000846:	3728      	adds	r7, #40	; 0x28
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40004800 	.word	0x40004800
 8000850:	40021000 	.word	0x40021000
 8000854:	40011000 	.word	0x40011000
 8000858:	40010000 	.word	0x40010000

0800085c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr

08000868 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086c:	e7fe      	b.n	800086c <HardFault_Handler+0x4>

0800086e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000872:	e7fe      	b.n	8000872 <MemManage_Handler+0x4>

08000874 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000878:	e7fe      	b.n	8000878 <BusFault_Handler+0x4>

0800087a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800087e:	e7fe      	b.n	800087e <UsageFault_Handler+0x4>

08000880 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr

0800088c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr

08000898 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr

080008a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a8:	f000 f87e 	bl	80009a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80008b4:	4802      	ldr	r0, [pc, #8]	; (80008c0 <USART3_IRQHandler+0x10>)
 80008b6:	f001 f8f1 	bl	8001a9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	2000002c 	.word	0x2000002c

080008c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr

080008d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80008d0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80008d2:	e003      	b.n	80008dc <LoopCopyDataInit>

080008d4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80008d4:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80008d6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80008d8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80008da:	3104      	adds	r1, #4

080008dc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80008dc:	480a      	ldr	r0, [pc, #40]	; (8000908 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80008e0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80008e2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80008e4:	d3f6      	bcc.n	80008d4 <CopyDataInit>
  ldr r2, =_sbss
 80008e6:	4a0a      	ldr	r2, [pc, #40]	; (8000910 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80008e8:	e002      	b.n	80008f0 <LoopFillZerobss>

080008ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  str r3, [r2], #4
 80008ec:	f842 3b04 	str.w	r3, [r2], #4

080008f0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80008f0:	4b08      	ldr	r3, [pc, #32]	; (8000914 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80008f2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80008f4:	d3f9      	bcc.n	80008ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008f6:	f7ff ffe5 	bl	80008c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008fa:	f001 fbd1 	bl	80020a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008fe:	f7ff fdd5 	bl	80004ac <main>
  bx lr
 8000902:	4770      	bx	lr
  ldr r3, =_sidata
 8000904:	08002258 	.word	0x08002258
  ldr r0, =_sdata
 8000908:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800090c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000910:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000914:	200000c8 	.word	0x200000c8

08000918 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000918:	e7fe      	b.n	8000918 <ADC1_2_IRQHandler>
	...

0800091c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <HAL_Init+0x28>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a07      	ldr	r2, [pc, #28]	; (8000944 <HAL_Init+0x28>)
 8000926:	f043 0310 	orr.w	r3, r3, #16
 800092a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800092c:	2003      	movs	r0, #3
 800092e:	f000 f923 	bl	8000b78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000932:	2000      	movs	r0, #0
 8000934:	f000 f808 	bl	8000948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000938:	f7ff fef6 	bl	8000728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800093c:	2300      	movs	r3, #0
}
 800093e:	4618      	mov	r0, r3
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40022000 	.word	0x40022000

08000948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <HAL_InitTick+0x54>)
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <HAL_InitTick+0x58>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	4619      	mov	r1, r3
 800095a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800095e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000962:	fbb2 f3f3 	udiv	r3, r2, r3
 8000966:	4618      	mov	r0, r3
 8000968:	f000 f93b 	bl	8000be2 <HAL_SYSTICK_Config>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000972:	2301      	movs	r3, #1
 8000974:	e00e      	b.n	8000994 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2b0f      	cmp	r3, #15
 800097a:	d80a      	bhi.n	8000992 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800097c:	2200      	movs	r2, #0
 800097e:	6879      	ldr	r1, [r7, #4]
 8000980:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000984:	f000 f903 	bl	8000b8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000988:	4a06      	ldr	r2, [pc, #24]	; (80009a4 <HAL_InitTick+0x5c>)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800098e:	2300      	movs	r3, #0
 8000990:	e000      	b.n	8000994 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000992:	2301      	movs	r3, #1
}
 8000994:	4618      	mov	r0, r3
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20000000 	.word	0x20000000
 80009a0:	20000008 	.word	0x20000008
 80009a4:	20000004 	.word	0x20000004

080009a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009ac:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <HAL_IncTick+0x1c>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <HAL_IncTick+0x20>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4413      	add	r3, r2
 80009b8:	4a03      	ldr	r2, [pc, #12]	; (80009c8 <HAL_IncTick+0x20>)
 80009ba:	6013      	str	r3, [r2, #0]
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr
 80009c4:	20000008 	.word	0x20000008
 80009c8:	200000c4 	.word	0x200000c4

080009cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  return uwTick;
 80009d0:	4b02      	ldr	r3, [pc, #8]	; (80009dc <HAL_GetTick+0x10>)
 80009d2:	681b      	ldr	r3, [r3, #0]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr
 80009dc:	200000c4 	.word	0x200000c4

080009e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f003 0307 	and.w	r3, r3, #7
 80009ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <__NVIC_SetPriorityGrouping+0x44>)
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009f6:	68ba      	ldr	r2, [r7, #8]
 80009f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009fc:	4013      	ands	r3, r2
 80009fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a12:	4a04      	ldr	r2, [pc, #16]	; (8000a24 <__NVIC_SetPriorityGrouping+0x44>)
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	60d3      	str	r3, [r2, #12]
}
 8000a18:	bf00      	nop
 8000a1a:	3714      	adds	r7, #20
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a2c:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <__NVIC_GetPriorityGrouping+0x18>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	0a1b      	lsrs	r3, r3, #8
 8000a32:	f003 0307 	and.w	r3, r3, #7
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	db0b      	blt.n	8000a6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	f003 021f 	and.w	r2, r3, #31
 8000a5c:	4906      	ldr	r1, [pc, #24]	; (8000a78 <__NVIC_EnableIRQ+0x34>)
 8000a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a62:	095b      	lsrs	r3, r3, #5
 8000a64:	2001      	movs	r0, #1
 8000a66:	fa00 f202 	lsl.w	r2, r0, r2
 8000a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr
 8000a78:	e000e100 	.word	0xe000e100

08000a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	6039      	str	r1, [r7, #0]
 8000a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	db0a      	blt.n	8000aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	490c      	ldr	r1, [pc, #48]	; (8000ac8 <__NVIC_SetPriority+0x4c>)
 8000a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9a:	0112      	lsls	r2, r2, #4
 8000a9c:	b2d2      	uxtb	r2, r2
 8000a9e:	440b      	add	r3, r1
 8000aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa4:	e00a      	b.n	8000abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	4908      	ldr	r1, [pc, #32]	; (8000acc <__NVIC_SetPriority+0x50>)
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	f003 030f 	and.w	r3, r3, #15
 8000ab2:	3b04      	subs	r3, #4
 8000ab4:	0112      	lsls	r2, r2, #4
 8000ab6:	b2d2      	uxtb	r2, r2
 8000ab8:	440b      	add	r3, r1
 8000aba:	761a      	strb	r2, [r3, #24]
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000e100 	.word	0xe000e100
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b089      	sub	sp, #36	; 0x24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae4:	69fb      	ldr	r3, [r7, #28]
 8000ae6:	f1c3 0307 	rsb	r3, r3, #7
 8000aea:	2b04      	cmp	r3, #4
 8000aec:	bf28      	it	cs
 8000aee:	2304      	movcs	r3, #4
 8000af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	3304      	adds	r3, #4
 8000af6:	2b06      	cmp	r3, #6
 8000af8:	d902      	bls.n	8000b00 <NVIC_EncodePriority+0x30>
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	3b03      	subs	r3, #3
 8000afe:	e000      	b.n	8000b02 <NVIC_EncodePriority+0x32>
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	43da      	mvns	r2, r3
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	401a      	ands	r2, r3
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b22:	43d9      	mvns	r1, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b28:	4313      	orrs	r3, r2
         );
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3724      	adds	r7, #36	; 0x24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr

08000b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b44:	d301      	bcc.n	8000b4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b46:	2301      	movs	r3, #1
 8000b48:	e00f      	b.n	8000b6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <SysTick_Config+0x40>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b52:	210f      	movs	r1, #15
 8000b54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b58:	f7ff ff90 	bl	8000a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <SysTick_Config+0x40>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b62:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <SysTick_Config+0x40>)
 8000b64:	2207      	movs	r2, #7
 8000b66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	e000e010 	.word	0xe000e010

08000b78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff ff2d 	bl	80009e0 <__NVIC_SetPriorityGrouping>
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b086      	sub	sp, #24
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	4603      	mov	r3, r0
 8000b96:	60b9      	str	r1, [r7, #8]
 8000b98:	607a      	str	r2, [r7, #4]
 8000b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba0:	f7ff ff42 	bl	8000a28 <__NVIC_GetPriorityGrouping>
 8000ba4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	68b9      	ldr	r1, [r7, #8]
 8000baa:	6978      	ldr	r0, [r7, #20]
 8000bac:	f7ff ff90 	bl	8000ad0 <NVIC_EncodePriority>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ff5f 	bl	8000a7c <__NVIC_SetPriority>
}
 8000bbe:	bf00      	nop
 8000bc0:	3718      	adds	r7, #24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	4603      	mov	r3, r0
 8000bce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff ff35 	bl	8000a44 <__NVIC_EnableIRQ>
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b082      	sub	sp, #8
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff ffa2 	bl	8000b34 <SysTick_Config>
 8000bf0:	4603      	mov	r3, r0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c04:	2300      	movs	r3, #0
 8000c06:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d005      	beq.n	8000c1e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2204      	movs	r2, #4
 8000c16:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	73fb      	strb	r3, [r7, #15]
 8000c1c:	e051      	b.n	8000cc2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f022 020e 	bic.w	r2, r2, #14
 8000c2c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f022 0201 	bic.w	r2, r2, #1
 8000c3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a22      	ldr	r2, [pc, #136]	; (8000ccc <HAL_DMA_Abort_IT+0xd0>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d029      	beq.n	8000c9c <HAL_DMA_Abort_IT+0xa0>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a20      	ldr	r2, [pc, #128]	; (8000cd0 <HAL_DMA_Abort_IT+0xd4>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d022      	beq.n	8000c98 <HAL_DMA_Abort_IT+0x9c>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a1f      	ldr	r2, [pc, #124]	; (8000cd4 <HAL_DMA_Abort_IT+0xd8>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d01a      	beq.n	8000c92 <HAL_DMA_Abort_IT+0x96>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a1d      	ldr	r2, [pc, #116]	; (8000cd8 <HAL_DMA_Abort_IT+0xdc>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d012      	beq.n	8000c8c <HAL_DMA_Abort_IT+0x90>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a1c      	ldr	r2, [pc, #112]	; (8000cdc <HAL_DMA_Abort_IT+0xe0>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d00a      	beq.n	8000c86 <HAL_DMA_Abort_IT+0x8a>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a1a      	ldr	r2, [pc, #104]	; (8000ce0 <HAL_DMA_Abort_IT+0xe4>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d102      	bne.n	8000c80 <HAL_DMA_Abort_IT+0x84>
 8000c7a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c7e:	e00e      	b.n	8000c9e <HAL_DMA_Abort_IT+0xa2>
 8000c80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c84:	e00b      	b.n	8000c9e <HAL_DMA_Abort_IT+0xa2>
 8000c86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c8a:	e008      	b.n	8000c9e <HAL_DMA_Abort_IT+0xa2>
 8000c8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c90:	e005      	b.n	8000c9e <HAL_DMA_Abort_IT+0xa2>
 8000c92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c96:	e002      	b.n	8000c9e <HAL_DMA_Abort_IT+0xa2>
 8000c98:	2310      	movs	r3, #16
 8000c9a:	e000      	b.n	8000c9e <HAL_DMA_Abort_IT+0xa2>
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	4a11      	ldr	r2, [pc, #68]	; (8000ce4 <HAL_DMA_Abort_IT+0xe8>)
 8000ca0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2200      	movs	r2, #0
 8000cae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d003      	beq.n	8000cc2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	4798      	blx	r3
    } 
  }
  return status;
 8000cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3710      	adds	r7, #16
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40020008 	.word	0x40020008
 8000cd0:	4002001c 	.word	0x4002001c
 8000cd4:	40020030 	.word	0x40020030
 8000cd8:	40020044 	.word	0x40020044
 8000cdc:	40020058 	.word	0x40020058
 8000ce0:	4002006c 	.word	0x4002006c
 8000ce4:	40020000 	.word	0x40020000

08000ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b08b      	sub	sp, #44	; 0x2c
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cfa:	e127      	b.n	8000f4c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	69fa      	ldr	r2, [r7, #28]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	f040 8116 	bne.w	8000f46 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	2b12      	cmp	r3, #18
 8000d20:	d034      	beq.n	8000d8c <HAL_GPIO_Init+0xa4>
 8000d22:	2b12      	cmp	r3, #18
 8000d24:	d80d      	bhi.n	8000d42 <HAL_GPIO_Init+0x5a>
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	d02b      	beq.n	8000d82 <HAL_GPIO_Init+0x9a>
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d804      	bhi.n	8000d38 <HAL_GPIO_Init+0x50>
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d031      	beq.n	8000d96 <HAL_GPIO_Init+0xae>
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d01c      	beq.n	8000d70 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d36:	e048      	b.n	8000dca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d38:	2b03      	cmp	r3, #3
 8000d3a:	d043      	beq.n	8000dc4 <HAL_GPIO_Init+0xdc>
 8000d3c:	2b11      	cmp	r3, #17
 8000d3e:	d01b      	beq.n	8000d78 <HAL_GPIO_Init+0x90>
          break;
 8000d40:	e043      	b.n	8000dca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d42:	4a89      	ldr	r2, [pc, #548]	; (8000f68 <HAL_GPIO_Init+0x280>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d026      	beq.n	8000d96 <HAL_GPIO_Init+0xae>
 8000d48:	4a87      	ldr	r2, [pc, #540]	; (8000f68 <HAL_GPIO_Init+0x280>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d806      	bhi.n	8000d5c <HAL_GPIO_Init+0x74>
 8000d4e:	4a87      	ldr	r2, [pc, #540]	; (8000f6c <HAL_GPIO_Init+0x284>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d020      	beq.n	8000d96 <HAL_GPIO_Init+0xae>
 8000d54:	4a86      	ldr	r2, [pc, #536]	; (8000f70 <HAL_GPIO_Init+0x288>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d01d      	beq.n	8000d96 <HAL_GPIO_Init+0xae>
          break;
 8000d5a:	e036      	b.n	8000dca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d5c:	4a85      	ldr	r2, [pc, #532]	; (8000f74 <HAL_GPIO_Init+0x28c>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d019      	beq.n	8000d96 <HAL_GPIO_Init+0xae>
 8000d62:	4a85      	ldr	r2, [pc, #532]	; (8000f78 <HAL_GPIO_Init+0x290>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d016      	beq.n	8000d96 <HAL_GPIO_Init+0xae>
 8000d68:	4a84      	ldr	r2, [pc, #528]	; (8000f7c <HAL_GPIO_Init+0x294>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d013      	beq.n	8000d96 <HAL_GPIO_Init+0xae>
          break;
 8000d6e:	e02c      	b.n	8000dca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	623b      	str	r3, [r7, #32]
          break;
 8000d76:	e028      	b.n	8000dca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	3304      	adds	r3, #4
 8000d7e:	623b      	str	r3, [r7, #32]
          break;
 8000d80:	e023      	b.n	8000dca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	3308      	adds	r3, #8
 8000d88:	623b      	str	r3, [r7, #32]
          break;
 8000d8a:	e01e      	b.n	8000dca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	330c      	adds	r3, #12
 8000d92:	623b      	str	r3, [r7, #32]
          break;
 8000d94:	e019      	b.n	8000dca <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d102      	bne.n	8000da4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d9e:	2304      	movs	r3, #4
 8000da0:	623b      	str	r3, [r7, #32]
          break;
 8000da2:	e012      	b.n	8000dca <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d105      	bne.n	8000db8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dac:	2308      	movs	r3, #8
 8000dae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	69fa      	ldr	r2, [r7, #28]
 8000db4:	611a      	str	r2, [r3, #16]
          break;
 8000db6:	e008      	b.n	8000dca <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000db8:	2308      	movs	r3, #8
 8000dba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	69fa      	ldr	r2, [r7, #28]
 8000dc0:	615a      	str	r2, [r3, #20]
          break;
 8000dc2:	e002      	b.n	8000dca <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	623b      	str	r3, [r7, #32]
          break;
 8000dc8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	2bff      	cmp	r3, #255	; 0xff
 8000dce:	d801      	bhi.n	8000dd4 <HAL_GPIO_Init+0xec>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	e001      	b.n	8000dd8 <HAL_GPIO_Init+0xf0>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3304      	adds	r3, #4
 8000dd8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	2bff      	cmp	r3, #255	; 0xff
 8000dde:	d802      	bhi.n	8000de6 <HAL_GPIO_Init+0xfe>
 8000de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	e002      	b.n	8000dec <HAL_GPIO_Init+0x104>
 8000de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de8:	3b08      	subs	r3, #8
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	210f      	movs	r1, #15
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	401a      	ands	r2, r3
 8000dfe:	6a39      	ldr	r1, [r7, #32]
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	fa01 f303 	lsl.w	r3, r1, r3
 8000e06:	431a      	orrs	r2, r3
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	f000 8096 	beq.w	8000f46 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e1a:	4b59      	ldr	r3, [pc, #356]	; (8000f80 <HAL_GPIO_Init+0x298>)
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	4a58      	ldr	r2, [pc, #352]	; (8000f80 <HAL_GPIO_Init+0x298>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6193      	str	r3, [r2, #24]
 8000e26:	4b56      	ldr	r3, [pc, #344]	; (8000f80 <HAL_GPIO_Init+0x298>)
 8000e28:	699b      	ldr	r3, [r3, #24]
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e32:	4a54      	ldr	r2, [pc, #336]	; (8000f84 <HAL_GPIO_Init+0x29c>)
 8000e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e36:	089b      	lsrs	r3, r3, #2
 8000e38:	3302      	adds	r3, #2
 8000e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e3e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e42:	f003 0303 	and.w	r3, r3, #3
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	220f      	movs	r2, #15
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	68fa      	ldr	r2, [r7, #12]
 8000e52:	4013      	ands	r3, r2
 8000e54:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a4b      	ldr	r2, [pc, #300]	; (8000f88 <HAL_GPIO_Init+0x2a0>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d013      	beq.n	8000e86 <HAL_GPIO_Init+0x19e>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a4a      	ldr	r2, [pc, #296]	; (8000f8c <HAL_GPIO_Init+0x2a4>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d00d      	beq.n	8000e82 <HAL_GPIO_Init+0x19a>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a49      	ldr	r2, [pc, #292]	; (8000f90 <HAL_GPIO_Init+0x2a8>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d007      	beq.n	8000e7e <HAL_GPIO_Init+0x196>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a48      	ldr	r2, [pc, #288]	; (8000f94 <HAL_GPIO_Init+0x2ac>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d101      	bne.n	8000e7a <HAL_GPIO_Init+0x192>
 8000e76:	2303      	movs	r3, #3
 8000e78:	e006      	b.n	8000e88 <HAL_GPIO_Init+0x1a0>
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	e004      	b.n	8000e88 <HAL_GPIO_Init+0x1a0>
 8000e7e:	2302      	movs	r3, #2
 8000e80:	e002      	b.n	8000e88 <HAL_GPIO_Init+0x1a0>
 8000e82:	2301      	movs	r3, #1
 8000e84:	e000      	b.n	8000e88 <HAL_GPIO_Init+0x1a0>
 8000e86:	2300      	movs	r3, #0
 8000e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e8a:	f002 0203 	and.w	r2, r2, #3
 8000e8e:	0092      	lsls	r2, r2, #2
 8000e90:	4093      	lsls	r3, r2
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e98:	493a      	ldr	r1, [pc, #232]	; (8000f84 <HAL_GPIO_Init+0x29c>)
 8000e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9c:	089b      	lsrs	r3, r3, #2
 8000e9e:	3302      	adds	r3, #2
 8000ea0:	68fa      	ldr	r2, [r7, #12]
 8000ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d006      	beq.n	8000ec0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000eb2:	4b39      	ldr	r3, [pc, #228]	; (8000f98 <HAL_GPIO_Init+0x2b0>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	4938      	ldr	r1, [pc, #224]	; (8000f98 <HAL_GPIO_Init+0x2b0>)
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	600b      	str	r3, [r1, #0]
 8000ebe:	e006      	b.n	8000ece <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ec0:	4b35      	ldr	r3, [pc, #212]	; (8000f98 <HAL_GPIO_Init+0x2b0>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	4933      	ldr	r1, [pc, #204]	; (8000f98 <HAL_GPIO_Init+0x2b0>)
 8000eca:	4013      	ands	r3, r2
 8000ecc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d006      	beq.n	8000ee8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000eda:	4b2f      	ldr	r3, [pc, #188]	; (8000f98 <HAL_GPIO_Init+0x2b0>)
 8000edc:	685a      	ldr	r2, [r3, #4]
 8000ede:	492e      	ldr	r1, [pc, #184]	; (8000f98 <HAL_GPIO_Init+0x2b0>)
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	604b      	str	r3, [r1, #4]
 8000ee6:	e006      	b.n	8000ef6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ee8:	4b2b      	ldr	r3, [pc, #172]	; (8000f98 <HAL_GPIO_Init+0x2b0>)
 8000eea:	685a      	ldr	r2, [r3, #4]
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	4929      	ldr	r1, [pc, #164]	; (8000f98 <HAL_GPIO_Init+0x2b0>)
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d006      	beq.n	8000f10 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f02:	4b25      	ldr	r3, [pc, #148]	; (8000f98 <HAL_GPIO_Init+0x2b0>)
 8000f04:	689a      	ldr	r2, [r3, #8]
 8000f06:	4924      	ldr	r1, [pc, #144]	; (8000f98 <HAL_GPIO_Init+0x2b0>)
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	608b      	str	r3, [r1, #8]
 8000f0e:	e006      	b.n	8000f1e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f10:	4b21      	ldr	r3, [pc, #132]	; (8000f98 <HAL_GPIO_Init+0x2b0>)
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	491f      	ldr	r1, [pc, #124]	; (8000f98 <HAL_GPIO_Init+0x2b0>)
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d006      	beq.n	8000f38 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f2a:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <HAL_GPIO_Init+0x2b0>)
 8000f2c:	68da      	ldr	r2, [r3, #12]
 8000f2e:	491a      	ldr	r1, [pc, #104]	; (8000f98 <HAL_GPIO_Init+0x2b0>)
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	60cb      	str	r3, [r1, #12]
 8000f36:	e006      	b.n	8000f46 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f38:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <HAL_GPIO_Init+0x2b0>)
 8000f3a:	68da      	ldr	r2, [r3, #12]
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	4915      	ldr	r1, [pc, #84]	; (8000f98 <HAL_GPIO_Init+0x2b0>)
 8000f42:	4013      	ands	r3, r2
 8000f44:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f48:	3301      	adds	r3, #1
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f52:	fa22 f303 	lsr.w	r3, r2, r3
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	f47f aed0 	bne.w	8000cfc <HAL_GPIO_Init+0x14>
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	372c      	adds	r7, #44	; 0x2c
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	10210000 	.word	0x10210000
 8000f6c:	10110000 	.word	0x10110000
 8000f70:	10120000 	.word	0x10120000
 8000f74:	10310000 	.word	0x10310000
 8000f78:	10320000 	.word	0x10320000
 8000f7c:	10220000 	.word	0x10220000
 8000f80:	40021000 	.word	0x40021000
 8000f84:	40010000 	.word	0x40010000
 8000f88:	40010800 	.word	0x40010800
 8000f8c:	40010c00 	.word	0x40010c00
 8000f90:	40011000 	.word	0x40011000
 8000f94:	40011400 	.word	0x40011400
 8000f98:	40010400 	.word	0x40010400

08000f9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689a      	ldr	r2, [r3, #8]
 8000fac:	887b      	ldrh	r3, [r7, #2]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d002      	beq.n	8000fba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	73fb      	strb	r3, [r7, #15]
 8000fb8:	e001      	b.n	8000fbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr

08000fca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	b083      	sub	sp, #12
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	807b      	strh	r3, [r7, #2]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fda:	787b      	ldrb	r3, [r7, #1]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d003      	beq.n	8000fe8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fe0:	887a      	ldrh	r2, [r7, #2]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000fe6:	e003      	b.n	8000ff0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fe8:	887b      	ldrh	r3, [r7, #2]
 8000fea:	041a      	lsls	r2, r3, #16
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	611a      	str	r2, [r3, #16]
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr
	...

08000ffc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d101      	bne.n	800100e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e26c      	b.n	80014e8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	2b00      	cmp	r3, #0
 8001018:	f000 8087 	beq.w	800112a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800101c:	4b92      	ldr	r3, [pc, #584]	; (8001268 <HAL_RCC_OscConfig+0x26c>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 030c 	and.w	r3, r3, #12
 8001024:	2b04      	cmp	r3, #4
 8001026:	d00c      	beq.n	8001042 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001028:	4b8f      	ldr	r3, [pc, #572]	; (8001268 <HAL_RCC_OscConfig+0x26c>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 030c 	and.w	r3, r3, #12
 8001030:	2b08      	cmp	r3, #8
 8001032:	d112      	bne.n	800105a <HAL_RCC_OscConfig+0x5e>
 8001034:	4b8c      	ldr	r3, [pc, #560]	; (8001268 <HAL_RCC_OscConfig+0x26c>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800103c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001040:	d10b      	bne.n	800105a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001042:	4b89      	ldr	r3, [pc, #548]	; (8001268 <HAL_RCC_OscConfig+0x26c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d06c      	beq.n	8001128 <HAL_RCC_OscConfig+0x12c>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d168      	bne.n	8001128 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e246      	b.n	80014e8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001062:	d106      	bne.n	8001072 <HAL_RCC_OscConfig+0x76>
 8001064:	4b80      	ldr	r3, [pc, #512]	; (8001268 <HAL_RCC_OscConfig+0x26c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a7f      	ldr	r2, [pc, #508]	; (8001268 <HAL_RCC_OscConfig+0x26c>)
 800106a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800106e:	6013      	str	r3, [r2, #0]
 8001070:	e02e      	b.n	80010d0 <HAL_RCC_OscConfig+0xd4>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d10c      	bne.n	8001094 <HAL_RCC_OscConfig+0x98>
 800107a:	4b7b      	ldr	r3, [pc, #492]	; (8001268 <HAL_RCC_OscConfig+0x26c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a7a      	ldr	r2, [pc, #488]	; (8001268 <HAL_RCC_OscConfig+0x26c>)
 8001080:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001084:	6013      	str	r3, [r2, #0]
 8001086:	4b78      	ldr	r3, [pc, #480]	; (8001268 <HAL_RCC_OscConfig+0x26c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a77      	ldr	r2, [pc, #476]	; (8001268 <HAL_RCC_OscConfig+0x26c>)
 800108c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	e01d      	b.n	80010d0 <HAL_RCC_OscConfig+0xd4>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800109c:	d10c      	bne.n	80010b8 <HAL_RCC_OscConfig+0xbc>
 800109e:	4b72      	ldr	r3, [pc, #456]	; (8001268 <HAL_RCC_OscConfig+0x26c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a71      	ldr	r2, [pc, #452]	; (8001268 <HAL_RCC_OscConfig+0x26c>)
 80010a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010a8:	6013      	str	r3, [r2, #0]
 80010aa:	4b6f      	ldr	r3, [pc, #444]	; (8001268 <HAL_RCC_OscConfig+0x26c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a6e      	ldr	r2, [pc, #440]	; (8001268 <HAL_RCC_OscConfig+0x26c>)
 80010b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010b4:	6013      	str	r3, [r2, #0]
 80010b6:	e00b      	b.n	80010d0 <HAL_RCC_OscConfig+0xd4>
 80010b8:	4b6b      	ldr	r3, [pc, #428]	; (8001268 <HAL_RCC_OscConfig+0x26c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a6a      	ldr	r2, [pc, #424]	; (8001268 <HAL_RCC_OscConfig+0x26c>)
 80010be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	4b68      	ldr	r3, [pc, #416]	; (8001268 <HAL_RCC_OscConfig+0x26c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a67      	ldr	r2, [pc, #412]	; (8001268 <HAL_RCC_OscConfig+0x26c>)
 80010ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d013      	beq.n	8001100 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d8:	f7ff fc78 	bl	80009cc <HAL_GetTick>
 80010dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010de:	e008      	b.n	80010f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010e0:	f7ff fc74 	bl	80009cc <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b64      	cmp	r3, #100	; 0x64
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e1fa      	b.n	80014e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010f2:	4b5d      	ldr	r3, [pc, #372]	; (8001268 <HAL_RCC_OscConfig+0x26c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d0f0      	beq.n	80010e0 <HAL_RCC_OscConfig+0xe4>
 80010fe:	e014      	b.n	800112a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001100:	f7ff fc64 	bl	80009cc <HAL_GetTick>
 8001104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001106:	e008      	b.n	800111a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001108:	f7ff fc60 	bl	80009cc <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	2b64      	cmp	r3, #100	; 0x64
 8001114:	d901      	bls.n	800111a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001116:	2303      	movs	r3, #3
 8001118:	e1e6      	b.n	80014e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800111a:	4b53      	ldr	r3, [pc, #332]	; (8001268 <HAL_RCC_OscConfig+0x26c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1f0      	bne.n	8001108 <HAL_RCC_OscConfig+0x10c>
 8001126:	e000      	b.n	800112a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001128:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d063      	beq.n	80011fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001136:	4b4c      	ldr	r3, [pc, #304]	; (8001268 <HAL_RCC_OscConfig+0x26c>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f003 030c 	and.w	r3, r3, #12
 800113e:	2b00      	cmp	r3, #0
 8001140:	d00b      	beq.n	800115a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001142:	4b49      	ldr	r3, [pc, #292]	; (8001268 <HAL_RCC_OscConfig+0x26c>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f003 030c 	and.w	r3, r3, #12
 800114a:	2b08      	cmp	r3, #8
 800114c:	d11c      	bne.n	8001188 <HAL_RCC_OscConfig+0x18c>
 800114e:	4b46      	ldr	r3, [pc, #280]	; (8001268 <HAL_RCC_OscConfig+0x26c>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d116      	bne.n	8001188 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800115a:	4b43      	ldr	r3, [pc, #268]	; (8001268 <HAL_RCC_OscConfig+0x26c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d005      	beq.n	8001172 <HAL_RCC_OscConfig+0x176>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	691b      	ldr	r3, [r3, #16]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d001      	beq.n	8001172 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e1ba      	b.n	80014e8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001172:	4b3d      	ldr	r3, [pc, #244]	; (8001268 <HAL_RCC_OscConfig+0x26c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	4939      	ldr	r1, [pc, #228]	; (8001268 <HAL_RCC_OscConfig+0x26c>)
 8001182:	4313      	orrs	r3, r2
 8001184:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001186:	e03a      	b.n	80011fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	691b      	ldr	r3, [r3, #16]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d020      	beq.n	80011d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001190:	4b36      	ldr	r3, [pc, #216]	; (800126c <HAL_RCC_OscConfig+0x270>)
 8001192:	2201      	movs	r2, #1
 8001194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001196:	f7ff fc19 	bl	80009cc <HAL_GetTick>
 800119a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800119c:	e008      	b.n	80011b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800119e:	f7ff fc15 	bl	80009cc <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d901      	bls.n	80011b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e19b      	b.n	80014e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b0:	4b2d      	ldr	r3, [pc, #180]	; (8001268 <HAL_RCC_OscConfig+0x26c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d0f0      	beq.n	800119e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011bc:	4b2a      	ldr	r3, [pc, #168]	; (8001268 <HAL_RCC_OscConfig+0x26c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	695b      	ldr	r3, [r3, #20]
 80011c8:	00db      	lsls	r3, r3, #3
 80011ca:	4927      	ldr	r1, [pc, #156]	; (8001268 <HAL_RCC_OscConfig+0x26c>)
 80011cc:	4313      	orrs	r3, r2
 80011ce:	600b      	str	r3, [r1, #0]
 80011d0:	e015      	b.n	80011fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011d2:	4b26      	ldr	r3, [pc, #152]	; (800126c <HAL_RCC_OscConfig+0x270>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d8:	f7ff fbf8 	bl	80009cc <HAL_GetTick>
 80011dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011de:	e008      	b.n	80011f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011e0:	f7ff fbf4 	bl	80009cc <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e17a      	b.n	80014e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011f2:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <HAL_RCC_OscConfig+0x26c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1f0      	bne.n	80011e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0308 	and.w	r3, r3, #8
 8001206:	2b00      	cmp	r3, #0
 8001208:	d03a      	beq.n	8001280 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d019      	beq.n	8001246 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001212:	4b17      	ldr	r3, [pc, #92]	; (8001270 <HAL_RCC_OscConfig+0x274>)
 8001214:	2201      	movs	r2, #1
 8001216:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001218:	f7ff fbd8 	bl	80009cc <HAL_GetTick>
 800121c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800121e:	e008      	b.n	8001232 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001220:	f7ff fbd4 	bl	80009cc <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d901      	bls.n	8001232 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e15a      	b.n	80014e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001232:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <HAL_RCC_OscConfig+0x26c>)
 8001234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	2b00      	cmp	r3, #0
 800123c:	d0f0      	beq.n	8001220 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800123e:	2001      	movs	r0, #1
 8001240:	f000 fada 	bl	80017f8 <RCC_Delay>
 8001244:	e01c      	b.n	8001280 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001246:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <HAL_RCC_OscConfig+0x274>)
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800124c:	f7ff fbbe 	bl	80009cc <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001252:	e00f      	b.n	8001274 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001254:	f7ff fbba 	bl	80009cc <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d908      	bls.n	8001274 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e140      	b.n	80014e8 <HAL_RCC_OscConfig+0x4ec>
 8001266:	bf00      	nop
 8001268:	40021000 	.word	0x40021000
 800126c:	42420000 	.word	0x42420000
 8001270:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001274:	4b9e      	ldr	r3, [pc, #632]	; (80014f0 <HAL_RCC_OscConfig+0x4f4>)
 8001276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1e9      	bne.n	8001254 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0304 	and.w	r3, r3, #4
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 80a6 	beq.w	80013da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800128e:	2300      	movs	r3, #0
 8001290:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001292:	4b97      	ldr	r3, [pc, #604]	; (80014f0 <HAL_RCC_OscConfig+0x4f4>)
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d10d      	bne.n	80012ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800129e:	4b94      	ldr	r3, [pc, #592]	; (80014f0 <HAL_RCC_OscConfig+0x4f4>)
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	4a93      	ldr	r2, [pc, #588]	; (80014f0 <HAL_RCC_OscConfig+0x4f4>)
 80012a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a8:	61d3      	str	r3, [r2, #28]
 80012aa:	4b91      	ldr	r3, [pc, #580]	; (80014f0 <HAL_RCC_OscConfig+0x4f4>)
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012b6:	2301      	movs	r3, #1
 80012b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ba:	4b8e      	ldr	r3, [pc, #568]	; (80014f4 <HAL_RCC_OscConfig+0x4f8>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d118      	bne.n	80012f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012c6:	4b8b      	ldr	r3, [pc, #556]	; (80014f4 <HAL_RCC_OscConfig+0x4f8>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a8a      	ldr	r2, [pc, #552]	; (80014f4 <HAL_RCC_OscConfig+0x4f8>)
 80012cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012d2:	f7ff fb7b 	bl	80009cc <HAL_GetTick>
 80012d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d8:	e008      	b.n	80012ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012da:	f7ff fb77 	bl	80009cc <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	2b64      	cmp	r3, #100	; 0x64
 80012e6:	d901      	bls.n	80012ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e0fd      	b.n	80014e8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ec:	4b81      	ldr	r3, [pc, #516]	; (80014f4 <HAL_RCC_OscConfig+0x4f8>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d0f0      	beq.n	80012da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d106      	bne.n	800130e <HAL_RCC_OscConfig+0x312>
 8001300:	4b7b      	ldr	r3, [pc, #492]	; (80014f0 <HAL_RCC_OscConfig+0x4f4>)
 8001302:	6a1b      	ldr	r3, [r3, #32]
 8001304:	4a7a      	ldr	r2, [pc, #488]	; (80014f0 <HAL_RCC_OscConfig+0x4f4>)
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	6213      	str	r3, [r2, #32]
 800130c:	e02d      	b.n	800136a <HAL_RCC_OscConfig+0x36e>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d10c      	bne.n	8001330 <HAL_RCC_OscConfig+0x334>
 8001316:	4b76      	ldr	r3, [pc, #472]	; (80014f0 <HAL_RCC_OscConfig+0x4f4>)
 8001318:	6a1b      	ldr	r3, [r3, #32]
 800131a:	4a75      	ldr	r2, [pc, #468]	; (80014f0 <HAL_RCC_OscConfig+0x4f4>)
 800131c:	f023 0301 	bic.w	r3, r3, #1
 8001320:	6213      	str	r3, [r2, #32]
 8001322:	4b73      	ldr	r3, [pc, #460]	; (80014f0 <HAL_RCC_OscConfig+0x4f4>)
 8001324:	6a1b      	ldr	r3, [r3, #32]
 8001326:	4a72      	ldr	r2, [pc, #456]	; (80014f0 <HAL_RCC_OscConfig+0x4f4>)
 8001328:	f023 0304 	bic.w	r3, r3, #4
 800132c:	6213      	str	r3, [r2, #32]
 800132e:	e01c      	b.n	800136a <HAL_RCC_OscConfig+0x36e>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	2b05      	cmp	r3, #5
 8001336:	d10c      	bne.n	8001352 <HAL_RCC_OscConfig+0x356>
 8001338:	4b6d      	ldr	r3, [pc, #436]	; (80014f0 <HAL_RCC_OscConfig+0x4f4>)
 800133a:	6a1b      	ldr	r3, [r3, #32]
 800133c:	4a6c      	ldr	r2, [pc, #432]	; (80014f0 <HAL_RCC_OscConfig+0x4f4>)
 800133e:	f043 0304 	orr.w	r3, r3, #4
 8001342:	6213      	str	r3, [r2, #32]
 8001344:	4b6a      	ldr	r3, [pc, #424]	; (80014f0 <HAL_RCC_OscConfig+0x4f4>)
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	4a69      	ldr	r2, [pc, #420]	; (80014f0 <HAL_RCC_OscConfig+0x4f4>)
 800134a:	f043 0301 	orr.w	r3, r3, #1
 800134e:	6213      	str	r3, [r2, #32]
 8001350:	e00b      	b.n	800136a <HAL_RCC_OscConfig+0x36e>
 8001352:	4b67      	ldr	r3, [pc, #412]	; (80014f0 <HAL_RCC_OscConfig+0x4f4>)
 8001354:	6a1b      	ldr	r3, [r3, #32]
 8001356:	4a66      	ldr	r2, [pc, #408]	; (80014f0 <HAL_RCC_OscConfig+0x4f4>)
 8001358:	f023 0301 	bic.w	r3, r3, #1
 800135c:	6213      	str	r3, [r2, #32]
 800135e:	4b64      	ldr	r3, [pc, #400]	; (80014f0 <HAL_RCC_OscConfig+0x4f4>)
 8001360:	6a1b      	ldr	r3, [r3, #32]
 8001362:	4a63      	ldr	r2, [pc, #396]	; (80014f0 <HAL_RCC_OscConfig+0x4f4>)
 8001364:	f023 0304 	bic.w	r3, r3, #4
 8001368:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d015      	beq.n	800139e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001372:	f7ff fb2b 	bl	80009cc <HAL_GetTick>
 8001376:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001378:	e00a      	b.n	8001390 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800137a:	f7ff fb27 	bl	80009cc <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	f241 3288 	movw	r2, #5000	; 0x1388
 8001388:	4293      	cmp	r3, r2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e0ab      	b.n	80014e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001390:	4b57      	ldr	r3, [pc, #348]	; (80014f0 <HAL_RCC_OscConfig+0x4f4>)
 8001392:	6a1b      	ldr	r3, [r3, #32]
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0ee      	beq.n	800137a <HAL_RCC_OscConfig+0x37e>
 800139c:	e014      	b.n	80013c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800139e:	f7ff fb15 	bl	80009cc <HAL_GetTick>
 80013a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013a4:	e00a      	b.n	80013bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013a6:	f7ff fb11 	bl	80009cc <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e095      	b.n	80014e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013bc:	4b4c      	ldr	r3, [pc, #304]	; (80014f0 <HAL_RCC_OscConfig+0x4f4>)
 80013be:	6a1b      	ldr	r3, [r3, #32]
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1ee      	bne.n	80013a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013c8:	7dfb      	ldrb	r3, [r7, #23]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d105      	bne.n	80013da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013ce:	4b48      	ldr	r3, [pc, #288]	; (80014f0 <HAL_RCC_OscConfig+0x4f4>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	4a47      	ldr	r2, [pc, #284]	; (80014f0 <HAL_RCC_OscConfig+0x4f4>)
 80013d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f000 8081 	beq.w	80014e6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013e4:	4b42      	ldr	r3, [pc, #264]	; (80014f0 <HAL_RCC_OscConfig+0x4f4>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 030c 	and.w	r3, r3, #12
 80013ec:	2b08      	cmp	r3, #8
 80013ee:	d061      	beq.n	80014b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	69db      	ldr	r3, [r3, #28]
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d146      	bne.n	8001486 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013f8:	4b3f      	ldr	r3, [pc, #252]	; (80014f8 <HAL_RCC_OscConfig+0x4fc>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fe:	f7ff fae5 	bl	80009cc <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001406:	f7ff fae1 	bl	80009cc <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e067      	b.n	80014e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001418:	4b35      	ldr	r3, [pc, #212]	; (80014f0 <HAL_RCC_OscConfig+0x4f4>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1f0      	bne.n	8001406 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a1b      	ldr	r3, [r3, #32]
 8001428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800142c:	d108      	bne.n	8001440 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800142e:	4b30      	ldr	r3, [pc, #192]	; (80014f0 <HAL_RCC_OscConfig+0x4f4>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	492d      	ldr	r1, [pc, #180]	; (80014f0 <HAL_RCC_OscConfig+0x4f4>)
 800143c:	4313      	orrs	r3, r2
 800143e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001440:	4b2b      	ldr	r3, [pc, #172]	; (80014f0 <HAL_RCC_OscConfig+0x4f4>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a19      	ldr	r1, [r3, #32]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001450:	430b      	orrs	r3, r1
 8001452:	4927      	ldr	r1, [pc, #156]	; (80014f0 <HAL_RCC_OscConfig+0x4f4>)
 8001454:	4313      	orrs	r3, r2
 8001456:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001458:	4b27      	ldr	r3, [pc, #156]	; (80014f8 <HAL_RCC_OscConfig+0x4fc>)
 800145a:	2201      	movs	r2, #1
 800145c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145e:	f7ff fab5 	bl	80009cc <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001464:	e008      	b.n	8001478 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001466:	f7ff fab1 	bl	80009cc <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e037      	b.n	80014e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001478:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <HAL_RCC_OscConfig+0x4f4>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d0f0      	beq.n	8001466 <HAL_RCC_OscConfig+0x46a>
 8001484:	e02f      	b.n	80014e6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001486:	4b1c      	ldr	r3, [pc, #112]	; (80014f8 <HAL_RCC_OscConfig+0x4fc>)
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148c:	f7ff fa9e 	bl	80009cc <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001494:	f7ff fa9a 	bl	80009cc <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e020      	b.n	80014e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014a6:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <HAL_RCC_OscConfig+0x4f4>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1f0      	bne.n	8001494 <HAL_RCC_OscConfig+0x498>
 80014b2:	e018      	b.n	80014e6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	69db      	ldr	r3, [r3, #28]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d101      	bne.n	80014c0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e013      	b.n	80014e8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014c0:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <HAL_RCC_OscConfig+0x4f4>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a1b      	ldr	r3, [r3, #32]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d106      	bne.n	80014e2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014de:	429a      	cmp	r2, r3
 80014e0:	d001      	beq.n	80014e6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e000      	b.n	80014e8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40021000 	.word	0x40021000
 80014f4:	40007000 	.word	0x40007000
 80014f8:	42420060 	.word	0x42420060

080014fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d101      	bne.n	8001510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e0d0      	b.n	80016b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001510:	4b6a      	ldr	r3, [pc, #424]	; (80016bc <HAL_RCC_ClockConfig+0x1c0>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0307 	and.w	r3, r3, #7
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	429a      	cmp	r2, r3
 800151c:	d910      	bls.n	8001540 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800151e:	4b67      	ldr	r3, [pc, #412]	; (80016bc <HAL_RCC_ClockConfig+0x1c0>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f023 0207 	bic.w	r2, r3, #7
 8001526:	4965      	ldr	r1, [pc, #404]	; (80016bc <HAL_RCC_ClockConfig+0x1c0>)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	4313      	orrs	r3, r2
 800152c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800152e:	4b63      	ldr	r3, [pc, #396]	; (80016bc <HAL_RCC_ClockConfig+0x1c0>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	683a      	ldr	r2, [r7, #0]
 8001538:	429a      	cmp	r2, r3
 800153a:	d001      	beq.n	8001540 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e0b8      	b.n	80016b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d020      	beq.n	800158e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	2b00      	cmp	r3, #0
 8001556:	d005      	beq.n	8001564 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001558:	4b59      	ldr	r3, [pc, #356]	; (80016c0 <HAL_RCC_ClockConfig+0x1c4>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	4a58      	ldr	r2, [pc, #352]	; (80016c0 <HAL_RCC_ClockConfig+0x1c4>)
 800155e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001562:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0308 	and.w	r3, r3, #8
 800156c:	2b00      	cmp	r3, #0
 800156e:	d005      	beq.n	800157c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001570:	4b53      	ldr	r3, [pc, #332]	; (80016c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	4a52      	ldr	r2, [pc, #328]	; (80016c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001576:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800157a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800157c:	4b50      	ldr	r3, [pc, #320]	; (80016c0 <HAL_RCC_ClockConfig+0x1c4>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	494d      	ldr	r1, [pc, #308]	; (80016c0 <HAL_RCC_ClockConfig+0x1c4>)
 800158a:	4313      	orrs	r3, r2
 800158c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b00      	cmp	r3, #0
 8001598:	d040      	beq.n	800161c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d107      	bne.n	80015b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015a2:	4b47      	ldr	r3, [pc, #284]	; (80016c0 <HAL_RCC_ClockConfig+0x1c4>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d115      	bne.n	80015da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e07f      	b.n	80016b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d107      	bne.n	80015ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ba:	4b41      	ldr	r3, [pc, #260]	; (80016c0 <HAL_RCC_ClockConfig+0x1c4>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d109      	bne.n	80015da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e073      	b.n	80016b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ca:	4b3d      	ldr	r3, [pc, #244]	; (80016c0 <HAL_RCC_ClockConfig+0x1c4>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e06b      	b.n	80016b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015da:	4b39      	ldr	r3, [pc, #228]	; (80016c0 <HAL_RCC_ClockConfig+0x1c4>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f023 0203 	bic.w	r2, r3, #3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	4936      	ldr	r1, [pc, #216]	; (80016c0 <HAL_RCC_ClockConfig+0x1c4>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015ec:	f7ff f9ee 	bl	80009cc <HAL_GetTick>
 80015f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015f2:	e00a      	b.n	800160a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015f4:	f7ff f9ea 	bl	80009cc <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001602:	4293      	cmp	r3, r2
 8001604:	d901      	bls.n	800160a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e053      	b.n	80016b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800160a:	4b2d      	ldr	r3, [pc, #180]	; (80016c0 <HAL_RCC_ClockConfig+0x1c4>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f003 020c 	and.w	r2, r3, #12
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	429a      	cmp	r2, r3
 800161a:	d1eb      	bne.n	80015f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800161c:	4b27      	ldr	r3, [pc, #156]	; (80016bc <HAL_RCC_ClockConfig+0x1c0>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0307 	and.w	r3, r3, #7
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	429a      	cmp	r2, r3
 8001628:	d210      	bcs.n	800164c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800162a:	4b24      	ldr	r3, [pc, #144]	; (80016bc <HAL_RCC_ClockConfig+0x1c0>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f023 0207 	bic.w	r2, r3, #7
 8001632:	4922      	ldr	r1, [pc, #136]	; (80016bc <HAL_RCC_ClockConfig+0x1c0>)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	4313      	orrs	r3, r2
 8001638:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800163a:	4b20      	ldr	r3, [pc, #128]	; (80016bc <HAL_RCC_ClockConfig+0x1c0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	429a      	cmp	r2, r3
 8001646:	d001      	beq.n	800164c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e032      	b.n	80016b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	2b00      	cmp	r3, #0
 8001656:	d008      	beq.n	800166a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001658:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <HAL_RCC_ClockConfig+0x1c4>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	4916      	ldr	r1, [pc, #88]	; (80016c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001666:	4313      	orrs	r3, r2
 8001668:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0308 	and.w	r3, r3, #8
 8001672:	2b00      	cmp	r3, #0
 8001674:	d009      	beq.n	800168a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001676:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	490e      	ldr	r1, [pc, #56]	; (80016c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001686:	4313      	orrs	r3, r2
 8001688:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800168a:	f000 f821 	bl	80016d0 <HAL_RCC_GetSysClockFreq>
 800168e:	4601      	mov	r1, r0
 8001690:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	091b      	lsrs	r3, r3, #4
 8001696:	f003 030f 	and.w	r3, r3, #15
 800169a:	4a0a      	ldr	r2, [pc, #40]	; (80016c4 <HAL_RCC_ClockConfig+0x1c8>)
 800169c:	5cd3      	ldrb	r3, [r2, r3]
 800169e:	fa21 f303 	lsr.w	r3, r1, r3
 80016a2:	4a09      	ldr	r2, [pc, #36]	; (80016c8 <HAL_RCC_ClockConfig+0x1cc>)
 80016a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <HAL_RCC_ClockConfig+0x1d0>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff f94c 	bl	8000948 <HAL_InitTick>

  return HAL_OK;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40022000 	.word	0x40022000
 80016c0:	40021000 	.word	0x40021000
 80016c4:	08002238 	.word	0x08002238
 80016c8:	20000000 	.word	0x20000000
 80016cc:	20000004 	.word	0x20000004

080016d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016d0:	b490      	push	{r4, r7}
 80016d2:	b08a      	sub	sp, #40	; 0x28
 80016d4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80016d6:	4b2a      	ldr	r3, [pc, #168]	; (8001780 <HAL_RCC_GetSysClockFreq+0xb0>)
 80016d8:	1d3c      	adds	r4, r7, #4
 80016da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80016e0:	4b28      	ldr	r3, [pc, #160]	; (8001784 <HAL_RCC_GetSysClockFreq+0xb4>)
 80016e2:	881b      	ldrh	r3, [r3, #0]
 80016e4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
 80016ea:	2300      	movs	r3, #0
 80016ec:	61bb      	str	r3, [r7, #24]
 80016ee:	2300      	movs	r3, #0
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80016f6:	2300      	movs	r3, #0
 80016f8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80016fa:	4b23      	ldr	r3, [pc, #140]	; (8001788 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	f003 030c 	and.w	r3, r3, #12
 8001706:	2b04      	cmp	r3, #4
 8001708:	d002      	beq.n	8001710 <HAL_RCC_GetSysClockFreq+0x40>
 800170a:	2b08      	cmp	r3, #8
 800170c:	d003      	beq.n	8001716 <HAL_RCC_GetSysClockFreq+0x46>
 800170e:	e02d      	b.n	800176c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001710:	4b1e      	ldr	r3, [pc, #120]	; (800178c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001712:	623b      	str	r3, [r7, #32]
      break;
 8001714:	e02d      	b.n	8001772 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	0c9b      	lsrs	r3, r3, #18
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001722:	4413      	add	r3, r2
 8001724:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001728:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d013      	beq.n	800175c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001734:	4b14      	ldr	r3, [pc, #80]	; (8001788 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	0c5b      	lsrs	r3, r3, #17
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001742:	4413      	add	r3, r2
 8001744:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001748:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	4a0f      	ldr	r2, [pc, #60]	; (800178c <HAL_RCC_GetSysClockFreq+0xbc>)
 800174e:	fb02 f203 	mul.w	r2, r2, r3
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	fbb2 f3f3 	udiv	r3, r2, r3
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
 800175a:	e004      	b.n	8001766 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	4a0c      	ldr	r2, [pc, #48]	; (8001790 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001760:	fb02 f303 	mul.w	r3, r2, r3
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	623b      	str	r3, [r7, #32]
      break;
 800176a:	e002      	b.n	8001772 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800176c:	4b07      	ldr	r3, [pc, #28]	; (800178c <HAL_RCC_GetSysClockFreq+0xbc>)
 800176e:	623b      	str	r3, [r7, #32]
      break;
 8001770:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001772:	6a3b      	ldr	r3, [r7, #32]
}
 8001774:	4618      	mov	r0, r3
 8001776:	3728      	adds	r7, #40	; 0x28
 8001778:	46bd      	mov	sp, r7
 800177a:	bc90      	pop	{r4, r7}
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	08002224 	.word	0x08002224
 8001784:	08002234 	.word	0x08002234
 8001788:	40021000 	.word	0x40021000
 800178c:	007a1200 	.word	0x007a1200
 8001790:	003d0900 	.word	0x003d0900

08001794 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001798:	4b02      	ldr	r3, [pc, #8]	; (80017a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800179a:	681b      	ldr	r3, [r3, #0]
}
 800179c:	4618      	mov	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr
 80017a4:	20000000 	.word	0x20000000

080017a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017ac:	f7ff fff2 	bl	8001794 <HAL_RCC_GetHCLKFreq>
 80017b0:	4601      	mov	r1, r0
 80017b2:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	0a1b      	lsrs	r3, r3, #8
 80017b8:	f003 0307 	and.w	r3, r3, #7
 80017bc:	4a03      	ldr	r2, [pc, #12]	; (80017cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80017be:	5cd3      	ldrb	r3, [r2, r3]
 80017c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40021000 	.word	0x40021000
 80017cc:	08002248 	.word	0x08002248

080017d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017d4:	f7ff ffde 	bl	8001794 <HAL_RCC_GetHCLKFreq>
 80017d8:	4601      	mov	r1, r0
 80017da:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	0adb      	lsrs	r3, r3, #11
 80017e0:	f003 0307 	and.w	r3, r3, #7
 80017e4:	4a03      	ldr	r2, [pc, #12]	; (80017f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017e6:	5cd3      	ldrb	r3, [r2, r3]
 80017e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40021000 	.word	0x40021000
 80017f4:	08002248 	.word	0x08002248

080017f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001800:	4b0a      	ldr	r3, [pc, #40]	; (800182c <RCC_Delay+0x34>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <RCC_Delay+0x38>)
 8001806:	fba2 2303 	umull	r2, r3, r2, r3
 800180a:	0a5b      	lsrs	r3, r3, #9
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	fb02 f303 	mul.w	r3, r2, r3
 8001812:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001814:	bf00      	nop
  }
  while (Delay --);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	1e5a      	subs	r2, r3, #1
 800181a:	60fa      	str	r2, [r7, #12]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1f9      	bne.n	8001814 <RCC_Delay+0x1c>
}
 8001820:	bf00      	nop
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	20000000 	.word	0x20000000
 8001830:	10624dd3 	.word	0x10624dd3

08001834 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e03f      	b.n	80018c6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d106      	bne.n	8001860 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7fe ff96 	bl	800078c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2224      	movs	r2, #36	; 0x24
 8001864:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68da      	ldr	r2, [r3, #12]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001876:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 fb83 	bl	8001f84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	691a      	ldr	r2, [r3, #16]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800188c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	695a      	ldr	r2, [r3, #20]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800189c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68da      	ldr	r2, [r3, #12]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80018ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2220      	movs	r2, #32
 80018b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2220      	movs	r2, #32
 80018c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b08a      	sub	sp, #40	; 0x28
 80018d2:	af02      	add	r7, sp, #8
 80018d4:	60f8      	str	r0, [r7, #12]
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	603b      	str	r3, [r7, #0]
 80018da:	4613      	mov	r3, r2
 80018dc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b20      	cmp	r3, #32
 80018ec:	d17c      	bne.n	80019e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d002      	beq.n	80018fa <HAL_UART_Transmit+0x2c>
 80018f4:	88fb      	ldrh	r3, [r7, #6]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e075      	b.n	80019ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001904:	2b01      	cmp	r3, #1
 8001906:	d101      	bne.n	800190c <HAL_UART_Transmit+0x3e>
 8001908:	2302      	movs	r3, #2
 800190a:	e06e      	b.n	80019ea <HAL_UART_Transmit+0x11c>
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2221      	movs	r2, #33	; 0x21
 800191e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001922:	f7ff f853 	bl	80009cc <HAL_GetTick>
 8001926:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	88fa      	ldrh	r2, [r7, #6]
 800192c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	88fa      	ldrh	r2, [r7, #6]
 8001932:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800193c:	d108      	bne.n	8001950 <HAL_UART_Transmit+0x82>
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d104      	bne.n	8001950 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	61bb      	str	r3, [r7, #24]
 800194e:	e003      	b.n	8001958 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001954:	2300      	movs	r3, #0
 8001956:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001960:	e02a      	b.n	80019b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	2200      	movs	r2, #0
 800196a:	2180      	movs	r1, #128	; 0x80
 800196c:	68f8      	ldr	r0, [r7, #12]
 800196e:	f000 f9a7 	bl	8001cc0 <UART_WaitOnFlagUntilTimeout>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e036      	b.n	80019ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10b      	bne.n	800199a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	881b      	ldrh	r3, [r3, #0]
 8001986:	461a      	mov	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001990:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	3302      	adds	r3, #2
 8001996:	61bb      	str	r3, [r7, #24]
 8001998:	e007      	b.n	80019aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	781a      	ldrb	r2, [r3, #0]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	3301      	adds	r3, #1
 80019a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	3b01      	subs	r3, #1
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80019bc:	b29b      	uxth	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1cf      	bne.n	8001962 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	2200      	movs	r2, #0
 80019ca:	2140      	movs	r1, #64	; 0x40
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f000 f977 	bl	8001cc0 <UART_WaitOnFlagUntilTimeout>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e006      	b.n	80019ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2220      	movs	r2, #32
 80019e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80019e4:	2300      	movs	r3, #0
 80019e6:	e000      	b.n	80019ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80019e8:	2302      	movs	r3, #2
  }
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3720      	adds	r7, #32
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b085      	sub	sp, #20
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	60f8      	str	r0, [r7, #12]
 80019fa:	60b9      	str	r1, [r7, #8]
 80019fc:	4613      	mov	r3, r2
 80019fe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	2b20      	cmp	r3, #32
 8001a0a:	d140      	bne.n	8001a8e <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d002      	beq.n	8001a18 <HAL_UART_Receive_IT+0x26>
 8001a12:	88fb      	ldrh	r3, [r7, #6]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e039      	b.n	8001a90 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d101      	bne.n	8001a2a <HAL_UART_Receive_IT+0x38>
 8001a26:	2302      	movs	r3, #2
 8001a28:	e032      	b.n	8001a90 <HAL_UART_Receive_IT+0x9e>
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	68ba      	ldr	r2, [r7, #8]
 8001a36:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	88fa      	ldrh	r2, [r7, #6]
 8001a3c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	88fa      	ldrh	r2, [r7, #6]
 8001a42:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2200      	movs	r2, #0
 8001a48:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2222      	movs	r2, #34	; 0x22
 8001a4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68da      	ldr	r2, [r3, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a68:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	695a      	ldr	r2, [r3, #20]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f042 0201 	orr.w	r2, r2, #1
 8001a78:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68da      	ldr	r2, [r3, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f042 0220 	orr.w	r2, r2, #32
 8001a88:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	e000      	b.n	8001a90 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001a8e:	2302      	movs	r3, #2
  }
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr
	...

08001a9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d10d      	bne.n	8001aee <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	f003 0320 	and.w	r3, r3, #32
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d008      	beq.n	8001aee <HAL_UART_IRQHandler+0x52>
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	f003 0320 	and.w	r3, r3, #32
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f9cc 	bl	8001e84 <UART_Receive_IT>
      return;
 8001aec:	e0d1      	b.n	8001c92 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f000 80b0 	beq.w	8001c56 <HAL_UART_IRQHandler+0x1ba>
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d105      	bne.n	8001b0c <HAL_UART_IRQHandler+0x70>
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 80a5 	beq.w	8001c56 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d00a      	beq.n	8001b2c <HAL_UART_IRQHandler+0x90>
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d005      	beq.n	8001b2c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b24:	f043 0201 	orr.w	r2, r3, #1
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f003 0304 	and.w	r3, r3, #4
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00a      	beq.n	8001b4c <HAL_UART_IRQHandler+0xb0>
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d005      	beq.n	8001b4c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b44:	f043 0202 	orr.w	r2, r3, #2
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00a      	beq.n	8001b6c <HAL_UART_IRQHandler+0xd0>
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d005      	beq.n	8001b6c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b64:	f043 0204 	orr.w	r2, r3, #4
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00f      	beq.n	8001b96 <HAL_UART_IRQHandler+0xfa>
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	f003 0320 	and.w	r3, r3, #32
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d104      	bne.n	8001b8a <HAL_UART_IRQHandler+0xee>
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d005      	beq.n	8001b96 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b8e:	f043 0208 	orr.w	r2, r3, #8
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d078      	beq.n	8001c90 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	f003 0320 	and.w	r3, r3, #32
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d007      	beq.n	8001bb8 <HAL_UART_IRQHandler+0x11c>
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	f003 0320 	and.w	r3, r3, #32
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d002      	beq.n	8001bb8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f966 	bl	8001e84 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	bf14      	ite	ne
 8001bc6:	2301      	movne	r3, #1
 8001bc8:	2300      	moveq	r3, #0
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d102      	bne.n	8001be0 <HAL_UART_IRQHandler+0x144>
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d031      	beq.n	8001c44 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f000 f8b7 	bl	8001d54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d023      	beq.n	8001c3c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	695a      	ldr	r2, [r3, #20]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c02:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d013      	beq.n	8001c34 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c10:	4a21      	ldr	r2, [pc, #132]	; (8001c98 <HAL_UART_IRQHandler+0x1fc>)
 8001c12:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe ffef 	bl	8000bfc <HAL_DMA_Abort_IT>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d016      	beq.n	8001c52 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c2e:	4610      	mov	r0, r2
 8001c30:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c32:	e00e      	b.n	8001c52 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 f83a 	bl	8001cae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c3a:	e00a      	b.n	8001c52 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f836 	bl	8001cae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c42:	e006      	b.n	8001c52 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 f832 	bl	8001cae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001c50:	e01e      	b.n	8001c90 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c52:	bf00      	nop
    return;
 8001c54:	e01c      	b.n	8001c90 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d008      	beq.n	8001c72 <HAL_UART_IRQHandler+0x1d6>
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f8a3 	bl	8001db6 <UART_Transmit_IT>
    return;
 8001c70:	e00f      	b.n	8001c92 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d00a      	beq.n	8001c92 <HAL_UART_IRQHandler+0x1f6>
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d005      	beq.n	8001c92 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f8e4 	bl	8001e54 <UART_EndTransmit_IT>
    return;
 8001c8c:	bf00      	nop
 8001c8e:	e000      	b.n	8001c92 <HAL_UART_IRQHandler+0x1f6>
    return;
 8001c90:	bf00      	nop
  }
}
 8001c92:	3720      	adds	r7, #32
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	08001d8f 	.word	0x08001d8f

08001c9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr

08001cae <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr

08001cc0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	603b      	str	r3, [r7, #0]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cd0:	e02c      	b.n	8001d2c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cd8:	d028      	beq.n	8001d2c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d007      	beq.n	8001cf0 <UART_WaitOnFlagUntilTimeout+0x30>
 8001ce0:	f7fe fe74 	bl	80009cc <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d21d      	bcs.n	8001d2c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68da      	ldr	r2, [r3, #12]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001cfe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	695a      	ldr	r2, [r3, #20]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 0201 	bic.w	r2, r2, #1
 8001d0e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2220      	movs	r2, #32
 8001d14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2220      	movs	r2, #32
 8001d1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e00f      	b.n	8001d4c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	4013      	ands	r3, r2
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	bf0c      	ite	eq
 8001d3c:	2301      	moveq	r3, #1
 8001d3e:	2300      	movne	r3, #0
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	461a      	mov	r2, r3
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d0c3      	beq.n	8001cd2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68da      	ldr	r2, [r3, #12]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001d6a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	695a      	ldr	r2, [r3, #20]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 0201 	bic.w	r2, r2, #1
 8001d7a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2220      	movs	r2, #32
 8001d80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr

08001d8e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b084      	sub	sp, #16
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	f7ff ff80 	bl	8001cae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001dae:	bf00      	nop
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b085      	sub	sp, #20
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b21      	cmp	r3, #33	; 0x21
 8001dc8:	d13e      	bne.n	8001e48 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dd2:	d114      	bne.n	8001dfe <UART_Transmit_IT+0x48>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d110      	bne.n	8001dfe <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	881b      	ldrh	r3, [r3, #0]
 8001de6:	461a      	mov	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001df0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	1c9a      	adds	r2, r3, #2
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	621a      	str	r2, [r3, #32]
 8001dfc:	e008      	b.n	8001e10 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a1b      	ldr	r3, [r3, #32]
 8001e02:	1c59      	adds	r1, r3, #1
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6211      	str	r1, [r2, #32]
 8001e08:	781a      	ldrb	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	3b01      	subs	r3, #1
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d10f      	bne.n	8001e44 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68da      	ldr	r2, [r3, #12]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e32:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68da      	ldr	r2, [r3, #12]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e42:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001e44:	2300      	movs	r3, #0
 8001e46:	e000      	b.n	8001e4a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001e48:	2302      	movs	r3, #2
  }
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr

08001e54 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68da      	ldr	r2, [r3, #12]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e6a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2220      	movs	r2, #32
 8001e70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff ff11 	bl	8001c9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b22      	cmp	r3, #34	; 0x22
 8001e96:	d170      	bne.n	8001f7a <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ea0:	d117      	bne.n	8001ed2 <UART_Receive_IT+0x4e>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d113      	bne.n	8001ed2 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb2:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eca:	1c9a      	adds	r2, r3, #2
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	629a      	str	r2, [r3, #40]	; 0x28
 8001ed0:	e026      	b.n	8001f20 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed6:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ee4:	d007      	beq.n	8001ef6 <UART_Receive_IT+0x72>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10a      	bne.n	8001f04 <UART_Receive_IT+0x80>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d106      	bne.n	8001f04 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	701a      	strb	r2, [r3, #0]
 8001f02:	e008      	b.n	8001f16 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1a:	1c5a      	adds	r2, r3, #1
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	3b01      	subs	r3, #1
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d120      	bne.n	8001f76 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f022 0220 	bic.w	r2, r2, #32
 8001f42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68da      	ldr	r2, [r3, #12]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	695a      	ldr	r2, [r3, #20]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0201 	bic.w	r2, r2, #1
 8001f62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2220      	movs	r2, #32
 8001f68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7fe fb75 	bl	800065c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8001f72:	2300      	movs	r3, #0
 8001f74:	e002      	b.n	8001f7c <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8001f76:	2300      	movs	r3, #0
 8001f78:	e000      	b.n	8001f7c <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8001f7a:	2302      	movs	r3, #2
  }
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68da      	ldr	r2, [r3, #12]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001fbe:	f023 030c 	bic.w	r3, r3, #12
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	6812      	ldr	r2, [r2, #0]
 8001fc6:	68b9      	ldr	r1, [r7, #8]
 8001fc8:	430b      	orrs	r3, r1
 8001fca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	699a      	ldr	r2, [r3, #24]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a2c      	ldr	r2, [pc, #176]	; (8002098 <UART_SetConfig+0x114>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d103      	bne.n	8001ff4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001fec:	f7ff fbf0 	bl	80017d0 <HAL_RCC_GetPCLK2Freq>
 8001ff0:	60f8      	str	r0, [r7, #12]
 8001ff2:	e002      	b.n	8001ffa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001ff4:	f7ff fbd8 	bl	80017a8 <HAL_RCC_GetPCLK1Freq>
 8001ff8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	009a      	lsls	r2, r3, #2
 8002004:	441a      	add	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002010:	4a22      	ldr	r2, [pc, #136]	; (800209c <UART_SetConfig+0x118>)
 8002012:	fba2 2303 	umull	r2, r3, r2, r3
 8002016:	095b      	lsrs	r3, r3, #5
 8002018:	0119      	lsls	r1, r3, #4
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	4613      	mov	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	009a      	lsls	r2, r3, #2
 8002024:	441a      	add	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002030:	4b1a      	ldr	r3, [pc, #104]	; (800209c <UART_SetConfig+0x118>)
 8002032:	fba3 0302 	umull	r0, r3, r3, r2
 8002036:	095b      	lsrs	r3, r3, #5
 8002038:	2064      	movs	r0, #100	; 0x64
 800203a:	fb00 f303 	mul.w	r3, r0, r3
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	011b      	lsls	r3, r3, #4
 8002042:	3332      	adds	r3, #50	; 0x32
 8002044:	4a15      	ldr	r2, [pc, #84]	; (800209c <UART_SetConfig+0x118>)
 8002046:	fba2 2303 	umull	r2, r3, r2, r3
 800204a:	095b      	lsrs	r3, r3, #5
 800204c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002050:	4419      	add	r1, r3
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	4613      	mov	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	009a      	lsls	r2, r3, #2
 800205c:	441a      	add	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	fbb2 f2f3 	udiv	r2, r2, r3
 8002068:	4b0c      	ldr	r3, [pc, #48]	; (800209c <UART_SetConfig+0x118>)
 800206a:	fba3 0302 	umull	r0, r3, r3, r2
 800206e:	095b      	lsrs	r3, r3, #5
 8002070:	2064      	movs	r0, #100	; 0x64
 8002072:	fb00 f303 	mul.w	r3, r0, r3
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	011b      	lsls	r3, r3, #4
 800207a:	3332      	adds	r3, #50	; 0x32
 800207c:	4a07      	ldr	r2, [pc, #28]	; (800209c <UART_SetConfig+0x118>)
 800207e:	fba2 2303 	umull	r2, r3, r2, r3
 8002082:	095b      	lsrs	r3, r3, #5
 8002084:	f003 020f 	and.w	r2, r3, #15
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	440a      	add	r2, r1
 800208e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002090:	bf00      	nop
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40013800 	.word	0x40013800
 800209c:	51eb851f 	.word	0x51eb851f

080020a0 <__libc_init_array>:
 80020a0:	b570      	push	{r4, r5, r6, lr}
 80020a2:	2500      	movs	r5, #0
 80020a4:	4e0c      	ldr	r6, [pc, #48]	; (80020d8 <__libc_init_array+0x38>)
 80020a6:	4c0d      	ldr	r4, [pc, #52]	; (80020dc <__libc_init_array+0x3c>)
 80020a8:	1ba4      	subs	r4, r4, r6
 80020aa:	10a4      	asrs	r4, r4, #2
 80020ac:	42a5      	cmp	r5, r4
 80020ae:	d109      	bne.n	80020c4 <__libc_init_array+0x24>
 80020b0:	f000 f82a 	bl	8002108 <_init>
 80020b4:	2500      	movs	r5, #0
 80020b6:	4e0a      	ldr	r6, [pc, #40]	; (80020e0 <__libc_init_array+0x40>)
 80020b8:	4c0a      	ldr	r4, [pc, #40]	; (80020e4 <__libc_init_array+0x44>)
 80020ba:	1ba4      	subs	r4, r4, r6
 80020bc:	10a4      	asrs	r4, r4, #2
 80020be:	42a5      	cmp	r5, r4
 80020c0:	d105      	bne.n	80020ce <__libc_init_array+0x2e>
 80020c2:	bd70      	pop	{r4, r5, r6, pc}
 80020c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020c8:	4798      	blx	r3
 80020ca:	3501      	adds	r5, #1
 80020cc:	e7ee      	b.n	80020ac <__libc_init_array+0xc>
 80020ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020d2:	4798      	blx	r3
 80020d4:	3501      	adds	r5, #1
 80020d6:	e7f2      	b.n	80020be <__libc_init_array+0x1e>
 80020d8:	08002250 	.word	0x08002250
 80020dc:	08002250 	.word	0x08002250
 80020e0:	08002250 	.word	0x08002250
 80020e4:	08002254 	.word	0x08002254

080020e8 <memset>:
 80020e8:	4603      	mov	r3, r0
 80020ea:	4402      	add	r2, r0
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d100      	bne.n	80020f2 <memset+0xa>
 80020f0:	4770      	bx	lr
 80020f2:	f803 1b01 	strb.w	r1, [r3], #1
 80020f6:	e7f9      	b.n	80020ec <memset+0x4>

080020f8 <strcpy>:
 80020f8:	4603      	mov	r3, r0
 80020fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80020fe:	f803 2b01 	strb.w	r2, [r3], #1
 8002102:	2a00      	cmp	r2, #0
 8002104:	d1f9      	bne.n	80020fa <strcpy+0x2>
 8002106:	4770      	bx	lr

08002108 <_init>:
 8002108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800210a:	bf00      	nop
 800210c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800210e:	bc08      	pop	{r3}
 8002110:	469e      	mov	lr, r3
 8002112:	4770      	bx	lr

08002114 <_fini>:
 8002114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002116:	bf00      	nop
 8002118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800211a:	bc08      	pop	{r3}
 800211c:	469e      	mov	lr, r3
 800211e:	4770      	bx	lr
